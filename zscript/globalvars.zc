// An global variables thinker [attempting to get around ACS use for certain things >.>]
class DDGlobalVariables : Thinker
{
	int MaxIPExtensions;
	int GameMode;
	int MapsFinished;
	int TrueIPTimesUsed;
	int ClassCheck;
	int PlayerLevel;
	int TruePlayerLevel;
	int PlayerLuck;
	int PlayerATK;
	int PlayerDEF;
	int PlayerSPD;
	int Experience;
	int MaxHealthTrue;
	int HealthLevelAdd;
	int HealthNoRPGAdd;
	int HealthNoRPGAdd2;
	int HealthBonusAdd;
	int MassLevelAdd;
	int MassNoRPGAdd;
	int MassNoRPGAdd2;
	int MassBonusAdd;
	int BaseStartMaxHealth;
	double ItemPoints;
	int DashCharge;
	int BaseDashChargeMax;
	int TotalMonstersKilled;
	int TotalItemsGrabbed;
	int TotalSecretsFound;
	double atkfct, deffct, spdfct, jmpfct, suvfct;
	array<bool> AllKills, AllItems, AllSecrets, AllCompletion;
	array<int> NumKills, NumItems, NumSecrets;
	array<int> MaxKills, MaxItems, MaxSecrets;
	array<int> MapNum;
	array<int> AllKillsTimer, AllItemsTimer, AllSecretsTimer, AllCompletionTimer;
	array<bool> AllKillsSound, AllItemsSound, AllSecretsSound, AllCompletionSound;
	bool KilledKragClone;
	bool KilledLauritzClone;
	bool KilledQuislingClone;
	bool KilledJorgensenClone;
	bool KilledVokterClone;
	bool KilledTempestClone;
	bool KilledDelilaClone;
	bool PlayingCCards;

	DDGlobalVariables Init()
	{
		ChangeStatNum(STAT_STATIC); // Change this to STAT_STATIC if persisting between maps is desired.
		return self;
	}

	static DDGlobalVariables Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("DDGlobalVariables",STAT_STATIC); // Change this to STAT_STATIC if persisting between maps is desired.
		let p = DDGlobalVariables(it.Next());
		if (p == null)
		{
			p = new("DDGlobalVariables").Init();
		}
		return p;
	}
}

class SectorChecker : Actor
{
	int timer;
	int place;
	override void Tick()
	{
		super.Tick();
		timer++;
		if (timer >= 2) 
		{
			//Console.Printf("SectorChecker %d destroyed", place);
			Destroy();
		}
	}
}