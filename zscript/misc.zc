class PlayerStatItem : Inventory
{
	mixin HUDRecovery;
	mixin IPCostCheck;
	
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	actor weapon;
	
	int cutsceneskipusehold;
	bool isDDTrilogy;
	int DDChapter;
	int CoSHealPoolInt;
	int UsedEggHeal;
	int AngerLevelEventNTimer;
	int prevarmordifficulty;
	int ArmorItemGive0, ArmorItemGive1, ArmorItemGive2, ArmorItemGive3, ArmorItemGive4;
	int ArmorItemMax0, ArmorItemMax1, ArmorItemMax2, ArmorItemMax3, ArmorItemMax4;
	int playeractiontimer;
	int playeractiontimerfrag;
	int randmusroll;
	int DynMusSetUsed;
	int DynMusCalmTimer;
	int DynMusFightTimer;
	bool DynMusActCall;
	int DynMusChangeChance;
	int snglen;
	
	int FCandleAntipodeShot;
	int FCandleShotType;
	int GoldApples;
	int PlatinumApples;
	int PrismaticApples;
	int MaxIPExtensions;
	int BaseFlatDefValue, BaseFlatDefValueCrush, BaseFlatDefValueDmgFlr, BaseFlatDefValueHUD;
	int ArmorDefValue, ArmorDefValueCrush, ArmorDefValueDmgFlr, ArmorDefValueHUD;
	int CompatPackMode;
	int PlayerWaterLevel;
	int EWShieldKills;
	int HellWarriorMaxCharge;
	int HellWarriorShieldLevel;
	int oldhealthratio;
	bool IPUseMode;
	int KnightGownTier;
	bool grimophonealt;
	bool cankick;
	int VacCost;
	int CritChance;
	int CritRoll;
	int IPPikePokeTimer;
	int IPPikePokeTimes;
	int IPCallOutCooldown;
	int OneLinerCooldown;
	int CanTalkUnderwater;
	int numpikeglows;
	int MedStrength;
	int IsMorphed, WasMorphed;
	int MorphTimer;
	int EvasionRate;
	double SPDEvadeCheck;
	int drowndebufflevel, drowndebufftimer;
	bool drowndebuginit;
	int drowndebuffmaxtimer, drownmaxtimermod;
	
	int MaxDashIncTimer, MaxDashIncAmt;
	int MaxHPIncTimer, MaxHPIncAmt;
	int HPDmgHUDTimer, APDmgHUDTimer, HPRecHUDTimer, APRecHUDTimer;
	int HPDmgHUDAmt, APDmgHUDAmt, HPRecHUDAmt, APRecHUDAmt;
	double IPGainHUDAmt, IPLossHUDAmt;
	int IPGainHUDTimer, IPLossHUDTimer;
	int EXPGainHUDTimer, EXPGainHUDAmt;
	int KillComboCount;
	
	int canuseflowercrown;
	
	int HPHUDShakeTime, APHUDShakeTime;
	int HPHUDPulseTime, APHUDPulseTime, IPHUDPulseTime;
	
	int HPHUDShakeType, APHUDShakeType;
	int HPHUDPulseType, APHUDPulseType;
	int HPHUDPulseTimeP, APHUDPulseTimeP;
	
	int IPHUDPulseType, IPHUDPulseTimer, IPHUDPulseTimeP;
	int IPHUDShakeType, IPHUDShakeTimer;
	
	int TrueIPLevelGate;
	int IPMortalBlowReduceTimer;
	int IPNoGainTimer;
	int TrueIPCooldownTimer;
	int WineDefTier;
	int ArmorFlatDefValue;
	int DoorBellNormalUses;
	int IPArmorTimesUsed;
	int itemtimer;
	int IPDissipateTimer;
	int afasdroptimer;
	int NumOfAfasDrops;
	int NumOfLegendMeds, MedCurrLvl, LegMedCap;
	int GrabbedCrazyBalls;
	
	bool MercyInvulnOn;
	int MercyInvulnTimer;
	int MercyInvulnMod;
	
	bool TimeFreezeIPBuff;

	int LevelCap;
	int StaminaLevel;
	int AccuracyLevel;
	int Experience;
	Array<int> LevelExpRequirement;
	
	int totalkillsgame;
	int totalmaxkills;
	int totalitemsgame;
	int totalmaxitems;
	int totalsecretsgame;
	int totalmaxsecrets;
	int totalcompleted;
	int totalallkills;
	int totalallitems;
	int totalallsecrets;

	int landdmgbonus;
	int whistlecooldown;
	int RenderStyleType;
	int tempalpha;
	int SuperVacAmmo, SuperVacAmmoMax;
	int SuperVacBaseMax;
	double SuperVacBaseMaxFactor;
	double SuperVacAmmoFactor;

	int InitEXPTables;
	int PrevTimeFreezeTimer;
	int TimeFreeze;
	int TimeFreezeTimer;
	int CharacterClass;

	int HPRegenBoostTimer;
	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPDegenTimer;
	int HPRegenTimerMax;
	int HPDegenTimerMax;
	bool berserked;
	
	int DashTimer;

	int PrevHealthRatio;
	int HealthRatio;
	int CurrentHealth;
	int BaseStartMaxHealth;
	double ItemPoints;
	double ItemPointsSession;
	int MaxHealthTrue;
	int MaxHealthTrueRF;
	int HealthLevelAdd;
	int HealthNoRPGAdd;
	double HealthNoRPGAdd2;
	int HealthBonusAdd;
	int MaxHealthLimit;
	double MaxItemPoints;
	double BaseMaxItemPoints;

	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int ArmorResistance;
	int ClassicDoomType;
	int ModType;
	int TotalMass, BaseMass;
	int MassLevelAdd;
	int MassNoRPGAdd;
	double MassNoRPGAdd2;
	int MassBonusAdd;

	int PlayerLevel, TruePlayerLevel;
	int PlayerATK, TruePlayerATK;
	int PlayerDEF, TruePlayerDEF;
	int PlayerSPD, TruePlayerSPD;
	int PlayerLUCK, TruePlayerLUCK;
	int PrevATK, PrevDEF, PrevSPD, PrevLUCK;
	int HPMaxGain, MassGain;
	
	int SurvivalRate;
	
	int SuperVacBagSize;
	
	int ClassCheck;
	
	int buttons;
	int FreezePlayer;
	int Player1TID;
	
	int StrifeStamLvl;
	int StrifeAccuLvl;
	
	int CricketBatBuffTimer, CricketBatBuffTimer2;
	int CricketBatSwingBuffTimer;
	
	int GrimophoneDebuffTimer;
	
	int actualjumpheight;
	double actualjumpheight2;
	int TrueJumpHeight;
	
	double BaseRegenMulti;
	
	double atkfct, deffct, spdfct, jmpfct, suvfct;
	
	int DD_HandMother1, DD_HandMother2, DD_MossMother, DD_GameMother, DD_RoseMother, DD_SphinxMother, DD_GlobeMother, DD_TrueHandMother;
	int AFD_Krag, AFD_Lauritz, AFD_Quisling, AFD_Jorgensen1, AFD_Jorgensen2, AFD_JorgCannon;
	int CoS_Fafnir, CoS_FractalHens, CoS_ForsakenJorg, CoS_EvilDinah, CoS_Tempest;
	double TotalNRPGLvlPts;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}

	override void DoEffect()
	{
		let playeractor = DDPlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a non-Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect(); 
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			IsMorphed = 0;
			if (playeractor.GetClassName() == "RatPlayer") IsMorphed = 1;
			if (dydudebug_morphdisplays) Console.Printf("%s, IsMorphed: %d, WasMorphed: %d, MorphTimer: %d", playeractor.GetClassName(), IsMorphed, WasMorphed, MorphTimer);
			
			CompatPackMode = 0;
			if (playeractor.CountInv("PlayingGoingDown")) CompatPackMode += 1;
			if (playeractor.CountInv("PlayingAugerZenith")) CompatPackMode += 2;
			if (playeractor.CountInv("PlayingTCOTDA")) CompatPackMode += 4;
			if (playeractor.CountInv("PlayingCircus2")) CompatPackMode += 8;
			if (playeractor.CountInv("PlayingKDIZD")) CompatPackMode += 16;
			if (playeractor.CountInv("PlayingPSXDoom")) CompatPackMode += 32;
			if (playeractor.CountInv("PlayingDoom64")) CompatPackMode += 64;
			if (playeractor.CountInv("PlayingRAMP")) CompatPackMode += 128;
			// Load in Globalvars [Start]
			let globalvars = DDGlobalVariables.Get();
			if (globalvars)
			{
				// Initalization Stuff
				InitStuff();

				//
				if (A_CheckDDGame())
				{
					if (ddafd_disablehandtohand == 1)
					{
						cankick = false;
						if (owner.CountInv("HandToHand")) owner.A_SetInventory("HandToHand",0); // Prevents your "fists/hand-to-hand" from being removed by inventory removing events.
					}
					else
					if (ddafd_disablehandtohand == -1)
					{
						if (!owner.CountInv("HandToHand")) owner.A_SetInventory("HandToHand",1); // Prevents your "fists/hand-to-hand" from being removed by inventory removing events.
						cankick = true;
					}
				}
				else
				{
					if (!owner.CountInv("HandToHand")) owner.A_SetInventory("HandToHand",1); // Prevents your "fists/hand-to-hand" from being removed by inventory removing events.
					cankick = true;
				}
				if (owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD")) berserked = true;
				else berserked = false;
				
				if (whistlecooldown) whistlecooldown--;
				
				// Mode Check
				ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
				if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom
				if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
				if (dydudebug_miscitemdebug) Console.Printf("%d", ClassicDoomType);
				buttons = owner.GetPlayerInput(INPUT_BUTTONS);
				TrueGameSkill = skill;
				
				// Non-RPG Mode [DD Trilogy Only] Level "Points" based on defeating bosses.
				TotalNRPGLvlPts = 0;
				if (A_CheckDDGame())
				{
					if (DD_HandMother1) TotalNRPGLvlPts += 5;
					if (DD_RoseMother) TotalNRPGLvlPts += 5;
					if (DD_GameMother) TotalNRPGLvlPts += 5;
					if (DD_MossMother) TotalNRPGLvlPts += 5;
					if (DD_GlobeMother) TotalNRPGLvlPts += 5;
					if (DD_SphinxMother) TotalNRPGLvlPts += 5;
					if (DD_HandMother2) TotalNRPGLvlPts += 5;
					if (DD_TrueHandMother) TotalNRPGLvlPts += 5;
					if (AFD_Krag) TotalNRPGLvlPts += 6.66667;
					if (AFD_Quisling) TotalNRPGLvlPts += 6.66667;
					if (AFD_Lauritz) TotalNRPGLvlPts += 6.66667;
					if (AFD_Jorgensen1) TotalNRPGLvlPts += 6.66667;
					if (AFD_Jorgensen2) TotalNRPGLvlPts += 6.66667;
					if (AFD_JorgCannon) TotalNRPGLvlPts += 6.66667;
					if (CoS_Fafnir) TotalNRPGLvlPts += 8;
					if (CoS_FractalHens) TotalNRPGLvlPts += 8;
					if (CoS_ForsakenJorg) TotalNRPGLvlPts += 8;
					if (CoS_EvilDinah) TotalNRPGLvlPts += 8;
					if (CoS_Tempest) TotalNRPGLvlPts += 8;
					if (skill <= 0) TotalNRPGLvlPts *= (1.25 + (NumOfAfasDrops * 0.125));
					if (skill == 1) TotalNRPGLvlPts *= (1.125 + (NumOfAfasDrops * 0.1125));
					if (skill == 2) TotalNRPGLvlPts *= (1.0 + (NumOfAfasDrops * 0.1));
					if (skill == 3) TotalNRPGLvlPts *= (0.875 + (NumOfAfasDrops * 0.0875));
					if (skill >= 4) TotalNRPGLvlPts *= (0.75 + (NumOfAfasDrops * 0.075));
					if (dydudebug_miscitemdebug && TotalNRPGLvlPts > 0) Console.Printf("TotalNRPGLvlPts: %.8f", TotalNRPGLvlPts);
				}
				
				if (itemtimer <= 2)
				{
					if (dydudebug_miscitemdebug) Console.Printf("itemtimer: %d, IsDynDuchess?: %d, IsAppetite?: %d, IsCanOfSouls?: %d, IsWeddingCake?: %d", itemtimer, owner.CountInv("IsDynDuchess"), owner.CountInv("IsAppetite"), owner.CountInv("IsCarnOfSouls"), owner.CountInv("IsWeddingCake"));
					if (itemtimer >= 1)
					{
						if (A_CheckDDGame())
						{
							if (owner.CountInv("IsDynDuchess"))
							{
								owner.A_SetInventory("ArcadeChip",1);
								owner.A_SetInventory("ArcadeChip",0);
							}
							else
							if (owner.CountInv("IsAppetite"))
							{
								owner.A_SetInventory("BirdPotion",1);
								owner.A_SetInventory("BirdPotion",0);
							}
							else
							if (owner.CountInv("IsCarnOfSouls"))
							{
								owner.A_SetInventory("Money_Ducat",1);
								owner.A_SetInventory("Money_Ducat",0);
							}
							else
							if (owner.CountInv("IsWeddingCake"))
							{
							}
							owner.A_SetInventory("PalaceKey",1);
							owner.A_SetInventory("PalaceKey",0);
						}
						else
						{
							owner.A_SetInventory("DoorBell",1);
							owner.A_SetInventory("DoorBell",0);
							DoorBellNormalUses = 0;
						}
						owner.A_SetInventory("KilletanteEffigy",1);
						owner.A_SetInventory("KilletanteEffigy",0);
						owner.A_SetInventory("DivingHelm",1);
						owner.A_SetInventory("DivingHelm",0);
						owner.A_SetInventory("TimePotion",1);
						owner.A_SetInventory("TimePotion",0);
						owner.A_SetInventory("FuryPotion",1);
						owner.A_SetInventory("FuryPotion",0);
						owner.A_SetInventory("SnakePickup",1);
						owner.A_SetInventory("SnakePickup",0);
						owner.A_SetInventory("PopperPickup",1);
						owner.A_SetInventory("PopperPickup",0);
						owner.A_SetInventory("BRocketPickup",1);
						owner.A_SetInventory("BRocketPickup",0);
						owner.A_SetInventory("SpinnerPickup",1);
						owner.A_SetInventory("SpinnerPickup",0);
						owner.A_SetInventory("CherryBombPickup",1);
						owner.A_SetInventory("CherryBombPickup",0);
						owner.A_SetInventory("TurkeyDinner",1);
						owner.A_SetInventory("TurkeyDinner",0);
						owner.A_SetInventory("AppleWine",1);
						owner.A_SetInventory("AppleWine",0);
					}
					if (itemtimer <= 0) if (owner.CountInv("PlayingHexen")) owner.A_GiveInventory("MegaSatchel",1); // Gives the player their TRUE max ammo limits in Hexen mode and a bit of extra ammo via a Backpack. :P

					owner.A_SetInventory("PlayerLevel",PlayerLevel);
					LegMedCap = 50;
					LevelCap = 200;
					LevelExpRequirement.Resize((LevelCap+1));

					// EXP Tables
					if (InitEXPTables == 0)
					{
						double ExpValue;
						int BaseEXPRequirement = 250; // clamp(exex_baseexprequirement, 250, 11200);
						BaseEXPRequirement *= (0.875 + (TrueGameSkill * 0.0625));

						double BaseExtra = 1; // clamp(exex_baseexpextra, 0, 100);
						double BaseAccel1 = 6; // clamp(exex_baseexpaccel1, 0, 100);
						double BaseAccel2 = 0.0384; // clamp(exex_baseexpaccel2, 0.0, 5.0);
						double BaseMulti1 = 48; // clamp(exex_expmulti1, 1, 1024);
						double BaseMulti2 = 50; // clamp(exex_expmulti2, 1, 10000);
						
						double BaseMulti3 = 1.0;
						int baseval;
						int addval;
						double mulval;
						int preval = 0;
						
						double BaseMulti3b = 2.0;
						double BaseMulti4 = 1.0;
						double BaseMulti5 = 0.01;

						// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
						for (int CuLv = 0; CuLv < (LevelCap+1); CuLv++)
						{
							if (CuLv >= 0 && CuLv <= 31) BaseMulti4 = 1.0;
							if (CuLv >= 32 && CuLv <= 56) BaseMulti4 = 1.334;
							if (CuLv >= 57 && CuLv <= 80) BaseMulti4 = 1.667;
							if (CuLv >= 81 && CuLv <= 100) BaseMulti4 = 2;
							if (CuLv >= 101 && CuLv <= 109) BaseMulti4 = 4;
							if (CuLv >= 110 && CuLv <= 118) BaseMulti4 = 6;
							if (CuLv >= 119 && CuLv <= 127) BaseMulti4 = 8;
							if (CuLv >= 128 && CuLv <= 136) BaseMulti4 = 10;
							if (CuLv >= 137 && CuLv <= 145) BaseMulti4 = 12;
							if (CuLv >= 146 && CuLv <= 154) BaseMulti4 = 14;
							if (CuLv >= 155 && CuLv <= 163) BaseMulti4 = 16;
							if (CuLv >= 164 && CuLv <= 172) BaseMulti4 = 18;
							if (CuLv >= 173 && CuLv <= 181) BaseMulti4 = 20;
							if (CuLv >= 182 && CuLv <= 190) BaseMulti4 = 22;
							if (CuLv >= 191 && CuLv <= 199) BaseMulti4 = 24;
							if (CuLv >= 200) BaseMulti4 = 30.0;
							
							BaseMulti3 = (BaseMulti4 + (CuLv * ((BaseMulti4 * BaseMulti5) * BaseMulti3b)));
							
							baseval = BaseEXPRequirement * (((CuLv * BaseExtra) + 1));
							baseval *= (1.00 + ((CuLv + 1) * 0.000625));
							
							mulval = (((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2);
							addval = (((BaseEXPRequirement * (CuLv * BaseAccel2)) * BaseMulti3) * ((BaseMulti4) * 1.5));
							ExpValue = baseval;
							if (dydudebug_exptables) Console.Printf("ExpValue: %d (%d)", ExpValue, baseval);
							ExpValue *= mulval;
							if (dydudebug_exptables) Console.Printf("(*) ExpValue: %d (%.8f)", ExpValue, mulval);
							ExpValue += addval;
							if (dydudebug_exptables) Console.Printf("(+) ExpValue: %d (%d)", ExpValue, addval);
							
							if (CuLv > 0) 
							{
								preval = LevelExpRequirement[(CuLv-1)];
							}
							LevelExpRequirement[CuLv] = ExpValue;
							if (dydudebug_exptables) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d \cz(prev: \cy%d)\cz, Multi: %.8f, baseval: %d, mulval: %.8f, addval: %d, diff: %d\c-", CuLv, ExpValue, preval, BaseMulti3, baseval, mulval, addval, (ExpValue-preval));
						}
						if (dydudebug_exptables) Console.Printf("BaseEXPRequirement: %4f, BaseExtra: %4f / 100, BaseAccel1: %4f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2);

						InitEXPTables++;
					}
				}
				if (ClassCheck <= 6)
				{
					if (ClassCheck <= 0) 
					{
						PlayerLevel = 0;

						atkfct = deffct = spdfct = jmpfct = suvfct = 1.00;
						double variance = 0.10;
						if (TrueGameSkill == SKILL_VERY_EASY) 
						{
							MaxHealthTrue = 96;
							MaxHealthTrue *= (1.00 + (frandom(-0.0125,0.0125)));
							owner.A_SetInventory("Blunderaxe",1);
							owner.A_SetInventory("BlunderAmmo",6);
							owner.A_SetInventory("AppleJack",1);
							owner.A_SetInventory("JackAmmo",12);
							variance = 0.05;
							PlayerLuck = random(4,8);
						}
						if (TrueGameSkill == SKILL_EASY) 
						{
							MaxHealthTrue = 88; 
							MaxHealthTrue *= (1.00 + (frandom(-0.025,0.025)));
							owner.A_SetInventory("AppleJack",1);
							owner.A_SetInventory("JackAmmo",6);
							variance = 0.075;
							PlayerLuck = random(3,6);
						}
						if (TrueGameSkill == SKILL_NORMAL) 
						{
							MaxHealthTrue = 80; 
							MaxHealthTrue *= (1.00 + (frandom(-0.05,0.05)));
							variance = 0.10;
							PlayerLuck = random(2,5);
						}
						if (TrueGameSkill == SKILL_HARD) 
						{
							MaxHealthTrue = 72; 
							MaxHealthTrue *= (1.00 + (frandom(-0.1,0.1)));
							variance = 0.125;
							PlayerLuck = random(1,3);
						}
						if (TrueGameSkill == SKILL_VERY_HARD) 
						{
							MaxHealthTrue = 64; 
							MaxHealthTrue *= (1.00 + (frandom(-0.2,0.2)));
							variance = 0.15;
							PlayerLuck = random(0,2);
						}
						PlayerLuck += random(2,3);
						atkfct += frandom(-variance,variance);
						deffct += frandom(-variance,variance);
						spdfct += frandom(-variance,variance);
						jmpfct += frandom(-variance,variance);
						suvfct += frandom(-variance,variance);
						if (dydudebug_startupinfo) Console.Printf("atkfct: %.8f, deffct: %.8f, spdfct: %.8f, jmpfct: %.8f, suvfct: %.8f, Luck: %d", atkfct, deffct, spdfct, jmpfct, suvfct, PlayerLuck);
						
						
						if (MaxHealthTrue < 1) MaxHealthTrue = 1;
						HealthLevelAdd = 0;
						HealthNoRPGAdd = 0;
						HealthNoRPGAdd2 = 0;
						owner.player.health = owner.player.mo.health = CurrentHealth = MaxHealthTrue;
						owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
						owner.A_SetInventory("PlayerATK",PlayerATK);
						owner.A_SetInventory("PlayerDEF",PlayerDEF);
						owner.A_SetInventory("PlayerSPD",PlayerSPD);
						owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
						BaseStartMaxHealth = MaxHealthTrue; // Sets the original Max Health as at the start of a game [for various checks, including Sigil damage]
						if (dydudebug_startupinfo) Console.Printf("MaxHP: %d", MaxHealthTrue);
					}
				}
				if (exex_expenabled) 
				{
					TruePlayerLevel = PlayerLevel;
					TruePlayerATK = PlayerATK;
					TruePlayerDEF = PlayerDEF;
					TruePlayerSPD = PlayerSPD;
				}
				else
				{
					TruePlayerLevel = 0;
					TruePlayerATK = 0;
					TruePlayerDEF = 0;
					TruePlayerSPD = 0;
				}
				int ActualLevel = A_CheckActualLevel(1);
				
				grimophonealt = true;
				if (ddafd_disablegrimophonealt && A_CheckDDGame())
				{
					grimophonealt = false;
				}
				
				PlayerWaterLevel = owner.waterlevel;
				
				SuperVacBaseMax = 16;
				SuperVacBaseMaxFactor = double(1.00 / SuperVacBaseMax);
				if (ddafd_originalinvlimits)
				{
					if (A_CheckDDGame())
					{
						SuperVacBaseMax = 12;
						SuperVacBaseMaxFactor = double(1.00 / SuperVacBaseMax);
					}
				}
				let vacammotype = owner.FindInventory("VacAmmo");
				if (vacammotype)
				{
					SuperVacAmmo = vacammotype.Amount;
					SuperVacAmmoMax = vacammotype.MaxAmount;
				}
				if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
				if (dydudebug_supervacother) Console.Printf("SuperVacBaseMaxFactor: %.8f, SuperVacBaseMax: %d", SuperVacBaseMaxFactor, SuperVacBaseMax);
				
				// Check if player can breath/talk underwater
				CanTalkUnderwater = 0;
				if (owner.waterlevel < 3) 
				{
					CanTalkUnderwater = 1;
				}
				else
				{
					if (owner.CountInv("PowerNoDrown") || 
							owner.CountInv("PowerIronFeet") || 
							owner.CountInv("PowerIronFeet2") || 
							owner.CountInv("PowerMask"))
					{
						CanTalkUnderwater = 2;
					}
					else
					{
						if (random(1,32) <= random(1,4)) CanTalkUnderwater = 1;
					}
				}
				if (dydudebug_airmeter) Console.Printf("CanTalkUnderwater %d", CanTalkUnderwater);
				
				if ((A_CheckDDGame()))
				{
					PlayerPawn DDPlayPawn;
					DDPlayPawn = PlayerPawn(owner);
					owner.ChangeTID(1001);
					isDDTrilogy = true;
					if (buttons & BT_USE)
					{
						if (owner.CountInv("IsDynDuchess")) DDChapter == 1;
						if (owner.CountInv("IsAppetite")) DDChapter == 2;
						if (owner.CountInv("IsCarnOfSouls")) DDChapter == 3;
						if (level.levelnum == 1)
						{
							cutsceneskipusehold++;
							if (cutsceneskipusehold >= 35)
							{
								owner.ChangeTID(1001);
								owner.ACS_NamedExecute("SkipIntro",1,0,0,0);
								cutsceneskipusehold = 0;
							}
						}
						if (level.levelnum == 41)
						{
							cutsceneskipusehold++;
							if (cutsceneskipusehold >= 35)
							{
								owner.ChangeTID(1001);
								owner.ACS_NamedExecute("SkipIntro",41,0,0,0);
								cutsceneskipusehold = 0;
							}
						}
						if (level.levelnum == 42)
						{
							cutsceneskipusehold++;
							if (cutsceneskipusehold >= 35)
							{
								if (owner.CountInv("CoSMemory1Seq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMemory",42,1,0,0);
									owner.A_SetInventory("CoSMemory1Seq",0);
									cutsceneskipusehold = 0;
								}
								else
								if (owner.CountInv("CoSMemory2Seq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMemory",42,2,0,0);
									owner.A_SetInventory("CoSMemory2Seq",0);
									cutsceneskipusehold = 0;
								}
								else
								if (owner.CountInv("CoSMemory3Seq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMemory",42,3,0,0);
									owner.A_SetInventory("CoSMemory3Seq",0);
									cutsceneskipusehold = 0;
								}
								else
								if (owner.CountInv("CoSMemory4Seq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMemory",42,4,0,0);
									owner.A_SetInventory("CoSMemory4Seq",0);
									cutsceneskipusehold = 0;
								}
								else
								if (owner.CountInv("CoSMemory5Seq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMemory",42,5,0,0);
									owner.A_SetInventory("CoSMemory5Seq",0);
									cutsceneskipusehold = 0;
								}
							}
						}
						if (level.levelnum == 47)
						{
							cutsceneskipusehold++;
							if (cutsceneskipusehold >= 35)
							{
								if (owner.CountInv("CoSCellSeq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipMomScene",47,0,0,0);
									owner.A_SetInventory("CoSCellSeq",0);
									cutsceneskipusehold = 0;
								}
							}
						}
						if (level.levelnum == 48)
						{
							cutsceneskipusehold++;
							if (cutsceneskipusehold >= 35)
							{
								if (owner.CountInv("CoSDelilaSeq"))
								{
									owner.ChangeTID(1001);
									owner.ACS_NamedExecute("SkipStartScene",48,0,0,0);
									owner.A_SetInventory("CoSDelilaSeq",0);
									cutsceneskipusehold = 0;
								}
							}
						}
					}
					else
					{
						cutsceneskipusehold = 0;
					}
					//if (cutsceneskipusehold) Console.Printf("cutsceneskipusehold: %d / 35, level.levelnum: %d", cutsceneskipusehold, level.levelnum);
				}
				//Console.Printf("isDDTrilogy: %d", isDDTrilogy);

				// Ikari/Item Points
				MaxItemPoints = 100;
				if (exex_expenabled)
				{
					if (TrueGameSkill == SKILL_VERY_EASY) MaxItemPoints += (ActualLevel * 1.5);
					if (TrueGameSkill == SKILL_EASY) MaxItemPoints += (ActualLevel * 1.25);
					if (TrueGameSkill == SKILL_NORMAL) MaxItemPoints += (ActualLevel * 1.0);
					if (TrueGameSkill == SKILL_HARD) MaxItemPoints += (ActualLevel * 0.75);
					if (TrueGameSkill == SKILL_VERY_HARD) MaxItemPoints += (ActualLevel * 0.5);
				}
				if (!exex_expenabled)
				{
					if ((A_CheckDDGame()))
					{
						double DDTFactor = 0.00;
						if (DD_RoseMother) DDTFactor += 0.057144;
						if (DD_GameMother) DDTFactor += 0.057144;
						if (DD_MossMother) DDTFactor += 0.057144;
						if (DD_GlobeMother) DDTFactor += 0.057144;
						if (DD_SphinxMother) DDTFactor += 0.057144;
						if (DD_HandMother1) DDTFactor += 0.057144;
						if (DD_HandMother2) DDTFactor += 0.057144;
						if (DD_TrueHandMother) DDTFactor += 0.057144;
						if (AFD_Krag) DDTFactor += 0.08;
						if (AFD_Quisling) DDTFactor += 0.08;
						if (AFD_Lauritz) DDTFactor += 0.08;
						if (AFD_Jorgensen1) DDTFactor += 0.08;
						if (AFD_Jorgensen2) DDTFactor += 0.08;
						if (AFD_JorgCannon) DDTFactor += 0.08;
						if (CoS_Fafnir) DDTFactor += 0.1;
						if (CoS_FractalHens) DDTFactor += 0.1;
						if (CoS_ForsakenJorg) DDTFactor += 0.1;
						if (CoS_EvilDinah) DDTFactor += 0.1;
						if (CoS_Tempest) DDTFactor += 0.1;
						DDTFactor *= 0.50;
						DDTFactor += 1.00;
						MaxItemPoints *= DDTFactor;
					}
				}
				BaseMaxItemPoints = MaxItemPoints;
				if (MaxIPExtensions) 
				{
					if (MaxIPExtensions > 150) MaxIPExtensions = 150;
					MaxItemPoints += ((MaxItemPoints * 0.01) * MaxIPExtensions);
				}
				if (MaxItemPoints > (BaseMaxItemPoints * 2.5)) MaxItemPoints = (BaseMaxItemPoints * 2.5);
				if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
				
				if (owner.CountInv("PoisonCount"))
				{
					owner.player.poisoncount += owner.CountInv("PoisonCount");
					owner.A_SetInventory("PoisonCount",0);
				}
				if (owner.CountInv("DamageCount"))
				{
					owner.player.DamageCount += owner.CountInv("DamageCount");
					if (owner.player.DamageCount > 100) owner.player.DamageCount = 100;
					owner.A_SetInventory("DamageCount",0);
				}
				if (owner.CountInv("BonusCount"))
				{
					owner.player.BonusCount += owner.CountInv("BonusCount");
					if (owner.player.BonusCount > 100) owner.player.BonusCount = 100;
					owner.A_SetInventory("BonusCount",0);
				}
				//
				// Leveling Up
				//
				Experience = owner.CountInv("ExpPts");
				owner.A_SetInventory("ExpPtsLeft",(LevelExpRequirement[(PlayerLevel)]-Experience));
				owner.A_SetInventory("ExpPtsNeeded",LevelExpRequirement[(PlayerLevel)]);
				PlayerLevel = owner.CountInv("PlayerLevel");
				PlayerATK = owner.CountInv("PlayerATK");
				PlayerDEF = owner.CountInv("PlayerDEF");
				PlayerSPD = owner.CountInv("PlayerSPD");
				PlayerLuck = owner.CountInv("PlayerLuck");

				int levelmodulo, levelbonustype;
				int leveluptimes = 0;
				int leveluptimesmax = LevelCap - PlayerLevel;
				int StatIncrease;
				PrevATK = PlayerATK;
				PrevDEF = PlayerDEF;
				PrevSPD = PlayerSPD;
				int PrevTrueIPLevelGate = TrueIPLevelGate;
				for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
				{
					if (dydudebug_levelup) Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
					if (Experience >= LevelExpRequirement[PlayerLevel])
					{
						PrevTrueIPLevelGate = TrueIPLevelGate;
						if (PlayerLevel < LevelCap)
						{
							PlayerLevel += 1;
							TrueIPLevelGate--;
							
							LevelUpProcess(0);
							
							owner.A_SetInventory("PlayerLevel",PlayerLevel);
							owner.A_SetInventory("PlayerATK",PlayerATK);
							owner.A_SetInventory("PlayerDEF",PlayerDEF);
							owner.A_SetInventory("PlayerSPD",PlayerSPD);
							owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
							if (!owner.CountInv("SilentLevelUp"))
							{
								string LevelUpMsg = "";
								LevelUpMsg.AppendFormat("\c[Green]Congradulations, you've reached Level %d \c[brick][+%d HP]", PlayerLevel, HPMaxGain);
								if (exex_extraatkdefspd)
								{
									if ((PlayerATK > PrevATK) || (PlayerDEF > PrevDEF) || (PlayerSPD > PrevSPD)) LevelUpMsg.AppendFormat("\n\n");
									if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased Even More than Normal!");
									if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased Even More than Normal!");
									if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased Even More than Normal!");
								}
								if (PrevTrueIPLevelGate != TrueIPLevelGate && PrevTrueIPLevelGate > 0)
								{
									LevelUpMsg.AppendFormat("\n\n");
												if (TrueIPLevelGate > 0) LevelUpMsg.AppendFormat("\n\c[brick]Level up %d more times to use Flower Crown IP\n\c[brick] once again!", TrueIPLevelGate);
									else if (TrueIPLevelGate <= 0) LevelUpMsg.AppendFormat("\n\c[gold]You can now use the Flower Crown's IP again!\n\c[gold](arm Hand To Hand and go into blocking stance\n\c[gold]and press <ZOOM> while IP mode is on!)");
								}
								if (PlayerLevel == exex_scramblernoarmorbonuslvlreq)
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Scrambler can now deal 5x damage when you have no armor!");
								}
								if (PlayerLevel == exex_scramblerelnomolvlreq)
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Scrambler can cook a fractal egg to heal you slightly by\nholding <STRAFE LEFT> and <STRAFE RIGHT> and pressing <FIRE> or <ALT-FIRE>!");
								}
								if (PlayerLevel == exex_jackcrisislvlrequirement) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The AppleJack can now deal varying bonus damage when \nyour health falls below certain thresholds!");
								}
								if (PlayerLevel == exex_pikeinvisolvlreq) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Wizard's Pike can now briefly make you invisible at\n the cost of 3 Devil's Food by holding\n down <STRAFE LEFT> and <STRAFE RIGHT>\n and pressing <FIRE> or <ALT-FIRE>!");
								}
								if (PlayerLevel == (exex_pikeinvisolvlreq * 6.25)) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Wizard's Pike invisibility special now only costs 2\n Devil's Food to use!");
								}
								if (PlayerLevel == exex_axecombolvlrequirement) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The BlunderAxe can now be swung faster consectutively\nin melee if you hold down the corresponding button.\nHolding down <ALT-FIRE> right after a chop will allow\nyou to fire an immediate ranged shot if you have ammo!");
								}
								if (PlayerLevel == exex_cricketspinlvlrequirement) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Cricket Bat can now be used for a spinning\n\c[gold]attack! (\c[sapphire]Fire + LStrafe + RStrafe\c[gold])");
								}
								if (PlayerLevel == 20) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]Surviving Mortal Hits Now Temporarily Reduces IP costs\nfor most abilities by 33.4%% for 5 seconds.");
								}
								if (PlayerLevel == exex_axequickshotlvlrequirement)
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]The BlunderAxe's 'Chop & Fire' combo is improved!\nFiring your ranged attack w/ <ALT-FIRE> after a chop \ndoes improved damage and has a tigher spread!");
								}
								if (PlayerLevel == 40) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]Surviving Mortal Hits Now Temporarily Reduces IP costs\nfor most abilities by 50%% for 7.5 seconds.");
								}
								if (PlayerLevel == 60) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]Surviving Mortal Hits Now Temporarily Reduces IP costs\nfor most abilities by 66.7%% for 10 seconds.");
								}
								if (PlayerLevel == 80) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]Surviving Mortal Hits Now Temporarily Reduces IP costs\nfor most abilities by 83.4%% for 12.5 seconds.");
								}
								if (PlayerLevel == 100) 
								{
									LevelUpMsg.AppendFormat("\n\n\n\c[gold]Surviving Mortal Hits Now Temporarily Negates IP costs\nfor most abilities entirely for 15 seconds.");
								}
								owner.A_Print(LevelUpMsg);
								owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
							}
						}
					}
				}
				if (exex_expenabled) 
				{
					TruePlayerLevel = PlayerLevel;
					TruePlayerATK = PlayerATK;
					TruePlayerDEF = PlayerDEF;
					TruePlayerSPD = PlayerSPD;
				}
				else
				{
					TruePlayerLevel = 0;
					TruePlayerATK = 0;
					TruePlayerDEF = 0;
					TruePlayerSPD = 0;
				}

				int oldhealth = owner.health;
				if (owner.CountInv("NormalHealth")) oldhealthratio = 0;
				if (owner.CountInv("DecentHealth")) oldhealthratio = 1;
				if (owner.CountInv("LowHealth")) oldhealthratio = 2;
				if (owner.CountInv("CriticalHealth")) oldhealthratio = 3;
				PrevATK = PlayerATK;
				PrevDEF = PlayerDEF;
				PrevSPD = PlayerSPD;
				leveluptimes = 0;
				leveluptimesmax = NumOfLegendMeds - MedCurrLvl;
				int LMUsed;
				
				StatIncrease = 0;
				PrevTrueIPLevelGate = TrueIPLevelGate;
				for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
				{
					if (MedCurrLvl < NumOfLegendMeds)
					{
						PrevTrueIPLevelGate = TrueIPLevelGate;
						MedCurrLvl += 1;
						LMUsed++;
						if (random(1,4) <= 3) 
						{
							if (TrueIPLevelGate > 0) TrueIPLevelGate = 0;
						}
						else
						{
							if (TrueIPLevelGate >= 4) 
							{
								TrueIPLevelGate *= 0.25;
							}
							else
							if (TrueIPLevelGate > 0) 
							{
								TrueIPLevelGate = 0;
							}
						}
						
						LevelUpProcess(1);
						
						owner.A_SetInventory("PlayerATK",PlayerATK);
						owner.A_SetInventory("PlayerDEF",PlayerDEF);
						owner.A_SetInventory("PlayerSPD",PlayerSPD);
						owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
						string LevelUpMsg = "";
						LevelUpMsg.AppendFormat("\c[Green]Consumed a bottle of Potentylene! \c[brick][+%d HP]", HPMaxGain);
						if (exex_expenabled && exex_extraatkdefspd)
						{
							if ((PlayerATK > PrevATK) || (PlayerDEF > PrevDEF) || (PlayerSPD > PrevSPD)) LevelUpMsg.AppendFormat("\n\n");
							if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased Even More than Normal!");
							if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased Even More than Normal!");
							if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased Even More than Normal!");
						}
						if (PrevTrueIPLevelGate != TrueIPLevelGate && PrevTrueIPLevelGate > 0)
						{
							LevelUpMsg.AppendFormat("\n\n");
									  if (TrueIPLevelGate > 0) LevelUpMsg.AppendFormat("\n\c[brick]Level up %d more times to use Flower Crown IP\n\c[brick]once again!", TrueIPLevelGate);
							else if (TrueIPLevelGate <= 0) LevelUpMsg.AppendFormat("\n\c[gold]You can now use the Flower Crown's IP again!\n\c[gold](arm Hand To Hand and go into blocking stance\n\c[gold]and press <ZOOM> while IP mode is on!)");
						}
						owner.A_Print(LevelUpMsg);
					}
				}
				if (LMUsed)
				{
					double ssb = 1.0;
					if (owner.CountInv("ClassyRibbon")) ssb += 0.125;
					if (owner.CountInv("ExpeditionHat")) ssb -= 0.25;

					owner.A_StartSound("Dinah/PainLMS",CHAN_VOICE);
					//Console.Printf("MedStrength: %d", MedStrength);
					owner.A_SetBlend("8a e1 01",((0.500 * ssb) + ((MedStrength * 0.0667)) * ssb),((random(48,50) * ssb) + ((MedStrength * 12) * ssb)));
					if (MedStrength >= 1) owner.health *= (0.5 * ssb);
					if (MedStrength >= 2) owner.health *= (0.5 * ssb);
					if (MedStrength >= 3) owner.health *= (0.5 * ssb);
					if (MedStrength >= 4) owner.health *= (0.5 * ssb);
					owner.player.poisoncount += ((random(18,30) * frandom(6.0,7.5) * (randompick(0,0,0,0,0,0,0,1,1,1,1,2,2) + MedStrength)) * ssb);
					//Console.Printf("poisoncount: %d", owner.player.poisoncount);
					if (owner.health < 0) owner.health = 1;
					
					double base;
					if (exex_ikaripointscalctype == 1)
					{
						base = (oldhealth - owner.health) * 100.0 / oldhealth; // % of remaining HP removed
						if (base >= 0.001)
						{
							if (base >= 0.001 && base <= 50.000) base *= 0.50; // <= 50% equals half of the percent in IP points given [up to 25%]
							if (base >= 50.001 && base <= 65.000) base *= 0.558077; 
							if (base >= 65.001 && base <= 75.000) base *= 0.646154;
							if (base >= 75.001 && base <= 85.000) base *= 0.76; 
							if (base >= 85.001 && base <= 90.000) base *= 0.90; 
							if (base >= 90.001 && base <= 100.000) base *= 1.00; 
							if (base >= 100.001) base *= 1.25;
						}
					}
					else
					{
						base = (oldhealth - owner.health) * 100.0 / MaxHealthTrue;
						if (oldhealthratio == 0) base *= 1.0;
						if (oldhealthratio == 1) base *= 1.125;
						if (oldhealthratio == 2) base *= 1.25;
						if (oldhealthratio == 3) base *= 1.5;
						if (oldhealthratio == 4) base *= 2.25;
						if (oldhealth > 1 && owner.health == 1) base *= 3.25;
					}
					double basef = base;
					double ssa = 1.0;
					if (owner.CountInv("ClassyRibbon")) ssa += 0.25;
					if (owner.CountInv("ExpeditionHat")) ssa -= 0.125;
					base *= ssa;
					basef *= ssa;

					base *= (1.0 + (ActualLevel * 0.0025));
					if (base <= 0.01) base = 0.01;
					if (basef <= 0.01) basef = 0.01;
					
					if (owner.CountInv("AngerLevelEvent") || owner.CountInv("AngerLevelEventN")) base *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.0005) + (owner.CountInv("AngerLevelEventN") * 0.00005));
					
					if (base)
					{
						if (IPDissipateTimer > 0) IPDissipateTimer = (-350 * basef);
																 else IPDissipateTimer += (-350 * basef);
						double oldItemPoints = ItemPoints;
						ItemPoints += base;
						if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
						if (ItemPoints >= oldItemPoints) 
						{
							base = (ItemPoints - oldItemPoints);
							if (dydudebug_ipdisplays2) Console.Printf("\c[red]LevelUp (base): %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", base, oldItemPoints, ItemPoints);
						}
						globalvars.ItemPoints == ItemPoints;
						
						if (base > 0)
						{
							if (IPHUDPulseTimer <= 0) IPHUDPulseTimer = 105;
							else
							{
								IPHUDPulseTimer += 35;
								if (IPHUDPulseTimer < 105 && base > (MaxItemPoints * 0.10)) IPHUDPulseTimer = 105;
								if (IPHUDPulseTimer > 175) IPHUDPulseTimer = 175;
							}
							
							if ((ItemPointsSession < MaxItemPoints) && (ItemPoints < MaxItemPoints))
							{
								ItemPointsSession += base;
								if (ItemPointsSession >= MaxItemPoints) ItemPointsSession == MaxItemPoints;
								if (ItemPointsSession > 0 && base > 0)
								{
									int healfactor = ItemPointsSession * 100 / MaxItemPoints;
									if (healfactor < 10) IPHUDPulseType = 1;
									if (healfactor >= 10) IPHUDPulseType = 2;
									if (healfactor >= 50) IPHUDPulseType = 3;
									if (healfactor >= 100) IPHUDPulseType = 4;
									IPHUDPulseTimeP = (level.time % randompick(10,15,20));
								}
							}
							
							if (exex_playerdmglog && CheckIPEnabled() && base) Console.Printf("\c[red]+%.2f%% IP Gained!", base);
						}
					}
					
					string blehmsg = "";
					blehmsg.AppendFormat("\c[gold]BLEGH");
					if (MedStrength >= 1) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 2) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 3) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 4) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 5) blehmsg.AppendFormat("\c[gold]!");
					blehmsg.AppendFormat(" These things taste absolutely toxic");
					if (MedStrength >= 1) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 3) blehmsg.AppendFormat("\c[gold]!");
					if (MedStrength >= 5) blehmsg.AppendFormat("\c[gold]!");
					blehmsg.AppendFormat(" Yet I feel some power is trying to surface inside me... despite that...");
					Console.Printf(blehmsg);

					MedStrength = 0;
					LMUsed = 0;
				}
				
				//********************************
				//* Armor Tier Give/Max Settings *
				//********************************
				ArmorTierStuff();
				
				// Wine Tier Defs
				WineDefTier = 0;
				if (Owner.CountInv("PowerWineBuffWeak")) WineDefTier = 1;
				if (Owner.CountInv("PowerWineBuffIPWeak")) WineDefTier = -1;
				if (Owner.CountInv("PowerWineBuffStrong")) WineDefTier = 2;
				if (Owner.CountInv("PowerWineBuffIPStrong")) WineDefTier = -2;
				if (Owner.CountInv("PowerWineBuffStrongest")) WineDefTier = 3;
				if (Owner.CountInv("PowerWineBuffIPStrongest")) WineDefTier = -3;
				if (Owner.CountInv("PowerWineBuffStrongestEven")) WineDefTier = 4;
				if (Owner.CountInv("PowerWineBuffIPStrongestEven")) WineDefTier = -4;
				if (Owner.CountInv("PowerWineBuffIPMaximum")) WineDefTier = -5;
				//Console.Printf("%d", WineDefTier);
				
				//*********************
				//* Super Vac Bagging *
				//*********************
				if (SuperVacBagSize <= 0)
				{ 
					if (TrueGameSkill == SKILL_VERY_EASY) SuperVacBagSize = 240;
					if (TrueGameSkill == SKILL_EASY) SuperVacBagSize = 320;
					if (TrueGameSkill == SKILL_NORMAL) SuperVacBagSize = 400;
					if (TrueGameSkill == SKILL_HARD) SuperVacBagSize = 480;
					if (TrueGameSkill == SKILL_VERY_HARD) SuperVacBagSize = 560;
				}
				
				//****************************
				//* Health/Max Health Checks *
				//****************************
				MaxHealthStuff();
				
				//***************
				//* Misc Checks *
				//***************
				IPUseMode = owner.CountInv("IPUseMode");
				canuseflowercrown = -1;
				if (!ddafd_disableflowercrownip && weapon is "HandToHand" && CheckIPEnabled() && owner.CountInv("FistPlayerBlockItem")) 
				{
					canuseflowercrown = 1;
					double cost = A_GetIPCost(-1);
					if (IPUseMode && ItemPoints >= cost && ActualLevel > 0) canuseflowercrown = 2;
				}
				
				
				//*******************
				//* Misc HUD Timers *
				//*******************
				HUDStuff();
				
				//******************
				//* HP Regen/Degen *
				//******************
				HPRegenStuff();
				
				//***********
				//* Evasion *
				//***********
				EvasionStuff();
				
				//**************************
				//* Survival Rate [Buddha] *
				//**************************
				SurvivalStuff();
				
				
				//**************************
				//* Crit Rate Calculations *
				//**************************
				CritRateCalc();
				
				
				//********
				//* Mass *
				//********
				MassStuff();
				
				//*********
				//* JumpZ *
				//*********
				JumpStuff();
				
				//**************************
				//* SuperVac Ammo Handling *
				//**************************
				vacammotype = owner.FindInventory("VacAmmo");
				VacCost = 8;
				if (ddafd_originalsupervaccost && (A_CheckDDGame())) VacCost = 12;
				if (VacCost <= 0) VacCost = 1;
				int vacammoprev;
				int prevvacbagstocharge;
				if (vacammotype)
				{
					vacammoprev = vacammotype.Amount;
				}
				prevvacbagstocharge = (vacammoprev % VacCost);
				int vacgiveammo;
				int vacammocounter = owner.CountInv("VacAmmoCounter");
				if (dydudebug_supervacbag) Console.Printf("Vacuum Bag Size: %d / %d", vacammocounter, SuperVacBagSize);
				while (vacammocounter >= SuperVacBagSize)
				{
					vacammocounter -= SuperVacBagSize;
					owner.A_SetInventory("VacAmmoCounter",vacammocounter);
					vacgiveammo += 1;
					owner.A_StartSound("VacDed",random(11,20),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
					owner.A_StartSound("VacDed",random(21,30),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
				}
				if (vacgiveammo)
				{
					owner.A_GiveInventory("VacAmmo",vacgiveammo);
					Console.Printf("Filled %d bag[s] in the SuperVac!", vacgiveammo);
					vacgiveammo = 0;
				}
				vacammotype = owner.FindInventory("VacAmmo");
				int vacammonow;
				if (vacammotype)
				{
					vacammonow = vacammotype.Amount;
				}
				int vacbagstocharge = (vacammonow % VacCost);
				if (prevvacbagstocharge && vacbagstocharge != prevvacbagstocharge)
				{
					if (vacbagstocharge < prevvacbagstocharge)
					{
						owner.A_StopSound(CHAN_VOICE);
						owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
						string vacmsg;
						if (vacammoprev < VacCost)
						{
							vacmsg = "The SuperVac's Alt-Fire is Ready!";
						}
						else
						{
							vacmsg = "";
							vacmsg.AppendFormat("The SuperVac's Alt-Fire Has %d Charges now!", (vacammonow / VacCost));
						}
						owner.A_Log(vacmsg);
					}
				}
				if (vacammotype && vacammotype.Amount >= vacammotype.MaxAmount)
				{
					vacammocounter = 0;
					owner.A_SetInventory("VacAmmoCounter",0);
				}
				
				//**********************
				//* TimeFreeze Handler *
				//**********************
				int BeatTimer;
				int TickTimer;
				double BeatVol;
				TimeFreezeTimer = owner.CountInv("TimeFreezeTimer");
				TimeFreeze = owner.CountInv("TimePotionTimeFreezer");
				if (TimeFreeze)
				{
					if (TimeFreezeTimer)
					{
						if (!owner.CountInv("INTERMAPChecker")) 
						{
							// Start Up
							if (PrevTimeFreezeTimer == 0)
							{
								owner.A_StopSound(CHAN_6);
								owner.A_StartSound("TimeFreezeIn4",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
								//owner.A_StartSound("TheWorldIn",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
							}
							owner.A_SetInventory("TimePotionTimeFreezer",1);
							
							// Ticks
							TickTimer = TimeFreezeTimer % 35;
							if (TickTimer == 0 && PrevTimeFreezeTimer != 0)
							{
								owner.A_StopSound(CHAN_6); 
								owner.A_StartSound("TimeStopTick",CHAN_6,CHANF_DEFAULT,frandom[statitem2](0.80,1.20),ATTN_NONE); 
							}
							
							// Heart Beat Effect
							if (TimeFreezeTimer > 66 && PrevTimeFreezeTimer != 0)
							{
								BeatVol = 0.5;
								int BeatInt1 = 42;
								int BeatInt2 = 34;
								int BeatInt3 = 26;
								int BeatInt4 = randompick(13,14,14,14,15);
								double BeatVol1 = 0.25;
								double BeatVol2 = 0.3125;
								double BeatVol3 = 0.3875;
								double BeatVol4 = 0.5;
								double BeatBersMulti = 0.875;
								double BeatBersMulti2 = 1.167;
								if (berserked)
								{
									if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % (BeatInt1 * BeatBersMulti); BeatVol = (BeatVol1 * BeatBersMulti2); }
									else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % (BeatInt2 * BeatBersMulti); BeatVol = (BeatVol2 * BeatBersMulti2); }
									else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % (BeatInt3 * BeatBersMulti); BeatVol = (BeatVol3 * BeatBersMulti2); }
									else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % (BeatInt4 * BeatBersMulti); BeatVol = (BeatVol4 * BeatBersMulti2); }
								}
								else
								{
									if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % BeatInt1; BeatVol = BeatVol1; }
									else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % BeatInt2; BeatVol = BeatVol2; }
									else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % BeatInt3; BeatVol = BeatVol3; }
									else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % BeatInt4; BeatVol = BeatVol4; }
								}
							}
							if (dydudebug_timefreeze) Console.Printf("BeatTimer: %d", BeatTimer);
							if (BeatTimer == 0)
							{
								owner.A_StopSound(33);
								owner.A_StartSound("TimeFreezeLoop4",CHANF_DEFAULT,33,BeatVol,ATTN_NONE); 
							}
							
							// Wind Down
							if (TimeFreezeTimer >= 64 && TimeFreezeTimer <= 66) 
							{
								owner.A_StopSound(CHAN_7); 
								owner.A_StartSound("TimeFreezeOut4",CHAN_7,CHANF_DEFAULT,0.875,ATTN_NONE); 
							}

							TimeFreezeTimer -= 1;
							if (TimeFreezeTimer < 1)
							{
								TimeFreezeTimer = 0;
								TimeFreeze = 0;
								TimeFreezeIPBuff = false;
							}
						}
					}
					if (dydudebug_timefreeze) Console.Printf("%d Tics of Time Freeze Left", TimeFreezeTimer);
					PrevTimeFreezeTimer = TimeFreezeTimer;
				}
				owner.A_SetInventory("TimeFreezeTimer",TimeFreezeTimer);
				owner.A_SetInventory("TimePotionTimeFreezer",TimeFreeze);
				
				//*************
				//* Time Slow *
				//*************
				if (dydudebug_timeslowinterval)
				{
					if (level.time % (dydudebug_timeslowinterval + 1)) owner.A_SetInventory("DebugTimeFreezer",1);
					else owner.A_SetInventory("DebugTimeFreezer",0);
				}
				else
				{
					if (owner.CountInv("DebugTimeFreezer")) owner.A_SetInventory("DebugTimeFreezer",0);
				}
				
				//***************
				//* Land Damage *
				//***************
				landdmgbonus = 0;
				if (dydudebug_landdamage && owner.vel.z) Console.Printf("    \ceLanding Damage (ZVel: %.8f, OnGround: %d, WaterLevel: %d)", owner.vel.z, owner.player.onground, owner.waterlevel);
				if (owner.waterlevel <= 0 && !owner.player.onground)
				{
					if (owner.vel.z < -162.0)
					{
						landdmgbonus = 4;
						if (dydudebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]");
					}
					else
					if (owner.vel.z < -54.0)
					{
						landdmgbonus = 3;
						if (dydudebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]");
					}
					else
					if (owner.vel.z < -18.0)
					{
						landdmgbonus = 2;
						if (dydudebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]");
					}
					else
					if (owner.vel.z < -6.0)
					{
						landdmgbonus = 1;
						if (dydudebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]");
					}
				}
				
				//*******************
				//* Set Max HP Item *
				//*******************
				owner.player.health = owner.player.mo.health = CurrentHealth;
				owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
				
				//**************************
				//* Cricket Bat Guard Buff *
				//**************************
				CricketBatGuardStuff();
				
				//*********************
				//* Grimophone Debuff *
				//*********************
				int DashTics = owner.CountInv("DashTics");
				int gdebuffbase = 90;
				if (!owner.CountInv("INTERMAPChecker"))
				{
					if (GrimophoneDebuffTimer > 0)
					{
						if (GrimophoneDebuffTimer >= (gdebuffbase*27)) 
						{
							owner.A_SetInventory("GrimophoneDEFDown4",1);
							owner.A_SetInventory("GrimophoneDEFDown3",0);
							owner.A_SetInventory("GrimophoneDEFDown2",0);
							owner.A_SetInventory("GrimophoneDEFDown1",0);
						}
						else if (GrimophoneDebuffTimer >= (gdebuffbase*9)) 
						{
							owner.A_SetInventory("GrimophoneDEFDown4",0);
							owner.A_SetInventory("GrimophoneDEFDown3",1);
							owner.A_SetInventory("GrimophoneDEFDown2",0);
							owner.A_SetInventory("GrimophoneDEFDown1",0);
						}
						else if (GrimophoneDebuffTimer >= (gdebuffbase*3))
						{
							owner.A_SetInventory("GrimophoneDEFDown4",0);
							owner.A_SetInventory("GrimophoneDEFDown3",0);
							owner.A_SetInventory("GrimophoneDEFDown2",1);
							owner.A_SetInventory("GrimophoneDEFDown1",0);
						}
						else
						if (GrimophoneDebuffTimer >= (gdebuffbase)) 
						{
							owner.A_SetInventory("GrimophoneDEFDown4",0);
							owner.A_SetInventory("GrimophoneDEFDown3",0);
							owner.A_SetInventory("GrimophoneDEFDown2",0);
							owner.A_SetInventory("GrimophoneDEFDown1",1);
						}
						if (owner.CountInv("GrimAltFireInUse") && 
							!(owner.bINVULNERABLE ||
								owner.player.cheats & CF_GODMODE2 || 
								owner.player.cheats & CF_GODMODE)) GrimophoneDebuffTimer -= (0 + floor(ActualLevel * 0.00625));
																							else GrimophoneDebuffTimer -= (1 + floor(ActualLevel * 0.025));
						
						if (dydudebug_grimophonealtfire) Console.Printf("\c[brick]GrimophoneDebuffTimer %d\c-", GrimophoneDebuffTimer);
					}
					else
					{
						owner.A_SetInventory("GrimophoneDEFDown4",0);
						owner.A_SetInventory("GrimophoneDEFDown3",0);
						owner.A_SetInventory("GrimophoneDEFDown2",0);
						owner.A_SetInventory("GrimophoneDEFDown1",0);
						GrimophoneDebuffTimer = 0;
					}
				}
				
				DDPlayerPawn PlayIP;
				if (owner.CountInv("GrimAltFireInUse"))
				{
					owner.bFORCERADIUSDMG = true;
					PlayIP = DDPlayerPawn(owner);
					if (PlayIP)
					{
						if (PlayIP.CountInv("IPUseMode")) PlayIP.IPAttack = true;
																				 else PlayIP.IPAttack = false;
					}
				}
				else
				{
					if (berserked && DashTics) owner.bFORCERADIUSDMG = true;
																else owner.bFORCERADIUSDMG = false;
					PlayIP = DDPlayerPawn(owner);
					if (PlayIP) PlayIP.IPAttack = false;
				}
				if (dydudebug_grimophonealtfire) Console.Printf("PlayIP.IPAttack: \c[blue]%d\c-", PlayIP.IPAttack);
				
				//*************************
				//* Mercy Invulnerability *
				//*************************
				double MercyFlickerAlpha = 1.0;
				if (!owner.CountInv("INTERMAPChecker"))
				{
					if (MercyInvulnOn)
					{
						if (MercyInvulnTimer > 0)
						{
							if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
							{
								owner.player.cheats |= CF_GODMODE;
								owner.bINVULNERABLE = 1;
							}
							MercyInvulnMod = MercyInvulnTimer % 120;
							if (MercyInvulnMod >= 0 && MercyInvulnMod <= 14) MercyFlickerAlpha = 0.25;
							if (MercyInvulnMod >= 15 && MercyInvulnMod <= 29) MercyFlickerAlpha = 0.3125;
							if (MercyInvulnMod >= 30 && MercyInvulnMod <= 44) MercyFlickerAlpha = 0.375;
							if (MercyInvulnMod >= 45 && MercyInvulnMod <= 59) MercyFlickerAlpha = 0.4375;
							if (MercyInvulnMod >= 60 && MercyInvulnMod <= 74) MercyFlickerAlpha = 0.5;
							if (MercyInvulnMod >= 75 && MercyInvulnMod <= 89) MercyFlickerAlpha = 0.4375;
							if (MercyInvulnMod >= 90 && MercyInvulnMod <= 104) MercyFlickerAlpha = 0.375;
							if (MercyInvulnMod >= 105 && MercyInvulnMod <= 119) MercyFlickerAlpha = 0.3125;
							if (dydudebug_mercyinvulndisplays) Console.Printf("MercyFlickerAlpha: %.8f, MercyInvulnMod [Timer]: %d [%d]", MercyFlickerAlpha, owner.GetRenderStyle(), MercyInvulnMod, MercyInvulnTimer);
							MercyInvulnTimer -= 20;
						}
						else // Timer at zero
						{
							if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
							{
								owner.player.cheats &= ~CF_GODMODE;
								owner.bINVULNERABLE = 0;
							}
							MercyInvulnTimer = MercyInvulnMod = 0;
							MercyInvulnOn = false;
						}
					}
					else
					{
						if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
						{
							owner.player.cheats &= ~CF_GODMODE;
							owner.bINVULNERABLE = 0;
						}
					}
					if (dydudebug_mercyinvulndisplays) Console.Printf("MercyInvuln: %d {%d} [%d]", MercyInvulnOn, MercyInvulnMod, MercyInvulnTimer);
				}
				
				//**************************************************
				//* RenderStyle Stuff [Dashing, Invisibility, etc] *
				//**************************************************
				int InvisPulseTimer = level.totaltime % 40;
				double InvisPulseAlpha = 1.00;
				double DashAlpha = 1.00;

				int InvisibilityTimer;
				if (!owner.CountInv("INTERMAPChecker"))
				{
					let MiscItem = PowerGhost(owner.FindInventory("PowerGhost",true));
					let MiscItem2 = PowerInvisibility(owner.FindInventory("PowerInvisibility",true));
					if (MiscItem || MiscItem2)
					{
						if (MiscItem) InvisibilityTimer = MiscItem.EffectTics;
						else if (MiscItem2) InvisibilityTimer = MiscItem2.EffectTics;
						//Console.Printf("InvisibilityTimer: %d", InvisibilityTimer);
						if (InvisibilityTimer > 0)
						{
							if (InvisPulseTimer == 0 || InvisPulseTimer == 20 || InvisPulseTimer == 40) InvisPulseAlpha = 0.20;
							if (InvisPulseTimer == 1 || InvisPulseTimer == 19) InvisPulseAlpha = 0.205;
							if (InvisPulseTimer == 2 || InvisPulseTimer == 18) InvisPulseAlpha = 0.21;
							if (InvisPulseTimer == 3 || InvisPulseTimer == 17) InvisPulseAlpha = 0.215;
							if (InvisPulseTimer == 4 || InvisPulseTimer == 16) InvisPulseAlpha = 0.22;
							if (InvisPulseTimer == 5 || InvisPulseTimer == 15) InvisPulseAlpha = 0.225;
							if (InvisPulseTimer == 6 || InvisPulseTimer == 14) InvisPulseAlpha = 0.23;
							if (InvisPulseTimer == 7 || InvisPulseTimer == 13) InvisPulseAlpha = 0.235;
							if (InvisPulseTimer == 8 || InvisPulseTimer == 12) InvisPulseAlpha = 0.24;
							if (InvisPulseTimer == 9 || InvisPulseTimer == 11) InvisPulseAlpha = 0.245;
							if (InvisPulseTimer == 10) InvisPulseAlpha = 0.25;
							if (InvisPulseTimer == 21 || InvisPulseTimer == 39) InvisPulseAlpha = 0.195;
							if (InvisPulseTimer == 22 || InvisPulseTimer == 38) InvisPulseAlpha = 0.19;
							if (InvisPulseTimer == 23 || InvisPulseTimer == 37) InvisPulseAlpha = 0.185;
							if (InvisPulseTimer == 24 || InvisPulseTimer == 36) InvisPulseAlpha = 0.18;
							if (InvisPulseTimer == 25 || InvisPulseTimer == 35) InvisPulseAlpha = 0.175;
							if (InvisPulseTimer == 26 || InvisPulseTimer == 34) InvisPulseAlpha = 0.17;
							if (InvisPulseTimer == 27 || InvisPulseTimer == 33) InvisPulseAlpha = 0.165;
							if (InvisPulseTimer == 28 || InvisPulseTimer == 32) InvisPulseAlpha = 0.16;
							if (InvisPulseTimer == 29 || InvisPulseTimer == 31) InvisPulseAlpha = 0.155;
							if (InvisPulseTimer == 30) InvisPulseAlpha = 0.15;
						}

						if (DashTics)
						{
							if (random(1,128) <= (68 + (ActualLevel * frandom(2.75,4.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
						}
						else
						{
							if (random(1,128) <= (64 + (ActualLevel * frandom(0.75,1.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
						}
					}
					else
					{
						if (DashTics)
						{
							if (random(1,128) <= (4 + (ActualLevel * frandom(2,3)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
						}
						else
						{
							Owner.bCANTSEEK = false;
						}
					}

					if (DashTics)
					{
						if (level.time % 4 <= 1) DashAlpha = frandompick(0.375,0.5,0.625);
																else DashAlpha = frandompick(0.625,0.75,0.875);
					}
					if (DashTics) owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Add);
									 else owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Translucent);
				}
				
				// Track Doorbell Uses [Normal use, not IP]
				if (!(A_CheckDDGame()))
				{
					if (owner.CountInv("DoorBell"))
					{
					}
					else
					{
						DoorBellNormalUses = 0;
					}
				}
				
				
				//***************************
				//* Inventory/Weapon Limits *
				//***************************
				InventoryWeaponLimits();
				
				
				//************
				//* Counters *
				//************
				GameStatTracker();
				
				
				//**********************
				//* Weapon Check Stuff *
				//**********************
				string nt;
				// Hand To Hand
				if (weapon is "HandToHand") 
				{
				}
				else
				{
					nt = "FistPlayerSpeedFactor"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerSpeedFactor2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerSpeedFactor3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerSpeedFactor4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlock"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlock2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlock3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlock4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlockExtra"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlockExtra2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlockItem"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "FistPlayerBlockHold"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
				}
				// Cricket Bat
				if (weapon is "CricketBat")
				{
				}
				else
				{
					nt = "IsInBatGuardFrame"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "CricketBatSwingDEF"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "CricketBatSwingDEF2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "CricketBatGuard"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "CricketBatGuard2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "CricketBatGuard3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
					nt = "DoingSpinAttack"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
				}
				// Allow the Pike to emit dynlights when equipped [if you have any ammo :V]
				if (weapon is "WizardPike" && owner.CountInv("PikeAmmo") > 0 && exex_glowingpike)
				{
					numpikeglows = 0;
					ThinkerIterator GlowAttach = ThinkerIterator.Create("PikeGlowAttach");
					Actor mo;
					while (mo = PikeGlowAttach(GlowAttach.Next()))
					{
						numpikeglows++;
						if (numpikeglows) break;
					}
					if (!numpikeglows)
					{
						A_SpawnItemEx("PikeGlowAttach",owner.pos.x,owner.pos.y,owner.pos.z,0,0,0,0,SXF_NOCHECKPOSITION);
						numpikeglows++;
					}
				}
				else
				{
					if (numpikeglows)
					{
						ThinkerIterator GlowAttach = ThinkerIterator.Create("PikeGlowAttach");
						Actor mo;
						while (mo = PikeGlowAttach(GlowAttach.Next()))
						{
							mo.Destroy();
							numpikeglows--;
						}
						if (numpikeglows) numpikeglows = 0;
					}
				}
				
				
				//*********************
				//* Flat Defense Calc *
				//*********************
				FlatDefenseCalc();
				
				//*************************************
				//*************************************
				//*************************************
				// End Stuff
				EndStuff();
			}
			if (dydudebug_miscitemdebug) Console.Printf("ClassCheck: %d", ClassCheck);
			super.DoEffect();
		}
	}
	
	int A_CheckActualLevel(int type = 0)
	{
		int Level = 0;
		if (exex_expenabled) 
		{
			if (type == 0) Level = PlayerLevel;
			if (type >= 1) Level = TruePlayerLevel;
		}
		else
		{
			if (A_CheckDDGame()) Level = TotalNRPGLvlPts;
		}
		return Level;
	}
	
	bool A_CheckDDGame()
	{
		if (owner.CountInv("IsDynDuchess") ||
				owner.CountInv("IsAppetite") || 
				owner.CountInv("IsCarnOfSouls") || 
				owner.CountInv("IsWeddingCake")) return true;
		return false;
	}
	
	void EndStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		
		HandleDynamicMusic();
		
		ClassCheck++;
		itemtimer++;
		if (IsMorphed > 0) 
		{
			if (IsMorphed == 1 && MorphTimer == 0) owner.health = MaxHealthTrue * 0.3;
			MorphTimer++;
		}
		else
		{
			if (WasMorphed == 1 && MorphTimer > 0) owner.health = MaxHealthTrue;
			MorphTimer = 0;
		}
		WasMorphed = IsMorphed;
		
		owner.player.mo.maxhealth = MaxHealthTrue;
		// Set Global Vars [End]
		globalvars.MaxIPExtensions = MaxIPExtensions;
		globalvars.ItemPoints = ItemPoints;
		globalvars.BaseStartMaxHealth = BaseStartMaxHealth;
		globalvars.HealthLevelAdd = HealthLevelAdd;
		globalvars.HealthNoRPGADD = HealthNoRPGADD;
		globalvars.HealthNoRPGADD2 = HealthNoRPGADD2;
		globalvars.HealthBonusAdd = HealthBonusAdd;
		globalvars.MassLevelAdd = MassLevelAdd;
		globalvars.MassNoRPGAdd = MassNoRPGAdd;
		globalvars.MassNoRPGAdd2 = MassNoRPGAdd2;
		globalvars.MassBonusAdd = MassBonusAdd;
		globalvars.MaxHealthTrue = MaxHealthTrue;
		globalvars.Experience = Experience;
		globalvars.PlayerLevel = PlayerLevel;
		globalvars.TruePlayerLevel = TruePlayerLevel;
		globalvars.ClassCheck = ClassCheck;
		globalvars.atkfct = atkfct;
		globalvars.deffct = deffct;
		globalvars.spdfct = spdfct;
		globalvars.jmpfct = jmpfct;
		globalvars.suvfct = suvfct;
		globalvars.PlayerATK = PlayerATK;
		globalvars.PlayerDEF = PlayerDEF;
		globalvars.PlayerSPD = PlayerSPD;
		globalvars.PlayerLuck = PlayerLuck;
	}
	
	void InitStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		if (itemtimer <= 2 && exex_deathexitaffectsstats)
		{
			if (itemtimer == 0) ClassCheck = globalvars.ClassCheck = 0;
			PlayerLevel = globalvars.PlayerLevel = 0;
			TruePlayerLevel = globalvars.TruePlayerLevel = 0;
			Experience = globalvars.Experience = 0;
			globalvars.atkfct = atkfct = 1.0;
			globalvars.deffct = deffct = 1.0;
			globalvars.spdfct = spdfct = 1.0;
			globalvars.jmpfct = jmpfct = 1.0;
			globalvars.suvfct = suvfct = 1.0;
			globalvars.PlayerATK = PlayerATK = 0;
			globalvars.PlayerDEF = PlayerDEF = 0;
			globalvars.PlayerSPD = PlayerSPD = 0;
			globalvars.PlayerLuck = PlayerLuck = 0;
			globalvars.HealthLevelAdd = HealthLevelAdd = 0;
			globalvars.HealthNoRPGAdd = HealthNoRPGAdd = 0;
			globalvars.HealthNoRPGAdd2 = HealthNoRPGAdd2 = 0;
			globalvars.HealthBonusAdd = HealthBonusAdd = 0;
			globalvars.MassLevelAdd = MassLevelAdd = 0;
			globalvars.MassNoRPGAdd = MassNoRPGAdd = 0;
			globalvars.MassNoRPGAdd2 = MassNoRPGAdd2 = 0;
			globalvars.MassBonusAdd = MassBonusAdd = 0;
			globalvars.ItemPoints = ItemPoints = 0;
			globalvars.MaxIPExtensions = MaxIPExtensions = 0;
			if (itemtimer == 0 && dydudebug_deathexitdebug) Console.Printf("exex_deathexitaffectsstats: YES", exex_deathexitaffectsstats);
		}
		else
		{
			ClassCheck = globalvars.ClassCheck;
			PlayerLevel = globalvars.PlayerLevel;
			TruePlayerLevel = globalvars.TruePlayerLevel;
			Experience = globalvars.Experience;
			atkfct = globalvars.atkfct;
			deffct = globalvars.deffct;
			spdfct = globalvars.spdfct;
			jmpfct = globalvars.jmpfct;
			suvfct = globalvars.suvfct;
			PlayerATK = globalvars.PlayerATK;
			PlayerDEF = globalvars.PlayerDEF;
			PlayerSPD = globalvars.PlayerSPD;
			PlayerLuck = globalvars.PlayerLuck;
			MaxHealthTrue = globalvars.MaxHealthTrue;
			HealthLevelAdd = globalvars.HealthLevelAdd;
			HealthNoRPGAdd = globalvars.HealthNoRPGAdd;
			HealthNoRPGAdd2 = globalvars.HealthNoRPGAdd2;
			HealthBonusAdd = globalvars.HealthBonusAdd;
			MassLevelAdd = globalvars.MassLevelAdd;
			MassNoRPGAdd = globalvars.MassNoRPGAdd;
			MassNoRPGAdd2 = globalvars.MassNoRPGAdd2;
			MassBonusAdd = globalvars.MassBonusAdd;
			ItemPoints = globalvars.ItemPoints;
			MaxIPExtensions = globalvars.MaxIPExtensions;
			BaseStartMaxHealth = globalvars.BaseStartMaxHealth;
			if (itemtimer == 0) 
			{
				if (MaxHealthTrue) owner.player.mo.health = MaxHealthTrue;
				if (dydudebug_deathexitdebug)
				{
					Console.Printf("MaxHealthTrue: %d, HealthLevelAdd: %d, HealthNoRPGAdd: %d, HealthBonusAdd: %d, HealthBonusAdd2: %d, BaseStartMaxHealth: %d", MaxHealthTrue, HealthLevelAdd, HealthBonusAdd, HealthNoRPGAdd, HealthNoRPGAdd2, BaseStartMaxHealth);
					Console.Printf("exex_deathexitaffectsstats: NO", exex_deathexitaffectsstats);
				}
			}
		}
		owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
		if (itemtimer <= 2) owner.A_SetInventory("ExpPts",globalvars.Experience);
		if (itemtimer <= 2) DynMusChangeChance = 1;
		
		weapon = owner.player.ReadyWeapon;
		HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
		HellWarriorMaxCharge = 1000;
		if (playeractor.GetClassName() == "DinahPlayer" || playeractor.GetClassName() == "RatPlayer") CharacterClass = 10;
		
		cankick = true;
	}
	
	void CricketBatGuardStuff()
	{
		let playeractor = DDPlayerPawn(owner);

		owner.A_SetInventory("CricketBatGuard",0);
		owner.A_SetInventory("CricketBatGuard2",0);
		owner.A_SetInventory("CricketBatGuard3",0);
		owner.A_SetInventory("CricketBatSwingDEF",0);
		owner.A_SetInventory("CricketBatSwingDEF2",0);
		if (!owner.CountInv("INTERMAPChecker"))
		{
			if (CricketBatBuffTimer2)
			{
				CricketBatBuffTimer2--;
				if (PlayerLevel >= 50) owner.A_SetInventory("CricketBatGuard3",1);
															 owner.A_SetInventory("CricketBatGuard2",1);
				if (dydudebug_cricketbatguard) Console.Printf("CricketBatBuffTimer2: %d", CricketBatBuffTimer2);
			}

			if (CricketBatBuffTimer)
			{
				CricketBatBuffTimer--;
				if (PlayerLevel >= 50) owner.A_SetInventory("CricketBatGuard2",1);
													else owner.A_SetInventory("CricketBatGuard",1);
				if (dydudebug_cricketbatguard) Console.Printf("CricketBatBuffTimer: %d", CricketBatBuffTimer);
			}

			if (CricketBatSwingBuffTimer)
			{
				CricketBatSwingBuffTimer--;
				if (PlayerLevel >= 50) owner.A_SetInventory("CricketBatSwingDEF2",1);
													else owner.A_SetInventory("CricketBatSwingDEF",1);
				if (dydudebug_cricketbatguard) Console.Printf("timer: %d", CricketBatSwingBuffTimer);
			}
		}
	}
	
	void HandleDynamicMusic()
	{
		let playeractor = DDPlayerPawn(owner);
		if (exex_dynamicmusic == 1) DynMusSetUsed = dydudebug_misc8;

		if (playeractiontimer > 0)
		{
			playeractiontimerfrag++;
			if (DynMusFightTimer > 0) playeractiontimerfrag -= randompick(0,0,1,1,1,2,2);
			if (playeractiontimerfrag < 0) playeractiontimerfrag = 0;
			while (playeractiontimerfrag >= 20)
			{
				playeractiontimerfrag -= 20;
				playeractiontimer--;
				if (playeractiontimer < 0) playeractiontimer = 0;
				if (playeractiontimerfrag < 0) playeractiontimerfrag = 0;
			}
		}
		
		if (exex_dynamicmusic)
		{
			bool usemusic = true;
			if (level.GetChecksum() == '95d8e4afa07a7e3330997a6aa5d0318d') usemusic = false;
			if (usemusic)
			{
				if (exex_deathmusic && owner.health <= 0)
				{
					DynMusCalmTimer = -1;
					DynMusFightTimer = -1;
					randmusroll = -1;
				}
				else
				{
					if (DynMusFightTimer <= 0)
					{
						randmusroll = -1;
						DynMusCalmTimer++;
						if ((DynMusCalmTimer % 35) == 0 || (DynMusCalmTimer % 35) == 1 || (DynMusCalmTimer % 35) == 34)
						{
							if (exex_dynamicmusic == 1 || exex_dynamicmusic == 3)
							{
								if (dydudebug_dynmusdisplays) Console.Printf("\c[blue]Calling Paired Dynamic Music (Calm) [%d]\c-", DynMusCalmTimer);
								if (DynMusSetUsed == 0) { S_ChangeMusic("BGMPRTY", 0, true, true); snglen = 2676; } // Party
								if (DynMusSetUsed == 1) { S_ChangeMusic("BGMOBSV", 0, true, true); snglen = 3815; } // Observation
								if (DynMusSetUsed == 2) { S_ChangeMusic("BGMDING", 0, true, true); snglen = 5560; } // Dining
								if (DynMusSetUsed == 3) { S_ChangeMusic("BGMGARDN", 0, true, true); snglen = 6985; } // Garden
								if (DynMusSetUsed == 4) { S_ChangeMusic("BGMHEDGE", 0, true, true); snglen = 4494; } // Hedges
								if (DynMusSetUsed == 5) { S_ChangeMusic("BGMSPRNG", 0, true, true); snglen = 2011; } // Springs
								if (DynMusSetUsed == 6) { S_ChangeMusic("BGMCRICK", 0, true, true); snglen = 2950; } // Grove
								if (DynMusSetUsed == 7) { S_ChangeMusic("BGMHAUS", 0, true, true); snglen = 7111; } // House
								
								if (DynMusSetUsed == 8) { S_ChangeMusic("BGMVOKT", 0, true, true); snglen = 883; } // Villa
								if (DynMusSetUsed == 9) { S_ChangeMusic("BGMHERO", 0, true, true); snglen = 2209; } // Heroes
								if (DynMusSetUsed == 10) { S_ChangeMusic("BGMCORT", 0, true, true); snglen = 3261; } // School
								if (DynMusSetUsed == 11) { S_ChangeMusic("BGMMAGI", 0, true, true); snglen = 1444; } // Magic
								if (DynMusSetUsed == 12) { S_ChangeMusic("BGMHOLY", 0, true, true); snglen = 1946; } // Manse
								if (DynMusSetUsed == 13) { S_ChangeMusic("BGMETIQ", 0, true, true); snglen = 1235; } // Embassy
								if (DynMusSetUsed == 14) { S_ChangeMusic("BGMARTS", 0, true, true); snglen = 662; } // Abbey
								if (DynMusSetUsed == 15) { S_ChangeMusic("BGMAIR", 0, true, true); snglen = 1708; } // Zepp1
								if (DynMusSetUsed == 16) { S_ChangeMusic("BGMAIR", 0, true, true); snglen = 1708; } // Zepp2
		
								if (DynMusSetUsed == 17) { S_ChangeMusic("BGMCARN", 0, true, true); snglen = 1166; } // ?1
								if (DynMusSetUsed == 18) { S_ChangeMusic("BGMHEV", 0, true, true); snglen = 3819; } // ?2
								if (DynMusSetUsed == 19) { S_ChangeMusic("BGMHEVF", 0, true, true); snglen = 2656; } // ?3
								if (DynMusSetUsed == 20) { S_ChangeMusic("BGMHEVH", 0, true, true); snglen = 2589; } // ?4
								if (DynMusSetUsed == 21) { S_ChangeMusic("BGMPURGC", 0, true, true); snglen = 5873; } // ?5
								if (DynMusSetUsed == 22) { S_ChangeMusic("BGMHELLC", 0, true, true); snglen = 5062; } // ?6
								if (DynMusSetUsed == 23) { S_ChangeMusic("BGMMOTHC", 0, true, true); snglen = 1684; } // ?7
								
								if (DynMusSetUsed == 101) { S_ChangeMusic("SILONORM", 0, true, true); snglen = 1835; } // SiN - Silo
								if (DynMusSetUsed == 102) { S_ChangeMusic("GORGNORM", 0, true, true); snglen = 2318; } // SiN - Gorge
								if (DynMusSetUsed == 103) { S_ChangeMusic("BIONORM", 0, true, true); snglen = 1892; } // SiN - BioTech
								if (DynMusSetUsed == 104) { S_ChangeMusic("CORNORM", 0, true, true); snglen = 1757; } // SiN - Coral
								if (DynMusSetUsed == 105) { S_ChangeMusic("MUNTNORM", 0, true, true); snglen = 1860; } // SiN - Munt
								if (DynMusSetUsed == 106) { S_ChangeMusic("MANENORM", 0, true, true); snglen = 901; } // SiN - Mane
								if (DynMusSetUsed == 107) { S_ChangeMusic("BANKNORM", 0, true, true); snglen = 1891; } // SiN - Bank
								if (DynMusSetUsed == 108) { S_ChangeMusic("CHEMNORM", 0, true, true); snglen = 2588; } // SiN - Chem
								if (DynMusSetUsed == 109) { S_ChangeMusic("CASINORM", 0, true, true); snglen = 3448; } // SiN - Casino
								if (DynMusSetUsed == 110) { S_ChangeMusic("AQUANORM", 0, true, true); snglen = 1339; } // SiN - Aqua
								if (DynMusSetUsed == 111) { S_ChangeMusic("CSNORM", 0, true, true); snglen = 1941; } // SiN - Construct
								if (DynMusSetUsed == 112) { S_ChangeMusic("DAMNORM", 0, true, true); snglen = 1963; } // SiN - Dam
								if (DynMusSetUsed == 113) { S_ChangeMusic("HDCKNORM", 0, true, true); snglen = 1960; } // SiN - HiDocks
								if (DynMusSetUsed == 114) { S_ChangeMusic("INTRNORM", 0, true, true); snglen = 1055; } // SiN - Intr
								if (DynMusSetUsed == 115) { S_ChangeMusic("JUNGNORM", 0, true, true); snglen = 3925; } // SiN - Jungle
								if (DynMusSetUsed == 116) { S_ChangeMusic("MANSNORM", 0, true, true); snglen = 2272; } // SiN - Mansion
								if (DynMusSetUsed == 117) { S_ChangeMusic("POWNORM", 0, true, true); snglen = 2347; } // SiN - Pow
								if (DynMusSetUsed == 118) { S_ChangeMusic("XENONORM", 0, true, true); snglen = 2252; } // SiN - Xeno
								if (DynMusSetUsed == 119) { S_ChangeMusic("WHNORM", 0, true, true); snglen = 2594; } // SiN - Wareh
								if (DynMusSetUsed == 120) { S_ChangeMusic("WAWNORM", 0, true, true); snglen = 3034; } // SiN - Waw
								if (DynMusSetUsed == 121) { S_ChangeMusic("UWNORM", 0, true, true); snglen = 2803; } // SiN - Uw
								if (DynMusSetUsed == 122) { S_ChangeMusic("THRLMSTN", 0, true, true); snglen = 738; } // SiN - TMaster
	
								if (DynMusSetUsed == 1001) { S_ChangeMusic("WFMAP12", 0, true, true); snglen = 6329; } // Winter' Fury 1-2
								if (DynMusSetUsed == 1002) { S_ChangeMusic("62KRONAN", 0, true, true); snglen = 2523; } // SS2 Kronor 6-2
								if (DynMusSetUsed == 1003) { S_ChangeMusic("54ELLENN", 0, true, true); snglen = 3734; } // SS2 Ellenier 5-4
								if (DynMusSetUsed == 1004) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
	
								if (snglen <= 0) snglen = 1050;
								if (exex_dynamicmusic == 3 && DynMusCalmTimer % snglen == (snglen-1)) 
								{
									if (dydudebug_dynmusdisplays) Console.Printf("\c[orange]Song should be looping or setting to a different one) [%d]\c-", DynMusCalmTimer);
									if (random(1,16) <= 15) DynMusChangeChance++;
									else
									{
										if (random(1,4) <= 1) DynMusChangeChance += 2;
										else
										{
											DynMusSetUsed = randompick(random(0,23),random(101,122),random(1001,1003));
											DynMusChangeChance = 1;
											snglen = 0;
										}
									}
								}
							}
							else
							{
								if (dydudebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (Random Fight Music Mode) [%d]\c-", DynMusCalmTimer);
								S_ChangeMusic("*", 0, true, true);
							}
						}
						if (dydudebug_dynmusdisplays) 
						{
							if (exex_dynamicmusic == 2) Console.Printf("\c[sapphire]CalmTimer: %d\c-, \c[green]RNG#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusCalmTimer, randmusroll, playeractiontimer, playeractiontimerfrag);
																		else Console.Printf("\c[sapphire]CalmTimer: %d\c-, \c[green]Set#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-, snglen: %d", DynMusCalmTimer, DynMusSetUsed, playeractiontimer, playeractiontimerfrag, snglen);
						}
					}
					else
					{
						if (DynMusActCall)
						{
							DynMusCalmTimer = -1;
							if (exex_dynamicmusic == 1 || exex_dynamicmusic == 3)
							{
								randmusroll = -1;
								if (dydudebug_dynmusdisplays) Console.Printf("\c[brick]Calling Paired Dynamic Music (Fight) [%d]\c-", DynMusFightTimer);
								if (DynMusSetUsed == 0) S_ChangeMusic("BGMBAT4", 0, true, true); // Party
								if (DynMusSetUsed == 1) S_ChangeMusic("BGMBAT2", 0, true, true); // Observation
								if (DynMusSetUsed == 2) S_ChangeMusic("BGMBAT2", 0, true, true); // Dining
								if (DynMusSetUsed == 3) S_ChangeMusic("BGMBAT1", 0, true, true); // Garden
								if (DynMusSetUsed == 4) S_ChangeMusic("BGMBAT3", 0, true, true); // Hedges
								if (DynMusSetUsed == 5) S_ChangeMusic("BGMBAT3", 0, true, true); // Springs
								if (DynMusSetUsed == 6) S_ChangeMusic("BGMBAT2", 0, true, true); // Cricket
								if (DynMusSetUsed == 7) S_ChangeMusic("BGMBAT3", 0, true, true); // House
	
								if (DynMusSetUsed == 8) S_ChangeMusic("BGMBAT3", 0, true, true); // Villa
								if (DynMusSetUsed == 9) S_ChangeMusic("BGMBAT3", 0, true, true); // Heroes
								if (DynMusSetUsed == 10) S_ChangeMusic("BGMBAT2", 0, true, true); // School
								if (DynMusSetUsed == 11) S_ChangeMusic("BGMBATM", 0, true, true); // Magic
								if (DynMusSetUsed == 12) S_ChangeMusic("BGMBAT2", 0, true, true); // Manse
								if (DynMusSetUsed == 13) S_ChangeMusic("BGMBAT2", 0, true, true); // Embassy
								if (DynMusSetUsed == 14) S_ChangeMusic("BGMBATA", 0, true, true); // Abbey
								if (DynMusSetUsed == 15) S_ChangeMusic("BGMBAT1", 0, true, true); // Zepp1
								if (DynMusSetUsed == 16) S_ChangeMusic("BGMBAT3", 0, true, true); // Zepp2
	
								if (DynMusSetUsed == 17) S_ChangeMusic("BGMBATC", 0, true, true); // ?1
								if (DynMusSetUsed == 18) S_ChangeMusic("BGMBATH", 0, true, true); // ?2
								if (DynMusSetUsed == 19) S_ChangeMusic("BGMBATH2", 0, true, true); // ?3
								if (DynMusSetUsed == 20) S_ChangeMusic("BGMBATH3", 0, true, true); // ?4
								if (DynMusSetUsed == 21) S_ChangeMusic("BGMPURGF", 0, true, true); // ?5
								if (DynMusSetUsed == 22) S_ChangeMusic("BGMHELLF", 0, true, true); // ?6
								if (DynMusSetUsed == 23) S_ChangeMusic("BGMMOTHF", 0, true, true); // ?7
								
								if (DynMusSetUsed == 101) S_ChangeMusic("SILOACT", 0, true, true); // SiN - Silo
								if (DynMusSetUsed == 102) S_ChangeMusic("GORGACT", 0, true, true); // SiN - Gorge
								if (DynMusSetUsed == 103) S_ChangeMusic("BIOACT", 0, true, true); // SiN - BioTech
								if (DynMusSetUsed == 104) S_ChangeMusic("CORACT", 0, true, true); // SiN - Coral
								if (DynMusSetUsed == 105) S_ChangeMusic("MUNTACT", 0, true, true); // SiN - Munt
								if (DynMusSetUsed == 106) S_ChangeMusic("MANEACT", 0, true, true); // SiN - Mane
								if (DynMusSetUsed == 107) S_ChangeMusic("BANKACT", 0, true, true); // SiN - Bank
								if (DynMusSetUsed == 108) S_ChangeMusic("CHEMACT", 0, true, true); // SiN - Chem
								if (DynMusSetUsed == 109) S_ChangeMusic("CASIACT", 0, true, true); // SiN - Casino
								if (DynMusSetUsed == 110) S_ChangeMusic("AQUAACT", 0, true, true); // SiN - Aqua
								if (DynMusSetUsed == 111) S_ChangeMusic("CSACT", 0, true, true); // SiN - Construct
								if (DynMusSetUsed == 112) S_ChangeMusic("DAMACT", 0, true, true); // SiN - Dam
								if (DynMusSetUsed == 113) S_ChangeMusic("HDCKACT", 0, true, true); // SiN - HiDocks
								if (DynMusSetUsed == 114) S_ChangeMusic("INTRACT", 0, true, true); // SiN - Intr
								if (DynMusSetUsed == 115) S_ChangeMusic("JUNGACT", 0, true, true); // SiN - Jungle
								if (DynMusSetUsed == 116) S_ChangeMusic("MANSACT", 0, true, true); // SiN - Mansion
								if (DynMusSetUsed == 117) S_ChangeMusic("POWACT", 0, true, true); // SiN - Pow
								if (DynMusSetUsed == 118) S_ChangeMusic("XENOACT", 0, true, true); // SiN - Xeno
								if (DynMusSetUsed == 119) S_ChangeMusic("WHACT", 0, true, true); // SiN - Wareh
								if (DynMusSetUsed == 120) S_ChangeMusic("WAWACT", 0, true, true); // SiN - Waw
								if (DynMusSetUsed == 121) S_ChangeMusic("UWACT", 0, true, true); // SiN - Uw
								if (DynMusSetUsed == 122) S_ChangeMusic("THRLMSTA", 0, true, true); // SiN - TMaster
	
								if (DynMusSetUsed == 1001) S_ChangeMusic("WFMAP12C", 0, true, true); // Winter' Fury 1-2
								if (DynMusSetUsed == 1002) S_ChangeMusic("62KRONAF", 0, true, true); // SS2 Kronor 6-2
								if (DynMusSetUsed == 1003) S_ChangeMusic("54ELLENF", 0, true, true); // SS2 Ellenier 5-4
								if (DynMusSetUsed == 1004) S_ChangeMusic("", 0, true, true); // ?
							}
							else
							{
								if (dydudebug_dynmusdisplays) Console.Printf("\c[brick]Calling Randomized Combat Music [%d, roll: %d]\c-", DynMusFightTimer, randmusroll);
								if (randmusroll <= -1)
								{
									randmusroll = random(randompick(-12,-12,-13),37);
									if (randmusroll == 0) S_ChangeMusic("BGMBAT1", 0, true, true);
									if (randmusroll == 1) S_ChangeMusic("BGMBAT2", 0, true, true);
									if (randmusroll == 2) S_ChangeMusic("BGMBAT4", 0, true, true);
									if (randmusroll == 3) S_ChangeMusic("BGMBAT3", 0, true, true);
									if (randmusroll == 4) S_ChangeMusic("BGMBATM", 0, true, true);
									if (randmusroll == 5) S_ChangeMusic("BGMBATA", 0, true, true);
									if (randmusroll == 6) S_ChangeMusic("BGMBATC", 0, true, true);
									if (randmusroll == 7) S_ChangeMusic("BGMBATH", 0, true, true);
									if (randmusroll == 8) S_ChangeMusic("BGMBATH2", 0, true, true);
									if (randmusroll == 9) S_ChangeMusic("BGMBATH3", 0, true, true);
									if (randmusroll == 10) S_ChangeMusic("BGMPURGF", 0, true, true);
									if (randmusroll == 11) S_ChangeMusic("BGMHELLF", 0, true, true);
									if (randmusroll == 12) S_ChangeMusic("BGMMOTHF", 0, true, true);
									if (randmusroll == 13) S_ChangeMusic("SILOACT", 0, true, true); // SiN - Silo
									if (randmusroll == 14) S_ChangeMusic("GORGACT", 0, true, true); // SiN - Gorge
									if (randmusroll == 15) S_ChangeMusic("BIOACT", 0, true, true); // SiN - BioTech
									if (randmusroll == 16) S_ChangeMusic("CORACT", 0, true, true); // SiN - Coral
									if (randmusroll == 17) S_ChangeMusic("MUNTACT", 0, true, true); // SiN - Munt
									if (randmusroll == 18) S_ChangeMusic("MANEACT", 0, true, true); // SiN - Mane
									if (randmusroll == 19) S_ChangeMusic("BANKACT", 0, true, true); // SiN - Bank
									if (randmusroll == 20) S_ChangeMusic("CHEMACT", 0, true, true); // SiN - Chem
									if (randmusroll == 21) S_ChangeMusic("CASIACT", 0, true, true); // SiN - Casino
									if (randmusroll == 22) S_ChangeMusic("AQUAACT", 0, true, true); // SiN - Aqua
									if (randmusroll == 23) S_ChangeMusic("WFMAP12C", 0, true, true); // Winter' Fury 1-2
									if (randmusroll == 24) S_ChangeMusic("62KRONAF", 0, true, true); // SS2 Kronor 6-2
									if (randmusroll == 25) S_ChangeMusic("54ELLENF", 0, true, true); // SS2 Ellenier 5-4
									if (randmusroll == 26) S_ChangeMusic("CSACT", 0, true, true); // SiN - Construct
									if (randmusroll == 27) S_ChangeMusic("DAMACT", 0, true, true); // SiN - Dam
									if (randmusroll == 28) S_ChangeMusic("HDCKACT", 0, true, true); // SiN - HiDocks
									if (randmusroll == 29) S_ChangeMusic("INTRACT", 0, true, true); // SiN - Intr
									if (randmusroll == 30) S_ChangeMusic("JUNGACT", 0, true, true); // SiN - Jungle
									if (randmusroll == 31) S_ChangeMusic("MANSACT", 0, true, true); // SiN - Mansion
									if (randmusroll == 32) S_ChangeMusic("POWACT", 0, true, true); // SiN - Pow
									if (randmusroll == 33) S_ChangeMusic("XENOACT", 0, true, true); // SiN - Xeno
									if (randmusroll == 34) S_ChangeMusic("WHACT", 0, true, true); // SiN - Wareh
									if (randmusroll == 35) S_ChangeMusic("WAWACT", 0, true, true); // SiN - Waw
									if (randmusroll == 36) S_ChangeMusic("UWACT", 0, true, true); // SiN - Uw
									if (randmusroll == 37) S_ChangeMusic("THRLMSTA", 0, true, true); // SiN - TMaster
									if (randmusroll == 38) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 39) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 40) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 41) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 42) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 43) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 44) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 45) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 46) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 47) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 48) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 49) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 50) S_ChangeMusic("", 0, true, true); // ?
								}
							}
							DynMusActCall = false;
						}
						DynMusFightTimer--;
						if (dydudebug_dynmusdisplays) 
						{
							if (exex_dynamicmusic == 2) Console.Printf("\c[fire]FightTimer: %d\c-, \c[green]RNG#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusFightTimer, randmusroll, playeractiontimer, playeractiontimerfrag);
																		else Console.Printf("\c[fire]FightTimer: %d\c-, \c[green]Set#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusFightTimer, DynMusSetUsed, playeractiontimer, playeractiontimerfrag);
						}
						if (DynMusFightTimer <= 0) 
						{
							if (random(1,32) <= 31) DynMusChangeChance++;
							else
							{
								if (random(1,2) <= 1) DynMusChangeChance += 2;
							}
							DynMusFightTimer = 0;
							if (exex_dynamicmusic == 3 && random(1,32) <= DynMusChangeChance + random(0,2)) 
							{
								DynMusSetUsed = randompick(random(0,23),random(101,122),random(1001,1003));
								DynMusChangeChance = 1;
								snglen = 0;
							}
							playeractiontimer = 0;
							playeractiontimerfrag = 0;
						}
					}
				}
			}
			else
			{
				if (DynMusFightTimer > -1 || DynMusCalmTimer > -1)
				{
					DynMusFightTimer = -1;
					DynMusCalmTimer = -1;
					randmusroll = -1;
					playeractiontimer = -1;
					playeractiontimerfrag = -1;
					DynMusChangeChance = 1;
					if (dydudebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (DynMusic Turned off)\c-");
					S_ChangeMusic("*", 0, true, true);
				}
			}
		}
		else
		{
			if (DynMusFightTimer > -1 || DynMusCalmTimer > -1)
			{
				DynMusFightTimer = -1;
				DynMusCalmTimer = -1;
				randmusroll = -1;
				playeractiontimer = -1;
				playeractiontimerfrag = -1;
				DynMusChangeChance = 1;
				if (dydudebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (DynMusic Turned off)\c-");
				S_ChangeMusic("*", 0, true, true);
			}
		}
	}
	
	void FlatDefenseCalc()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		double armoradd;

		double baseflatmul = 0.01;
		if (skill <= 1) baseflatmul = 0.0125;
		if (skill == 1) baseflatmul = 0.01125;
		if (skill == 2) baseflatmul = 0.01;
		if (skill == 3) baseflatmul = 0.00875;
		if (skill >= 4) baseflatmul = 0.0075;
		int ActualLevel = A_CheckActualLevel(1);
		BaseFlatDefValue = ((ActualLevel * 0.1) + (TruePlayerDEF * 0.1));
		BaseFlatDefValueCrush = ((ActualLevel * 0.04) + (TruePlayerDEF * 0.04));
		BaseFlatDefValueDmgFlr = ((ActualLevel * 0.02) + (TruePlayerDEF * 0.02));
		BaseFlatDefValueHUD = ((ActualLevel * 0.1) + (TruePlayerDEF * 0.1));
		BaseFlatDefValue *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		BaseFlatDefValueCrush *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		BaseFlatDefValueDmgFlr *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		BaseFlatDefValueHUD *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		if (owner.CountInv("FistPlayerBlock"))
		{
			BaseFlatDefValue *= 1.125;
			BaseFlatDefValueCrush *= 1.05;
			BaseFlatDefValueDmgFlr *= 1.025;
			BaseFlatDefValueHUD *= 1.125;
		}
		if (owner.CountInv("FistPlayerBlock2"))
		{
			BaseFlatDefValue *= 1.25;
			BaseFlatDefValueCrush *= 1.10;
			BaseFlatDefValueDmgFlr *= 1.05;
			BaseFlatDefValueHUD *= 1.25;
		}
		if (owner.CountInv("FistPlayerBlock3"))
		{
			BaseFlatDefValue *= 1.5;
			BaseFlatDefValueCrush *= 1.20;
			BaseFlatDefValueDmgFlr *= 1.10;
			BaseFlatDefValueHUD *= 1.5;
		}
		if (owner.CountInv("FistPlayerBlock4"))
		{
			BaseFlatDefValue *= 2.00;
			BaseFlatDefValueCrush *= 1.40;
			BaseFlatDefValueDmgFlr *= 1.20;
			BaseFlatDefValueHUD *= 2.00;
		}
		if (owner.CountInv("FistPlayerBlockExtra"))
		{
			BaseFlatDefValue *= 1.25;
			BaseFlatDefValueCrush *= 1.10;
			BaseFlatDefValueDmgFlr *= 1.05;
			BaseFlatDefValueHUD *= 1.25;
		}
		if (owner.CountInv("FistPlayerBlockExtra2"))
		{
			BaseFlatDefValue *= 1.25;
			BaseFlatDefValueCrush *= 1.10;
			BaseFlatDefValueDmgFlr *= 1.05;
			BaseFlatDefValueHUD *= 1.25;
		}
		if (owner.CountInv("PowerGuard"))
		{
			BaseFlatDefValue *= 2.00;
			BaseFlatDefValueCrush *= 1.40;
			BaseFlatDefValueDmgFlr *= 1.20;
			BaseFlatDefValueHUD *= 2.00;
		}
		if (owner.CountInv("CricketBatGuard"))
		{
			BaseFlatDefValue *= 1.25;
			BaseFlatDefValueCrush *= 1.10;
			BaseFlatDefValueDmgFlr *= 1.05;
			BaseFlatDefValueHUD *= 1.25;
		}
		if (owner.CountInv("CricketBatGuard2"))
		{
			BaseFlatDefValue *= 1.5;
			BaseFlatDefValueCrush *= 1.20;
			BaseFlatDefValueDmgFlr *= 1.10;
			BaseFlatDefValueHUD *= 1.5;
		}
		if (owner.CountInv("CricketBatGuard3"))
		{
			BaseFlatDefValue *= 2.0;
			BaseFlatDefValueCrush *= 1.40;
			BaseFlatDefValueDmgFlr *= 1.00;
			BaseFlatDefValueHUD *= 2.0;
		}
		if (owner.CountInv("CricketBatSwingDEF"))
		{
			BaseFlatDefValue *= 1.25;
			BaseFlatDefValueCrush *= 1.10;
			BaseFlatDefValueDmgFlr *= 1.05;
			BaseFlatDefValueHUD *= 1.25;
		}
		if (owner.CountInv("CricketBatSwingDEF2"))
		{
			BaseFlatDefValue *= 1.5;
			BaseFlatDefValueCrush *= 1.20;
			BaseFlatDefValueDmgFlr *= 1.10;
			BaseFlatDefValueHUD *= 1.5;
		}
		if (owner.CountInv("EWShieldIdleMode"))
		{
			BaseFlatDefValue *= 1.15;
			BaseFlatDefValueCrush *= 1.06;
			BaseFlatDefValueDmgFlr *= 1.03;
			BaseFlatDefValueHUD *= 1.15;
		}
		if (owner.CountInv("EWShieldDefendMode"))
		{
			BaseFlatDefValue *= 1.45;
			BaseFlatDefValueCrush *= 1.18;
			BaseFlatDefValueDmgFlr *= 1.09;
			BaseFlatDefValueHUD *= 1.45;
		}
		if (owner.CountInv("EWShieldDefendModeExtra"))
		{
			BaseFlatDefValue *= 1.225;
			BaseFlatDefValueCrush *= 1.09;
			BaseFlatDefValueDmgFlr *= 1.045;
			BaseFlatDefValueHUD *= 1.225;
		}
		if (berserked)
		{
			BaseFlatDefValue *= 1.2;
			BaseFlatDefValueCrush *= 1.08;
			BaseFlatDefValueDmgFlr *= 1.04;
			BaseFlatDefValueHUD *= 1.2;
		}
		if (Owner.CountInv("PowerWineBuffWeak"))
		{
			BaseFlatDefValue *= 1.1;
			BaseFlatDefValueCrush *= 1.04;
			BaseFlatDefValueDmgFlr *= 1.02;
			BaseFlatDefValueHUD *= 1.1;
		}
		if (Owner.CountInv("PowerWineBuffIPWeak"))
		{
			BaseFlatDefValue *= 1.15;
			BaseFlatDefValueCrush *= 1.06;
			BaseFlatDefValueDmgFlr *= 1.03;
			BaseFlatDefValueHUD *= 1.15;
		}
		if (Owner.CountInv("PowerWineBuffStrong"))
		{
			BaseFlatDefValue *= 1.2;
			BaseFlatDefValueCrush *= 1.08;
			BaseFlatDefValueDmgFlr *= 1.04;
			BaseFlatDefValueHUD *= 1.2;
		}
		if (Owner.CountInv("PowerWineBuffIPStrong"))
		{
			BaseFlatDefValue *= 1.4;
			BaseFlatDefValueCrush *= 1.16;
			BaseFlatDefValueDmgFlr *= 1.08;
			BaseFlatDefValueHUD *= 1.4;
		}
		if (Owner.CountInv("PowerWineBuffStrongest"))
		{
			BaseFlatDefValue *= 1.3;
			BaseFlatDefValueCrush *= 1.12;
			BaseFlatDefValueDmgFlr *= 1.06;
			BaseFlatDefValueHUD *= 1.3;
		}
		if (Owner.CountInv("PowerWineBuffIPStrongest"))
		{
			BaseFlatDefValue *= 1.7;
			BaseFlatDefValueCrush *= 1.28;
			BaseFlatDefValueDmgFlr *= 1.14;
			BaseFlatDefValueHUD *= 1.7;
		}
		if (Owner.CountInv("PowerWineBuffStrongestEven"))
		{
			BaseFlatDefValue *= 1.4;
			BaseFlatDefValueCrush *= 1.16;
			BaseFlatDefValueDmgFlr *= 1.08;
			BaseFlatDefValueHUD *= 1.4;
		}
		if (Owner.CountInv("PowerWineBuffIPStrongestEven"))
		{
			BaseFlatDefValue *= 2.1;
			BaseFlatDefValueCrush *= 1.44;
			BaseFlatDefValueDmgFlr *= 1.22;
			BaseFlatDefValueHUD *= 2.1;
		}
		if (Owner.CountInv("PowerWineBuffIPMaximum"))
		{
			BaseFlatDefValue *= 2.6;
			BaseFlatDefValueCrush *= 1.64;
			BaseFlatDefValueDmgFlr *= 1.32;
			BaseFlatDefValueHUD *= 2.6;
		}
		BaseFlatDefValue *= exex_natflatdeffactor;
		BaseFlatDefValueCrush *= exex_natflatdeffactor;
		BaseFlatDefValueDmgFlr *= exex_natflatdeffactor;
		BaseFlatDefValueHUD *= exex_natflatdeffactor;
		BaseFlatDefValue *= exex_flatdefensefactor;
		BaseFlatDefValueCrush *= exex_flatdefensefactor;
		BaseFlatDefValueDmgFlr *= exex_flatdefensefactor;
		BaseFlatDefValueHUD *= exex_flatdefensefactor;
		
		//**********************
		//* Armor Defense Calc *
		//**********************
		ArmorDefValue = 0;
		ArmorDefValueCrush = 0;
		ArmorDefValueDmgFlr = 0;
		ArmorDefValueHUD = 0;
		if (KnightGownTier == 1)
		{
			if (owner.CountInv("KnightGownIP1Buff")) 
			{
				armoradd = ((ActualLevel * 0.0625) + (TruePlayerDEF * 0.0625));
				
				ArmorDefValue += (random(2,4) + armoradd);
				ArmorDefValueCrush += randompick(1,1,2,2,3);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,0,1,1,2,2,3,3);
				ArmorDefValueHUD = 4 + armoradd;
			}
			else 
			{
				armoradd = ((ActualLevel * 0.0125) + (TruePlayerDEF * 0.0125));
				
				ArmorDefValue += (random(0,1) + armoradd);
				ArmorDefValueCrush += randompick(0,0,0,0,1);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,0,0,0,0,0,0,1);
				ArmorDefValueHUD = 1 + armoradd;
			}
		}
		if (KnightGownTier == 2)
		{
			if (owner.CountInv("KnightGownIP2Buff"))
			{
				armoradd = ((ActualLevel * 0.125) + (TruePlayerDEF * 0.125));
				
				ArmorDefValue += (random(5,8) + armoradd);
				ArmorDefValueCrush += randompick(2,2,3,3,4);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,1,1,2,2,3,3,4);
				ArmorDefValueHUD = 8 + armoradd;
			}
			else 
			{
				armoradd = ((ActualLevel * 0.025) + (TruePlayerDEF * 0.025));
				
				ArmorDefValue += (random(1,2) + armoradd);
				ArmorDefValueCrush += randompick(0,0,0,1,1);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,0,0,0,0,0,1,1);
				ArmorDefValueHUD = 2 + armoradd;
			}
		}
		if (KnightGownTier == 3)
		{
			if (owner.CountInv("KnightGownIP3Buff"))
			{
				armoradd = ((ActualLevel * 0.1875) + (TruePlayerDEF * 0.1875));
				
				ArmorDefValue += (random(8,12) + armoradd);
				ArmorDefValueCrush += randompick(3,3,4,4,5);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,1,1,2,2,3,3,4,4);
				ArmorDefValueHUD = 12 + armoradd;
			}
			else
			{
				armoradd = ((ActualLevel * 0.0375) + (TruePlayerDEF * 0.0375));
				
				ArmorDefValue += (random(2,3) + armoradd);
				ArmorDefValueCrush += randompick(0,0,1,1,2);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,0,0,0,0,1,1,2);
				ArmorDefValueHUD = 3 + armoradd;
			}
		}
		if (KnightGownTier >= 4)
		{
			if (owner.CountInv("KnightGownIP4Buff")) 
			{
				armoradd = ((ActualLevel * 0.3125) + (TruePlayerDEF * 0.3125));
				
				ArmorDefValue += (random(18,20) + armoradd);
				ArmorDefValueCrush += randompick(5,5,6,6,7);
				ArmorDefValueDmgFlr += randompick(0,0,0,1,1,2,2,3,3,4,4,5,5);
				ArmorDefValueHUD = 20 + armoradd;
			}
			else
			{
				armoradd = ((ActualLevel * 0.0625) + (TruePlayerDEF * 0.0625));
				
				ArmorDefValue += (random(4,5) + armoradd);
				ArmorDefValueCrush += randompick(1,1,2,2,3);
				ArmorDefValueDmgFlr += randompick(0,0,0,0,0,0,0,0,1,1,2,2,3);
				ArmorDefValueHUD = 5 + armoradd;
			}
		}
		double GuardVal = 2;
		if (owner.CountInv("PowerGuard"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.05;
		if (owner.CountInv("CricketBatGuard"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.125;
		if (owner.CountInv("CricketBatGuard2"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.125;
		if (owner.CountInv("EWShieldIdleMode"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.375;
		if (owner.CountInv("EWShieldDefendMode"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.25;
		if (owner.CountInv("EWShieldDefendModeExtra"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.1;
		if (berserked)
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		ArmorDefValue *= exex_armflatdeffactor;
		ArmorDefValueCrush *= exex_armflatdeffactor;
		ArmorDefValueDmgFlr *= exex_armflatdeffactor;
		ArmorDefValueHUD *= exex_armflatdeffactor;
		ArmorDefValue *= exex_flatdefensefactor;
		ArmorDefValueCrush *= exex_flatdefensefactor;
		ArmorDefValueDmgFlr *= exex_flatdefensefactor;
		ArmorDefValueHUD *= exex_flatdefensefactor;
	}
	
	void CritRateCalc()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);

		owner.A_SetInventory("DealCriticalHit",0);
		CritChance = 128;
		if (exex_expenabled) CritChance = (128 - (ActualLevel * 0.0625));
		if (CritChance <= 64) CritChance = 64;
		if (owner.CountInv("PowerDouble")) CritChance *= 0.75;
		if (owner.CountInv("PlayerDashing")) CritChance *= 0.875;
		if (owner.CountInv("PlayerBatDashing")) CritChance *= 0.875;
		if (owner.CountInv("MysteryItem")) CritChance *= 0.25;
		CritRoll = random(1,CritChance);
		if (CritRoll <= 1) owner.A_SetInventory("DealCriticalHit",1);
	}
	
	void ArmorTierStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		
		name armorclasstype = "KGArmor";
		name armorclasstype2 = "ArmorScrapSilent";
		int currentarmoramt = Owner.CountInv(armorclasstype);
		if (exex_armoritemdifficulty >= 3)
		{
			ArmorItemGive0 = random(12,13);
			ArmorItemMax0 = ArmorItemGive0;
			ArmorItemGive1 = 25;
			ArmorItemMax1 = 50;
			ArmorItemGive2 = 50;
			ArmorItemMax2 = 100;
			ArmorItemGive3 = 100;
			ArmorItemMax3 = 200;
			ArmorItemGive4 = 200;
			ArmorItemMax4 = 400;
			if (prevarmordifficulty == 0) // Take 80% of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.8); i++) owner.A_TakeInventory(armorclasstype,1);
			}
			if (prevarmordifficulty == 1) // Take 60% of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.6); i++) owner.A_TakeInventory(armorclasstype,1);
			}
			if (prevarmordifficulty == 2) // Take 50% of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.5); i++) owner.A_TakeInventory(armorclasstype,1);
			}
		}
		else
		if (exex_armoritemdifficulty == 2)
		{
			ArmorItemGive0 = 25;
			ArmorItemMax0 = ArmorItemGive0;
			ArmorItemGive1 = 50;
			ArmorItemMax1 = 100;
			ArmorItemGive2 = 100;
			ArmorItemMax2 = 200;
			ArmorItemGive3 = 200;
			ArmorItemMax3 = 400;
			ArmorItemGive4 = 400;
			ArmorItemMax4 = 800;
			if (prevarmordifficulty == 0) // Take 60% of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.6); i++) owner.A_TakeInventory(armorclasstype,1);
			}
			if (prevarmordifficulty == 1) // Take 25% of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.25); i++) owner.A_TakeInventory(armorclasstype,1);
			}
			if (prevarmordifficulty >= 3) // Give 100% of Current Armor amount
			{
				for (int i; i < (currentarmoramt); i++) owner.A_GiveInventory(armorclasstype2,1);
			}
		}
		else
		if (exex_armoritemdifficulty == 1)
		{
			ArmorItemGive0 = 50;
			ArmorItemMax0 = ArmorItemGive0;
			ArmorItemGive1 = random(62,63);
			ArmorItemMax1 = 125;
			ArmorItemGive2 = 125;
			ArmorItemMax2 = 250;
			ArmorItemGive3 = 250;
			ArmorItemMax3 = 500;
			ArmorItemGive4 = 500;
			ArmorItemMax4 = 1000;
			if (prevarmordifficulty == 0) // Take half of Current Armor amount
			{
				for (int i; i < (currentarmoramt * 0.5); i++) owner.A_TakeInventory(armorclasstype,1);
			}
			if (prevarmordifficulty == 2) // Give 25% more of current armor amount
			{
				for (int i; i < (currentarmoramt * 0.25); i++) owner.A_GiveInventory(armorclasstype2,1);
			}
			if (prevarmordifficulty >= 3) // Give 150% more of current armor amount
			{
				for (int i; i < (currentarmoramt * 1.5); i++) owner.A_GiveInventory(armorclasstype2,1);
			}
		}
		else
		if (exex_armoritemdifficulty <= 0)
		{
			ArmorItemGive0 = 50;
			ArmorItemMax0 = 100;
			ArmorItemGive1 = 125;
			ArmorItemMax1 = 250;
			ArmorItemGive2 = 250;
			ArmorItemMax2 = 500;
			ArmorItemGive3 = 500;
			ArmorItemMax3 = 1000;
			ArmorItemGive4 = 1000;
			ArmorItemMax4 = 2000;
			if (prevarmordifficulty == 1) // Give 2x Current Armor amount
			{
				for (int i; i < currentarmoramt; i++) owner.A_GiveInventory(armorclasstype2,1);
			}
			if (prevarmordifficulty == 2) // Give 2.5x current armor amount
			{
				for (int i; i < (currentarmoramt * 1.5); i++) owner.A_GiveInventory(armorclasstype2,1);
			}
			if (prevarmordifficulty >= 3) // Give 5x current armor amount
			{
				for (int i; i < (currentarmoramt * 4); i++) owner.A_GiveInventory(armorclasstype2,1);
			}
		}
		prevarmordifficulty = exex_armoritemdifficulty;
	}
	
	void MaxHealthStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		
		HPRegenTimerMax = 7000 - ((StaminaLevel * 5) * 35);
		HPDegenTimerMax = 1750 + ((StaminaLevel * 5) * 17.5);
		CurrentHealth = owner.player.mo.health;
		int HealthBonusAdd2 = HealthBonusAdd;
		int HealthLevelAdd2 = HealthLevelAdd;
		HealthNoRPGAdd2 = 0;
		if (!exex_expenabled)
		{
			if (skill <= 0) HealthBonusAdd2 *= 4.0;
			if (skill == 1) HealthBonusAdd2 *= 3.5;
			if (skill == 2) HealthBonusAdd2 *= 3.0;
			if (skill == 3) HealthBonusAdd2 *= 2.5;
			if (skill >= 4) HealthBonusAdd2 *= 2.0;
			HealthLevelAdd2 = 0;
			if (skill <= 0) HealthLevelAdd2 = (HealthNoRPGADD * 4.0);
			if (skill == 1) HealthLevelAdd2 = (HealthNoRPGADD * 3.5);
			if (skill == 2) HealthLevelAdd2 = (HealthNoRPGADD * 3.0);
			if (skill == 3) HealthLevelAdd2 = (HealthNoRPGADD * 2.5);
			if (skill >= 4) HealthLevelAdd2 = (HealthNoRPGADD * 2.0);
			
			if ((A_CheckDDGame()))
			{
				if (DD_RoseMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_GameMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_MossMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_GlobeMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_SphinxMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_HandMother1) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_HandMother2) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (DD_TrueHandMother) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.125);
				if (AFD_Krag) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (AFD_Quisling) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (AFD_Lauritz) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (AFD_Jorgensen1) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (AFD_Jorgensen2) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (AFD_JorgCannon) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.2);
				if (CoS_Fafnir) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.25);
				if (CoS_FractalHens) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.25);
				if (CoS_ForsakenJorg) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.25);
				if (CoS_EvilDinah) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.25);
				if (CoS_Tempest) HealthNoRPGAdd2 += (BaseStartMaxHealth * 0.25);
				HealthNoRPGAdd2 *= 0.5;
			}
		}
		MaxHealthTrue = (BaseStartMaxHealth + int(HealthNoRPGAdd2) + HealthLevelAdd2 + HealthBonusAdd2);
	}
	
	void HUDStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			if (IPPikePokeTimer > 0) IPPikePokeTimer--;
			else
			{
				IPPikePokeTimes = 0;
			}
			
			if (IPCallOutCooldown > 0) IPCallOutCooldown--;
			if (OneLinerCooldown > 0) OneLinerCooldown--;
		
			if (afasdroptimer > 0) afasdroptimer--;
			
			if (HPDmgHUDTimer > 0) HPDmgHUDTimer--;
			else
			{
				HPHUDShakeType = 0;
				HPDmgHUDAmt = 0;
			}
			if (APDmgHUDTimer > 0) APDmgHUDTimer--;
			else
			{
				APHUDShakeType = 0;
				APDmgHUDAmt = 0;
			}
			if (HPRecHUDTimer > 0) HPRecHUDTimer--; 
			else 
			{
				HPRecHUDAmt = 0;
				HPHUDPulseType = 0;
				HPHUDPulseTimeP = 0;
			}
			if (APRecHUDTimer > 0) APRecHUDTimer--; 
			else
			{
				APRecHUDAmt = 0;
				APHUDPulseType = 0;
				APHUDPulseTimeP = 0;
			}
			if (IPGainHUDTimer > 0) IPGainHUDTimer--;
			else
			{
				IPGainHUDAmt = 0;
			}
			if (IPLossHUDTimer > 0) IPLossHUDTimer--;
			else
			{
				IPLossHUDAmt = 0;
			}
			if (EXPGainHUDTimer > 0) EXPGainHUDTimer--;
			else
			{
				EXPGainHUDAmt = 0;
				if (KillComboCount) KillComboCount = 0;
			}
			if (MaxHPIncTimer > 0) MaxHPIncTimer--; else MaxHPIncAmt = 0;
			if (MaxDashIncTimer > 0) MaxDashIncTimer--; else MaxDashIncAmt = 0;
			if (IPHUDPulseTimer > 0) IPHUDPulseTimer--; else ItemPointsSession = 0;
			if (HPHUDShakeTime > 0) HPHUDShakeTime--;
			if (APHUDShakeTime > 0) APHUDShakeTime--;
			if (IPHUDShakeTimer > 0) IPHUDShakeTimer--;
			
			if (drowndebufflevel > 0)
			{
				owner.A_SetInventory("DrownDebuffBase",1);
				if (dydudebug_airmeter) Console.Printf("drowndebufflevel: %d, drowndebufftimer: %d", drowndebufflevel ,drowndebufftimer);
				if (owner.CountInv("AirMeter") > 0)
				{
					if (drowndebuginit)
					{
						drowndebuffmaxtimer = drowndebufftimer;
						drownmaxtimermod = (drowndebuffmaxtimer / drowndebufflevel);
						drowndebuginit = false;
					}
					if (drowndebufftimer) 
					{
						drowndebufftimer--;
						if (drowndebufftimer % drownmaxtimermod == 1)
						{
							drowndebufflevel--;
							if (drowndebufflevel <= 0) 
							{
								drowndebufflevel = 0;
								drowndebufftimer = 0;
								owner.A_SetInventory("DrownDebuffBase",0);
							}
						}
					}
					else 
					{
						drowndebufflevel = 0;
						owner.A_SetInventory("DrownDebuffBase",0);
					}
				}
			}
			else
			{
				drowndebufftimer = 0;
				owner.A_SetInventory("DrownDebuffBase",0);
			}
		}
	}
	
	//
	void HPRegenStuff()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		
		int healpoolaccel = 0;
		// The Bath in the Upper Level above the Manse Entrance
		if (owner.CountInv("IsAppetite") && level.levelnum == 21)
		{
			if (owner.cursector && owner.cursector.Index() == 424)
			{
				healpoolaccel = 1;
				CoSHealPoolInt++;
				//Console.Printf("CurrentHealth: %d / %d, CoSHealPoolInt: %d / 16", CurrentHealth, MaxHealthTrue, CoSHealPoolInt);
				if (CurrentHealth < MaxHealthTrue)
				{
					if (CoSHealPoolInt >= 32)
					{
						int rec = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
						if (berserked) rec = randompick(1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.8) / 100;
						rec *= 1.0 + (GoldApples * 0.005) + (PlatinumApples * 0.0125) + (PrismaticApples * 0.05);
						if (rec < 1) rec = 1;
						if (rec && dyduhud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
						
						CurrentHealth += rec;
						if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
						owner.player.health = owner.player.mo.health = CurrentHealth;
						owner.A_SetBlend("00 00 FF",0.125,random(6,9));
						CoSHealPoolInt = 0;
					}
				}
				else
				{
					CoSHealPoolInt = 0;
				}
			}
			else
			{
				CoSHealPoolInt = 0;
			}
		}
		// Handles Carnival of Souls' Healing Pool in the Wyck Suite V:
		if (owner.CountInv("IsCarnOfSouls") && level.levelnum == 41)
		{
			//CurrentHealth = owner.player.mo.health;
			//if (owner.cursector) Console.Printf("Sector #: %d", owner.cursector.Index());
			if (owner.cursector && owner.cursector.Index() == 582)
			{
				healpoolaccel = 2;
				CoSHealPoolInt++;
				//Console.Printf("CurrentHealth: %d / %d, CoSHealPoolInt: %d / 16", CurrentHealth, MaxHealthTrue, CoSHealPoolInt);
				if (CurrentHealth < MaxHealthTrue)
				{
					if (CoSHealPoolInt >= 16)
					{
						int rec = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
						if (berserked) rec = randompick(1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.8) / 100;
						rec *= 1.0 + (GoldApples * 0.005) + (PlatinumApples * 0.0125) + (PrismaticApples * 0.05);
						if (rec < 1) rec = 1;
						if (rec && dyduhud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
						
						CurrentHealth += rec;
						if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
						owner.player.health = owner.player.mo.health = CurrentHealth;
						owner.A_SetBlend("00 00 FF",0.125,random(6,9));
						CoSHealPoolInt = 0;
					}
				}
				else
				{
					CoSHealPoolInt = 0;
				}
			}
			else
			{
				CoSHealPoolInt = 0;
			}
		}
		
		if (weapon is "EvilWarriorShield")
		{
		}
		else
		{
			if (owner.CountInv("EWShieldIdleMode") > 0) owner.SetInventory("EWShieldIdleMode",0);
			if (owner.CountInv("EWShieldDefendMode") > 0) owner.SetInventory("EWShieldDefendMode",0);
			if (owner.CountInv("EWShieldDefendModeExtra") > 0) owner.SetInventory("EWShieldDefendModeExtra",0);
			if (owner.CountInv("HWShieldBlockHold") > 0) owner.SetInventory("HWShieldBlockHold",0);
		}

		if (CurrentHealth <= 0)
		{
			Owner.A_SetInventory("PlayerIsDead", 1); 
		}
		else
		if (CurrentHealth > 0)
		{
			if (dydudebug_hpregen) Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);
			
			Owner.A_SetInventory("PlayerIsDead", 0);
			//****************************************
			//*Get Health Ratio & Health Level Checks*
			//****************************************
			int TempMaxHealthTrue = MaxHealthTrue;
			if (IsMorphed == 1) TempMaxHealthTrue *= 0.3;
			if (playeractor && TempMaxHealthTrue > 0)
			{
				HealthRatio = (CurrentHealth * 1000) / TempMaxHealthTrue;
				HealthRatio = clamp(HealthRatio, 0, 3000);
				
				if (HealthRatio != PrevHealthRatio)
				{
					if (HealthRatio > 1500)
					{
						if (HealthRatio > 2250)
						{
							if (HealthRatio > 2875)
							{
								Owner.A_SetInventory("OverFullHealth3", 1);
								Owner.A_SetInventory("OverFullHealth2", 0);
								Owner.A_SetInventory("OverFullHealth1", 0);
							}
							else
							{
								Owner.A_SetInventory("OverFullHealth3", 0);
								Owner.A_SetInventory("OverFullHealth2", 1);
								Owner.A_SetInventory("OverFullHealth1", 0);
							}
						}
						else
						{
							Owner.A_SetInventory("OverFullHealth3", 0);
							Owner.A_SetInventory("OverFullHealth2", 0);
							Owner.A_SetInventory("OverFullHealth1", 1);
						}
						Owner.A_SetInventory("NormalHealth", 1);
						Owner.A_SetInventory("DecentHealth", 0);
						Owner.A_SetInventory("LowHealth", 0);
						Owner.A_SetInventory("CriticalHealth", 0);
					}
					else
					{
						Owner.A_SetInventory("OverFullHealth3", 0);
						Owner.A_SetInventory("OverFullHealth2", 0);
						Owner.A_SetInventory("OverFullHealth1", 0);
						if (HealthRatio < 625)
						{
							if (HealthRatio < 167)
							{
								if (HealthRatio < 21)
								{
									Owner.A_SetInventory("NormalHealth", 0);
									Owner.A_SetInventory("DecentHealth", 0);
									Owner.A_SetInventory("LowHealth", 0);
									Owner.A_SetInventory("CriticalHealth", 1);
								}
								else 
								{
									Owner.A_SetInventory("NormalHealth", 0);
									Owner.A_SetInventory("DecentHealth", 0);
									Owner.A_SetInventory("LowHealth", 1);
									Owner.A_SetInventory("CriticalHealth", 0);
								}
							}
							else 
							{
								Owner.A_SetInventory("NormalHealth", 0);
								Owner.A_SetInventory("DecentHealth", 1);
								Owner.A_SetInventory("LowHealth", 0);
								Owner.A_SetInventory("CriticalHealth", 0);
							}
						}
						else
						{
							Owner.A_SetInventory("NormalHealth", 1);
							Owner.A_SetInventory("DecentHealth", 0);
							Owner.A_SetInventory("LowHealth", 0);
							Owner.A_SetInventory("CriticalHealth", 0);
						}
					}
					if (CurrentHealth >= TempMaxHealthTrue) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
					
					PrevHealthRatio = HealthRatio;
				}
			}
			
			int NTimerMax = 31500;
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (!owner.CountInv("IsUnconscious"))
				{
					if (owner.CountInv("AngerLevelEventN") > 0)
					{
						if (AngerLevelEventNTimer <= 0)
						{
							AngerLevelEventNTimer = NTimerMax;
						}
						else
						if (AngerLevelEventNTimer > 0)
						{
							AngerLevelEventNTimer--;
							if (AngerLevelEventNTimer <= 0)
							{
								owner.A_TakeInventory("AngerLevelEventN",1);
								if (owner.CountInv("AngerLevelEventN") <= 0) AngerLevelEventNTimer = 0;
																												else AngerLevelEventNTimer += NTimerMax;
							}
						}
						//Console.Printf("\c[orange]AngerLevelEventN: %d, \c[green]AngerLevelEventNTimer: %d / %d", owner.CountInv("AngerLevelEventN"), AngerLevelEventNTimer, NTimerMax);
					}
					else AngerLevelEventNTimer = 0;
				}

				// Check Item Points
				int ActualLevel = A_CheckActualLevel(1);
				int IPTimerIncMod = 0;
				int IPTimerInc;
				// Berserk = Gradually gain IP
				if (berserked && IPNoGainTimer <= 0 && !owner.CountInv("IsUnconscious"))
				{
					double berserkIPGain;
					berserkIPGain = 0.0025;
					if (ItemPoints <= 100.0000)
					{
						if (ItemPoints >= 75.0001 && ItemPoints <= 100.0000)
						{
							berserkIPGain += 0.0005;
						}
						else
						if (ItemPoints >= 50.0001 && ItemPoints <= 75.0000)
						{
							berserkIPGain += 0.00125;
						}
						else
						if (ItemPoints >= 25.0001 && ItemPoints <= 50.0000)
						{
							berserkIPGain += 0.003125;
						}
						else
						if (ItemPoints <= 25.0000)
						{
							berserkIPGain += 0.0078125;
						}
					}
					double BerIPMulti = (0.25 + (ActualLevel * 0.03));
					if (BerIPMulti >= 1.00 || ActualLevel >= 25)
					{
						BerIPMulti = (1.00 + ((ActualLevel - 25) * 0.01334));
						if (BerIPMulti >= 2.00 || ActualLevel >= 100) BerIPMulti = 2.00;
					}
					
					berserkIPGain *= BerIPMulti;
					if (IPDissipateTimer < 0) 
					{
						if (random(1,16) <= 1) berserkIPGain *= 3;
						else 
						{
							if (random(1,4) <= 1) berserkIPGain *= 2.5;
							else berserkIPGain *= 2;
						}
						IPTimerIncMod += 1;
					}
					else 
					{
						IPTimerIncMod += 10;
					}
					berserkIPGain *= (1.0 + (ActualLevel * 0.0025));
					if (owner.CountInv("AngerLevelEvent") || owner.CountInv("AngerLevelEventN")) berserkIPGain *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.0005) + (owner.CountInv("AngerLevelEventN") * 0.00005));
					//Console.Printf("\c[red]berserkIPGain: %.8f, \c[green]IPDissipateTimer: %d / 2100, \c[yellow]IPTimerInc: %d tics, \c[purple]BerIPMulti: %.8f", berserkIPGain, IPDissipateTimer, IPTimerInc, BerIPMulti);

					double oldItemPoints = ItemPoints;
					ItemPoints += berserkIPGain;
					if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
					if (ItemPoints >= oldItemPoints) 
					{
						berserkIPGain = (ItemPoints - oldItemPoints);
						if (dydudebug_ipdisplays2) Console.Printf("\c[red]berserkIPGain: %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", berserkIPGain, oldItemPoints, ItemPoints);
					}
					globalvars.ItemPoints = ItemPoints;
					
					if (berserkIPGain > 0)
					{
						if (dydudebug_ipdisplays2) Console.Printf("berserkIPGain > 0: %.8f", berserkIPGain);
						if (dyduhud_showmiscipgains)
						{
							IPGainHUDAmt += berserkIPGain;
							if (IPGainHUDTimer <= 0) IPGainHUDTimer = 105;
							else
							{
								IPGainHUDTimer += 5;
								if (IPGainHUDTimer < 105 && berserkIPGain > (MaxItemPoints * 0.005)) IPGainHUDTimer = 105;
								if (IPGainHUDTimer > 175) IPGainHUDTimer = 175;
							}
							
							if (IPHUDPulseTimer <= 0) IPHUDPulseTimer = 105;
							else
							{
								IPHUDPulseTimer += 35;
								if (IPHUDPulseTimer < 105 && berserkIPGain > (MaxItemPoints * 0.10)) IPHUDPulseTimer = 105;
								if (IPHUDPulseTimer > 175) IPHUDPulseTimer = 175;
							}
						}
						
						if (ItemPointsSession < MaxItemPoints && ItemPoints < MaxItemPoints)
						{
							ItemPointsSession += berserkIPGain;
							if (ItemPointsSession >= MaxItemPoints) ItemPointsSession == MaxItemPoints;
							if (ItemPointsSession > 0 && berserkIPGain > 0)
							{
								int healfactor = ItemPointsSession * 100 / MaxItemPoints;
								if (healfactor < 10) IPHUDPulseType = 1;
								if (healfactor >= 10) IPHUDPulseType = 2;
								if (healfactor >= 50) IPHUDPulseType = 3;
								if (healfactor >= 100) IPHUDPulseType = 4;
								IPHUDPulseTimeP = (level.time % randompick(10,15,20));
							}
						}
					}
				}
				
				// Armor IP Effect Benefits
				double ArmorIPActive = 0;
				if (owner.CountInv("KnightGownItem")) KnightGownTier = 1;
				if (owner.CountInv("KnightGownItem2")) KnightGownTier = 2;
				if (owner.CountInv("KnightGownItem3")) KnightGownTier = 3;
				if (owner.CountInv("KnightGownItem4")) KnightGownTier = 4;
				if (KnightGownTier == 1 && owner.CountInv("KnightGownIP1Buff")) ArmorIPActive = (1.0 * 1.5);
				if (KnightGownTier == 2 && owner.CountInv("KnightGownIP2Buff")) ArmorIPActive = (2.15 * 1.5);
				if (KnightGownTier == 3 && owner.CountInv("KnightGownIP3Buff")) ArmorIPActive = (3.60 * 1.5);
				if (KnightGownTier == 4 && owner.CountInv("KnightGownIP4Buff")) ArmorIPActive = (5.35 * 1.5);
				if (ArmorIPActive > 0 && IPNoGainTimer <= 0 && !owner.CountInv("IsUnconscious"))
				{
					double ArmorIPGain;
					ArmorIPGain = 0.0025;
					if (ItemPoints <= 100.0000)
					{
						if (ItemPoints >= 75.0001 && ItemPoints <= 100.0000)
						{
							ArmorIPGain += 0.00125;
						}
						else
						if (ItemPoints >= 50.0001 && ItemPoints <= 75.0000)
						{
							ArmorIPGain += 0.003125;
						}
						else
						if (ItemPoints >= 25.0001 && ItemPoints <= 50.0000)
						{
							ArmorIPGain += 0.0078125;
						}
						else
						if (ItemPoints <= 25.0000)
						{
							ArmorIPGain += 0.01953125;
						}
					}
					double ArmorIPMulti = (0.25 + (ActualLevel * 0.03));
					if (ArmorIPMulti >= 1.00 || (ActualLevel >= 25))
					{
						ArmorIPMulti = 1.00;
						if (exex_expenabled) ArmorIPMulti = (1.00 + ((ActualLevel - 25) * 0.01334));
						if (ArmorIPMulti >= 2.00 || (ActualLevel >= 100)) ArmorIPMulti = 2.00;
					}

					ArmorIPGain *= ArmorIPMulti;
					ArmorIPGain *= ArmorIPActive;
					if (IPDissipateTimer < 0) 
					{
						if (random(1,16) <= 1) ArmorIPGain *= 3;
						else 
						{
							if (random(1,4) <= 1) ArmorIPGain *= 2.5;
							else ArmorIPGain *= 2;
						}
						IPTimerIncMod += 5;
					}
					else 
					{
						IPTimerIncMod += 25;
					}
					ArmorIPGain *= (1.0 + (ActualLevel * 0.0025));
					if (owner.CountInv("AngerLevelEvent") || owner.CountInv("AngerLevelEventN")) ArmorIPGain *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.0005) + (owner.CountInv("AngerLevelEventN") * 0.00005));

					//Console.Printf("\c[red]ArmorIPGain: %.8f, \c[green]IPDissipateTimer: %d / 2100, \c[yellow]IPTimerIncMod: %d tics, \c[purple]ArmorIPMulti: %.8f", ArmorIPGain, IPDissipateTimer, IPTimerIncMod, ArmorIPMulti);
					double oldItemPoints = ItemPoints;
					ItemPoints += ArmorIPGain;
					if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
					if (ItemPoints >= oldItemPoints) 
					{
						ArmorIPGain = (ItemPoints - oldItemPoints);
						if (dydudebug_ipdisplays2) Console.Printf("\c[red]ArmorIPGain: %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", ArmorIPGain, oldItemPoints, ItemPoints);
					}
					globalvars.ItemPoints = ItemPoints;
					
					if (ArmorIPGain > 0)
					{
						if (dydudebug_ipdisplays2) Console.Printf("ArmorIPGain > 0: %.8f", ArmorIPGain);
						if (dyduhud_showmiscipgains)
						{
							IPGainHUDAmt += ArmorIPGain;
							if (IPGainHUDTimer <= 0) IPGainHUDTimer = 105;
							else
							{
								IPGainHUDTimer += 5;
								if (IPGainHUDTimer < 105 && ArmorIPGain > (MaxItemPoints * 0.005)) IPGainHUDTimer = 105;
								if (IPGainHUDTimer > 175) IPGainHUDTimer = 175;
							}
							
							if (IPHUDPulseTimer <= 0) IPHUDPulseTimer = 105;
							else
							{
								IPHUDPulseTimer += 35;
								if (IPHUDPulseTimer < 105 && ArmorIPGain > (MaxItemPoints * 0.10)) IPHUDPulseTimer = 105;
								if (IPHUDPulseTimer > 175) IPHUDPulseTimer = 175;
							}
						}
						
						if ((ItemPointsSession < MaxItemPoints) && (ItemPoints < MaxItemPoints))
						{
							ItemPointsSession += ArmorIPGain;
							if (ItemPointsSession >= MaxItemPoints) ItemPointsSession == MaxItemPoints;
							if (ItemPointsSession > 0 && ArmorIPGain > 0)
							{
								int healfactor = ItemPointsSession * 100 / MaxItemPoints;
								if (healfactor < 10) IPHUDPulseType = 1;
								if (healfactor >= 10) IPHUDPulseType = 2;
								if (healfactor >= 50) IPHUDPulseType = 3;
								if (healfactor >= 100) IPHUDPulseType = 4;
								IPHUDPulseTimeP = (level.time % randompick(10,15,20));
							}
						}
					}
				}
				
				// Morph IP Benefits
				if (IsMorphed == 1 && !owner.CountInv("IsUnconscious"))
				{
					double MorphIPGain;
					MorphIPGain = (0.0025 * 8);
					if (ItemPoints <= 100.0000)
					{
						if (ItemPoints >= 75.0001 && ItemPoints <= 100.0000)
						{
							MorphIPGain += (0.00125 * 8);
						}
						else
						if (ItemPoints >= 50.0001 && ItemPoints <= 75.0000)
						{
							MorphIPGain += (0.003125 * 8);
						}
						else
						if (ItemPoints >= 25.0001 && ItemPoints <= 50.0000)
						{
							MorphIPGain += (0.0078125 * 8);
						}
						else
						if (ItemPoints <= 25.0000)
						{
							MorphIPGain += (0.01953125 * 8);
						}
					}
					if (IPDissipateTimer < 0) 
					{
						if (random(1,16) <= 1) MorphIPGain *= 2.5;
						else 
						{
							if (random(1,4) <= 1) MorphIPGain *= 2;
							else MorphIPGain *= 1.5;
						}
						IPTimerIncMod += 5;
					}
					else 
					{
						IPTimerIncMod += 25;
					}
					MorphIPGain *= (1.0 + (ActualLevel * 0.0075));
					if (owner.CountInv("AngerLevelEvent") || owner.CountInv("AngerLevelEventN")) MorphIPGain *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.0005) + (owner.CountInv("AngerLevelEventN") * 0.00005));
					
					//Console.Printf("\c[red]MorphIPGain: %.8f, \c[green]IPDissipateTimer: %d / 2100, \c[yellow]IPTimerIncMod: %d tics, \c[purple]ArmorIPMulti: %.8f", MorphIPGain, IPDissipateTimer, IPTimerIncMod, ArmorIPMulti);
					double oldItemPoints = ItemPoints;
					ItemPoints += MorphIPGain;
					if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
					if (ItemPoints >= oldItemPoints) 
					{
						MorphIPGain = (ItemPoints - oldItemPoints);
						if (dydudebug_ipdisplays2) Console.Printf("\c[red]MorphIPGain: %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", MorphIPGain, oldItemPoints, ItemPoints);
					}
					globalvars.ItemPoints = ItemPoints;
					
					if (MorphIPGain > 0)
					{
						if (dydudebug_ipdisplays2) Console.Printf("MorphIPGain > 0: %.8f", MorphIPGain);
						if (dyduhud_showmiscipgains)
						{
							IPGainHUDAmt += MorphIPGain;
							if (IPGainHUDTimer <= 0) IPGainHUDTimer = 105;
							else
							{
								IPGainHUDTimer += 5;
								if (IPGainHUDTimer < 105 && MorphIPGain > (MaxItemPoints * 0.005)) IPGainHUDTimer = 105;
								if (IPGainHUDTimer > 175) IPGainHUDTimer = 175;
							}
							
							if (IPHUDPulseTimer <= 0) IPHUDPulseTimer = 105;
							else
							{
								IPHUDPulseTimer += 35;
								if (IPHUDPulseTimer < 105 && MorphIPGain > (MaxItemPoints * 0.10)) IPHUDPulseTimer = 105;
								if (IPHUDPulseTimer > 175) IPHUDPulseTimer = 175;
							}
						}
						
						if ((ItemPointsSession < MaxItemPoints) && (ItemPoints < MaxItemPoints))
						{
							ItemPointsSession += MorphIPGain;
							if (ItemPointsSession >= MaxItemPoints) ItemPointsSession == MaxItemPoints;
							if (ItemPointsSession > 0 && MorphIPGain > 0)
							{
								int healfactor = ItemPointsSession * 100 / MaxItemPoints;
								if (healfactor < 10) IPHUDPulseType = 1;
								if (healfactor >= 10) IPHUDPulseType = 2;
								if (healfactor >= 50) IPHUDPulseType = 3;
								if (healfactor >= 100) IPHUDPulseType = 4;
								IPHUDPulseTimeP = (level.time % randompick(10,15,20));
							}
						}
					}
				}
				
				// Unique "Event" IP Related Gains
				if ((owner.CountInv("AngerLevelEvent") > 0 || owner.CountInv("AngerLevelEventN") > 0) && !owner.CountInv("IsUnconscious"))
				{
					double AngerEventIPGain;
					AngerEventIPGain = 0.00125;
					if (ItemPoints <= 100.0000)
					{
						if (ItemPoints >= 75.0001 && ItemPoints <= 100.0000)
						{
							AngerEventIPGain += 0.00025;
						}
						else
						if (ItemPoints >= 50.0001 && ItemPoints <= 75.0000)
						{
							AngerEventIPGain += 0.000625;
						}
						else
						if (ItemPoints >= 25.0001 && ItemPoints <= 50.0000)
						{
							AngerEventIPGain += 0.0015625;
						}
						else
						if (ItemPoints <= 25.0000)
						{
							AngerEventIPGain += 0.00390625;
						}
					}
					AngerEventIPGain *= (owner.CountInv("AngerLevelEvent") * 0.125) + (owner.CountInv("AngerLevelEventN") * 0.0125);
					IPTimerIncMod += (owner.CountInv("AngerLevelEvent") * 2.5) + (owner.CountInv("AngerLevelEventN") * 0.25);

					double oldItemPoints = ItemPoints;
					ItemPoints += AngerEventIPGain;
					if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
					if (ItemPoints >= oldItemPoints) 
					{
						AngerEventIPGain = (ItemPoints - oldItemPoints);
						if (dydudebug_ipdisplays2) Console.Printf("\c[red]AngerEventIPGain: %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", AngerEventIPGain, oldItemPoints, ItemPoints);
					}
					globalvars.ItemPoints = ItemPoints;

					bool AngerHUDEnabled = false;
					if (AngerEventIPGain > 0 && AngerHUDEnabled)
					{
						if (dydudebug_ipdisplays2) Console.Printf("AngerEventIPGain > 0: %.8f", AngerEventIPGain);
						if (dyduhud_showmiscipgains)
						{
							IPGainHUDAmt += AngerEventIPGain;
							if (IPGainHUDTimer <= 0) IPGainHUDTimer = 105;
							else
							{
								IPGainHUDTimer += 5;
								if (IPGainHUDTimer < 105 && AngerEventIPGain > (MaxItemPoints * 0.005)) IPGainHUDTimer = 105;
								if (IPGainHUDTimer > 175) IPGainHUDTimer = 175;
							}
							
							if (IPHUDPulseTimer <= 0) IPHUDPulseTimer = 105;
							else
							{
								IPHUDPulseTimer += 35;
								if (IPHUDPulseTimer < 105 && AngerEventIPGain > (MaxItemPoints * 0.10)) IPHUDPulseTimer = 105;
								if (IPHUDPulseTimer > 175) IPHUDPulseTimer = 175;
							}
						}
						
						if ((ItemPointsSession < MaxItemPoints) && (ItemPoints < MaxItemPoints))
						{
							ItemPointsSession += AngerEventIPGain;
							if (ItemPointsSession >= MaxItemPoints) ItemPointsSession == MaxItemPoints;
							if (ItemPointsSession > 0 && AngerEventIPGain > 0)
							{
								int healfactor = ItemPointsSession * 100 / MaxItemPoints;
								if (healfactor < 10) IPHUDPulseType = 1;
								if (healfactor >= 10) IPHUDPulseType = 2;
								if (healfactor >= 50) IPHUDPulseType = 3;
								if (healfactor >= 100) IPHUDPulseType = 4;
								IPHUDPulseTimeP = (level.time % randompick(10,15,20));
							}
						}
					}
				}
				
				if (IPTimerIncMod != 0) IPTimerInc = level.time % IPTimerIncMod;
													 else IPTimerInc = level.time % 1;
				if (exex_ikaripointdissipation)
				{
					if (ItemPoints > 0.00)
					{
						if (!owner.CountInv("IsUnconscious"))
						{
							if (IPDissipateTimer < -2100) IPDissipateTimer = -2100;
							if (IPDissipateTimer < 2100)
							{
								if (IPTimerInc == 0) IPDissipateTimer++;
							}
							else
							{
								IPDissipateTimer = 0;
								int IPLossType = random(1,17);
								double IPLossPer;
								IPHUDShakeTimer = random(52,53);
								if (IPLossType >= 1 && IPLossType <= 6)
								{
									IPHUDShakeType = 1;
									IPLossPer = 0.02;
								}
								if (IPLossType >= 7 && IPLossType <= 11)
								{
									IPHUDShakeType = 2;
									IPLossPer = 0.05;
									IPHUDShakeTimer += random(17,18);
								}
								if (IPLossType >= 12 && IPLossType <= 14)
								{
									IPHUDShakeType = 3;
									IPLossPer = 0.10;
									IPHUDShakeTimer += 35;
								}
								if (IPLossType >= 15 && IPLossType <= 16)
								{
									IPHUDShakeType = 3;
									IPLossPer = 0.25;
									IPHUDShakeTimer += random(52,53);
								}
								if (IPLossType == 17)
								{
									IPHUDShakeType = 4;
									IPLossPer = 0.5;
									IPHUDShakeTimer += 70;
									IPLossHUDTimer += 70;
								}
								double IPLossAmt = (ItemPoints * IPLossPer);
								ItemPoints -= IPLossAmt;
								if (ItemPoints <= 0) globalvars.ItemPoints = ItemPoints = 0;
								
								IPLossHUDAmt += IPLossAmt;
								if (IPLossHUDTimer <= 0) IPLossHUDTimer = 105;
								else
								{
									IPLossHUDTimer += 35;
									if (IPLossHUDTimer < 105 && IPLossAmt > (MaxItemPoints * 0.01)) IPLossHUDTimer = 105;
									if (IPLossHUDTimer > 175) IPLossHUDTimer = 175;
								}
							}
							if (dydudebug_ipdisplays2) Console.Printf("ItemPoints: %.1f [%.1f], IPDissipateTimer: %d / 2100", ItemPoints, globalvars.ItemPoints, IPDissipateTimer);
						}
					}
					else
					{
						if (ItemPoints <= 0) globalvars.ItemPoints = ItemPoints = 0;
						IPDissipateTimer = 0;
					}
				}
				else
				{
					IPDissipateTimer = 0;
				}
				if (owner.health <= 0 || owner.CountInv("IsUnconscious"))
				{
					globalvars.ItemPoints = ItemPoints = 0;
				}
				if (owner.CountInv("ItemPointsAdd")) 
				{
					if (CheckIPEnabled())
					{
						double base = owner.CountInv("ItemPointsAdd");
						double oldItemPoints = ItemPoints;
						ItemPoints += base;
						if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;
						if (ItemPoints >= oldItemPoints) 
						{
							base = (ItemPoints - oldItemPoints);
							if (dydudebug_ipdisplays2) Console.Printf("\c[red]ItemPointsAdd (base): %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", base, oldItemPoints, ItemPoints);
						}
						globalvars.ItemPoints = ItemPoints;
					}
					owner.A_SetInventory("ItemPointsAdd",0);
				}
				if (owner.CountInv("ItemPointsTake")) 
				{
					if (CheckIPEnabled())
					{
						double base = owner.CountInv("ItemPointsTake");
						double oldItemPoints = ItemPoints;
						ItemPoints -= base;
						if (ItemPoints <= 0) ItemPoints = 0;
						if (ItemPoints < oldItemPoints) 
						{
							base = abs(oldItemPoints - ItemPoints);
							if (dydudebug_ipdisplays2) Console.Printf("\c[red]ItemPointsTake (base): %.8f (ItemPoints: %.8f, oldItemPoints: %.8f)", base, oldItemPoints, ItemPoints);
						}
						globalvars.ItemPoints = ItemPoints;
					}
					owner.A_SetInventory("ItemPointsTake",0);
				}
				
				// IP Cost Reduction after Mortal Blow Survival Timer
				if (IPMortalBlowReduceTimer)
				{
					IPMortalBlowReduceTimer--;
					//Console.Printf("IPMortalBlowReduceTimer: %d", IPMortalBlowReduceTimer);
				}
				// IP "No Gain" Timer [for future unique situations]
				if (IPNoGainTimer) 
				{
					ItemPoints = 0;
					globalvars.ItemPoints = 0;
					IPNoGainTimer--;
				}
				if (TrueIPCooldownTimer) TrueIPCooldownTimer--;
				if (TrueIPLevelGate < 0) TrueIPLevelGate = 0;
				
				//Console.Printf("TrueIPLevelGate: %d, IPNoGainTimer: %d, TrueIPCooldownTimer: %d, IPMortalBlowReduceTimer: %d", TrueIPLevelGate, IPNoGainTimer, TrueIPCooldownTimer, IPMortalBlowReduceTimer);
				
				// HP Regeneration
				BaseRegenMulti = 1.0;
				if (!owner.CountInv("NoRegeneration"))
				{
					if (CurrentHealth < MaxHealthTrue)
					{
						if (exex_hpwillregen)
						{
							int inc = 20;
							inc += ((TruePlayerLevel * 0.05) + (TruePlayerDEF * 0.05));
							inc += ((GoldApples * 0.1) + (PlatinumApples * 0.25) + (PrismaticApples + 1.0));
							// DD Trilogy NO-Rpg Bonuses
							if (!exex_expenabled)
							{
								double DDTFactor = 0.0;
								if ((A_CheckDDGame()))
								{
									if (DD_RoseMother) DDTFactor += 0.14286;
									if (DD_GameMother) DDTFactor += 0.14286;
									if (DD_MossMother) DDTFactor += 0.14286;
									if (DD_GlobeMother) DDTFactor += 0.14286;
									if (DD_SphinxMother) DDTFactor += 0.14286;
									if (DD_HandMother1) DDTFactor += 0.14286;
									if (DD_HandMother2) DDTFactor += 0.14286;
									if (DD_TrueHandMother) DDTFactor += 0.14286;
									if (AFD_Krag) DDTFactor += 0.2;
									if (AFD_Quisling) DDTFactor += 0.2;
									if (AFD_Lauritz) DDTFactor += 0.2;
									if (AFD_Jorgensen1) DDTFactor += 0.2;
									if (AFD_Jorgensen2) DDTFactor += 0.2;
									if (AFD_JorgCannon) DDTFactor += 0.2;
									if (CoS_Fafnir) DDTFactor += 0.25;
									if (CoS_FractalHens) DDTFactor += 0.25;
									if (CoS_ForsakenJorg) DDTFactor += 0.25;
									if (CoS_EvilDinah) DDTFactor += 0.25;
									if (CoS_Tempest) DDTFactor += 0.25;
									DDTFactor *= 0.125;
									DDTFactor += 1.0;
									inc *= DDTFactor;
									if (dydudebug_hpregen) Console.Printf("inc: %d, DDTFactor: %.8f", inc, DDTFactor);
								}
							}
							BaseRegenMulti = inc;
							if (HPRegenBoostTimer) inc *= 2.5;
							if (dydudebug_hpregen) Console.Printf("HPRegenBoostTimer [Regen]: %d", HPRegenBoostTimer);
							if (owner.CountInv("AngerLevelEvent") > 0 || owner.CountInv("AngerLevelEventN") > 0) inc *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.005) + (owner.CountInv("AngerLevelEventN") * 0.0005));
							
							double ssa = 1.00;
							if (owner.CountInv("ClassyRibbon")) ssa += 0.025;
							if (owner.CountInv("ExpeditionHat")) ssa += 0.10;
							inc *= ssa;
							
							if (owner.CountInv("DinahTrueIPState")) inc = floor(inc * 5);
							if (owner.CountInv("CricketBatGuard")) inc = floor(inc * frandom(1.334,1.667)); 
							if (owner.CountInv("CricketBatGuard2")) inc = floor(inc * frandom(1.334,1.667)); 
							if (owner.CountInv("CricketBatGuard3")) inc = floor(inc * frandom(1.334,1.667)); 
							if (owner.CountInv("DoingSpinAttack")) inc = floor(inc * (frandom(0.599880023995201,0.7496251874062969) * 0.667)); 
							if (owner.CountInv("FistPlayerBlockItem")) 
							{
								if (owner.CountInv("FistPlayerBlock")) inc = ceil(inc * frandompick(1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)); 
								if (owner.CountInv("FistPlayerBlock2")) inc = ceil(inc * (frandompick(1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.125); 
								if (owner.CountInv("FistPlayerBlock3")) inc = ceil(inc * (frandompick(1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.25); 
								if (owner.CountInv("FistPlayerBlock4")) inc = ceil(inc * (frandompick(1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.5); 
							}
							if (owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")) inc = 100; 
							
							if (KnightGownTier == 1) 
							{
								if (owner.CountInv("KnightGownIP1Buff")) inc = ceil(inc * 1.25);
																										else inc = floor(inc * 1.05);
							}
							if (KnightGownTier == 2)
							{
								if (owner.CountInv("KnightGownIP2Buff")) inc = ceil(inc * 1.50);
																										else inc = floor(inc * 1.10);
							}
							if (KnightGownTier == 3) 
							{
								if (owner.CountInv("KnightGownIP3Buff")) inc = ceil(inc * 1.75);
																										else inc = floor(inc * 1.15);
							}
							if (KnightGownTier == 4) 
							{
								if (owner.CountInv("KnightGownIP4Buff")) inc = ceil(inc * 2.00);
																										else inc = floor(inc * 1.20);
							}
							if (owner.CountInv("TimeFreezeTimer")) inc *= 35;

							if (berserked) inc = floor(inc * frandom(1.5,2.0));

							if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
							if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
							if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
							if (owner.player.jumpTics < 0) inc = floor(inc * 0.4);
							if (owner.player.jumpTics > 0) inc = floor(inc * 0.7);
							if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = floor(inc * 1.8);

							if (WineDefTier == 1 || WineDefTier == -1) inc = floor(inc * 1.5);
							if (WineDefTier == 2 || WineDefTier == -2) inc = floor(inc * 2.25);
							if (WineDefTier == 3 || WineDefTier == -3) inc = floor(inc * 3.25);
							if (WineDefTier == 4 || WineDefTier == -4) inc = floor(inc * 4.5);
							if (WineDefTier == 5 || WineDefTier == -5) inc = floor(inc * 6.0);
							
							If (weapon is "EvilWarriorShield")
							{
								inc = floor(inc * (0.875 + (HellWarriorShieldLevel * 0.0125)));
							}
							
							if (exex_healthregendegentype >= 1)
							{
								if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 4);
								else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 1.80);
								else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.20);
								else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.05);
							}
							else
							{
								if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 10);
								else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
								else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
								else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
							}
							
							if (afasdroptimer) inc = floor(inc * 0.125);
							if (healpoolaccel == 1) inc *= 1.75;
							if (healpoolaccel == 2) inc *= 2.5;
							
							if (BaseRegenMulti) BaseRegenMulti = (inc / BaseRegenMulti);
							if (dydudebug_hpregen) Console.Printf("BaseRegenMulti [Regen]: %.8f", BaseRegenMulti);
							HPRegenTimer += inc;
							
							if (HPRegenTimer > HPRegenTimerMax)
							{
								HPRegenTimer -= HPRegenTimerMax;
								if (HPRegenTimer < 0) HPRegenTimer = 0;
								
								if (CurrentHealth < MaxHealthTrue)
								{
									int rec = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
									if (berserked) rec = randompick(1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.8) / 100;
									if (owner.CountInv("ExpeditionHat") && random(1,16) <= 13) rec *= 2;
									rec *= 1.0 + (GoldApples * 0.005) + (PlatinumApples * 0.0125) + (PrismaticApples * 0.05);
									if (rec < 1) rec = 1;
									
									if (rec && dyduhud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
									CurrentHealth += rec;
									if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (dydudebug_hpregen) Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
						}
						else
						{
							HPRegenTimer = 0;
						}
					}
					else
					if (CurrentHealth > MaxHealthTrue)
					{
						if (exex_hpwilldegen)
						{
							int inc = 20;
							inc -= ((TruePlayerLevel * 0.025) + (TruePlayerDEF * 0.025));
							inc -= ((GoldApples * 0.025) + (PlatinumApples * 0.0625) + (PrismaticApples + 0.25));
							// DD Trilogy NO-Rpg Bonuses
							if (!exex_expenabled)
							{
								double DDTFactor = 0.0;
								if ((A_CheckDDGame()))
								{
									if (DD_RoseMother) DDTFactor -= 0.14286;
									if (DD_GameMother) DDTFactor -= 0.14286;
									if (DD_MossMother) DDTFactor -= 0.14286;
									if (DD_GlobeMother) DDTFactor -= 0.14286;
									if (DD_SphinxMother) DDTFactor -= 0.14286;
									if (DD_HandMother1) DDTFactor -= 0.14286;
									if (DD_HandMother2) DDTFactor -= 0.14286;
									if (DD_TrueHandMother) DDTFactor -= 0.14286;
									if (AFD_Krag) DDTFactor -= 0.2;
									if (AFD_Quisling) DDTFactor -= 0.2;
									if (AFD_Lauritz) DDTFactor -= 0.2;
									if (AFD_Jorgensen1) DDTFactor -= 0.2;
									if (AFD_Jorgensen2) DDTFactor -= 0.2;
									if (AFD_JorgCannon) DDTFactor -= 0.2;
									if (CoS_Fafnir) DDTFactor -= 0.25;
									if (CoS_FractalHens) DDTFactor -= 0.25;
									if (CoS_ForsakenJorg) DDTFactor -= 0.25;
									if (CoS_EvilDinah) DDTFactor -= 0.25;
									if (CoS_Tempest) DDTFactor -= 0.25;
									DDTFactor *= 0.125;
									DDTFactor += 1.0;
									inc *= DDTFactor;
									if (dydudebug_hpregen) Console.Printf("inc: %d, DDTFactor: %.8f", inc, DDTFactor);
								}
							}
							BaseRegenMulti = inc;
							if (HPRegenBoostTimer) inc *= 0.4;
							if (dydudebug_hpregen) Console.Printf("HPRegenBoostTimer [Degen]: %d", HPRegenBoostTimer);
							if (owner.CountInv("AngerLevelEvent") > 0 || owner.CountInv("AngerLevelEventN") > 0) inc *= (1.0 - (owner.CountInv("AngerLevelEvent") * 0.003334) - (owner.CountInv("AngerLevelEventN") * 0.0003334));
							
							double ssa = 1.00;
							if (owner.CountInv("ClassyRibbon")) ssa -= 0.125;
							if (owner.CountInv("ExpeditionHat")) ssa -= 0.50;
							inc *= ssa;
							
							if (Owner.CountInv("DinahTrueIPState")) inc = ceil(inc * 0.2); 
							if (Owner.CountInv("CricketBatGuard")) inc = ceil(inc * frandom(0.599880023995201,0.7496251874062969));
							if (Owner.CountInv("CricketBatGuard2")) inc = ceil(inc * frandom(0.599880023995201,0.7496251874062969));
							if (Owner.CountInv("CricketBatGuard3")) inc = ceil(inc * frandom(0.599880023995201,0.7496251874062969));
							if (Owner.CountInv("DoingSpinAttack")) inc = ceil(inc * (frandom(1.334,1.667) * 1.334)); 
							if (Owner.CountInv("FistPlayerBlockItem")) 
							{
								if (owner.CountInv("FistPlayerBlock")) inc = ceil(inc * frandompick(0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556));
								if (owner.CountInv("FistPlayerBlock2")) inc = ceil(inc * (frandompick(0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.8888888888888889); 
								if (owner.CountInv("FistPlayerBlock3")) inc = ceil(inc * (frandompick(0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.8); 
								if (owner.CountInv("FistPlayerBlock4")) inc = ceil(inc * (frandompick(0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.6666666666666667); 
							}
							if (owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")) inc *= 0.01; 

							if (KnightGownTier == 1) 
							{
								if (owner.CountInv("KnightGownIP1Buff")) inc = floor(inc * 0.75);
																										else inc = ceil(inc * 0.95);
							}
							if (KnightGownTier == 2)
							{
								if (owner.CountInv("KnightGownIP2Buff")) inc = floor(inc * 0.50);
																										else inc = ceil(inc * 0.90);
							}
							if (KnightGownTier == 3) 
							{
								if (owner.CountInv("KnightGownIP3Buff")) inc = floor(inc * 0.25);
																										else inc = ceil(inc * 0.85);
							}
							if (KnightGownTier == 4) 
							{
								if (owner.CountInv("KnightGownIP4Buff")) inc = floor(inc * 0.0);
																										else inc = ceil(inc * 0.80);
							}
							if (owner.CountInv("TimeFreezeTimer")) inc *= 0.0285714285714286;
							
							if (berserked) inc = ceil(inc * frandom(0.5,0.667));
							
							if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = ceil(inc * 2.5);
							if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = ceil(inc * 2.0);
							if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = ceil(inc * 1.666666666666667);
							if (owner.player.jumpTics < 0) inc = ceil(inc * 2.5);
							if (owner.player.jumpTics > 0) inc = ceil(inc * 1.75);
							if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = ceil(inc * 0.5555555555555556);

							if (WineDefTier == 1 || WineDefTier == -1) inc = ceil(inc * 0.6666666666666667);
							if (WineDefTier == 2 || WineDefTier == -2) inc = ceil(inc * 0.4444444444444444);
							if (WineDefTier == 3 || WineDefTier == -3) inc = ceil(inc * 0.3076923076923077);
							if (WineDefTier == 4 || WineDefTier == -4) inc = ceil(inc * 0.2222222222222222);
							if (WineDefTier == 5 || WineDefTier == -5) inc = ceil(inc * 0.1666666666666667);
							
							If (weapon is "EvilWarriorShield")
							{
								inc = ceil(inc * (1.142857142857143 + (HellWarriorShieldLevel * 0.01143)));
							}
							if (exex_healthregendegentype >= 1)
							{
								if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = ceil(inc * 2.0);
								else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = ceil(inc * 1.875);
								else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = ceil(inc * 1.75);
								else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = ceil(inc * 1.625);
								else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = ceil(inc * 1.5);
								else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = ceil(inc * 1.375);
								else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = ceil(inc * 1.25);
								else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = ceil(inc * 1.125);
								else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = ceil(inc * 1.0);
							}
							else
							{
								if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = ceil(inc * 3.0);
								else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = ceil(inc * 2.75);
								else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = ceil(inc * 2.5);
								else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = ceil(inc * 2.25);
								else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = ceil(inc * 2.0);
								else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = ceil(inc * 1.75);
								else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = ceil(inc * 1.5);
								else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = ceil(inc * 1.25);
								else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = ceil(inc * 1.0);
							}
							
							if (afasdroptimer) inc = ceil(inc * 8.0);
							if (healpoolaccel == 1) inc *= 0.5714285714285714;
							if (healpoolaccel == 2) inc *= 0.4;
							
							if (BaseRegenMulti) BaseRegenMulti = (inc / BaseRegenMulti);
							if (dydudebug_hpregen) Console.Printf("BaseDegenMulti [Degen]: %.8f", BaseRegenMulti);
							HPDegenTimer += inc;
							if (HPDegenTimer > HPDegenTimerMax)
							{
								HPDegenTimer -= HPDegenTimerMax;
								if (HPDegenTimer < 0) HPDegenTimer = 0;
								
								if (CurrentHealth > MaxHealthTrue)
								{
									int loss = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
									if (berserked) loss = randompick(1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.2) / 100;
									if (owner.CountInv("ExpeditionHat") && random(1,16) <= 13) loss *= 0.5;
									loss *= 1.0 - (GoldApples * 0.00125) - (PlatinumApples * 0.00625) - (PrismaticApples * 0.025);
									if (loss < 1) loss = 1;
									
									if (loss && dyduhud_showhpapdmgrecregen > 1) A_LossHUD(loss, 0, false);
									CurrentHealth -= loss;
									if (CurrentHealth <= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (dydudebug_hpregen) Console.Printf("DegenTimer: %d / %d  (inc: %d)", HPDegenTimer, HPDegenTimerMax, inc);
						}
						else
						{
							HPDegenTimer = 0;
						}
					}
					else
					{
						HPRegenTimer = 0;
						HPDegenTimer = 0;
						if (dydudebug_hpregen) Console.Printf("Regen/Degen Neutral");
					}
					
					if (HPRegenBoostTimer) HPRegenBoostTimer--;
					if (HPRegenBoostTimer < 0) HPRegenBoostTimer = 0;
					if (dydudebug_hpregen && HPRegenBoostTimer) Console.Printf("HPRegenBoostTimer: %d", HPRegenBoostTimer);
				}
			}

		}
	}
	
	void EvasionStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			//***********
			//* Evasion *
			//***********
			int SkillFactor, PerkFactor;
			int EvadeRateCap = 7500;
			EvasionRate = 0;
			if (CharacterClass == 10) 
			{
				SPDEvadeCheck = 8.9; // Base
				// DD Trilogy NO-Rpg Bonuses
				if (!exex_expenabled)
				{
					double PerkFactor2 = 0.0;
					if ((A_CheckDDGame()))
					{
						if (DD_RoseMother) PerkFactor2 += 14.2857;
						if (DD_GameMother) PerkFactor2 += 14.2857;
						if (DD_MossMother) PerkFactor2 += 14.2857;
						if (DD_GlobeMother) PerkFactor2 += 14.2857;
						if (DD_SphinxMother) PerkFactor2 += 14.2857;
						if (DD_HandMother1) PerkFactor2 += 14.2857;
						if (DD_HandMother2) PerkFactor2 += 14.2857;
						if (DD_TrueHandMother) PerkFactor2 += 14.2857;
						if (AFD_Krag) PerkFactor2 += 20;
						if (AFD_Quisling) PerkFactor2 += 20;
						if (AFD_Lauritz) PerkFactor2 += 20;
						if (AFD_Jorgensen1) PerkFactor2 += 20;
						if (AFD_Jorgensen2) PerkFactor2 += 20;
						if (AFD_JorgCannon) PerkFactor2 += 20;
						if (CoS_Fafnir) PerkFactor2 += 25;
						if (CoS_FractalHens) PerkFactor2 += 25;
						if (CoS_ForsakenJorg) PerkFactor2 += 25;
						if (CoS_EvilDinah) PerkFactor2 += 25;
						if (CoS_Tempest) PerkFactor2 += 25;
						PerkFactor2 *= 1.25;
						SPDEvadeCheck += PerkFactor2;
						if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0x - SPD Evade Check (DDT NoRPG)]: %.4f\c-, Add: %.4f", SPDEvadeCheck, PerkFactor2);
					}
				}

				int BaseEVA = SPDEvadeCheck;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0a - SPD Evade Check (base)]: %.4f\c-", SPDEvadeCheck);
				
				// Luck
				double mult = (BaseEVA * 0.1);
				double LUKEvaAlt = 0.0 + (PlayerLuck * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)));
				SPDEvadeCheck += LUKEvaAlt;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0b - SPD Evade Check (luck check)]: %.4f\c-", SPDEvadeCheck);

				// Wine
				double SPDEvaWineAlt = 0.0;
				if (WineDefTier == 1) SPDEvaWineAlt = (BaseEVA * (random(1,15) * 0.01)); // 0.01 - 0.15
				if (WineDefTier == 2) SPDEvaWineAlt = (BaseEVA * (random(1,12) * 0.03)); // 0.03 - 0.36
				if (WineDefTier == 3) SPDEvaWineAlt = (BaseEVA * (random(1,9) * 0.07)); // 0.07 - 0.63
				if (WineDefTier == 4) SPDEvaWineAlt = (BaseEVA * (random(1,5) * 0.16)); // 0.16 - 0.80
				if (WineDefTier == 5) SPDEvaWineAlt = (BaseEVA * (random(1,4) * 0.32)); // 0.32 - 1.28;
				if (WineDefTier == -1) SPDEvaWineAlt = (BaseEVA * ((random(1,15) * 0.01) * 0.25));
				if (WineDefTier == -2) SPDEvaWineAlt = (BaseEVA * ((random(1,12) * 0.03) * 0.25));
				if (WineDefTier == -3) SPDEvaWineAlt = (BaseEVA * ((random(1,9) * 0.07) * 0.25));
				if (WineDefTier == -4) SPDEvaWineAlt = (BaseEVA * ((random(1,5) * 0.16) * 0.25));
				if (WineDefTier == -5) SPDEvaWineAlt = (BaseEVA * ((random(1,4) * 0.32) * 0.25));
				SPDEvadeCheck -= SPDEvaWineAlt;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0c - SPD Evade Check (wine check)]: %.4f\c-", SPDEvadeCheck);
				
				// Food
				double FoodEvaAlt = 0.0;
				if (owner.CountInv("PowerEggBuff") || owner.CountInv("PowerEggBuff2")) FoodEvaAlt += (BaseEVA * (0.04 + (UsedEggHeal * 0.0004)));
				if (owner.CountInv("PowerFruitBuff") || owner.CountInv("PowerFruitBuff2")) FoodEvaAlt += (BaseEVA * 0.02);
				if (owner.CountInv("PowerRoastBuff")) FoodEvaAlt += (BaseEVA * 0.04);
				if (owner.CountInv("PowerMealBuff") || owner.CountInv("PowerMealBuff2")) FoodEvaAlt += (BaseEVA * 0.08);
				if (owner.CountInv("PowerMeal2Buff") || owner.CountInv("PowerMeal2Buff2")) FoodEvaAlt += (BaseEVA * 0.08);
				SPDEvadeCheck += FoodEvaAlt;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0d - SPD Evade Check (food check)]: %.4f\c-", SPDEvadeCheck);
				
				// Weapon
				weapon = owner.player.ReadyWeapon;
				let vacammotype = owner.FindInventory("VacAmmo");
				if (vacammotype)
				{
					SuperVacAmmo = vacammotype.Amount;
					SuperVacAmmoMax = vacammotype.MaxAmount;
				}
				if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
				SuperVacAmmoFactor = (SuperVacAmmo * (SuperVacBaseMaxFactor / SuperVacAmmoMax));
				if (dydudebug_supervacother) Console.Printf("[Weapon Evasion] SuperVacAmmoFactor: %.8f, SuperVacBaseMaxFactor: %.8f, SuperVacBaseMax: %d", SuperVacAmmoFactor, SuperVacBaseMaxFactor, SuperVacBaseMax);
				double WeapEvaAlt = 0.0;
				if (weapon is "HandToHand") WeapEvaAlt += (BaseEVA * 0.125);
				if (weapon is "BlunderAxe") WeapEvaAlt -= (BaseEVA * 0.05);
				if (weapon is "AppleJack") WeapEvaAlt += (BaseEVA * 0.05);
				if (weapon is "Scrambler") WeapEvaAlt += (BaseEVA * 0.125);
				if (weapon is "WizardPike") WeapEvaAlt += (BaseEVA * 0.125);
				if (weapon is "SuperVac") WeapEvaAlt -= (BaseEVA * (0.125 + SuperVacAmmoFactor));
				if (weapon is "Grimophone") WeapEvaAlt -= (BaseEVA * 0.1875);
				if (weapon is "CandleWhip") WeapEvaAlt += (BaseEVA * 0.0625);
				If (weapon is "EvilWarriorShield") WeapEvaAlt -= (BaseEVA * (HellWarriorShieldLevel * 0.0125));
				if (weapon is "FosnianCandle") WeapEvaAlt += (BaseEVA * 0.05);
				SPDEvadeCheck += WeapEvaAlt;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0e - SPD Evade Check (weapon check)]: %.4f\c-", SPDEvadeCheck);
				
				// Berserk
				double BersEvaAlt = 0.0;
				if (berserked)
				{
					if (skill <= 0) BersEvaAlt += (BaseEVA * 0.1875);
					if (skill == 1) BersEvaAlt += (BaseEVA * 0.15625);
					if (skill == 2) BersEvaAlt += (BaseEVA * 0.125);
					if (skill == 3) BersEvaAlt += (BaseEVA * 0.09375);
					if (skill >= 4) BersEvaAlt += (BaseEVA * 0.0625);
				}
				SPDEvadeCheck += BersEvaAlt;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0f - SPD Evade Check (berserk check)]: %.4f\c-", SPDEvadeCheck);
			}
			
			if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0x - SPD Evade Check]: %.4f\c-", SPDEvadeCheck);
			
			if (exex_expenabled) EvasionRate = (((TruePlayerLevel + 1) * SPDEvadeCheck) + ((TruePlayerSPD + 1) * SPDEvadeCheck)) * 0.5;
			else EvasionRate = SPDEvadeCheck;
			if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 1 - Base (Agl/Evade, Lvl/Evade)]: %d\c-", EvasionRate);
			
			if (Owner.CountInv("PowerHaste")) EvasionRate *= 3;
			
			if (IsMorphed == 1) // Rat Form gives up to +75% evasion chance
			{
				PerkFactor = 7500;
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 2 - Rat Morph Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
		
				PerkFactor = 7500;
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 2a - Rat Morph Check (Cap)]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (Owner.CountInv("PowerInvisibility") || Owner.CountInv("PowerInvisibility2") || Owner.CountInv("PowerGhost") || Owner.CountInv("PowerGhost2") || Owner.CountInv("PowerRavenInvisibility"))
			{
				PerkFactor = 3334;
				if (Owner.CountInv("PowerRavenInvisibility")) PerkFactor = randompick(6666,6667,6667);
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 3 - Invisibility Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
				
				PerkFactor = 3334;
				if (Owner.CountInv("PowerRavenInvisibility")) PerkFactor = randompick(6666,6667,6667);
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 3a - Invisibility Check (Cap)]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (Owner.CountInv("DoingSpinAttack"))
			{
				PerkFactor = 1250;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 1.75)) PerkFactor = 1875;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 2.5)) PerkFactor = 2500;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 3.25)) PerkFactor = 3125;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 4)) PerkFactor = 3750;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 4.75)) PerkFactor = 4375;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 5.5)) PerkFactor = 5000;
				PerkFactor *= 1.334;
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 4 - Cricket Bat Spin-Attack Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
				
				PerkFactor = 1250;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 2.5)) PerkFactor = 1875;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 4)) PerkFactor = 2500;
				if (ActualLevel >= (exex_cricketspinlvlrequirement * 5.5)) PerkFactor = 3125;
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 4a - Cricket Bat Spin-Attack Check (Cap)]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (Owner.CountInv("ClassyRibbon"))
			{
				PerkFactor = 625 * frandompick(0.5,1,1,1,1,1,1,1,1,2);
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 5 - Classy Ribbon Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
				
				PerkFactor = 125;
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 5a - Classy Ribbon Check]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (Owner.CountInv("ExpeditionHat"))
			{
				PerkFactor = random(312,313) * frandompick(0.5,1,1,1,1,1,1,1,1,2);
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 6 - Expedition Hat Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
				
				PerkFactor = random(156,157);
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (dydudebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 6a - Expedition Hat Check]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (EvadeRateCap >= 10000) EvadeRateCap = 10000;
			if (EvasionRate >= EvadeRateCap) EvasionRate = EvadeRateCap;
			int EvasionRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
			if (EvasionRNGVal <= EvasionRate) 
			{
				if (owner.CountInv("EvadeAnAttack") <= 0) owner.A_SetInventory("EvadeAnAttack",1); 
				if (dydudebug_showevadestuff) Console.Printf("    \cdEvasion % Roll / Rate (Cap): %d / %d (%d)", EvasionRNGVal, EvasionRate, EvadeRateCap);
			}
			else 
			{ 
				if (owner.CountInv("EvadeAnAttack") >= 1) owner.A_SetInventory("EvadeAnAttack",0); 
				if (dydudebug_showevadestuff) Console.Printf("    \cgEvasion % Roll / Rate (Cap): %d / %d (%d)", EvasionRNGVal, EvasionRate, EvadeRateCap);
			}
		}
	}
	
	void SurvivalStuff()
	{
		int PerkFactor = 0;
		name armorclasstype = "KGArmor";
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);
		int SurviveRateCap = 7500;
		weapon = owner.player.ReadyWeapon;
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			SurvivalRate = 100 * suvfct; // out of 10000 [100 = 1%]
			if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Base]: %d", SurvivalRate);
			SurvivalRate += (TruePlayerLevel * 5); // +0.05% per level
			if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Level]: %d", SurvivalRate);
			if (PlayerLuck) SurvivalRate += (PlayerLuck * 1.25); // +0.0125% per Luck Point
			if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Luck]: %d", SurvivalRate);
			
			// DD Trilogy NO-Rpg Bonuses
			if (!exex_expenabled)
			{
				int PerkFactor2 = 0;
				if ((A_CheckDDGame()))
				{
					if (DD_RoseMother) PerkFactor2 += randompick(14,14,14,15);
					if (DD_GameMother) PerkFactor2 += randompick(14,14,14,15);
					if (DD_MossMother) PerkFactor2 += randompick(14,14,14,15);
					if (DD_GlobeMother) PerkFactor2 += randompick(14,14,14,15);
					if (DD_SphinxMother) PerkFactor2 += randompick(14,14,14,15);
					if (DD_HandMother1) PerkFactor2 += randompick(14,14,14,15);
					if (DD_HandMother2) PerkFactor2 += randompick(14,14,14,15);
					if (DD_TrueHandMother) PerkFactor2 += randompick(14,14,14,15);
					if (AFD_Krag) PerkFactor2 += 20;
					if (AFD_Quisling) PerkFactor2 += 20;
					if (AFD_Lauritz) PerkFactor2 += 20;
					if (AFD_Jorgensen1) PerkFactor2 += 20;
					if (AFD_Jorgensen2) PerkFactor2 += 20;
					if (AFD_JorgCannon) PerkFactor2 += 20;
					if (CoS_Fafnir) PerkFactor2 += 25;
					if (CoS_FractalHens) PerkFactor2 += 25;
					if (CoS_ForsakenJorg) PerkFactor2 += 25;
					if (CoS_EvilDinah) PerkFactor2 += 25;
					if (CoS_Tempest) PerkFactor2 += 25;
					PerkFactor2 *= 1.25;
					SurvivalRate += PerkFactor2;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [DDT NoRPG]: %d, Add: %d", SurvivalRate, PerkFactor2);
				}
			}
			
			PerkFactor = 0;
			if (KnightGownTier == 1) 
			{
				if (owner.CountInv("KnightGownIP2Buff")) PerkFactor += randompick(468,469,469,469);
																						else PerkFactor += random(312,313);
			}
			if (KnightGownTier == 2)
			{
				if (owner.CountInv("KnightGownIP2Buff")) PerkFactor += random(937,938);
																						else PerkFactor += 625;
			}
			if (KnightGownTier == 3) 
			{
				if (owner.CountInv("KnightGownIP3Buff")) PerkFactor += 1875;
																						else PerkFactor += 1250;
			}
			if (KnightGownTier == 4) 
			{
				if (owner.CountInv("KnightGownIP4Buff")) PerkFactor += 3750;
																						else PerkFactor += 2500;
			}
			SurvivalRate += (PerkFactor * (1.0 - playeractor.PlayerArmorIgnoreFactor));
			if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Armor]: %d", SurvivalRate);

			if (berserked) SurvivalRate += 500;
			if (Owner.CountInv("PowerGuard")) 
			{
				SurvivalRate += ((10000 - SurvivalRate) * 0.125);
			}
			if (WineDefTier == 1 || WineDefTier == -1) SurvivalRate += random(312,313);
			if (WineDefTier == 2 || WineDefTier == -2) SurvivalRate += 625;
			if (WineDefTier == 3 || WineDefTier == -3) SurvivalRate += random(937,938);
			if (WineDefTier == 4 || WineDefTier == -4) SurvivalRate += 1250;
			if (WineDefTier == 5 || WineDefTier == -5) SurvivalRate += random(1562,1563);
			if (Owner.CountInv("DoingSpinAttack")) SurvivalRate += (2500 * 1.334);
			if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Buffs]: %d", SurvivalRate);
			
			int buddhatype = 0;
			if (Owner.CountInv("CricketBatGuard")) 
			{
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.25,0.375,0.375,0.50,0.50,0.50,0.50,0.625,0.625,0.75));
					SurviveRateCap += 1875;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/ CricketBat]: %d", SurvivalRate);
			}
			else
			if (Owner.CountInv("CricketBatGuard2"))
			{
				SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.125,1.125,1.25));
				SurviveRateCap += 2500;
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/ CricketBat (super)]: %d", SurvivalRate);
			}
			else
			if (Owner.CountInv("CricketBatGuard3"))
			{
				SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.9375,0.96875,0.96875,1.0,1.0,1.0,1.0,1.25,1.25,1.375));
				SurviveRateCap += 3125;
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/ CricketBat (super)]: %d", SurvivalRate);
			}
			else
			if (Owner.CountInv("FistPlayerBlockItem"))
			{
				if (Owner.CountInv("FistPlayerBlock4"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.5,0.5,0.5,0.5,0.75));
					SurviveRateCap += 2250;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (3)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock3"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.375,0.375,0.375,0.375,0.5625));
					SurviveRateCap += 1500;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (3)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock2"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.25,0.25,0.25,0.25,0.375));
					SurviveRateCap += 1000;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (2)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock"))
				{
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.125,0.125,0.125,0.125,0.1875));
					SurviveRateCap += 500;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (1)]: %d", SurvivalRate);
				}
			}
			else
			if (ActualLevel >= exex_scramblernoarmorbonuslvlreq && weapon is "Scrambler")
			{
				if (owner.CountInv(armorclasstype) <= 0)
				{
					SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.334,0.334,0.334,0.334,0.5));
					SurviveRateCap += 2500;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Scrambler (w/o Armor)]: %d", SurvivalRate);
				}
				else
				{
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o CricketBat]: %d", SurvivalRate);
				}
			}
			else
			{
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o CricketBat]: %d", SurvivalRate);
			}
			
			if (Owner.CountInv("ClassyRibbon"))
			{
				SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.015625,0.015625,0.015625,0.015625,0.02085));
				SurviveRateCap += random(156,157);
			}
			
			if (Owner.CountInv("ExpeditionHat"))
			{
				SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.0625,0.0625,0.0625,0.0625,0.0834));
				SurviveRateCap += 625;
			}
			
			if (SurviveRateCap >= 10000) SurviveRateCap = 10000;
			if (SurvivalRate > SurviveRateCap) SurvivalRate = SurviveRateCap;
			if ((dydudebug_survivecheat || Owner.CountInv("DinahTrueIPState") > 0) && SurvivalRate <= 9995) SurvivalRate = 9995;
			int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;

			if (dydudebug_survivalrate)
			{
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
			}
		}
	}
	
	void MassStuff()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			TotalMass = 100;
			BaseMass = TotalMass;
			double massmulfactor = 0.22223;
			massmulfactor *= exex_pbalfactor;
			if (exex_expenabled) massmulfactor *= (1.0 + (NumOfAfasDrops * 0.02));
			let playerset = DDPlayerPawn(owner);
			if (playerset) TotalMass = playerset.originalmass;
			BaseMass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("Mass [Base]: %d", TotalMass);
			
			int MassBonusAdd2 = MassBonusAdd;
			int MassLevelAdd2 = MassLevelAdd;
			MassNoRPGAdd2 = 0;
			if (!exex_expenabled)
			{
				if (skill <= 0) MassBonusAdd2 *= 2.0;
				if (skill == 1) MassBonusAdd2 *= 1.75;
				if (skill == 2) MassBonusAdd2 *= 1.5;
				if (skill == 3) MassBonusAdd2 *= 1.25;
				if (skill >= 4) MassBonusAdd2 *= 1.0;
				MassLevelAdd2 = 0;
				if (skill <= 0) MassLevelAdd2 = (MassNoRPGADD * 2.0);
				if (skill == 1) MassLevelAdd2 = (MassNoRPGADD * 1.75);
				if (skill == 2) MassLevelAdd2 = (MassNoRPGADD * 1.5);
				if (skill == 3) MassLevelAdd2 = (MassNoRPGADD * 1.25);
				if (skill >= 4) MassLevelAdd2 = (MassNoRPGADD * 1.0);
				
				if ((A_CheckDDGame()))
				{
					if (DD_RoseMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_GameMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_MossMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_GlobeMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_SphinxMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_HandMother1) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_HandMother2) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (DD_TrueHandMother) MassNoRPGAdd2 += (BaseMass * 0.0625);
					if (AFD_Krag) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (AFD_Quisling) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (AFD_Lauritz) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (AFD_Jorgensen1) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (AFD_Jorgensen2) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (AFD_JorgCannon) MassNoRPGAdd2 += (BaseMass * 0.1);
					if (CoS_Fafnir) MassNoRPGAdd2 += (BaseMass * 0.125);
					if (CoS_FractalHens) MassNoRPGAdd2 += (BaseMass * 0.125);
					if (CoS_ForsakenJorg) MassNoRPGAdd2 += (BaseMass * 0.125);
					if (CoS_EvilDinah) MassNoRPGAdd2 += (BaseMass * 0.125);
					if (CoS_Tempest) MassNoRPGAdd2 += (BaseMass * 0.125);
					MassNoRPGAdd2 *= 0.25;
				}
			}
			
			TotalMass += MassLevelAdd;
			BaseMass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("Mass [Level Add]: %d", TotalMass);
			
			TotalMass += MassNoRPGAdd;
			BaseMass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("Mass [No-RPG Add]: %d", TotalMass);
			
			TotalMass += int(MassNoRPGAdd2);
			BaseMass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("Mass [No-RPG Add 2]: %d", TotalMass);
			
			TotalMass += MassBonusAdd;
			BaseMass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("Mass [Bonus Add]: %d", TotalMass);
			
			if (!exex_expenabled)
			{
				double tempmass;
				tempmass += (totalcompleted * massmulfactor);
				tempmass += (totalallkills * (massmulfactor / 3));
				tempmass += (totalallitems * (massmulfactor / 3));
				tempmass += (totalallsecrets * (massmulfactor / 3));
				if (exex_expenabled) tempmass *= (1.00 + (NumOfAfasDrops * 0.03125));
				TotalMass += tempmass;
				if (dydudebug_masscalcs) Console.Printf("Mass [No-RPGMode]: %d", TotalMass);
			}
			
			if (exex_expenabled)
			{
				TotalMass += (ActualLevel * massmulfactor);
				BaseMass = TotalMass;
				if (dydudebug_masscalcs) Console.Printf("Mass [Level]: %d", TotalMass);
				
				if (exex_extraatkdefspd)
				{
					TotalMass += (TruePlayerDEF * massmulfactor);
					BaseMass = TotalMass;
					if (dydudebug_masscalcs) Console.Printf("Mass [DEF]: %d", TotalMass);
				}
			}
			
			// Buffs
			if ((owner.bINVULNERABLE || owner.player.cheats & CF_GODMODE2 || owner.player.cheats & CF_GODMODE) || 
					owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")) TotalMass *= 128; 
			if (berserked) 
			{
				if (ActualLevel >= 200) TotalMass *= 2.003;
				else if (ActualLevel >= 175) TotalMass *= 1.891;
				else if (ActualLevel >= 150) TotalMass *= 1.779;
				else if (ActualLevel >= 125) TotalMass *= 1.667;
				else if (ActualLevel >= 100) TotalMass *= 1.556;
				else if (ActualLevel >= 75) TotalMass *= 1.445;
				else if (ActualLevel >= 50) TotalMass *= 1.334;
				else if (ActualLevel >= 25) TotalMass *= 1.223;
				else TotalMass *= 1.112;
			}

			if (Owner.CountInv("PowerGuard")) TotalMass *= 3;
			if (Owner.CountInv("DinahTrueIPState")) TotalMass *= 10;
			if (Owner.CountInv("CricketBatGuard")) TotalMass *= frandompick(1.334,1.5,1.5,1.5,1.5,1.5,1.667);
			if (Owner.CountInv("CricketBatGuard2")) TotalMass *= frandompick(2.667,3.000,3.000,3.000,3.000,3.000,3.334);
			if (Owner.CountInv("CricketBatGuard3")) TotalMass *= frandompick(4.000,4.500,4.500,4.500,4.500,4.500,5.000);
			if (Owner.CountInv("DoingSpinAttack")) TotalMass *= (frandompick(12,13.5,13.5,13.5,13.5,13.5,15) * 1.334);
			
			// Fist Blocks
			if (Owner.CountInv("FistPlayerBlock"))  TotalMass *= 2;
			if (Owner.CountInv("FistPlayerBlock2")) TotalMass *= 2.667;
			if (Owner.CountInv("FistPlayerBlock3")) TotalMass *= 4;
			if (Owner.CountInv("FistPlayerBlock4")) TotalMass *= 7.5;
			// Wine
			if (WineDefTier == 1 || WineDefTier == -1) TotalMass *= 1.125;
			if (WineDefTier == 2 || WineDefTier == -2) TotalMass *= 1.25;
			if (WineDefTier == 3 || WineDefTier == -3) TotalMass *= 1.5;
			if (WineDefTier == 4 || WineDefTier == -4) TotalMass *= 2;
			if (WineDefTier == 5 || WineDefTier == -5) TotalMass *= 2.625;
			// Food
			double mealbuff = 1.0;
			if (Owner.CountInv("PowerEggBuff") || Owner.CountInv("PowerEggBuff2")) mealbuff += (0.125 + (UsedEggHeal * 0.00125));
			if (Owner.CountInv("PowerFruitBuff") || Owner.CountInv("PowerFruitBuff2")) mealbuff += 0.125;
			if (Owner.CountInv("PowerRoastBuff")) mealbuff += 0.125;
			if (Owner.CountInv("PowerMealBuff") || Owner.CountInv("PowerMealBuff2")) mealbuff += 0.125;
			if (Owner.CountInv("PowerMeal2Buff") || Owner.CountInv("PowerMeal2Buff2")) mealbuff += 0.125;
			TotalMass *= mealbuff;
			if (dydudebug_masscalcs) Console.Printf("Mass [Buffs]: %d", TotalMass);

			If (owner.player.ReadyWeapon is "EvilWarriorShield")
			{
				TotalMass *= (1.5 + (HellWarriorShieldLevel * 0.075));
				if (Owner.CountInv("EWShieldDefendMode")) TotalMass *= (3.5 + (HellWarriorShieldLevel * 0.175));
				if (Owner.CountInv("EWShieldDefendModeExtra")) TotalMass *= (1.75 + (HellWarriorShieldLevel * 0.0875));
				if (owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD")) TotalMass *= 2.5;
			}

			// Armor
			name armorclasstype = "KGArmor";
			int ArmorAmt = owner.CountInv(armorclasstype);
			double MassInc = 0;
			double MassMulti = 1.0;
			double IPBase = 0.16;
			double IPBaseMulti = 0.0004;
			double NonIPBase = 0.016;
			double NonIPBaseMulti = 0.00004;
			if (exex_armoritemdifficulty == 1)
			{
				IPBase *= 2;
				IPBaseMulti *= 2;
				NonIPBase *= 2;
				NonIPBaseMulti *= 2;
			}
			if (exex_armoritemdifficulty == 2)
			{
				IPBase *= 2.5;
				IPBaseMulti *= 2.5;
				NonIPBase *= 2.5;
				NonIPBaseMulti *= 2.5;
			}
			if (exex_armoritemdifficulty >= 3)
			{
				IPBase *= 2.5;
				IPBaseMulti *= 2.5;
				NonIPBase *= 2.5;
				NonIPBaseMulti *= 2.5;
			}
			if (KnightGownTier == 1)
			{
				if (owner.CountInv("KnightGownIP1Buff"))
				{
					MassInc = floor(ArmorAmt * IPBase); // 40
					MassMulti = (1.0 + (ArmorAmt * IPBaseMulti)); // 1.1
				}
				else
				{
					MassInc = floor(ArmorAmt * NonIPBase); // 4
					MassMulti = (1.0 + (ArmorAmt * NonIPBaseMulti)); // 1.01
				}
			}
			if (KnightGownTier == 2)
			{
				if (owner.CountInv("KnightGownIP2Buff"))
				{
					MassInc = floor(ArmorAmt * IPBase); // 80
					MassMulti = (1.0 + (ArmorAmt * IPBaseMulti)); // 1.2
				}
				else
				{
					MassInc = floor(ArmorAmt * NonIPBase); // 8
					MassMulti = (1.0 + (ArmorAmt * NonIPBaseMulti)); // 1.02
				}
			}
			if (KnightGownTier == 3)
			{
				if (owner.CountInv("KnightGownIP3Buff"))
				{
					MassInc = floor(ArmorAmt * IPBase); // 160
					MassMulti = (1.0 + (ArmorAmt * IPBaseMulti)); // 1.4
				}
				else
				{
					MassInc = floor(ArmorAmt * NonIPBase); // 16
					MassMulti = (1.0 + (ArmorAmt * NonIPBaseMulti)); // 1.04
				}
			}
			if (KnightGownTier == 4)
			{
				if (owner.CountInv("KnightGownIP4Buff"))
				{
					MassInc = floor(ArmorAmt * IPBase); // 320
					MassMulti = (1.0 + (ArmorAmt * IPBaseMulti)); // 1.8
				}
				else
				{
					MassInc = floor(ArmorAmt * NonIPBase); // 32
					MassMulti = (1.0 + (ArmorAmt * NonIPBaseMulti)); // 1.08
				}
			}
			if (Owner.CountInv("ExpeditionHat")) MassMulti *= 1.375;
			if (Owner.CountInv("ClassyRibbon")) MassMulti *= 1.0875;

			if (MassInc) TotalMass += MassInc;
			if (MassMulti != 1.0) TotalMass *= MassMulti;
			if (dydudebug_masscalcs) Console.Printf("Mass [Armor]: %d, Inc: %.8f, Multi: %.8f", TotalMass, MassInc, MassMulti);
			
			if (TotalMass < 1) TotalMass = 1;
			
			owner.Mass = TotalMass;
			if (dydudebug_masscalcs) Console.Printf("    Calculated Mass: %d (Base Mass: %d) [Real Mass: %d]", TotalMass, BaseMass, owner.mass);
		}
	}
	
	void JumpStuff()
	{
		name armorclasstype = "KGArmor";
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			double CharacterJumpZ = 8.25;
			if (IsMorphed == 1) CharacterJumpZ *= 0.334;
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Character Base]: %.8f", CharacterJumpZ);

			// Map Completion [No-RPG Mode]
			double MapNoRPGJumpZ = 1.00;
			double DDTNoRPGJumpZ = 1.0;
			if (!exex_expenabled) 
			{
				if (IsMorphed == 1)
				{
					MapNoRPGJumpZ += (totalcompleted * ((0.0025 * 1.75) * 0.334));
					MapNoRPGJumpZ += (totalallkills * ((0.0025 * (1.75 / 3)) * 0.334));
					MapNoRPGJumpZ += (totalallitems * ((0.0025 * (1.75 / 3)) * 0.334));
					MapNoRPGJumpZ += (totalallsecrets * ((0.0025 * (1.75 / 3)) * 0.334));
				}
				else
				{
					MapNoRPGJumpZ += (totalcompleted * (0.0025 * 1.75));
					MapNoRPGJumpZ += (totalallkills * (0.0025 * (1.75 / 3)));
					MapNoRPGJumpZ += (totalallitems * (0.0025 * (1.75 / 3)));
					MapNoRPGJumpZ += (totalallsecrets * (0.0025 * (1.75 / 3)));
				}
				
				// DD Trilogy NO-Rpg Bonuses
				if ((A_CheckDDGame()))
				{
					DDTNoRPGJumpZ = 0.0;
					if (DD_RoseMother) DDTNoRPGJumpZ += 0.014286;
					if (DD_GameMother) DDTNoRPGJumpZ += 0.014286;
					if (DD_MossMother) DDTNoRPGJumpZ += 0.014286;
					if (DD_GlobeMother) DDTNoRPGJumpZ += 0.014286;
					if (DD_SphinxMother) DDTNoRPGJumpZ += 0.014286;
					if (DD_HandMother1) DDTNoRPGJumpZ += 0.014286;
					if (DD_HandMother2) DDTNoRPGJumpZ += 0.014286;
					if (DD_TrueHandMother) DDTNoRPGJumpZ += 0.014286;
					if (AFD_Krag) DDTNoRPGJumpZ += 0.02;
					if (AFD_Quisling) DDTNoRPGJumpZ += 0.02;
					if (AFD_Lauritz) DDTNoRPGJumpZ += 0.02;
					if (AFD_Jorgensen1) DDTNoRPGJumpZ += 0.02;
					if (AFD_Jorgensen2) DDTNoRPGJumpZ += 0.02;
					if (AFD_JorgCannon) DDTNoRPGJumpZ += 0.02;
					if (CoS_Fafnir) DDTNoRPGJumpZ += 0.025;
					if (CoS_FractalHens) DDTNoRPGJumpZ += 0.025;
					if (CoS_ForsakenJorg) DDTNoRPGJumpZ += 0.025;
					if (CoS_EvilDinah) DDTNoRPGJumpZ += 0.025;
					if (CoS_Tempest) DDTNoRPGJumpZ += 0.025;
					DDTNoRPGJumpZ *= 0.25;
					DDTNoRPGJumpZ += 1.0;
					
					if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [DDT NoRPG]: %.8f", DDTNoRPGJumpZ);
				}
			}

			// Level
			double LevelJumpZ = 1.00;
			double baseval = 0.004375;
			baseval *= exex_pjumpfactor;
			if (exex_expenabled) 
			{
				if (IsMorphed == 1)
				{
					LevelJumpZ += (ActualLevel * (baseval * 0.334));
				}
				else
				{
					LevelJumpZ += (ActualLevel * baseval);
				}
				LevelJumpZ *= (1.0 + (NumOfAfasDrops * 0.01));
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Level]: %.8f", LevelJumpZ);
			}
			
			// Speed
			double SpeedJumpZ = 1.00;
			baseval = 0.004375;
			baseval *= exex_pjumpfactor;
			if (exex_expenabled && exex_extraatkdefspd) 
			{
				if (IsMorphed == 1)
				{
					SpeedJumpZ += (TruePlayerSPD * (baseval * 0.334));
				}
				else
				{
					SpeedJumpZ += (TruePlayerSPD * baseval);
				}
				SpeedJumpZ *= (1.0 + (NumOfAfasDrops * 0.01));
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Speed]: %.8f", SpeedJumpZ);
			}
			
			// Buffs
			double BuffJumpZ = 1.00;
			if (Owner.CountInv("DinahTrueIPState"))
			{
				double temp = (0.375 + ((ActualLevel - 1) * 0.0375));
				if (temp >= 0.9375) temp = 0.9375;
				BuffJumpZ *= temp;
			}
			if (Owner.CountInv("PowerHaste")) BuffJumpZ *= 1.334;
			if (Owner.CountInv("CricketBatGuard")) BuffJumpZ *= frandom(0.95,0.975);
			if (Owner.CountInv("CricketBatGuard2")) BuffJumpZ *= frandom(0.85,0.925);
			if (Owner.CountInv("CricketBatGuard3")) BuffJumpZ *= frandom(0.625,0.675);
			if (Owner.CountInv("DoingSpinAttack")) BuffJumpZ *= (frandom(0.2125,0.23125) * 1.334);
			if (berserked) BuffJumpZ *= 1.334;
			if (WineDefTier == 1 || WineDefTier == -1) BuffJumpZ *= frandom(0.98,1.00);
			if (WineDefTier == 2 || WineDefTier == -2) BuffJumpZ *= frandom(0.96,1.00);
			if (WineDefTier == 3 || WineDefTier == -3) BuffJumpZ *= frandom(0.93,1.00);
			if (WineDefTier == 4 || WineDefTier == -4) BuffJumpZ *= frandom(0.88,1.00);
			if (WineDefTier == 5 || WineDefTier == -5) BuffJumpZ *= frandom(0.81,1.00);
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Buffs]: %.8f", BuffJumpZ);

			// Armor
			double ArmorJumpZ = 1.00;
			double armordiffmod = 1.00;
			if (exex_armoritemdifficulty == 1) armordiffmod = 2.0;
			if (exex_armoritemdifficulty == 2) armordiffmod = 2.5;
			if (exex_armoritemdifficulty >= 3) armordiffmod = 5.0;
			int ArmorAmt = owner.CountInv(armorclasstype);
			if (KnightGownTier == 1 && !owner.CountInv("KnightGownIP1Buff")) 
			{
				ArmorJumpZ -= (ArmorAmt * (0.0001 * armordiffmod)); // 0.025;
			}
			if (KnightGownTier == 2 && !owner.CountInv("KnightGownIP2Buff")) 
			{
				ArmorJumpZ -= (ArmorAmt * (0.0000975 * armordiffmod)); // 0.04875;
			}
			if (KnightGownTier == 3 && !owner.CountInv("KnightGownIP3Buff")) 
			{
				ArmorJumpZ -= (ArmorAmt * (0.000095 * armordiffmod)); // 0.095;
			}
			if (KnightGownTier == 4 && !owner.CountInv("KnightGownIP4Buff")) 
			{
				ArmorJumpZ -= (ArmorAmt * (0.00009 * armordiffmod)); // 0.180;
			}
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Armor]: %.8f", ArmorJumpZ);

			// Special
			double SpecialJumpZ = 1.00;
			if (Owner.CountInv("ClassyRibbon")) SpecialJumpZ += 0.1875;
			if (Owner.CountInv("ExpeditionHat")) SpecialJumpZ += 0.04375;

			// Weapon Checks
			weapon = owner.player.ReadyWeapon;
			double WeaponJumpZ = 1.00;
			if (weapon is "HandToHand") 
			{
				if (berserked) WeaponJumpZ *= 1.1625;
				else WeaponJumpZ *= 1.125;
			}
			if (weapon is "CricketBat") 
			{
				WeaponJumpZ *= 1.00;
			}
			if (weapon is "BlunderAxe") 
			{
				if (berserked) WeaponJumpZ *= 0.991875;
				else WeaponJumpZ *= 0.96875;
			}
			if (weapon is "AppleJack") 
			{
				if (berserked) WeaponJumpZ *= 1.05;
				else WeaponJumpZ *= 1.03125;
			}
			if (weapon is "Scrambler")
			{
				if (berserked) WeaponJumpZ *= 1.1625;
				else WeaponJumpZ *= 1.125;
			}
			if (weapon is "WizardPike")
			{
				if (berserked) WeaponJumpZ *= 1.08125;
				else WeaponJumpZ *= 1.0625;
			}
			if (weapon is "FosnianCandle") 
			{
				if (berserked) WeaponJumpZ *= 0.991875;
				else WeaponJumpZ *= 0.96875;
			}
			let vacammotype = owner.FindInventory("VacAmmo");
			if (vacammotype)
			{
				SuperVacAmmo = vacammotype.Amount;
				SuperVacAmmoMax = vacammotype.MaxAmount;
			}
			if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
			if (SuperVacAmmoMax > 0) 
			{
				if (berserked) SuperVacAmmoFactor = (SuperVacAmmo * ((SuperVacBaseMaxFactor * 2.5) / SuperVacAmmoMax));
									else SuperVacAmmoFactor = (SuperVacAmmo * (SuperVacBaseMaxFactor / SuperVacAmmoMax));
			}
			if (dydudebug_supervacother) Console.Printf("[Weapon JumpZ] SuperVacAmmoFactor: %.8f, SuperVacBaseMaxFactor: %.8f, SuperVacBaseMax: %d", SuperVacAmmoFactor, SuperVacBaseMaxFactor, SuperVacBaseMax);
			if (weapon is "SuperVac")
			{
				if (berserked) WeaponJumpZ *= (0.984375 - SuperVacAmmoFactor);
									else WeaponJumpZ *= (0.9375 - SuperVacAmmoFactor);
			}
			if (weapon is "Grimophone") 
			{
				if (berserked) WeaponJumpZ *= 0.996875;
				else WeaponJumpZ *= 0.875;
			}
			if (weapon is "CandleWhip")
			{
				if (berserked) WeaponJumpZ *= 1.08125;
				else WeaponJumpZ *= 1.0625;
			}
			If (weapon is "EvilWarriorShield")
			{
				if (berserked)
				{
					if (Owner.CountInv("HWShieldBlockHold")) WeaponJumpZ = (0.90 * (1.0 - (HellWarriorShieldLevel * 0.00625)));
																							else WeaponJumpZ = (0.95 * (1.0 - (HellWarriorShieldLevel * 0.003125)));
				}
				else
				{
					if (Owner.CountInv("HWShieldBlockHold")) WeaponJumpZ = (0.80 * (1.0 - (HellWarriorShieldLevel * 0.0125)));
																							else WeaponJumpZ = (0.90 * (1.0 - (HellWarriorShieldLevel * 0.00625)));
				}
			}
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [WeaponEquipped]: %.8f", WeaponJumpZ);
			
			double FistBlockJumpZ = 1.00;
			if (Owner.CountInv("FistPlayerSpeedFactor")) FistBlockJumpZ = 0.75;
			if (Owner.CountInv("FistPlayerSpeedFactor2")) FistBlockJumpZ = 0.825;
			if (Owner.CountInv("FistPlayerSpeedFactor3")) FistBlockJumpZ = 0.90;
			if (Owner.CountInv("FistPlayerSpeedFactor4")) FistBlockJumpZ = 0.975;
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Fist-Blocking]: %.8f", FistBlockJumpZ);
			
			// Drowning Debuff
			double DrownDebuffJumpZ = 1.00;
			if (drowndebufflevel) DrownDebuffJumpZ = 1.00 - (drowndebufflevel * frandompick(0.06,0.075,0.09));
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [DrownDebuff]: %.8f", DrownDebuffJumpZ);
			
			if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [jmpfct]: %.8f", jmpfct);
			
			double TotalJumpZ = CharacterJumpZ
												* DDTNoRPGJumpZ
												* LevelJumpZ
												* SpeedJumpZ
												* BuffJumpZ
												* ArmorJumpZ
												* SpecialJumpZ
												* WeaponJumpZ
												* FistBlockJumpZ
												* DrownDebuffJumpZ
												* jmpfct;

			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			actualjumpheight = ((TotalJumpZ * 35 / TICRATE) * 18);
			actualjumpheight2 = (((TotalJumpZ*2)**2)/2+owner.maxstepheight)/((TotalJumpZ**2)/2+owner.maxstepheight);
			TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
			if (dydudebug_jumpingcalcs) Console.Printf("TotalJumpZ: %.8f [\c[gold]actualjumpheight: %d\c- / \c[fire]actualjumpheight2: %d\c-x / \c[blue]TrueJumpHeight: %d\c-] (CharacterJumpZ: %.8f, LevelJumpZ: %.8f, BuffJumpZ: %.8f, ArmorJumpZ: %.8f, WeaponJumpZ: %.8f, jmpfct: %.8f), owner.maxstepheight: %d, NumOfAfasDrops: %d, \c[red]TICRATE: %d\c-", TotalJumpZ, actualjumpheight, actualjumpheight2, TrueJumpHeight, CharacterJumpZ, LevelJumpZ, BuffJumpZ, ArmorJumpZ, WeaponJumpZ, jmpfct, owner.maxstepheight, NumOfAfasDrops, TICRATE);
		}
	}
	
	void InventoryWeaponLimits()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		bool ddtrilogyoriglimits = false;
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			if (ddafd_originalinvlimits)
			{
				if (A_CheckDDGame()) ddtrilogyoriglimits = true;
			}
			int dropamt;
			string itemname;
			int baseholdamount;
			double leveladd;
			int itemsmax;
			int itemid;
			double baselvlfactor = 50.0;
			if (ddtrilogyoriglimits) baselvlfactor = 25.0;
			if (owner.CountInv("PlayingHexen")) baselvlfactor = 33.4;
			double baseholdmultibp1 = 1.25;
			double baseholdmultibp2 = 1.5;
			
			//*******************
			//* Inventory Items *
			//*******************
			if (ddtrilogyoriglimits)
			{
				CalcInvLimit("AppleWine", 8, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("TurkeyDinner", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CherryBombPickup", 12, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("SpinnerPickup", 8, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BRocketPickup", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("PopperPickup", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("SnakePickup", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FuryPotion", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("TimePotion", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BirdPotion", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("RatPotion", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("DivingHelm", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("KilletanteEffigy", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("DoorBell", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FCandlePickup", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
			}
			else
			{
				CalcInvLimit("AppleWine", 16, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("TurkeyDinner", 6, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CherryBombPickup", 24, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("SpinnerPickup", 16, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BRocketPickup", 4, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("PopperPickup", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("SnakePickup", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FuryPotion", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("TimePotion", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BirdPotion", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("RatPotion", 3, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("DivingHelm", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("KilletanteEffigy", 5, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("DoorBell", 1, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FCandlePickup", 2, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
			}

			//**************
			//* Ammo Types *
			//**************
			baselvlfactor = 200.0;
			if (ddtrilogyoriglimits) baselvlfactor = 100.0;
			baseholdmultibp1 = 1.5;
			baseholdmultibp2 = 2.0;
			if (owner.CountInv("PlayingHexen")) baselvlfactor = 150.0;
			if (ddtrilogyoriglimits)
			{
				CalcInvLimit("MalletAmmo", 45, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BlunderAmmo", 36, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("EggAmmo", 20, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("PikeAmmo", 10, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("JackAmmo", 48, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("VacAmmo", 12, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("MusicAmmo", 50, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CandleAmmo", 55, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CZBall", 8, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FCandleAmmo", 99, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 3);
			}
			else
			{
				CalcInvLimit("MalletAmmo", 64, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("BlunderAmmo", 48, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("EggAmmo", 28, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("JackAmmo", 64, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("PikeAmmo", 12, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("VacAmmo", 16, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("MusicAmmo", 66, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CandleAmmo", 80, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("CZBall", 10, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("FCandleAmmo", 150, baselvlfactor, baseholdmultibp1, baseholdmultibp2, 3);
			}
		}
	}
	
		void CalcInvLimit(name itemtype, int baseholdamount, double baselvlfactor, double baseholdmultibp1, double baseholdmultibp2, int invintervals)
		{
			int dropamt;
			string itemname;
			double leveladd;
			int itemsmax;
			int itemid;
			int ActualLevel = A_CheckActualLevel(1);
			
			let currentitemtype = owner.FindInventory(itemtype);
			if (currentitemtype)
			{
				let isammo = Ammo(currentitemtype);

				itemname = currentitemtype.GetClassName();

				if (!exex_expenabled)
				{
					double PerkFactor2 = 0.0;
					if ((A_CheckDDGame()))
					{
						if (DD_RoseMother) PerkFactor2 += 0.142857;
						if (DD_GameMother) PerkFactor2 += 0.142857;
						if (DD_MossMother) PerkFactor2 += 0.142857;
						if (DD_GlobeMother) PerkFactor2 += 0.142857;
						if (DD_SphinxMother) PerkFactor2 += 0.142857;
						if (DD_HandMother1) PerkFactor2 += 0.142857;
						if (DD_HandMother2) PerkFactor2 += 0.142857;
						if (DD_TrueHandMother) PerkFactor2 += 0.142857;
						if (AFD_Krag) PerkFactor2 += 0.20;
						if (AFD_Quisling) PerkFactor2 += 0.20;
						if (AFD_Lauritz) PerkFactor2 += 0.20;
						if (AFD_Jorgensen1) PerkFactor2 += 0.20;
						if (AFD_Jorgensen2) PerkFactor2 += 0.20;
						if (AFD_JorgCannon) PerkFactor2 += 0.20;
						if (CoS_Fafnir) PerkFactor2 += 0.25;
						if (CoS_FractalHens) PerkFactor2 += 0.25;
						if (CoS_ForsakenJorg) PerkFactor2 += 0.25;
						if (CoS_EvilDinah) PerkFactor2 += 0.25;
						if (CoS_Tempest) PerkFactor2 += 0.25;
						PerkFactor2 *= 0.5;
						PerkFactor2 += 1.0;
						baseholdamount *= PerkFactor2;
					}
				}
				
				if (owner.CountInv("Backpack") || owner.CountInv("BackpackTier1"))
				{
					if (owner.CountInv("BackpackTier2")) baseholdamount *= baseholdmultibp2;
																					else baseholdamount *= baseholdmultibp1;
				}
				if (baseholdamount < 1) baseholdamount = 1;
				if (dydudebug_inventorylimits) Console.Printf("baseholdamount  [\c[green]%s\c-]: %.2f", itemname, int(baseholdamount));
				if (exex_expenabled)
				{
					if (isammo) 
					{
						if (exex_dynamicammolimits) leveladd = (baseholdamount * double((ActualLevel / baselvlfactor)));
					}
					else
					{
						if (exex_dynamicinventorylimits) leveladd = (baseholdamount * double((ActualLevel / baselvlfactor)));
					}
				}
				if (dydudebug_inventorylimits) Console.Printf("leveladd  [\c[green]%s\c-]: %.2f", itemname, int(leveladd));
				itemsmax = (baseholdamount + int(leveladd));
				currentitemtype.MaxAmount = itemsmax;
				if (invintervals > 1)
				{
					int extra = currentitemtype.MaxAmount % invintervals;
					currentitemtype.MaxAmount -= extra;
				}
				if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
				
				if (!isammo)
				{
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				else
				{
					if (currentitemtype.Amount > currentitemtype.MaxAmount) currentitemtype.Amount = currentitemtype.MaxAmount;
				}
			}
		}
		
	void GameStatTracker()
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);
		//
		totalkillsgame = 0;
		totalmaxkills = 0;
		totalitemsgame = 0;
		totalmaxitems = 0;
		totalsecretsgame = 0;
		totalmaxsecrets = 0;
		totalallkills = 0;
		totalallitems = 0;
		totalallsecrets = 0;
		totalcompleted = 0;
		int levelnums = level.levelnum;
		if (dydudebug_gametracker) Console.Printf("\c[gold]MapNo: %d", levelnums);
		if (level.time >= 1)
		{
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (dydudebug_gametracker) Console.Printf("\c[orange]MapNo: %d vs Ref: %d (i: %d)", levelnums, globalvars.MapNum[i], i);
				if (levelnums == globalvars.MapNum[i])
				{
					if (dydudebug_gametracker) Console.Printf("\c[blue]MapNum Match");
					globalvars.NumKills[i] = level.killed_monsters;
					globalvars.MaxKills[i] = level.total_monsters;
					globalvars.NumItems[i] = level.found_items;
					globalvars.MaxItems[i] = level.total_items;
					globalvars.NumSecrets[i] = level.found_secrets;
					globalvars.MaxSecrets[i] = level.total_secrets;
				}
				// Kills
				if (globalvars.AllKills[i] == false && globalvars.NumKills[i] >= globalvars.MaxKills[i])
				{
					globalvars.AllKills[i] = true;
				}
				else
				if (globalvars.AllKills[i] == true && globalvars.NumKills[i] < globalvars.MaxKills[i])
				{
					globalvars.AllKills[i] = false;
				}
				// Items
				if (globalvars.AllItems[i] == false && globalvars.NumItems[i] >= globalvars.MaxItems[i]) 
				{
					globalvars.AllItems[i] = true;
				}
				else
				if (globalvars.AllItems[i] == true && globalvars.NumItems[i] < globalvars.MaxItems[i]) 
				{
					globalvars.AllItems[i] = false;
				}
				// Secrets
				if (globalvars.AllSecrets[i] == false && globalvars.NumSecrets[i] >= globalvars.MaxSecrets[i]) 
				{
					globalvars.AllSecrets[i] = true;
				}
				else
				if (globalvars.AllSecrets[i] == true && globalvars.NumSecrets[i] < globalvars.MaxSecrets[i])
				{
					globalvars.AllSecrets[i] = false;
				}
				// Full Completion
				if (globalvars.AllKills[i] &&
						globalvars.AllItems[i] &&
						globalvars.AllSecrets[i])
				{
					globalvars.AllCompletion[i] = true;
					if (globalvars.AllCompletionSound[i] == false && (globalvars.MaxKills[i] > 0 || globalvars.MaxSecrets[i] > 0 || globalvars.MaxItems[i] > 0)) 
					{
						owner.A_StartSound("stats/allcompletion",1004,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
						owner.A_PrintBold(String.Format("\c[gold]Level 100% Completed!\c-"), frandom(1.37,1.6));
						globalvars.AllCompletionSound[i] = true;
					}
				}
				else
				{
					globalvars.AllCompletion[i] = false;
					globalvars.AllCompletionSound[i] = false;
				}

				totalkillsgame += globalvars.NumKills[i];
				totalmaxkills += globalvars.MaxKills[i];
				totalitemsgame += globalvars.NumItems[i];
				totalmaxitems += globalvars.MaxItems[i];
				totalsecretsgame += globalvars.NumSecrets[i];
				totalmaxsecrets += globalvars.MaxSecrets[i];
				if (globalvars.AllKills[i]) totalallkills++;
				if (globalvars.AllItems[i]) totalallitems++;
				if (globalvars.AllSecrets[i]) totalallsecrets++;
				if (globalvars.AllCompletion[i]) totalcompleted++;
				
				if (dydudebug_gametracker)
				{
					Console.Printf("\c[red](Map#: %d [queue#: %d]) Kills: %d / %d, [AllKills: %d]", globalvars.MapNum[i], i, globalvars.NumKills[i], globalvars.MaxKills[i], globalvars.AllKills[i]);
					Console.Printf("\c[lightblue](Map#: %d [queue#: %d]) Items: %d / %d, [AllItems: %d]", globalvars.MapNum[i], i, globalvars.NumItems[i], globalvars.MaxItems[i], globalvars.AllItems[i]);
					Console.Printf("\c[gold](Map#: %d [queue#: %d]) Secrets: %d / %d, [AllSecrets: %d]", globalvars.MapNum[i], i, globalvars.NumSecrets[i], globalvars.MaxSecrets[i], globalvars.AllSecrets[i]);
					Console.Printf("\c[fire](Map#: %d [queue#: %d]) [AllCompletion: %d]", globalvars.MapNum[i], i, globalvars.AllCompletion[i]);
				}
			}
			if (dydudebug_gametracker)
			{
				Console.Printf("\c[red]Total Kills: %d / %d", totalkillsgame, totalmaxkills);
				Console.Printf("\c[lightblue]Total Items: %d / %d", totalitemsgame, totalmaxitems);
				Console.Printf("\c[gold]Total Secrets: %d / %d", totalsecretsgame, totalmaxsecrets);
				Console.Printf("\c[fire]Total 100%: %d / %d", totalcompleted, (globalvars.MapsFinished+1));
			}
		}
	}
	
	void LevelUpProcess(int type)
	{
		let globalvars = DDGlobalVariables.Get();
		let playeractor = DDPlayerPawn(owner);

		int levelmodulo, levelbonustype;
		levelmodulo = PlayerLevel % 20;
		if (levelmodulo == 0) levelbonustype = 0;
		else if (levelmodulo == 4) levelbonustype = 1;
		else if (levelmodulo == 5) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 8) levelbonustype = 1;
		else if (levelmodulo == 10) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 12) levelbonustype = 1;
		else if (levelmodulo == 15) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 16) levelbonustype = 1;
		else levelbonustype = 2;
		if (dydudebug_levelupdisplays) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);
		
		double RandomizedStatChance, RandomizedStatChance2;
		RandomizedStatChance = 1.00000000; // 192;
		if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
		{
			RandomizedStatChance -= (0.1 * random[statitem](4,8)); // 112 to 152
		}
		else
		if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
		{
			RandomizedStatChance -= (0.02 * random[statitem](4,8)); // 160 to 176
		}
		else
		if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20
		{
			RandomizedStatChance -= (0.004 * random[statitem](4,8));
		}
		double RNDSCSubtractor1 = 0;
		double RNDSCSubtractor2 = 0;
		RNDSCSubtractor1 = (PlayerLevel * 0.32);
		RNDSCSubtractor1 = clamp(RNDSCSubtractor1, 0.00000, 0.33334);
		if (PlayerLevel > 100)
		{
			RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
			RNDSCSubtractor2 = clamp(RNDSCSubtractor2, 0.00000, 0.33334);
		}
		if (dydudebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor1\c-: %.8f, \cxRNDSCSubtractor2\c-: %.8f", RNDSCSubtractor1, RNDSCSubtractor2);

		double RNDSCSubtractor = 0;
		RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
		RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
		RandomizedStatChance -= RNDSCSubtractor;
		if (owner.CountInv("MysteryItem")) RandomizedStatChance *= 0.75;
		if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
		if (dydudebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor\c-: %.8f, \cxRandomizedStatChance\c-: %.8f", RNDSCSubtractor, RandomizedStatChance);

		RandomizedStatChance2 = 1.00000000;
		if (PlayerLevel >= 25) RandomizedStatChance2 -= 0.041666667; // 23
		if (PlayerLevel >= 50) RandomizedStatChance2 -= 0.041666667; // 22
		if (PlayerLevel >= 75) RandomizedStatChance2 -= 0.041666667; // 21
		if (PlayerLevel >= 100) RandomizedStatChance2 -= 0.041666667; // 20
		if (PlayerLevel >= 125) RandomizedStatChance2 -= 0.083333334; // 18
		if (PlayerLevel >= 150) RandomizedStatChance2 -= 0.083333334; // 16
		if (PlayerLevel >= 175) RandomizedStatChance2 -= 0.083333334; // 14
		if (dydudebug_levelupdisplays) Console.Printf("\cyStat Chance 1\c-: %.8f, \cxStat Chance 2\c-: %.8f", RandomizedStatChance, RandomizedStatChance2);
		
		//********************************
		//*Random Levelups to Stat Values*
		//********************************
		int SeedIncreaseAmt;
		double LvlSkillMulti;
		double RollValue;
		double BaseChance1;
		double BaseChance2;
		int LvlStatMulti = 1;
		// Luck Boost [1]
		BaseChance1 = (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;

		// Speed Boost [1]
		BaseChance1 = (0.125 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		
		// Attack Boost [1]
		BaseChance1 = (0.25 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		
		// Defense Boost [1]
		BaseChance1 = (0.1875 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;

		// Health/HP Boost
		CurrentHealth = owner.player.mo.health;
		HPMaxGain = 0;
		
		if (PlayerLevel >= 151 && PlayerLevel <= 200)				HPMaxGain += floor(PlayerLevel * frandompick(0.0525,0.06));
		else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick(0.045,0.0525));
		else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick(0.0375,0.045));
		else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick(0.03,0.0375));
		
		HPMaxGain += 													randompick(0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3);
		if (levelbonustype == 0) HPMaxGain += randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3);
		if (levelbonustype == 1) HPMaxGain += randompick(0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3);
		if (levelbonustype == 2) HPMaxGain += randompick(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2);
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			HPMaxGain += randompick(1,1,2,2,3);
			HPMaxGain += (MaxHealthTrue / (216 - (NumOfAfasDrops * 4)));
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			HPMaxGain += randompick(0,1,1,2,2);
			HPMaxGain += (MaxHealthTrue / (270 - (NumOfAfasDrops * 3.2)));
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			HPMaxGain += randompick(0,0,1,1,2);
			HPMaxGain += (MaxHealthTrue / (324 - (NumOfAfasDrops * 2.4)));
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			HPMaxGain += randompick(0,0,0,1,1);
			HPMaxGain += (MaxHealthTrue / (378 - (NumOfAfasDrops * 1.6)));
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			HPMaxGain += randompick(0,0,0,0,1);
			HPMaxGain += (MaxHealthTrue / (432 - (NumOfAfasDrops * 0.8)));
		}
		if (HPMaxGain < 1) HPMaxGain = 1;
		owner.player.mo.health += HPMaxGain;
		HealthLevelAdd += HPMaxGain;
		if (type == 1) 
		{
			HealthNoRPGAdd += HPMaxGain;
			if (!exex_expenabled)
			{
				if (skill <= 0) HPMaxGain *= (4.0 + (NumOfAfasDrops * 0.04));
				if (skill == 1) HPMaxGain *= (3.5 + (NumOfAfasDrops * 0.035));
				if (skill == 2) HPMaxGain *= (3.0 + (NumOfAfasDrops * 0.03));
				if (skill == 3) HPMaxGain *= (2.5 + (NumOfAfasDrops * 0.025));
				if (skill >= 4) HPMaxGain *= (2.0 + (NumOfAfasDrops * 0.02));
			}
		}
		if (!owner.CountInv("SilentLevelUp")) A_StatIncHud(HPMaxGain,0);
		
		MaxHealthTrue = (BaseStartMaxHealth + HealthLevelAdd + HealthBonusAdd);
		if (dydudebug_levelupdisplays) Console.Printf("HPMaxGain: %d", HPMaxGain);
		
		// Mass/Balance
		double BaseMass = 1.0;
		let playerset = DDPlayerPawn(owner);
		if (playerset) BaseMass = playerset.originalmass;
		MassGain = 0;

		if (PlayerLevel >= 151 && PlayerLevel <= 200)				MassGain += floor(PlayerLevel * frandompick(0.0525,0.06));
		else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MassGain += floor(PlayerLevel * frandompick(0.045,0.0525));
		else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MassGain += floor(PlayerLevel * frandompick(0.0375,0.045));
		else if (PlayerLevel <= 50)													MassGain += floor(PlayerLevel * frandompick(0.03,0.0375));

		MassGain += 													randompick(0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2);
		if (levelbonustype == 0) MassGain += randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
		if (levelbonustype == 1) MassGain += randompick(0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2);
		if (levelbonustype == 2) MassGain += randompick(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1);
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			MassGain += randompick(0,0,0,0,0,1,1,2,2,3);
			MassGain += (BaseMass / (324 - (NumOfAfasDrops * 8)));
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			MassGain += randompick(0,0,0,0,0,0,1,1,2,2);
			MassGain += (BaseMass / (405 - (NumOfAfasDrops * 6.4)));
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			MassGain += randompick(0,0,0,0,0,0,0,1,1,2);
			MassGain += (BaseMass / (486 - (NumOfAfasDrops * 4.8)));
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			MassGain += randompick(0,0,0,0,0,0,0,0,1,1);
			MassGain += (BaseMass / (557 - (NumOfAfasDrops * 3.2)));
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			MassGain += randompick(0,0,0,0,0,0,0,0,0,1);
			MassGain += (BaseMass / (648 - (NumOfAfasDrops * 1.6)));
		}
		MassLevelAdd += MassGain;
		if (type == 1) 
		{
			MassNoRPGAdd += MassGain;
			if (!exex_expenabled)
			{
				if (skill <= 0) MassGain *= (2.0 + (NumOfAfasDrops * 0.02));
				if (skill == 1) MassGain *= (1.75 + (NumOfAfasDrops * 0.0175));
				if (skill == 2) MassGain *= (1.5 + (NumOfAfasDrops * 0.015));
				if (skill == 3) MassGain *= (1.25 + (NumOfAfasDrops * 0.0125));
				if (skill >= 4) MassGain *= (1.0 + (NumOfAfasDrops * 0.01));
			}
		}
		
		if (!owner.CountInv("SilentLevelUp")) owner.A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(0.6,0.75),ATTN_NORM,frandom(1.25,1.5));
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let playeractor = DDPlayerPawn(owner);
		if (owner && (Owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD"))) berserked = true;

		let globalvars = DDGlobalVariables.Get();
		weapon = owner.player.ReadyWeapon;
		double TimeBuffMulti = frandompick(1.5,1.75);
		TrueGameSkill = skill;
		double BerserkFactorblock;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		double baseatkfct = 0.00625;
		if (skill <= 0) baseatkfct = 0.0075;
		if (skill == 1) baseatkfct = 0.006875;
		if (skill == 2) baseatkfct = 0.00625;
		if (skill == 3) baseatkfct = 0.005625;
		if (skill >= 4) baseatkfct = 0.005;
		if (exex_expenabled) baseatkfct *= (1.0 + (NumOfAfasDrops * 0.02));
		if (IsMorphed == 1) baseatkfct *= 0.334;
		baseatkfct *= exex_patkfactor;
		double tempmax;
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive): %d (baseatkfct: %.8f)", damage, baseatkfct);
			
			// Map Completion [No-RPG Mode]
			double MapFactor = 1.00;
			if (!exex_expenabled) 
			{
				tempmax = 5.00;

				MapFactor = (1.00 + (totalcompleted * (baseatkfct * 3)) + (totalallkills * (baseatkfct)) + (totalallitems * (baseatkfct)) + (totalallsecrets * (baseatkfct)));
				if (MapFactor >= tempmax) MapFactor = tempmax;
				if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Map Completion [NO RPG MODE ONLY]): %.8f", MapFactor);
			}
			
			// Level
			double LVLFactor = 1.00;
			if (exex_expenabled) LVLFactor = (1.00 + (TruePlayerLevel * baseatkfct));
			if (IsMorphed == 1)
			{
				tempmax = 2.334;
			}
			else
			{
				tempmax = 5.00;
			}
			if (exex_expenabled) tempmax *= (1.0 + (NumOfAfasDrops * 0.02));
			if (LVLFactor >= tempmax) LVLFactor = tempmax;
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Level): %.8f", LVLFactor);
			
			// DD Trilogy NO-Rpg Bonuses
			double DDTFactor = 1.00;
			if (!exex_expenabled)
			{
				if ((A_CheckDDGame()))
				{
					DDTFactor = 0.00;
					if (DD_RoseMother) DDTFactor += 0.057144;
					if (DD_GameMother) DDTFactor += 0.057144;
					if (DD_MossMother) DDTFactor += 0.057144;
					if (DD_GlobeMother) DDTFactor += 0.057144;
					if (DD_SphinxMother) DDTFactor += 0.057144;
					if (DD_HandMother1) DDTFactor += 0.057144;
					if (DD_HandMother2) DDTFactor += 0.057144;
					if (DD_TrueHandMother) DDTFactor += 0.057144;
					if (AFD_Krag) DDTFactor += 0.08;
					if (AFD_Quisling) DDTFactor += 0.08;
					if (AFD_Lauritz) DDTFactor += 0.08;
					if (AFD_Jorgensen1) DDTFactor += 0.08;
					if (AFD_Jorgensen2) DDTFactor += 0.08;
					if (AFD_JorgCannon) DDTFactor += 0.08;
					if (CoS_Fafnir) DDTFactor += 0.1;
					if (CoS_FractalHens) DDTFactor += 0.1;
					if (CoS_ForsakenJorg) DDTFactor += 0.1;
					if (CoS_EvilDinah) DDTFactor += 0.1;
					if (CoS_Tempest) DDTFactor += 0.1;
					DDTFactor *= 0.5;
					DDTFactor += 1.00;
					if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - DDT NoRPG): %.8f", DDTFactor);
				}
			}

			// Attack
			double ATKFactor = 1.00;
			if (exex_extraatkdefspd && exex_expenabled) ATKFactor = (1.00 + (TruePlayerATK * baseatkfct) + (random(1,PlayerLuck) * frandompick(0,0,0,0,0,0,(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*1),(baseatkfct*1),(baseatkfct*2))));
			if (IsMorphed == 1)
			{
				tempmax = 2.334;
			}
			else
			{
				tempmax = 5.00;
			}
			if (exex_extraatkdefspd && exex_expenabled) tempmax *= (1.0 + (NumOfAfasDrops * 0.02));
			if (ATKFactor >= tempmax) ATKFactor = tempmax;
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - EAttack): %.8f", ATKFactor);

			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 0.75;
			if (Skill == SKILL_HARD) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_EASY) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 1.25;
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Skill): %.8f", SkillFactor);

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
					damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop')
			{
				if (landdmgbonus == 1) 
				{
					owner.A_StopSound(601);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					LandingFactor = 1.5;
				}
				if (landdmgbonus == 2) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					LandingFactor = 2.25;
				}
				if (landdmgbonus == 3) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StopSound(603);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",603,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					LandingFactor = 3.78125;
				}
				if (landdmgbonus == 4) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StopSound(603);
					owner.A_StopSound(604);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",603,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					owner.A_StartSound("crit/critical",604,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					LandingFactor = 7.47265625;
				}
			}
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Landing): %.8f", LandingFactor);

			// Dashing Bonus
			double DashingFactor = 1.0;
			if (owner.CountInv("PlayerDashing"))
			{
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
						damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') DashingFactor = frandompick(1.25,1.334,1.425,1.5);
			}
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Dashing): %.8f", DashingFactor);
			
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerGuard")) BuffFactor *= 2;
			if (Owner.CountInv("DinahTrueIPState")) BuffFactor *= 5;
			if (Owner.CountInv("PowerInvisibility") || Owner.CountInv("PowerInvisibility2") || Owner.CountInv("PowerGhost") || Owner.CountInv("PowerGhost2") || Owner.CountInv("PowerRavenInvisibility")) BuffFactor *= frandompick(1.00,1.00,1.125,1.125,1.25);
			if (WineDefTier == 1 || WineDefTier == -1) BuffFactor *= frandompick(0.985,1.015);
			if (WineDefTier == 2 || WineDefTier == -2) BuffFactor *= frandompick(0.955,1.045);
			if (WineDefTier == 3 || WineDefTier == -3) BuffFactor *= frandompick(0.91,1.09);
			if (WineDefTier == 4 || WineDefTier == -4) BuffFactor *= frandompick(0.85,1.15);
			if (WineDefTier == 5 || WineDefTier == -5) BuffFactor *= frandompick(0.775,1.225);
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Buff): %.8f", BuffFactor);
			
			double ArmorIPFactor = 1.00;
			if (KnightGownTier == 1 && owner.CountInv("KnightGownIP1Buff")) ArmorIPFactor = 1.075;
			if (KnightGownTier == 2 && owner.CountInv("KnightGownIP2Buff")) ArmorIPFactor = 1.15;
			if (KnightGownTier == 3 && owner.CountInv("KnightGownIP3Buff")) ArmorIPFactor = 1.375;
			if (KnightGownTier == 4 && owner.CountInv("KnightGownIP4Buff")) ArmorIPFactor = 1.675;
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - ArmorIPBuff): %.8f", ArmorIPFactor);
			
			double TimeFactor = 1.00;
			if (TimeFreezeTimer && TimeFreezeIPBuff)
			{
				TimeFactor *= TimeBuffMulti;
			}
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - TimeFreezeIPBuff): %.8f", TimeFactor);

			double SigilFactor = 1.00;
			if (damageType == 'Sigil' || damageType == 'SpectralLow')
			{
				let Sigl = SigilDD(owner.FindInventory("SigilDD"));
				if (Sigl)
				{
					SigilFactor = (0.75 + frandom(0.0000,((Sigl.health - 1) * 0.0625)));
				}
			}
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - Sigil): %.8f", SigilFactor);
			
			double CrisisFactor = 1.0;
			if (owner.CountInv("MysteryItem"))
			{
				if (owner.CountInv("DecentHealth")) CrisisFactor = 1.05;
				if (owner.CountInv("LowHealth")) CrisisFactor = 1.25;
				if (owner.CountInv("CriticalHealth")) CrisisFactor = 2.25;
			}
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - MysteryItem): %.8f", CrisisFactor);
			
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("Damage (!passive - atkfct): %.8f", atkfct);
			
			double EventFactor = 1.0;
			if (owner.CountInv("AngerLevelEvent") > 0 || owner.CountInv("AngerLevelEventN") > 0) EventFactor *= (1.0 + (owner.CountInv("AngerLevelEvent") * 0.01) + (owner.CountInv("AngerLevelEventN") * 0.001));

			double tempfactor = 1.0;

			double TOTALFactor = 1.0
													 * MapFactor
													 * LVLFactor
													 * DDTFactor
													 * ATKFactor
													 * SkillFactor
													 * LandingFactor
													 * BuffFactor
													 * TimeFactor
													 * ArmorIPFactor
													 * CrisisFactor
													 * SigilFactor
													 * EventFactor
													 * tempfactor
													 * atkfct;
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("\c[gold]Damage (!passive - Total): %.8f", TOTALFactor);

			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (dydudebug_attackcalcs || dydudebug_actordmgdisplays) Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		double basedeffct = 0.0025;
		if (skill <= 0) basedeffct = 0.0030;
		if (skill == 1) basedeffct = 0.00275;
		if (skill == 2) basedeffct = 0.0025;
		if (skill == 3) basedeffct = 0.00225;
		if (skill >= 4) basedeffct = 0.0020;
		if (exex_expenabled) basedeffct *= (1.0 + (NumOfAfasDrops * 0.02));
		if (IsMorphed == 1) basedeffct *= 0.334;
		basedeffct *= exex_pdeffactor;
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int predmg = damage;
			if (playeractor) predmg = playeractor.mobjdmg;
			double factorchange = 1.00;
			if (predmg > 0) factorchange = 1.0 * damage / predmg;
			if (dydudebug_playerdamagemobj) Console.Printf("    (\cz(\cwsuper.DamageMobj\cz) player-StatItem input\c-: \cypredmg\c- / \cydamage\c- = \cy%d\c- /  \cy%d\c-, \cafactorchange\c- = \ca%.8f\c-)", predmg, damage, factorchange);

			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("FDamage (passive[pre]): %d (basedeffct: %.8f)", damage, basedeffct);
			
			// Map Completion [No-RPG Mode]
			double MapFactor = 1.00;
			if (!exex_expenabled) 
			{
				tempmax = 0.20;
				MapFactor = (1.00 - (totalcompleted * (basedeffct * 3)) - (totalallkills * (basedeffct)) - (totalallitems * (basedeffct)) - (totalallsecrets * (basedeffct)));
				if (MapFactor <= tempmax) MapFactor = tempmax;
				if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - Map Completion [NO RPG MODE ONLY]): %.8f", MapFactor);
				//Console.Printf("totalallkills: %d, totalallitems: %d, totalallitems: %d, totalcompleted: %d", totalallkills, totalallsecrets, totalallitems, totalcompleted);
			}

			// Level
			double LVLFactor = 1.00;
			if (exex_expenabled) LVLFactor = (1.00 - (TruePlayerLevel * basedeffct));
			if (IsMorphed == 1)
			{
				tempmax = 0.60;
			}
			else
			{
				tempmax = 0.20;
			}
			if (exex_expenabled) tempmax *= (1.0 - (NumOfAfasDrops * 0.02));
			if (LVLFactor <= tempmax) LVLFactor = tempmax;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - Level): %.8f", LVLFactor);
			
			// DD Trilogy NO-Rpg Bonuses
			double DDTFactor = 1.00;
			if (!exex_expenabled)
			{
				if ((A_CheckDDGame()))
				{
					DDTFactor = 0.00;
					if (DD_RoseMother) DDTFactor -= 0.014286;
					if (DD_GameMother) DDTFactor -= 0.014286;
					if (DD_MossMother) DDTFactor -= 0.014286;
					if (DD_GlobeMother) DDTFactor -= 0.014286;
					if (DD_SphinxMother) DDTFactor -= 0.014286;
					if (DD_HandMother1) DDTFactor -= 0.014286;
					if (DD_HandMother2) DDTFactor -= 0.014286;
					if (DD_TrueHandMother) DDTFactor -= 0.014286;
					if (AFD_Krag) DDTFactor -= 0.02;
					if (AFD_Quisling) DDTFactor -= 0.02;
					if (AFD_Lauritz) DDTFactor -= 0.02;
					if (AFD_Jorgensen1) DDTFactor -= 0.02;
					if (AFD_Jorgensen2) DDTFactor -= 0.02;
					if (AFD_JorgCannon) DDTFactor -= 0.02;
					if (CoS_Fafnir) DDTFactor -= 0.025;
					if (CoS_FractalHens) DDTFactor -= 0.025;
					if (CoS_ForsakenJorg) DDTFactor -= 0.025;
					if (CoS_EvilDinah) DDTFactor -= 0.025;
					if (CoS_Tempest) DDTFactor -= 0.025;
					DDTFactor *= 0.5;
					DDTFactor += 1.00;
					if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - DDT NoRPG): %.8f", DDTFactor);
				}
			}
			
			// Defense
			double DEFFactor = 1.00;
			if (exex_extraatkdefspd && exex_expenabled) DEFFactor = (1.00 - (TruePlayerDEF * basedeffct) - (random(1,PlayerLuck) * frandompick(0,0,0,0,0,0,(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.5),(basedeffct*0.5),(basedeffct*0.5),(basedeffct),(basedeffct),(basedeffct*2))));
			if (IsMorphed == 1)
			{
				tempmax = 0.60;
			}
			else
			{
				tempmax = 0.20;
			}
			if (exex_extraatkdefspd && exex_expenabled) tempmax *= (1.0 - (NumOfAfasDrops * 0.02));
			if (DEFFactor <= tempmax) DEFFactor = tempmax;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - EDefense): %.8f", DEFFactor);

			// Difficulty Level
			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 0.75;
			if (Skill == SKILL_EASY) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_HARD) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 1.25;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - Skill): %.8f", SkillFactor);
			
			// Buffs
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerGuard")) BuffFactor *= 0.5;
			if (Owner.CountInv("DinahTrueIPState")) BuffFactor *= 0.20;
			if (berserked) BuffFactor *= frandompick(0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility") || Owner.CountInv("PowerInvisibility2") || Owner.CountInv("PowerGhost") || Owner.CountInv("PowerGhost2") || Owner.CountInv("PowerRavenInvisibility")) BuffFactor *= frandompick(1.00,1.00,0.875,0.875,0.75);
			if (WineDefTier == 1 || WineDefTier == -1) BuffFactor *= frandompick(0.995,1.005);
			if (WineDefTier == 2 || WineDefTier == -2) BuffFactor *= frandompick(0.985,1.015);
			if (WineDefTier == 3 || WineDefTier == -3) BuffFactor *= frandompick(0.97,1.03);
			if (WineDefTier == 4 || WineDefTier == -4) BuffFactor *= frandompick(0.95,1.05);
			if (WineDefTier == 5 || WineDefTier == -5) BuffFactor *= frandompick(0.925,1.075);
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - Buff): %.8f", BuffFactor);
			
			double TimeFactor = 1.00;
			if (TimeFreezeTimer && TimeFreezeIPBuff)
			{
				TimeFactor *= (1.0 / TimeBuffMulti);
			}
			if (dydudebug_attackcalcs) Console.Printf("Damage (passive - TimeFreezeIPBuff): %.8f", TimeFactor);
			
			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			int BerserkFactorblock = frandompick[statitem2](0.334,0.5,0.667);
			int HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
			double temp1 = 0.00;
			double temp2 = 0.00;
			double temp3 = 0.00;
			If (weapon is "EvilWarriorShield") 
			{
				temp1 = ((0.1667 + (HellWarriorShieldLevel * 0.01667)) + (HellWarriorShieldLevel * 0.00625));
				if (Owner.CountInv("EWShieldDefendMode")) temp2 = ((0.433 + (HellWarriorShieldLevel * 0.0433)) + (HellWarriorShieldLevel * 0.005));
				if (Owner.CountInv("EWShieldDefendModeExtra")) temp3 = ((0.4866 + (HellWarriorShieldLevel * 0.04866)) + (HellWarriorShieldLevel * 0.001));
				if ((damageType == 'Slime' || damageType == 'Lava' || damageType == 'Magma' || damageType == 'Drowning' || damageType == 'Falling'))
				{
					double rand = (random(0,5) * 0.05);
					temp1 *= rand;
					temp2 *= rand;
					temp3 *= rand;
					BerserkFactorblock *= rand;
				}
				temp1 = (1.0 - temp1);
				temp2 = (1.0 - temp2);
				temp3 = (1.0 - temp3);
				BerserkFactorblock = (1.0 - BerserkFactorblock);
				EWShieldFactor *= temp1;
				EWShieldFactor *= temp2;
				EWShieldFactor *= temp3;
				if (EWShieldFactor < 1.00 && ( Owner.CountInv("PowerStrength") || Owner.CountInv("PowerStrengthDD"))) EWShieldFactor *= (1.0 - BerserkFactorblock);
			}
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - HellWarrior Shield): %.8f, \c[blue]temp1: %.8f, temp2: %.8f, temp3: %.8f, BerserkFactorblock: %.8f", EWShieldFactor, temp1, temp2, temp3, BerserkFactorblock);

			double PlayerFistBlockFactor = 1.00;
			int UsingFistBlock = 0;
			BerserkFactorblock = frandompick[statitem2](0.25,0.334,0.5,0.667,0.75);
			if (Owner.CountInv("FistPlayerBlock")) 
			{
				UsingFistBlock++;
				if (UsingFistBlock) 
				{
					PlayerFistBlockFactor *= 0.5;
					if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
							damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.5;
				}
			}
			if (Owner.CountInv("FistPlayerBlock2")) 
			{
				UsingFistBlock++;
				if (UsingFistBlock)
				{
					PlayerFistBlockFactor *= 0.375;
					if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
							damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.375;
				}
			}
			if (Owner.CountInv("FistPlayerBlock3")) 
			{
				UsingFistBlock++;
				if (UsingFistBlock) 
				{
					PlayerFistBlockFactor *= 0.25;
					if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
							damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.25;
				}
			}
			if (Owner.CountInv("FistPlayerBlock4")) 
			{
				UsingFistBlock++;
				if (UsingFistBlock) 
				{
					PlayerFistBlockFactor *= 0.125;
					if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
							damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.125;
				}
			}
			if (Owner.CountInv("FistPlayerBlockExtra") && UsingFistBlock) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
						damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.1;
				if (Owner.CountInv("FistPlayerBlockExtra2"))
				{
					PlayerFistBlockFactor *= 0.1;
					if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
							damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop') PlayerFistBlockFactor *= 0.1;
				}
			}
			if (PlayerFistBlockFactor < 1.00 && UsingFistBlock && Owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD")) PlayerFistBlockFactor *= BerserkFactorblock;
			if (!UsingFistBlock) PlayerFistBlockFactor = 1.00;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - FistBlock): %.8f", PlayerFistBlockFactor);

			// Weapons
			double WeaponFactor = 1.00;
			if (weapon is "HandToHand")
			{
				if (!UsingFistBlock) 
				{
					if (berserked) WeaponFactor = 1.0625;
										else WeaponFactor = 1.1875;
				}
				else
				{
					if (berserked) WeaponFactor = 0.96875;
										else WeaponFactor = 1.03125;
				}
			}
			if (weapon is "CricketBat")		WeaponFactor = 0.9375;
			if (weapon is "BlunderAxe")		WeaponFactor = 1.0625;
			if (weapon is "AppleJack")		WeaponFactor = 0.875;
			if (weapon is "Scrambler")		WeaponFactor = 0.75;
			if (weapon is "WizardPike")		WeaponFactor = 0.8125;
			if (weapon is "SuperVac")			WeaponFactor = 1.1875;
			if (weapon is "Grimophone")		WeaponFactor = 1.25;
			if (weapon is "CandleWhip")		WeaponFactor = 1.125;
			if (weapon is "FosnianCandle")		WeaponFactor = 1.00;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - WeaponEquipped): %.8f", WeaponFactor);

			double CrisisFactor = 1.0;
			if (owner.CountInv("MysteryItem"))
			{
				if (owner.CountInv("DecentHealth")) CrisisFactor = 0.975;
				if (owner.CountInv("LowHealth")) CrisisFactor = 0.75;
				if (owner.CountInv("CriticalHealth")) CrisisFactor = 0.375;
			}
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - Crisis): %.8f", CrisisFactor);
			
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - deffct): %.8f", deffct);
			
			double EventFactor = 1.0;
			if (owner.CountInv("AngerLevelEvent") > 0 || owner.CountInv("AngerLevelEventN") > 0) EventFactor *= (1.0 - (owner.CountInv("AngerLevelEvent") * 0.005) - (owner.CountInv("AngerLevelEvent") * 0.0005));

			double tempfactor = 1.0;
			if (ddafd_damageskilllevel && (A_CheckDDGame()))
			{
				if (skill <= 0) tempfactor = 0.5;
				if (skill == 1) tempfactor = 0.667;
				if (skill == 3) tempfactor = 1.5;
				if (skill >= 4) tempfactor = 2.0;
				if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("Damage (passive - DynDuchess/Appetite Skill Check): %.8f", tempfactor);
			}

			double TOTALFactor = 1.0
													 * MapFactor
													 * LVLFactor
													 * DDTFactor
													 * DEFFactor
													 * SkillFactor
													 * BuffFactor
													 * TimeFactor
													 * EWShieldFactor
													 * PlayerFistBlockFactor
													 * WeaponFactor
													 * CrisisFactor
													 * EventFactor
													 * tempfactor
													 * deffct;
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("\c[gold]Damage (passive - Total): %.8f", TOTALFactor);
			
			// The following allows TOTALFactor to be affected by varying types of (Partial)Defense-Ignoring attacks.
			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			double PreTOTALFactor = TOTALFactor;
			if (playeractor && playeractor.PlayerDefenseIgnoreFactor > 0.00 && TOTALFactor <= 1.00)
			{
				BaseIgnoreFactor = (1.0 - TOTALFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				TOTALFactor += DefenseIgnoreFactor;
				if (dydudebug_playerdamagemobj)
				{
					Console.Printf("    (\czPlayerStatItem input\c-: \caDefenseIgnoreFactor\c- = \ca%.8f\c- / \cy%.8f\c-, \cwPlyrDmgIgnFctr\c- = \cw%.8f\c-, \cxTOTALFactor\c- = %.8f \cw(%.8f)\c-, \cydmg = %d\c- (StatItem Actor))", 
					DefenseIgnoreFactor, BaseIgnoreFactor, playeractor.PlayerDefenseIgnoreFactor, TOTALFactor, PreTOTALFactor, damage);
				}
			}
			else
			{
				if (dydudebug_playerdamagemobj)
				{
					Console.Printf("    (\czPlayerStatItem input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", DefenseIgnoreFactor, damage);
				}
			}
			
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (dydudebug_defensecalcs || dydudebug_playerdamagemobj) Console.Printf("FDamage (passive - Final): %d", newdamage);

			if (playeractor && newdamage <= 0) 
			{
				playeractor.A_CheckNeverBleed(1, newdamage, playeractor.DmgFlags);
				if (playeractor.DmgFlags & DMG_INFLICTOR_IS_PUFF && playeractor.DmgInflictor)
				{
					playeractor.DmgInflictor.bPUFFONACTORS = true;
				}
			}
		}

	}
	
	double HUDSpeed;
	override double GetSpeedFactor()
	{
		name armorclasstype = "KGArmor";
		weapon = owner.player.ReadyWeapon;
		let playeractor = DDPlayerPawn(owner);
		int ActualLevel = A_CheckActualLevel(1);
		
		CurrentHealth = owner.health;
		MaxHealthTrue = (BaseStartMaxHealth + HealthLevelAdd + HealthBonusAdd);

		Speed = 1.00;
		HUDSpeed = Speed;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [base]: %.8f", Speed);

		double BaseFactor = 1.0;
		double BaseMul = 0.009375;
		if (exex_expenabled) BaseMul *= (1.0 + (NumOfAfasDrops * 0.02));
		if (IsMorphed == 1) BaseMul *= 3;
		BaseMul *= exex_pspdfactor;
		double tempmax;
		if (IsMorphed == 1)
		{
			tempmax = 7.5;
		}
		else
		{
			tempmax = 2.5;
		}
		if (exex_expenabled) tempmax *= (1.0 + (NumOfAfasDrops * 0.02));
		if (BaseFactor >= tempmax) BaseFactor = tempmax;
		Speed *= BaseFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [base (level+extra)]: %.8f", BaseFactor);

		// Map Completion [No-RPG Mode]
		double MapFactor = 1.00;
		if (!exex_expenabled) 
		{
			tempmax = 2.5;
			MapFactor = (1.00 + (totalcompleted * (BaseMul * 1)) + (totalallkills * (BaseMul * 0.3334)) + (totalallitems * (BaseMul * 0.3334)) + (totalallsecrets * (BaseMul * 0.3334)));
			if (MapFactor >= tempmax) MapFactor = tempmax;
			Speed *= MapFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [map completion (RPG mode off)]: %.8f", MapFactor);
		}

		if (exex_expenabled)
		{
			if (exex_extraatkdefspd) BaseFactor *= (1.00 + (TruePlayerLevel * BaseMul) + (TruePlayerSPD * BaseMul));
													else BaseFactor *= (1.00 + (TruePlayerLevel * BaseMul));
		}
		else
		{
			// DD Trilogy NO-Rpg Bonuses
			if ((A_CheckDDGame()))
			{
				double DDTFactor = 0.0;
				if (DD_RoseMother) DDTFactor += 0.014286;
				if (DD_GameMother) DDTFactor += 0.014286;
				if (DD_MossMother) DDTFactor += 0.014286;
				if (DD_GlobeMother) DDTFactor += 0.014286;
				if (DD_SphinxMother) DDTFactor += 0.014286;
				if (DD_HandMother1) DDTFactor += 0.014286;
				if (DD_HandMother2) DDTFactor += 0.014286;
				if (DD_TrueHandMother) DDTFactor += 0.014286;
				if (AFD_Krag) DDTFactor += 0.02;
				if (AFD_Quisling) DDTFactor += 0.02;
				if (AFD_Lauritz) DDTFactor += 0.02;
				if (AFD_Jorgensen1) DDTFactor += 0.02;
				if (AFD_Jorgensen2) DDTFactor += 0.02;
				if (AFD_JorgCannon) DDTFactor += 0.02;
				if (CoS_Fafnir) DDTFactor += 0.025;
				if (CoS_FractalHens) DDTFactor += 0.025;
				if (CoS_ForsakenJorg) DDTFactor += 0.025;
				if (CoS_EvilDinah) DDTFactor += 0.025;
				if (CoS_Tempest) DDTFactor += 0.025;
				DDTFactor *= 0.5;
				DDTFactor += 1.0;
				Speed *= DDTFactor;
				if (dydudebug_speedcalcs) Console.Printf("SpeedX [base (DDT No RPGMode)]: %.8f", DDTFactor);
			}
		}
		
		double HWShieldSpeed = 1.00;
		If (weapon is "EvilWarriorShield")
		{
			if (Owner.CountInv("HWShieldBlockHold")) HWShieldSpeed = (0.70 * (1.0 - (HellWarriorShieldLevel * 0.01875))); 
																					else HWShieldSpeed = (0.85 * (1.0 - (HellWarriorShieldLevel * 0.009375)));
		}
		Speed *= HWShieldSpeed;
		HUDSpeed *= HWShieldSpeed;

		double HealthFactor = 1.0;
		if (CurrentHealth >= (MaxHealthTrue * 3)) 
		{
			if (skill <= 0) HealthFactor *= 1.5;
			if (skill == 1) HealthFactor *= 1.375;
			if (skill == 2) HealthFactor *= 1.25;
			if (skill == 3) HealthFactor *= 1.125;
			if (skill >= 4) HealthFactor *= 1.0625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.75))
		{
			if (skill <= 0) HealthFactor *= 1.4375;
			if (skill == 1) HealthFactor *= 1.328125;
			if (skill == 2) HealthFactor *= 1.21875;
			if (skill == 3) HealthFactor *= 1.109375;
			if (skill >= 4) HealthFactor *= 1.0546875;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) 
		{
			if (skill <= 0) HealthFactor *= 1.375;
			if (skill == 1) HealthFactor *= 1.28125;
			if (skill == 2) HealthFactor *= 1.1875;
			if (skill == 3) HealthFactor *= 1.09375;
			if (skill >= 4) HealthFactor *= 1.046875;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) 
		{
			HealthFactor *= 1.15625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) 
		{
			if (skill <= 0) HealthFactor *= 1.25;
			if (skill == 1) HealthFactor *= 1.1875;
			if (skill == 2) HealthFactor *= 1.125;
			if (skill == 3) HealthFactor *= 1.0625;
			if (skill >= 4) HealthFactor *= 1.03125;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) 
		{
			if (skill <= 0) HealthFactor *= 1.1875;
			if (skill == 1) HealthFactor *= 1.140625;
			if (skill == 2) HealthFactor *= 1.09375;
			if (skill == 3) HealthFactor *= 1.046875;
			if (skill >= 4) HealthFactor *= 1.0234375;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) 
		{
			if (skill <= 0) HealthFactor *= 1.125;
			if (skill == 1) HealthFactor *= 1.09375;
			if (skill == 2) HealthFactor *= 1.0625;
			if (skill == 3) HealthFactor *= 1.03125;
			if (skill >= 4) HealthFactor *= 1.015625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) 
		{
			if (skill <= 0) HealthFactor *= 1.09375;
			if (skill == 1) HealthFactor *= 1.0625;
			if (skill == 2) HealthFactor *= 1.03125; 
			if (skill == 3) HealthFactor *= 1.015625;
			if (skill >= 4) HealthFactor *= 1.0078125;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) 
		{
			HealthFactor *= 1.00;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) 
		{
			if (skill <= 0) HealthFactor *= 0.984375;
			if (skill == 1) HealthFactor *= 0.96875;
			if (skill == 2) HealthFactor *= 0.9375;
			if (skill == 3) HealthFactor *= 0.90625;
			if (skill >= 4) HealthFactor *= 0.875;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.25))
		{
			if (skill <= 0) HealthFactor *= 0.96875;
			if (skill == 1) HealthFactor *= 0.9375;
			if (skill == 2) HealthFactor *= 0.875;
			if (skill == 3) HealthFactor *= 0.8125;
			if (skill >= 4) HealthFactor *= 0.75;
		}
		else 
		{
			if (skill <= 0) HealthFactor *= 0.9375;
			if (skill == 1) HealthFactor *= 0.875;
			if (skill == 2) HealthFactor *= 0.75;
			if (skill == 3) HealthFactor *= 0.625;
			if (skill >= 4) HealthFactor *= 0.5;
		}
		Speed *= HealthFactor;
		HUDSpeed *= HealthFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [health]: %.8f", HealthFactor);

		if (Owner.CountInv("IsKicking") && owner.player.onground)
		{
			double KickingFactor = 1.0;
			KickingFactor = frandompick(0.10,0.1112,0.1112,0.125,0.125,0.125,0.125,0.125,0.125,0.14285,0.14285,0.1667);
			if (random(1,8) <= randompick(5,5,5,5,6,6,7)) KickingFactor *= 0.5;
			double crouch = (1.0 + ((1.0 - owner.player.crouchfactor) * 10.0));
			if (dydudebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			KickingFactor *= crouch;
			double remainder = (1.00 - KickingFactor);
			double extra = (ActualLevel * double(remainder / ((exex_kickspdlvlint * 8) * 1.0)));
			if (extra >= remainder) extra = remainder;
			KickingFactor += extra;
			if (KickingFactor >= 1.000) KickingFactor = 1.000;
			if (dydudebug_speedcalcs) Console.Printf("KickingFactor: %.8f, extra: %.8f, remainder: %.8f", KickingFactor, extra, remainder);
			
			Speed *= KickingFactor;
			HUDSpeed *= KickingFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [kicking]: %.8f", KickingFactor);
		}

		if (Owner.CountInv("IsUppercutting") && owner.player.onground)
		{
			double UppercutFactor = 1.0;
			UppercutFactor = frandompick(0.1667,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			double crouch = (1.0 - ((1.0 - owner.player.crouchfactor) * 1.96875));
			if (dydudebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			UppercutFactor *= crouch;
			double remainder = (1.00 - UppercutFactor);
			double extra = (ActualLevel * double(remainder / ((exex_upcutspdlvlint * 8) * 1.0)));
			if (extra >= remainder) extra = remainder;
			UppercutFactor += extra;
			if (UppercutFactor >= 1.000) UppercutFactor = 1.000;
			if (dydudebug_speedcalcs) Console.Printf("UppercutFactor: %.8f, extra: %.8f, remainder: %.8f", UppercutFactor, extra, remainder);
			
			Speed *= UppercutFactor;
			HUDSpeed *= UppercutFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [uppercut]: %.8f", UppercutFactor);
		}

		if (Owner.CountInv("IsPunching") && owner.player.onground)
		{
			double PunchFactor = 1.0;
			PunchFactor = frandompick(0.6667,0.75,0.75,0.8,0.8,0.8,0.8,0.8,0.8,0.8334,0.8334,0.8572);
			//double crouch = (1.0 + ((1.0 - owner.player.crouchfactor) * 0.1));
			//if (dydudebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			//PunchFactor *= crouch;
			double remainder = (1.00 - PunchFactor);
			double extra = (ActualLevel * double(remainder / ((exex_punchspdlvlint * 8) * 1.0)));
			if (extra >= remainder) extra = remainder;
			PunchFactor += extra;
			if (PunchFactor >= 1.000) PunchFactor = 1.000;
			if (dydudebug_speedcalcs) Console.Printf("PunchFactor: %.8f, extra: %.8f, remainder: %.8f", PunchFactor, extra, remainder);
			
			Speed *= PunchFactor;
			HUDSpeed *= PunchFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [uppercut]: %.8f", PunchFactor);
		}
		
		double PlayerFistBlockFactor = 1.0;
		if (Owner.CountInv("FistPlayerBlockItem"))
		{
			if (Owner.CountInv("FistPlayerBlock")) PlayerFistBlockFactor *= frandom(0.625,0.667);
			if (Owner.CountInv("FistPlayerBlock2")) PlayerFistBlockFactor *= frandom(0.667,0.75);
			if (Owner.CountInv("FistPlayerBlock3")) PlayerFistBlockFactor *= frandom(0.75,0.8334);
			if (Owner.CountInv("FistPlayerBlock4")) PlayerFistBlockFactor *= frandom(0.8334,0.925);
			Speed *= PlayerFistBlockFactor;
			HUDSpeed *= PlayerFistBlockFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Fist Block]: %.8f", PlayerFistBlockFactor);
		}

		double TimeFactor = 1.00;
		if (TimeFreezeTimer && TimeFreezeIPBuff)
		{
			TimeFactor = frandompick(1.125,1.167,1.167,1.167,1.167,1.167,1.25);
			Speed *= TimeFactor;
			HUDSpeed *= TimeFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Time Freeze IP Buff]: %.8f", TimeFactor);
		}
			
		double BerserkFactor = 1.0;
		if (berserked) 
		{
			if (skill <= 0) BerserkFactor *= 1.1875;
			if (skill == 1) BerserkFactor *= 1.15625;
			if (skill == 2) BerserkFactor *= 1.125;
			if (skill == 3) BerserkFactor *= 1.09375;
			if (skill >= 4) BerserkFactor *= 1.0625;
			Speed *= BerserkFactor;
			HUDSpeed *= BerserkFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Berserk]: %.8f", BerserkFactor);
		}
		
		double BuffFactor = 1.0;
		if (Owner.CountInv("DinahTrueIPState")) 
		{
			double temp = (0.28125 + ((ActualLevel - 1) * 0.028125));
			if (temp >= 0.84375) temp = 0.84375;
			BuffFactor *= temp;
		}
		if (Owner.CountInv("PowerHaste")) BuffFactor *= 1.3334;
		if (Owner.CountInv("PowerRatMorph")) BuffFactor *= 0.4;
		if (Owner.CountInv("CricketBatGuard")) BuffFactor *= frandom(0.95,0.975);
		if (Owner.CountInv("CricketBatGuard2")) BuffFactor *= frandom(0.85,0.925);
		if (Owner.CountInv("CricketBatGuard3")) BuffFactor *= frandom(0.625,0.675);
		if (Owner.CountInv("DoingSpinAttack")) BuffFactor *= (frandom(0.2125,0.23125) * 1.334);
		if (WineDefTier == 1 || WineDefTier == -1) BuffFactor *= frandom(0.965,0.975); // 1
		if (WineDefTier == 2 || WineDefTier == -2) BuffFactor *= frandom(0.89,0.91); // 2
		if (WineDefTier == 3 || WineDefTier == -3) BuffFactor *= frandom(0.80,0.84); // 4
		if (WineDefTier == 4 || WineDefTier == -4) BuffFactor *= frandom(0.69,0.75); // 6
		if (WineDefTier == 5 || WineDefTier == -5) BuffFactor *= frandom(0.565,0.665); // 10
		Speed *= BuffFactor;
		HUDSpeed *= BuffFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Buffs]: %.8f", BuffFactor);

		int ArmorAmt = owner.CountInv(armorclasstype);
		double armordiffmod = 1.00;
		if (exex_armoritemdifficulty == 1) armordiffmod = 2.0;
		if (exex_armoritemdifficulty == 2) armordiffmod = 2.5;
		if (exex_armoritemdifficulty >= 3) armordiffmod = 5.0;
		double ArmorM;
		double ArmorFactor = 1.0;
		if (KnightGownTier == 1) 
		{
			if (!owner.CountInv("KnightGownIP1Buff"))
			{
				if (berserked) ArmorM = (ArmorAmt * (0.00004 * armordiffmod)); // -0.01
									else ArmorM = (ArmorAmt * (0.00008 * armordiffmod)); // -0.02
			}
		}
		if (KnightGownTier == 2) 
		{
			if (!owner.CountInv("KnightGownIP2Buff"))
			{
				if (berserked) ArmorM = (ArmorAmt * (0.00006 * armordiffmod)); // -0.03
									else ArmorM = (ArmorAmt * (0.00012 * armordiffmod)); // -0.06
			}
		}
		if (KnightGownTier == 3) 
		{
			if (!owner.CountInv("KnightGownIP3Buff"))
			{
				if (berserked) ArmorM = (ArmorAmt * (0.000075 * armordiffmod)); // -0.075
									else ArmorM = (ArmorAmt * (0.00015 * armordiffmod)); // -0.15
			}
		}
		if (KnightGownTier == 4) 
		{
			if (!owner.CountInv("KnightGownIP4Buff"))
			{
				if (berserked) ArmorM = (ArmorAmt * (0.0000625 * armordiffmod)); // -0.125
									else ArmorM = (ArmorAmt * (0.000125 * armordiffmod)); // -0.25
			}
		}
		double ArmorML = ArmorM;
		let MiscItem = PlayerStatItem(Owner.FindInventory("PlayerStatItem"));
		if (MiscItem && ArmorM > 0.0) ArmorM *= (1.0 - (ActualLevel * 0.02));
		if (dydudebug_armordisplays) Console.Printf("%.8f (%.8f)", ArmorM, ArmorML);
		if (ArmorM < 0.0) ArmorM = 0.0;
		ArmorFactor = (1.0 - ArmorM);
		if (ArmorFactor > 1.00) ArmorFactor = 1.00;
		Speed *= ArmorFactor;
		HUDSpeed *= ArmorFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Armor]: %.8f", ArmorFactor);
		
		// Special
		double SpecialFactor = 1.00;
		if (Owner.CountInv("ClassyRibbon")) SpecialFactor += 0.1875;
		if (Owner.CountInv("ExpeditionHat")) SpecialFactor -= 0.046875;
		Speed *= SpecialFactor;

		double WeaponFactor = 1.0;
		// Weapon Checks
		if (weapon is "HandToHand")
		{
			if (berserked) WeaponFactor *= 1.25;
								else WeaponFactor *= 1.125;
		}
		if (weapon is "CricketBat") WeaponFactor *= 1.00;
		if (weapon is "BlunderAxe") 
		{
			if (berserked) WeaponFactor *= 0.975;
								else WeaponFactor *= 0.95;
		}
		if (weapon is "AppleJack") 
		{
			if (berserked) WeaponFactor *= 1.075;
								else WeaponFactor *= 1.05;
		}
		if (weapon is "Scrambler") 
		{
			if (berserked) WeaponFactor *= 1.1875;
								else WeaponFactor *= 1.125;
		}
		if (weapon is "WizardPike")
		{
			if (berserked) WeaponFactor *= 1.1875;
								else WeaponFactor *= 1.125;
		}
		let vacammotype = owner.FindInventory("VacAmmo");
		if (vacammotype)
		{
			SuperVacAmmo = vacammotype.Amount;
			SuperVacAmmoMax = vacammotype.MaxAmount;
		}
		if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
		if (SuperVacAmmoMax > 0) 
		{
			if (berserked) SuperVacAmmoFactor = (SuperVacAmmo * ((SuperVacBaseMaxFactor * 0.5) / SuperVacAmmoMax));
								else SuperVacAmmoFactor = (SuperVacAmmo * (SuperVacBaseMaxFactor / SuperVacAmmoMax));
		}
		if (dydudebug_supervacother) Console.Printf("[Speed] SuperVacAmmoFactor: %.8f, SuperVacBaseMaxFactor: %.8f, SuperVacBaseMax: %d", SuperVacAmmoFactor, SuperVacBaseMaxFactor, SuperVacBaseMax);
		if (weapon is "SuperVac")
		{
			if (berserked) WeaponFactor *= (0.9375 - SuperVacAmmoFactor);
								else WeaponFactor *= (0.875 - SuperVacAmmoFactor);
		}
		if (weapon is "Grimophone")
		{
			if (berserked) WeaponFactor *= 0.90625;
								else WeaponFactor *= 0.8125;
		}
		if (weapon is "CandleWhip")
		{
			if (berserked) WeaponFactor *= 1.125;
								else WeaponFactor *= 1.0625;
		}
		if (weapon is "FosnianCandle") 
		{
			if (berserked) WeaponFactor *= 1.075;
								else WeaponFactor *= 1.05;
		}
		Speed *= WeaponFactor;
		HUDSpeed *= WeaponFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [WeaponEquipped]: %.8f", WeaponFactor);

		double MystItemFactor = 1.0;
		if (owner.CountInv("MysteryItem"))
		{
			if (owner.CountInv("DecentHealth")) MystItemFactor *= 1.0125;
			if (owner.CountInv("LowHealth")) MystItemFactor *= 1.0625;
			if (owner.CountInv("CriticalHealth")) MystItemFactor *= 1.3125;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Crisis]: %.8f", MystItemFactor);
		}
		Speed *= MystItemFactor;
		HUDSpeed *= MystItemFactor;
		
		// Drowning Debuff
		double DrownDebuffFactor = 1.00;
		if (drowndebufflevel) DrownDebuffFactor = 1.00 - (drowndebufflevel * frandompick(0.06,0.075,0.09));
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [DrownDebuff]: %.8f", DrownDebuffFactor);
		Speed *= DrownDebuffFactor;
		HUDSpeed *= DrownDebuffFactor;
			
		Speed *= spdfct;

		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Final]: %.8f, HUDSpeed: %.2f", Speed, HUDSpeed);
		if (playeractor) playeractor.truespeed = Speed;
		return Speed; 
	}
}

// For a later attempt at dynamic music. :V
class DynamicMusic : Inventory
{
	bool fightmusic;
	bool bossmusic;
	

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}

	override void Tick()
	{
		Super.Tick();
		//
	}
}

/////////////////////////////////////////////////////////////DASH
// Dash and double jump code by TheCamaleonMaligno ( https://www.youtube.com/watch?v=mTfGxY_Afhs )
// This code is heavily modified from the "Hell Crusher" variation of it :V
class PlayerDashJump : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	int itemtimer;
	
	actor weapon;
	int HellWarriorShieldLevel;
	Double DashDir, DashSpeed, DashVSpeed;
	Int DashTics, DashCharge, AirTics, DashCost;
	Bool DJump, Waiting;
	string dashgruntsound;
	int dashgruntchance;
	int dashtype;
	int airdashtype;
	Int DashMaxCharge, MaxDashes, MaxDashTics;
	bool slownthres1, slownthres2, slownthres3;
	bool berserked;
	int PlayerLevel;
	int TruePlayerLevel;
	int BaseDashChargeMax;
	int ExtraDashCharge;
	int SuperVacAmmo, SuperVacAmmoMax;
	int SuperVacBaseMax;
	double SuperVacBaseMaxFactor;
	double SuperVacAmmoFactor;
	
	Default
	{
		+Inventory.PERSISTENTPOWER
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.UNCLEARABLE;
	}
	
	int A_CheckActualLevel(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		int Level = 0;
		if (MiscItem)
		{
			if (exex_expenabled) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
			else
			{
				if (A_CheckDDGame()) Level = MiscItem.TotalNRPGLvlPts;
			}
		}
		return Level;
	}
	
	override void Tick()
	{
		Super.Tick();
		if (!Owner || Owner && (!Owner.Player || Owner.Health < 1)) Return;
		let globalvars = DDGlobalVariables.Get();
		let MiscItem = PlayerStatItem(Owner.FindInventory("PlayerStatItem"));
		weapon = owner.player.ReadyWeapon;
		if (Owner.CountInv("PowerStrength") || Owner.CountInv("PowerStrengthDD")) berserked = true;
		else berserked = false;
		
		HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
		
		if (MiscItem) 
		{
			SuperVacBaseMax = MiscItem.SuperVacBaseMax;
			SuperVacBaseMaxFactor = MiscItem.SuperVacBaseMaxFactor;
		}
		let vacammotype = owner.FindInventory("VacAmmo");
		if (vacammotype)
		{
			SuperVacAmmo = vacammotype.Amount;
			SuperVacAmmoMax = vacammotype.MaxAmount;
		}
		if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
		if (SuperVacAmmoMax > 0)
		{
			SuperVacAmmoFactor = (SuperVacAmmo * ((SuperVacBaseMaxFactor * 1.5) / SuperVacAmmoMax));
		}
		if (dydudebug_supervacother) Console.Printf("[Dash] SuperVacAmmoFactor: %.8f, SuperVacBaseMaxFactor: %.8f, SuperVacBaseMax: %d", SuperVacAmmoFactor, SuperVacBaseMaxFactor, SuperVacBaseMax);
		PlayerInfo PlayDash = Owner.Player;
		Int BTInput = PlayDash.cmd.buttons;
		dashgruntchance = randompick(66,66,67);
		MaxDashes = 1;
		double dashsndvol = 0.67;
		double dashgruntsndvol = 1.0;
		PlayerLevel = owner.CountInv("PlayerLevel");
		if (exex_expenabled) TruePlayerLevel = PlayerLevel; else TruePlayerLevel = 0;
		int ActualLevel = A_CheckActualLevel(1);
		int TruePlayerATK;
		int TruePlayerDEF;
		int TruePlayerSPD;
		if (MiscItem)
		{
			TruePlayerATK = MiscItem.TruePlayerATK;
			TruePlayerDEF = MiscItem.TruePlayerDEF;
			TruePlayerSPD = MiscItem.TruePlayerSPD;
		}
		MaxDashTics = randompick(6,6,7,7,7) + (TruePlayerLevel / 20);
		if (berserked) MaxDashTics *= (1.34 + (TruePlayerLevel * 0.004));

		int DashLvlTier1Thresh = 25;
		int DashLvlTier2Thresh = 50;
		int DashLvlTier3Thresh = 75;
		int DashLvlTier4Thresh = 100;

		double baseAddDashLevel = 1.25;
		int AddDashLevel = (TruePlayerLevel * baseAddDashLevel);
		double ADashFactor = 1.5;
		if (skill <= SKILL_VERY_EASY) baseAddDashLevel = 1.625;
		if (skill == SKILL_EASY) baseAddDashLevel = 1.5;
		if (skill == SKILL_NORMAL) baseAddDashLevel = 1.375;
		if (skill == SKILL_HARD) baseAddDashLevel = 1.25;
		if (skill >= SKILL_VERY_HARD) baseAddDashLevel = 1.125;

		AddDashLevel = (ActualLevel * (baseAddDashLevel * ADashFactor));
		if (ActualLevel >= DashLvlTier1Thresh) AddDashLevel += ((ActualLevel - DashLvlTier1Thresh) * ((baseAddDashLevel * 0.5) * ADashFactor));
		if (ActualLevel >= DashLvlTier2Thresh) AddDashLevel += ((ActualLevel - DashLvlTier2Thresh) * ((baseAddDashLevel * 0.25) * ADashFactor));
		if (ActualLevel >= DashLvlTier3Thresh) AddDashLevel += ((ActualLevel - DashLvlTier3Thresh) * ((baseAddDashLevel * 0.125) * ADashFactor));
		if (ActualLevel >= DashLvlTier4Thresh) AddDashLevel += ((ActualLevel - DashLvlTier4Thresh) * ((baseAddDashLevel * 0.0625) * ADashFactor));
		
		if (itemtimer <= 2)
		{
			if (globalvars) 
			{
				if (exex_deathexitaffectsstats) 
				{
					BaseDashChargeMax = random(27,30);
					if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random(32,35);
					if (skill == SKILL_EASY) BaseDashChargeMax = random(30,32);
					if (skill == SKILL_NORMAL) BaseDashChargeMax = random(27,30);
					if (skill == SKILL_HARD) BaseDashChargeMax = random(25,27);
					if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random(22,25);
				}
				else
				{
					if (globalvars.ClassCheck <= 2)
					{
						BaseDashChargeMax = random(27,30);
						if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random(32,35);
						if (skill == SKILL_EASY) BaseDashChargeMax = random(30,32);
						if (skill == SKILL_NORMAL) BaseDashChargeMax = random(27,30);
						if (skill == SKILL_HARD) BaseDashChargeMax = random(25,27);
						if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random(22,25);
					}
					else
					{
						BaseDashChargeMax = globalvars.BaseDashChargeMax;
					}
				}
			}
		}
		else
		{
			if (BaseDashChargeMax == 0) BaseDashChargeMax = globalvars.BaseDashChargeMax;
		}

		int ExDashCharge2 = ExtraDashCharge;
		int AddDashLevel2 = AddDashLevel;
		int PerkFactor2 = 0;
		if (!exex_expenabled) 
		{
			if (skill <= 0) ExDashCharge2 *= 4.0;
			if (skill == 1) ExDashCharge2 *= 3.5;
			if (skill == 2) ExDashCharge2 *= 3.0;
			if (skill == 3) ExDashCharge2 *= 2.5;
			if (skill >= 4) ExDashCharge2 *= 2.0;
			AddDashLevel2 = 0;
			if (MiscItem)
			{
				AddDashLevel2 += (MiscItem.totalcompleted * 1.0);
				AddDashLevel2 += (MiscItem.totalallkills * 0.3334);
				AddDashLevel2 += (MiscItem.totalallitems * 0.3334);
				AddDashLevel2 += (MiscItem.totalallsecrets * 0.3334);
				if (berserked) AddDashLevel2 *= 1.125;
			}

			// DD Trilogy NO-Rpg Bonuses
			if (MiscItem)
			{
				if ((A_CheckDDGame()))
				{
					if (MiscItem.DD_RoseMother) PerkFactor2 += 14.2857;
					if (MiscItem.DD_GameMother) PerkFactor2 += 14.2857;
					if (MiscItem.DD_MossMother) PerkFactor2 += 14.2857;
					if (MiscItem.DD_GlobeMother) PerkFactor2 += 14.2857;
					if (MiscItem.DD_SphinxMother) PerkFactor2 += 14.2857;
					if (MiscItem.DD_HandMother1) PerkFactor2 += 14.2857;
					if (MiscItem.DD_HandMother2) PerkFactor2 += 14.2857;
					if (MiscItem.DD_TrueHandMother) PerkFactor2 += 14.2857;
					if (MiscItem.AFD_Krag) PerkFactor2 += 20;
					if (MiscItem.AFD_Quisling) PerkFactor2 += 20;
					if (MiscItem.AFD_Lauritz) PerkFactor2 += 20;
					if (MiscItem.AFD_Jorgensen1) PerkFactor2 += 20;
					if (MiscItem.AFD_Jorgensen2) PerkFactor2 += 20;
					if (MiscItem.AFD_JorgCannon) PerkFactor2 += 20;
					if (MiscItem.CoS_Fafnir) PerkFactor2 += 25;
					if (MiscItem.CoS_FractalHens) PerkFactor2 += 25;
					if (MiscItem.CoS_ForsakenJorg) PerkFactor2 += 25;
					if (MiscItem.CoS_EvilDinah) PerkFactor2 += 25;
					if (MiscItem.CoS_Tempest) PerkFactor2 += 25;
					PerkFactor2 *= 0.5;
				}
			}
		}
		DashMaxCharge = BaseDashChargeMax + AddDashLevel2 + ExDashCharge2 + PerkFactor2;
		if (dydudebug_dashing) Console.Printf("DashMaxCharge: %d (BaseDashChargeMax: %d, AddDashLevel2: %d (%d), ExtraDashCharge2: %d (%d), PerkFactor2: %d", DashMaxCharge, BaseDashChargeMax, AddDashLevel2, AddDashLevel, ExDashCharge2, ExtraDashCharge, PerkFactor2);

		if (berserked) DashMaxCharge *= 1.125;
		if (itemtimer == 0) DashCharge = DashMaxCharge;

		double DashSpdMul = 1.00;
		DashSpeed = (25 + (ActualLevel * 0.125));
		if (Owner.CountInv("DinahTrueIPState")) 
		{
			double temp = 0.125;
			if (exex_expenabled) temp = (0.125 + ((ActualLevel - 1) * 0.0125));
			if (temp >= 0.50) temp = 0.50;
			DashSpdMul *= temp;
		}
		if (owner.CountInv("PowerEggBuff") || owner.CountInv("PowerEggBuff2")) 
		{
			if (MiscItem) DashSpdMul += (0.04 + (MiscItem.UsedEggHeal * 0.0004));
							 else DashSpdMul += 0.04;
		}
		if (owner.CountInv("PowerFruitBuff") || owner.CountInv("PowerFruitBuff2")) DashSpdMul += 0.02;
		if (owner.CountInv("PowerRoastBuff")) DashSpdMul += 0.04;
		if (owner.CountInv("PowerMealBuff") || owner.CountInv("PowerMealBuff2")) DashSpdMul += 0.08;
		if (owner.CountInv("PowerMeal2Buff") || owner.CountInv("PowerMeal2Buff2")) DashSpdMul += 0.08;
		if (weapon is "HandToHand") DashSpdMul += 0.09375;
		if (weapon is "SuperVac") DashSpdMul -= (0.09375 + SuperVacAmmoFactor);
		if (weapon is "Grimophone") DashSpdMul -= 0.1875;
		If (weapon is "EvilWarriorShield")
		{
			double ShieldDashMul;
			if (Owner.CountInv("HWShieldBlockHold")) ShieldDashMul = (0.60 * (1.0 - (HellWarriorShieldLevel * 0.025)));
																					else ShieldDashMul = (0.80 * (1.0 - (HellWarriorShieldLevel * 0.0125)));
			double ShieldDashMul2 = (1.0 - ShieldDashMul);
			if (MiscItem) ShieldDashMul += (ShieldDashMul2 * (ActualLevel * 0.01));
			if (ShieldDashMul > (1.0 - (ShieldDashMul2 * 0.75))) ShieldDashMul = (1.0 - (ShieldDashMul2 * 0.75));
			if (dydudebug_dashing) Console.Printf("ShieldDashMul: %.8f, ShieldDashMul2: %.8f", ShieldDashMul, ShieldDashMul2);
			DashSpdMul *= ShieldDashMul;
		}
		DashSpeed *= DashSpdMul;
		if (berserked) DashSpeed *= 1.125;
		if (dydudebug_dashing) Console.Printf("DashSpeed: %.8f", DashSpeed);

		DashCost = 35;
		if (owner.CountInv("PowerEggBuff") || owner.CountInv("PowerEggBuff2")) 
		{
			if (MiscItem) DashCost -= (2 + (MiscItem.UsedEggHeal * 0.0334));
							 else DashCost -= 2;
		}
		if (owner.CountInv("PowerFruitBuff") || owner.CountInv("PowerFruitBuff2")) DashCost -= 1;
		if (owner.CountInv("PowerRoastBuff")) DashCost -= 2;
		if (owner.CountInv("PowerMealBuff") || owner.CountInv("PowerMealBuff2")) DashCost -= 2;
		if (owner.CountInv("PowerMeal2Buff") || owner.CountInv("PowerMeal2Buff2")) DashCost -= 2;
		if (owner.CountInv("NormalHealth")) DashCost *= 1.0;
		if (owner.CountInv("DecentHealth")) DashCost *= 1.125;
		if (owner.CountInv("LowHealth")) DashCost *= 1.25;
		if (owner.CountInv("CriticalHealth")) DashCost *= 1.5;
		if (MiscItem)
		{
			double WineDashCostMul = 0.00;
			if (MiscItem.WineDefTier == 1) WineDashCostMul = 0.25;
			if (MiscItem.WineDefTier == 2) WineDashCostMul = 0.50;
			if (MiscItem.WineDefTier == 3) WineDashCostMul = 0.875;
			if (MiscItem.WineDefTier == 4) WineDashCostMul = 1.25;
			if (MiscItem.WineDefTier == 5) WineDashCostMul = 1.75;
			if (MiscItem.WineDefTier == -1) WineDashCostMul = (0.25 * 0.25);
			if (MiscItem.WineDefTier == -2) WineDashCostMul = (0.50 * 0.25);
			if (MiscItem.WineDefTier == -3) WineDashCostMul = (0.875 * 0.25);
			if (MiscItem.WineDefTier == -4) WineDashCostMul = (1.25 * 0.25);
			if (MiscItem.WineDefTier == -5) WineDashCostMul = (1.75 * 0.25);
			if (skill == SKILL_VERY_EASY) WineDashCostMul *= 0.875;
			if (skill == SKILL_EASY) WineDashCostMul *= 0.95;
			if (skill == SKILL_NORMAL) WineDashCostMul *= 1.00;
			if (skill == SKILL_VERY_HARD) WineDashCostMul *= 1.05;
			if (skill == SKILL_HARD) WineDashCostMul *= 1.125;
			WineDashCostMul += 1.00;
			if (WineDashCostMul > 1.00) DashCost *= WineDashCostMul;
		}
		if (weapon is "HandToHand")
		{
			if (exex_expenabled)
			{
				if (berserked) DashCost -= 4;
									else DashCost -= 3;
			}
			else
			{
				if (berserked) DashCost -= 6;
									else DashCost -= 4;
			}
		}
		if (weapon is "CandleWhip")
		{
			if (exex_expenabled)
			{
				if (berserked) DashCost -= 2;
									else DashCost -= 1;
			}
			else
			{
				if (berserked) DashCost -= 3;
									else DashCost -= 2;
			}
		}
		if (weapon is "CricketBat" && owner.CountInv("IsInBatGuardFrame"))
		{
			if (exex_expenabled)
			{
				if (ActualLevel >= DashLvlTier4Thresh)
				{
					if (!berserked) DashCost *= 1.125;
										else DashCost *= 1.03125;
				}
				else
				if (ActualLevel >= DashLvlTier3Thresh)
				{
					if (!berserked) DashCost *= 1.1875;
										else DashCost *= 1.046875;
				}
				else
				if (ActualLevel >= DashLvlTier2Thresh)
				{
					if (!berserked) DashCost *= 1.1875;
										else DashCost *= 1.0625;
				}
				else
				if (ActualLevel >= DashLvlTier1Thresh)
				{
					if (!berserked) DashCost *= 1.25;
										else DashCost *= 1.0625;
				}
				else
				{
					if (!berserked) DashCost *= 1.25;
										else DashCost *= 1.125;
				}
			}
			else
			{
				if (!berserked) DashCost *= 1.125;
									else DashCost *= 1.0625;
			}
		}
		if (weapon is "EvilWarriorShield")
		{
			if (!berserked)
			{
				if (Owner.CountInv("HWShieldBlockHold")) DashCost *= (1.40 * (1.0 + (HellWarriorShieldLevel * 0.025)));
																						else DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
			}
			else
			{
				if (Owner.CountInv("HWShieldBlockHold")) DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
																						else DashCost *= (1.10 * (1.0 + (HellWarriorShieldLevel * 0.00625)));
			}
		}

		if (!exex_expenabled)
		{
			int ChargeDiff = DashCost - DashMaxCharge;
			if (ChargeDiff > 0)
			{
				if (skill <= 0) DashMaxCharge += (ChargeDiff * 1.5);
				if (skill == 1) DashMaxCharge += (ChargeDiff * 1.125);
				if (skill == 2) DashMaxCharge += ChargeDiff;
				if (skill == 3) DashMaxCharge += (ChargeDiff * 0.875);
				if (skill >= 4) DashMaxCharge += (ChargeDiff * 0.5);
			}
		}
		vacammotype = owner.FindInventory("VacAmmo");
		if (vacammotype)
		{
			SuperVacAmmo = vacammotype.Amount;
			SuperVacAmmoMax = vacammotype.MaxAmount;
		}
		if (SuperVacAmmoMax < SuperVacBaseMax) SuperVacAmmoMax = SuperVacBaseMax;
		if (weapon is "SuperVac")
		{
			if (!berserked) DashCost += (1 + (SuperVacAmmo * (1 / SuperVacAmmoMax)));
								 else DashCost += (0 + (SuperVacAmmo * (0.5 / SuperVacAmmoMax)));
		}
		if (weapon is "Grimophone")
		{
			if (berserked) DashCost += 1;
								else DashCost += 2;
		}
		double ssa = 1.0;
		if (owner.CountInv("ExpeditionHat")) ssa -= 0.125;
		if (owner.CountInv("ClassyRibbon")) ssa += 0.25;
		DashCost *= ssa;
		if (DashCost <= 1) DashCost = 1;
		
		if (dydudebug_dashing) Console.Printf("DashCost [start]: %d", DashCost);

		if (dydudebug_dashmeter) Console.Printf("DashMaxCharge: %d (%d, %d, %d), DashCost: %d", DashMaxCharge, BaseDashChargeMax, AddDashLevel, ExtraDashCharge, DashCost);
		
		airdashtype = 0;
		// 0 = No loss of altitude
		// 1 = Start with a short "hop" but fall to the ground afterwards.
		
		int pushingdirection = 0;
		If (BTInput & BT_FORWARD) pushingdirection += 1;
		If (BTInput & BT_BACK) pushingdirection += 2;
		If (BTInput & BT_MOVELEFT) pushingdirection += 4;
		If (BTInput & BT_MOVERIGHT) pushingdirection += 8;
		
		if (!Waiting &&
				!owner.CountInv("NoDashing") &&
				(BTInput & BT_USER3) && 
				DashCharge >= DashCost && 
				pushingdirection &&
				!DashTics)
		{
			//Console.Printf("OnGround: %d", PlayDash.OnGround);
			DashDir = 0;
			If (BTInput & BT_FORWARD) DashDir = 0;
			If (BTInput & BT_BACK) DashDir = 180;
			If (BTInput & BT_MOVELEFT) DashDir = 90;
			If (BTInput & BT_MOVERIGHT) DashDir = -90;
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVELEFT)) DashDir = 45;
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVERIGHT)) DashDir = -45;
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVELEFT)) DashDir = (180 - 45);
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVERIGHT)) DashDir = (180 + 45);
			DashDir += Owner.Angle;

			DashCharge -= DashCost;
			if (DashCharge <= 0) 
			{
				Waiting = True;
				DashCharge = 0;
			}
			
			// Dash "Speed"
			
			if (PlayDash.OnGround)
			{
				DashTics = MaxDashTics;
				dashtype = 0;
				Owner.A_StartSound("player/dash",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			else
			{
				if (airdashtype != 1) DashSpeed *= 0.8;
				DashVSpeed = (5 * (ActualLevel * 0.025));
				if (berserked) DashVSpeed *= 1.04;
				DashTics = MaxDashTics;
				dashtype = 1; // Airdash
				Owner.A_StartSound("player/airjump",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			
			if (owner.CountInv("HWShieldBlockHold")) 
			{
				Owner.A_StartSound("shielddash1", randompick(180,181), CHANF_OVERLAP, frandom(0.65,0.95), ATTN_NORM, frandom(0.667,1.333));
			}
			
			if (random(1,100) <= dashgruntchance)
			{
				int dashgruntrand = 0;
				if (Owner.GetClassName() == "DinahPlayer")
				{
					dashgruntrand = random(1,6);
					if (exex_dinahextravoices)
					{
						if (dashgruntrand >= 1 && dashgruntrand <= 3) dashgruntsound = "dinah/jump";
						if (dashgruntrand == 4) dashgruntsound = "dinah/kiai1";
						if (dashgruntrand == 5) dashgruntsound = "dinah/kiai2";
						if (dashgruntrand == 6) dashgruntsound = "dinah/kiai3";
					}
					else
					{
						dashgruntsound = "dinah/jump";
					}
				}
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (Owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					if (dashgruntrand > 0)
					{
						Owner.A_StopSound(CHAN_VOICE);
						Owner.A_StartSound(dashgruntsound,CHAN_VOICE,CHANF_DEFAULT,(dashgruntsndvol * frandom(1.25,1.375)),ATTN_NORM,maskpitch);
					}
				}
			}

			bool CollisonSpawn = false;
			if (CollisonSpawn)
			{
				Actor CollDash = Spawn("DashCollisionChecker", Owner.Pos);
				CollDash.bSOLID = True;
				CollDash.Master = Self;
				CollDash.Target = Owner;
				CollDash.A_SetSize(Owner.Radius, Owner.Height);
				CollDash.bNOTIMEFREEZE = True;
			}
		}
		if (DashTics)
		{
			if (MiscItem.GrimophoneDebuffTimer) { } else { owner.bFORCERADIUSDMG = false; }
			
			//if (PlayDash.OnGround) { PlayDash.OnGround = False; Owner.AddZ(1); }
			if (PlayDash.OnGround && DashTics % 2) 
			{
				Owner.A_SpawnItemEx("DashPuff",0,0,randompick(4,6,8),0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); 
			}
			
			if (!PlayDash.OnGround && 
					(DashTics > (MaxDashTics - 2)) 
					&& airdashtype == 1) 
					{
						Owner.Vel.Z += DashVSpeed;
					}
					else
					{
						Owner.Vel.Z = 0.0;
					}

			Owner.A_SetBlend("78447E",frandom(0.08,0.12),random(2,3));
			Owner.A_SetInventory("PlayerDashing",1);
			if (owner.CountInv("IsInBatGuardFrame")) Owner.A_SetInventory("PlayerBatDashing",1);
			Owner.bSHOOTABLE = false;
			Owner.bVISIBILITYPULSE = true;
			Owner.bTHRUACTORS = true;
			DashTics--;
			
			Owner.A_SetInventory("DashTimeFreezer",0);
			Owner.VelFromAngle(DashSpeed, DashDir);
			string dashtype;

			double DashDmg;
			double DashRad;
			double DashFullRad;

			if (berserked)
			{
				if (DashTics > (MaxDashTics * 0.75)) DashSpeed *= 1.025;
				
				if (DashTics % 2) 
				{
					if (MiscItem.GrimophoneDebuffTimer) { }
					else { owner.bFORCERADIUSDMG = true; }
					
					if (owner.CountInv("IsInBatGuardFrame"))
					{
						DashDmg = ((random(8,12) + random(6,8)) * random(1,3));
						DashRad = (owner.radius * 3.0) + frandom(-4.5,4.5);
						dashtype = "DashingBG";
						if (ActualLevel >= exex_cricketspinlvlrequirement) DashDmg *= 1.25;
					}
					else
					{
						DashDmg = (random(8,12) * random(1,3));
						DashRad = (owner.radius * 2.25) + frandom(-1.5,1.5);
						dashtype = "Dashing";
					}
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
				if (owner.CountInv("IsInBatGuardFrame") && DashTics % 2 == 1)
				{
					if (random(1,4) <= 3)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }
	
						DashDmg = ((random(8,12) + random(6,8)) * random(1,3));
						DashRad = (owner.radius * 2.25) + frandom(-1.5,1.5);
						if (ActualLevel >= exex_cricketspinlvlrequirement) dashdmg *= 1.25;
						dashtype = "DashingBG";
						Owner.A_Explode(dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
					}
				}
				
				if (Owner.CountInv("HWShieldBlockHold"))
				{
					if (MiscItem.GrimophoneDebuffTimer) { }
					else { owner.bFORCERADIUSDMG = true; }

					DashDmg = ((random(4,10) + random(3,6)) * random(2,4));
					DashDmg += ((TruePlayerSPD * 1.25) + (TruePlayerATK * 0.3125) + (ActualLevel * 0.625));
					DashDmg *= (0.5 + (MiscItem.HellWarriorShieldLevel * 0.125));
					DashRad = (owner.radius * 4.5) + frandom(-6.0,6.0);
					DashRad *= (0.75 + (MiscItem.HellWarriorShieldLevel * 0.0625));
					dashtype = "DashingSD";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
			}
			else
			{
				if (DashTics % 2) 
				{
					if (random(1,4) <= 3)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }
						
						if (owner.CountInv("IsInBatGuardFrame"))
						{
							DashDmg = (random(6,8) * random(1,3));
							DashRad = (owner.radius * 3.0) + frandom(-2.0,2.0);
							dashtype = "DashingBG";
							if (ActualLevel >= exex_cricketspinlvlrequirement) dashdmg *= 1.25;
							Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
						}
					}
				}
				if (DashTics % 2 == 1) 
				{
					if (random(1,16) <= 9)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }

						if (owner.CountInv("IsInBatGuardFrame"))
						{
							dashdmg = (random(6,8) * random(1,3));
							dashtype = "DashingBG";
							if (ActualLevel >= exex_cricketspinlvlrequirement) dashdmg *= 1.25;
							Owner.A_Explode(dashdmg,(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"",dashtype);
						}
					}
				}
				
				if (Owner.CountInv("HWShieldBlockHold"))
				{
					if (MiscItem.GrimophoneDebuffTimer) { }
					else { owner.bFORCERADIUSDMG = true; }

					DashDmg = (random(3,6) * random(2,4));
					DashDmg += ((TruePlayerSPD * 0.625) + (TruePlayerATK * 0.15625) + (ActualLevel * 0.3125));
					DashDmg *= (0.5 + (MiscItem.HellWarriorShieldLevel * 0.125));
					DashRad = (owner.radius * 4.5) + frandom(-6.0,6.0);
					DashRad *= (0.75 + (MiscItem.HellWarriorShieldLevel * 0.0625));
					dashtype = "DashingSD";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
			}
			
			
			if (DashTics <= (MaxDashTics * 0.25))
			{
				if (!slownthres1)
				{
					slownthres1 = true;
					DashSpeed *= 0.85;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.5)) 
			{
				if (!slownthres2)
				{
					slownthres2 = true;
					DashSpeed *= 0.9;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.75))
			{
				if (!slownthres3)
				{
					slownthres3 = true;
					DashSpeed *= 0.95;
				}
			}
			if (dydudebug_dashing) Console.Printf("DashTics: %d / %d, Thresh: [1] %d, [2] %d, [3] %d, DashSpeed: %.8f, DashSpdMul: %.8f", DashTics, MaxDashTics, slownthres1, slownthres2, slownthres3, DashSpeed, DashSpdMul);
		}
		else
		{
			Owner.A_SetInventory("DashTimeFreezer",0);
			Owner.A_SetInventory("PlayerDashing",0);
			Owner.A_SetInventory("PlayerBatDashing",0);
			Owner.bSHOOTABLE = true;
			Owner.bVISIBILITYPULSE = false;
			Owner.bTHRUACTORS = false;
			dashtype = -1;
			slownthres1 = false;
			slownthres2 = false;
			slownthres3 = false;

			if (MiscItem.GrimophoneDebuffTimer) { }
			else 
			{
				owner.bFORCERADIUSDMG = false; 
			}
		}
		
		if (DashCharge < DashMaxCharge)
		{
			int basecharge = 0;
			if (!DashTics)
			{
				if (dydudebug_dashing) Console.Printf("(!DashTics)");
				if (berserked)
				{
					if (level.time % 16 == 0)
					{
						basecharge += 1; 
					}
					if (level.time % 8 == 0)
					{
						basecharge += 1; 
					}
					if (level.time % 4 == 0)
					{
						basecharge += 2; 
					}
					else
					{
						basecharge += 1; 
					}
				}
				else
				{
					if (level.time % 40 == 0) 
					{
						basecharge += 2; 
					}
					else
					{
						basecharge += 1; 
					}
				}
				double basechargeint = 0.0025;
				if (pushingdirection != 0) basechargeint *= 0.25;
				if (owner.CountInv("DinahTrueIPState")) basecharge *= (5.0 + (TruePlayerLevel * (basechargeint * 2.5)) + (TruePlayerSPD * (basechargeint * 2.5)));
				basecharge *= (1.0 + (TruePlayerLevel * basechargeint) + (TruePlayerSPD * basechargeint));
				if (dydudebug_dashing) Console.Printf("basecharge [dash]: %d, basechargeint: %.8f", basecharge, basechargeint);
				// DD Trilogy NO-Rpg Bonuses
				if (!exex_expenabled && MiscItem)
				{
					double DDTFactor = 0.0;
					if (A_CheckDDGame())
					{
						if (MiscItem.DD_RoseMother) DDTFactor += 0.14286;
						if (MiscItem.DD_GameMother) DDTFactor += 0.14286;
						if (MiscItem.DD_MossMother) DDTFactor += 0.14286;
						if (MiscItem.DD_GlobeMother) DDTFactor += 0.14286;
						if (MiscItem.DD_SphinxMother) DDTFactor += 0.14286;
						if (MiscItem.DD_HandMother1) DDTFactor += 0.14286;
						if (MiscItem.DD_HandMother2) DDTFactor += 0.14286;
						if (MiscItem.DD_TrueHandMother) DDTFactor += 0.14286;
						if (MiscItem.AFD_Krag) DDTFactor += 0.2;
						if (MiscItem.AFD_Quisling) DDTFactor += 0.2;
						if (MiscItem.AFD_Lauritz) DDTFactor += 0.2;
						if (MiscItem.AFD_Jorgensen1) DDTFactor += 0.2;
						if (MiscItem.AFD_Jorgensen2) DDTFactor += 0.2;
						if (MiscItem.AFD_JorgCannon) DDTFactor += 0.2;
						if (MiscItem.CoS_Fafnir) DDTFactor += 0.25;
						if (MiscItem.CoS_FractalHens) DDTFactor += 0.25;
						if (MiscItem.CoS_ForsakenJorg) DDTFactor += 0.25;
						if (MiscItem.CoS_EvilDinah) DDTFactor += 0.25;
						if (MiscItem.CoS_Tempest) DDTFactor += 0.25;
						DDTFactor *= 0.5;
						DDTFactor += 1.0;
						if (dydudebug_dashing) Console.Printf("DDTFactor: %.8f", DDTFactor);
						DDTFactor = int(floor(DDTFactor));
						basecharge *= DDTFactor;
					}
				}
				DashCharge += basecharge;
				if (DashCharge > DashMaxCharge) DashCharge = DashMaxCharge;
			}
			
			if (DashCharge >= DashMaxCharge)
			{
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (dydudebug_dashing) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		else
		{
			if (DashCharge > DashMaxCharge)
			{
				DashCharge = DashMaxCharge;
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (dydudebug_dashing) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		if (dydudebug_dashing) Console.Printf("DashCost [end]: %d", DashCost);
		
		int dashcharges = (DashCharge / DashCost);
		int dashgauge;
		if (DashMaxCharge) dashgauge = DashCharge * 100 / DashMaxCharge;
		if (dashgauge > 100) dashgauge = 100;
		owner.A_SetInventory("DashGauge",dashgauge);
		owner.A_SetInventory("DashMaxCharge",DashMaxCharge);
		owner.A_SetInventory("DashCharges",dashcharges);
		owner.A_SetInventory("DashCharge",DashCharge);
		owner.A_SetInventory("DashTics",DashTics);
		owner.A_SetInventory("DashCost",DashCost);

		if (Waiting) owner.A_SetInventory("DashReady",0);
						else owner.A_SetInventory("DashReady",1);
		
		itemtimer++;
		if (globalvars)
		{
			globalvars.BaseDashChargeMax = BaseDashChargeMax;
		}
	}
	
	bool A_CheckDDGame()
	{
		if (owner.CountInv("IsDynDuchess") ||
				owner.CountInv("IsAppetite") || 
				owner.CountInv("IsCarnOfSouls") || 
				owner.CountInv("IsWeddingCake")) return true;
		return false;
	}
}

Class DashCollisionChecker : Actor
{
	PlayerDashJump je;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let sas = PlayerDashJump(Master);
		je = sas;
	}

	Override bool CanCollideWith(Actor other, bool passive)
	{
		if (Other == target || Other.bMissile)
		Return False;
		if (Pos.Z > (Other.Pos.Z + Other.Height) || Other.Pos.Z > (Pos.Z + Height)) Return False;
		if (Other.bSolid && Other.bShootable && Other.CanCollideWith(Self,0))
		Tracer = Other;
		Return False;
	}

	Override Void Tick()
	{
		Super.Tick();
		if (!target || !je || je && !je.dashtics) { Destroy(); Return; }
		SetOrigin((Target.Pos + (Target.Vel * 0.1)),0);
		Vel = Target.Vel;
		if (Tracer)
		{
			bThruActors = True;
			/*
			Let Cg = Weapon_Chaingun(Target.player.ReadyWeapon);
			if (Cg && Cg.Tracer)
			{
				bForcePain = True;
				Target.Vel *= 0;
				Tracer.DamageMobj(Self, Target, 75, 'Normal', 0, Target.Angle);
				Tracer.ApplyKickback(Target, Target, 300, Target.Angle, 'Normal', 0);
				Tracer.A_TakeInventory("DashStun");
				Tracer.A_GiveInventory("DashStun");
				Target.A_StartSound("Weapons/DE/ChaingunShieldDash",9,CHANF_OVERLAP,0.5);
				Target.A_QuakeEx(1,1,1,8,0,1,"",QF_SCALEDOWN);
				Cg.DashImpact();
				Cg.DashImpact();
			}
			*/
			je.DashSpeed = 0;
			Destroy();
		}
	}
}

class DevilMeleeWeakness : TempDefenseBuff
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.Icon "";
		Powerup.Duration 2147483646;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && damage > 0)
		{
			double TOTALFactor = 1.0;
			if (damageType == "Melee" ||
					damageType == "Fist" ||
					damageType == "Kick" ||
					damageType == "Stomp" ||
					damageType == "Dashing" ||
					damageType == "DashingBG" ||
					damageType == "DashingSD")
			{
				TOTALFactor = 2.5;
			}
			else
			if (damageType == "Zap" ||
					damageType == "Eldritch")
			{
				if (!(PushyAngel(source))) TOTALFactor = 0.4;
			}
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			//Console.Printf("[passive] newdamage: %d, olddmg: %d", newdamage, damage);
		}
	}
}

class ForsakenCloakResist : TempDefenseBuff
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.Icon "";
		Powerup.Duration 2147483646;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		//if (source) Console.Printf("source: %p [%s]", source, source.GetClassName());
		//if (player) Console.Printf("player: %p [%s]", player, player.GetClassName());
		if (passive && damage > 0)
		{
			double TOTALFactor = 1.0;
			string nm;
			nm = "CCards_Actor_BorrowedTimeBuff";
			if (owner && owner.CountInv(nm))
			{
				if (!(damageType == 'Suck' || 
							damageType == 'Sigil' || 
							damageType == 'SpectralLow' || 
							damageType == 'Massacre' || 
							damageType == 'SilentMassacre' ||
							damageType == 'Telefrag' ||
							damageType == 'TrueIP'))
				{
					if (source == player && 
							(player.CountInv("PowerLightAmp") || 
							 player.CountInv("PowerLightAmp2") ||
							 player.CountInv("PowerTorch")) && 
							 gl_enhanced_nightvision)
					{
						if (damageType == 'Zap' || damageType == 'Eldritch') TOTALFactor = (random(92,94) + random(-3,3));
						else if (damageType == 'Beats') TOTALFactor = (random(90,92) + random(-2,2));
						else TOTALFactor = (random(89,92) + random(-1,1));
						TOTALFactor *= 0.01;
					}
					else
					{
						if (damageType == 'Zap' || damageType == 'Eldritch') TOTALFactor = (random(65,73) + random(-7,7));
						else if (damageType == 'Beats') TOTALFactor = (random(60,65) + random(-5,5));
						else TOTALFactor = (random(55,67) + random(-2,3));
						TOTALFactor *= 0.01;
					}
				}
			}
			else
			{
				if (!(damageType == 'Suck' || 
							damageType == 'Sigil' || 
							damageType == 'SpectralLow' || 
							damageType == 'Massacre' || 
							damageType == 'SilentMassacre' ||
							damageType == 'Telefrag' ||
							damageType == 'TrueIP'))
				{
					if (source == player && 
							(player.CountInv("PowerLightAmp") || 
							 player.CountInv("PowerLightAmp2") ||
							 player.CountInv("PowerTorch")) && 
							 gl_enhanced_nightvision)
					{
						if (damageType == 'Zap' || damageType == 'Eldritch') TOTALFactor = (random(65,73) + random(-7,7));
						else if (damageType == 'Beats') TOTALFactor = (random(60,65) + random(-5,5));
						else TOTALFactor = (random(55,67) + random(-2,3));
						TOTALFactor *= 0.01;
					}
					else
					{
						if (damageType == 'Zap' || damageType == 'Eldritch') TOTALFactor = (random(30,45) + random(-15,15));
						else if (damageType == 'Beats') TOTALFactor = (random(20,30) + random(-10,10));
						else TOTALFactor = (random(10,15) + random(-5,5));
						TOTALFactor *= 0.01;
					}
				}
			}
			if (TOTALFactor >= 1.0) TOTALFactor = 1.0;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			//Console.Printf("[passive] newdamage: %d, olddmg: %d, TOTALFactor: %.8f", newdamage, damage, TOTALFactor);
		}
		else
		{
			//Console.Printf("[!passive] newdamage: %d, olddmg: %d", newdamage, damage);
		}
	}
}
