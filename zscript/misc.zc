class PlayerStatItem : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;

	int itemtimer;
	int IPTimer1;
	int afasdroptimer;
	int NumOfAfasDrops;
	int NumOfLegendMeds, MedCurrLvl, LegMedCap;
	
	bool MercyInvulnOn;
	int MercyInvulnTimer;
	int MercyInvulnMod;

	int LevelCap;
	int StaminaLevel;
	int AccuracyLevel;
	int Experience;
	Array<int> LevelExpRequirement;

	int landdmgbonus;
	int whistlecooldown;
	int RenderStyleType;
	int tempalpha;
	int SuperVacAmmo;

	int InitEXPTables;
	int PrevTimeFreezeTimer;
	int TimeFreeze;
	int TimeFreezeTimer;
	int CharacterClass;

	int HPRegenBoostTimer;
	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPDegenTimer;
	int HPRegenTimerMax;
	int HPDegenTimerMax;
	bool berserked;
	
	int DashTimer;

	int PrevHealthRatio;
	int HealthRatio;
	int CurrentHealth;
	int BaseStartMaxHealth;
	double ItemPoints;
	int MaxHealthTrue;
	int HealthLevelAdd;
	int HealthBonusAdd;
	int MaxHealthLimit;
	int MaxItemPoints;

	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int ArmorResistance;
	int ClassicDoomType;
	int ModType;
	int TotalMass;

	int PlayerLevel;
	int PlayerATK;
	int PlayerDEF;
	int PlayerSPD;
	int PlayerLUCK;
	int PlayerJUMP;
	int PrevATK, PrevDEF, PrevSPD;
	int HPMaxGain;
	
	int SurvivalRate;
	
	int SuperVacBagSize;
	
	int ClassCheck;
	
	int buttons;
	int FreezePlayer;
	int Player1TID;
	
	int StrifeStamLvl;
	int StrifeAccuLvl;
	
	int CricketBatBuffTimer, CricketBatBuffTimer2;
	int CricketBatSwingBuffTimer;
	
	int GrimophoneDebuffTimer;
	
	int actualjumpheight;
	double actualjumpheight2;
	int TrueJumpHeight;
	
	double baseregenmulti;
	
	double atkfct, deffct, spdfct, jmpfct, suvfct;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}

	override void DoEffect()
	{
		let playeractor = PlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a non-Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect(); 
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			// Load in Globalvars [Start]
			let globalvars = DDGlobalVariables.Get();
			if (globalvars)
			{
				if (itemtimer <= 2 && exex_deathexitaffectsstats) 
				{
					if (itemtimer == 0) ClassCheck = globalvars.ClassCheck = 0;
					PlayerLevel = globalvars.PlayerLevel = 0;
					Experience = globalvars.Experience = 0;
					globalvars.atkfct = atkfct = 1.0;
					globalvars.deffct = deffct = 1.0;
					globalvars.spdfct = spdfct = 1.0;
					globalvars.jmpfct = jmpfct = 1.0;
					globalvars.suvfct = suvfct = 1.0;
					globalvars.PlayerATK = PlayerATK = 0;
					globalvars.PlayerDEF = PlayerDEF = 0;
					globalvars.PlayerSPD = PlayerSPD = 0;
					globalvars.PlayerLuck = PlayerLuck = 0;
					globalvars.HealthLevelAdd = HealthLevelAdd = 0;
					globalvars.HealthBonusAdd = HealthBonusAdd = 0;
					globalvars.ItemPoints = ItemPoints = 0;
					globalvars.TotalSecretsFound = 0;
					if (itemtimer == 0 && dydudebug_deathexitdebug) Console.Printf("exex_deathexitaffectsstats: YES", exex_deathexitaffectsstats);
				}
				else
				{
					ClassCheck = globalvars.ClassCheck;
					PlayerLevel = globalvars.PlayerLevel;
					Experience = globalvars.Experience;
					atkfct = globalvars.atkfct;
					deffct = globalvars.deffct;
					spdfct = globalvars.spdfct;
					jmpfct = globalvars.jmpfct;
					suvfct = globalvars.suvfct;
					PlayerATK = globalvars.PlayerATK;
					PlayerDEF = globalvars.PlayerDEF;
					PlayerSPD = globalvars.PlayerSPD;
					PlayerLuck = globalvars.PlayerLuck;
					MaxHealthTrue = globalvars.MaxHealthTrue;
					HealthLevelAdd = globalvars.HealthLevelAdd;
					HealthBonusAdd = globalvars.HealthBonusAdd;
					ItemPoints = globalvars.ItemPoints;
					BaseStartMaxHealth = globalvars.BaseStartMaxHealth;
					if (itemtimer == 0) 
					{
						if (MaxHealthTrue) owner.player.mo.health = MaxHealthTrue;
						if (dydudebug_deathexitdebug)
						{
							Console.Printf("MaxHealthTrue: %d, HealthLevelAdd: %d, HealthBonusAdd: %d, BaseStartMaxHealth: %d", MaxHealthTrue, HealthLevelAdd, HealthBonusAdd, BaseStartMaxHealth);
							Console.Printf("exex_deathexitaffectsstats: NO", exex_deathexitaffectsstats);
						}
					}
				}
				owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
				if (itemtimer <= 2) owner.A_SetInventory("ExpPts",globalvars.Experience);
				
				let weapon = owner.player.ReadyWeapon;
				if (playeractor.GetClassName() == "DinahPlayer") CharacterClass == 10;
				if (!owner.CountInv("HandToHand")) owner.A_SetInventory("HandToHand",1); // Prevents your "fists/hand-to-hand" from being removed by inventory removing events.
				if (owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD")) berserked = true;
				else berserked = false;
				
				if (whistlecooldown) whistlecooldown--;
				
				ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
				if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom
				if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
				if (dydudebug_miscitemdebug) Console.Printf("%d", ClassicDoomType);
				buttons = owner.GetPlayerInput(INPUT_BUTTONS);
				TrueGameSkill = skill;
				
				if (itemtimer <= 2)
				{
					if (itemtimer <= 0) 
					{
						owner.A_SetInventory("DoorBell",1);
						owner.A_SetInventory("DoorBell",0);
						owner.A_SetInventory("KilletanteEffigy",1);
						owner.A_SetInventory("KilletanteEffigy",0);
						owner.A_SetInventory("DivingHelm",1);
						owner.A_SetInventory("DivingHelm",0);
						owner.A_SetInventory("TimePotion",1);
						owner.A_SetInventory("TimePotion",0);
						owner.A_SetInventory("FuryPotion",1);
						owner.A_SetInventory("FuryPotion",0);
						owner.A_SetInventory("SnakePickup",1);
						owner.A_SetInventory("SnakePickup",0);
						owner.A_SetInventory("PopperPickup",1);
						owner.A_SetInventory("PopperPickup",0);
						owner.A_SetInventory("BRocketPickup",1);
						owner.A_SetInventory("BRocketPickup",0);
						owner.A_SetInventory("SpinnerPickup",1);
						owner.A_SetInventory("SpinnerPickup",0);
						owner.A_SetInventory("CherryBombPickup",1);
						owner.A_SetInventory("CherryBombPickup",0);
						owner.A_SetInventory("TurkeyDinner",1);
						owner.A_SetInventory("TurkeyDinner",0);
						owner.A_SetInventory("AppleWine",1);
						owner.A_SetInventory("AppleWine",0);
						
						if (owner.CountInv("PlayingHexen")) owner.A_GiveInventory("ItemSatchel",1); // Gives the player their TRUE max ammo limits in Hexen mode and a bit of extra ammo via a Backpack. :P
					}

					owner.A_SetInventory("PlayerLevel",PlayerLevel);
					LegMedCap = 50;
					LevelCap = 200;
					LevelExpRequirement.Resize((LevelCap+1));

					// EXP Tables
					if (InitEXPTables == 0)
					{
						double ExpValue;
						int BaseEXPRequirement = 250; // clamp(exex_baseexprequirement, 250, 11200);
						BaseEXPRequirement *= (0.875 + (TrueGameSkill * 0.0625));

						double BaseExtra = 1; // clamp(exex_baseexpextra, 0, 100);
						double BaseAccel1 = 6; // clamp(exex_baseexpaccel1, 0, 100);
						double BaseAccel2 = 0.0384; // clamp(exex_baseexpaccel2, 0.0, 5.0);
						double BaseMulti1 = 48; // clamp(exex_expmulti1, 1, 1024);
						double BaseMulti2 = 50; // clamp(exex_expmulti2, 1, 10000);
						
						double BaseMulti3 = 1.0;
						int baseval;
						int addval;
						double mulval;
						int preval = 0;
						
						double BaseMulti3b = 2.0;
						double BaseMulti4 = 1.0;
						double BaseMulti5 = 0.01;

						// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
						for (int CuLv = 0; CuLv < (LevelCap+1); CuLv++)
						{
							if (CuLv >= 0 && CuLv <= 31) BaseMulti4 = 1.0;
							if (CuLv >= 32 && CuLv <= 56) BaseMulti4 = 1.334;
							if (CuLv >= 57 && CuLv <= 80) BaseMulti4 = 1.667;
							if (CuLv >= 81 && CuLv <= 100) BaseMulti4 = 2;
							if (CuLv >= 101 && CuLv <= 109) BaseMulti4 = 4;
							if (CuLv >= 110 && CuLv <= 118) BaseMulti4 = 6;
							if (CuLv >= 119 && CuLv <= 127) BaseMulti4 = 8;
							if (CuLv >= 128 && CuLv <= 136) BaseMulti4 = 10;
							if (CuLv >= 137 && CuLv <= 145) BaseMulti4 = 12;
							if (CuLv >= 146 && CuLv <= 154) BaseMulti4 = 14;
							if (CuLv >= 155 && CuLv <= 163) BaseMulti4 = 16;
							if (CuLv >= 164 && CuLv <= 172) BaseMulti4 = 18;
							if (CuLv >= 173 && CuLv <= 181) BaseMulti4 = 20;
							if (CuLv >= 182 && CuLv <= 190) BaseMulti4 = 22;
							if (CuLv >= 191 && CuLv <= 199) BaseMulti4 = 24;
							if (CuLv >= 200) BaseMulti4 = 30.0;
							
							BaseMulti3 = (BaseMulti4 + (CuLv * ((BaseMulti4 * BaseMulti5) * BaseMulti3b)));
							
							baseval = BaseEXPRequirement * (((CuLv * BaseExtra) + 1));
							baseval *= (1.00 + ((CuLv + 1) * 0.000625));
							
							mulval = (((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2);
							addval = (((BaseEXPRequirement * (CuLv * BaseAccel2)) * BaseMulti3) * ((BaseMulti4) * 1.5));
							ExpValue = baseval;
							if (dydudebug_exptables) Console.Printf("ExpValue: %d (%d)", ExpValue, baseval);
							ExpValue *= mulval;
							if (dydudebug_exptables) Console.Printf("(*) ExpValue: %d (%.8f)", ExpValue, mulval);
							ExpValue += addval;
							if (dydudebug_exptables) Console.Printf("(+) ExpValue: %d (%d)", ExpValue, addval);
							
							if (CuLv > 0) 
							{
								preval = LevelExpRequirement[(CuLv-1)];
							}
							LevelExpRequirement[CuLv] = ExpValue;
							if (dydudebug_exptables) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d \cz(prev: \cy%d)\cz, Multi: %.8f, baseval: %d, mulval: %.8f, addval: %d, diff: %d\c-", CuLv, ExpValue, preval, BaseMulti3, baseval, mulval, addval, (ExpValue-preval));
						}
						if (dydudebug_exptables) Console.Printf("BaseEXPRequirement: %4f, BaseExtra: %4f / 100, BaseAccel1: %4f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2);

						InitEXPTables++;
					}
				}
				if (ClassCheck <= 6)
				{
					if (ClassCheck <= 0) 
					{
						PlayerLevel = 0;

						atkfct = deffct = spdfct = jmpfct = suvfct = 1.00;
						double variance = 0.10;
						if (TrueGameSkill == SKILL_VERY_EASY) 
						{
							MaxHealthTrue = 96;
							MaxHealthTrue *= (1.00 + (frandom(-0.0125,0.0125)));
							owner.A_SetInventory("Blunderaxe",1);
							owner.A_SetInventory("BlunderAmmo",6);
							owner.A_SetInventory("AppleJack",1);
							owner.A_SetInventory("JackAmmo",12);
							variance = 0.05;
							PlayerLuck = random(4,8);
						}
						if (TrueGameSkill == SKILL_EASY) 
						{
							MaxHealthTrue = 88; 
							MaxHealthTrue *= (1.00 + (frandom(-0.025,0.025)));
							owner.A_SetInventory("AppleJack",1);
							owner.A_SetInventory("JackAmmo",6);
							variance = 0.075;
							PlayerLuck = random(3,6);
						}
						if (TrueGameSkill == SKILL_NORMAL) 
						{
							MaxHealthTrue = 80; 
							MaxHealthTrue *= (1.00 + (frandom(-0.05,0.05)));
							variance = 0.10;
							PlayerLuck = random(2,5);
						}
						if (TrueGameSkill == SKILL_HARD) 
						{
							MaxHealthTrue = 72; 
							MaxHealthTrue *= (1.00 + (frandom(-0.1,0.1)));
							variance = 0.125;
							PlayerLuck = random(1,3);
						}
						if (TrueGameSkill == SKILL_VERY_HARD) 
						{
							MaxHealthTrue = 64; 
							MaxHealthTrue *= (1.00 + (frandom(-0.2,0.2)));
							variance = 0.15;
							PlayerLuck = random(0,2);
						}
						PlayerLuck += random(2,3);
						atkfct += frandom(-variance,variance);
						deffct += frandom(-variance,variance);
						spdfct += frandom(-variance,variance);
						jmpfct += frandom(-variance,variance);
						suvfct += frandom(-variance,variance);
						if (dydudebug_startupinfo) Console.Printf("atkfct: %.8f, deffct: %.8f, spdfct: %.8f, jmpfct: %.8f, suvfct: %.8f, Luck: %d", atkfct, deffct, spdfct, jmpfct, suvfct, PlayerLuck);
						
						
						if (MaxHealthTrue < 1) MaxHealthTrue = 1;
						HealthLevelAdd = 0;
						owner.player.health = owner.player.mo.health = CurrentHealth = MaxHealthTrue;
						owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
						BaseStartMaxHealth = MaxHealthTrue; // Sets the original Max Health as at the start of a game [for various checks, including Sigil damage]
						if (dydudebug_startupinfo) Console.Printf("MaxHP: %d", MaxHealthTrue);
					}
				}

				SuperVacAmmo = owner.CountInv("VacAmmo");
				
				// Ikari/Item Points
				MaxItemPoints = 100;
				if (TrueGameSkill == SKILL_VERY_EASY) MaxItemPoints += (PlayerLevel * 1.5);
				if (TrueGameSkill == SKILL_EASY) MaxItemPoints += (PlayerLevel * 1.25);
				if (TrueGameSkill == SKILL_NORMAL) MaxItemPoints += (PlayerLevel * 1.0);
				if (TrueGameSkill == SKILL_HARD) MaxItemPoints += (PlayerLevel * 0.75);
				if (TrueGameSkill == SKILL_VERY_HARD) MaxItemPoints += (PlayerLevel * 0.5);
				if (ItemPoints > MaxItemPoints) ItemPoints = MaxItemPoints;

				//
				// Leveling Up
				//
				Experience = owner.CountInv("ExpPts");
				owner.A_SetInventory("ExpPtsLeft",(LevelExpRequirement[(PlayerLevel)]-Experience));
				owner.A_SetInventory("ExpPtsNeeded",LevelExpRequirement[(PlayerLevel)]);
				PlayerLevel = owner.CountInv("PlayerLevel");

				int levelmodulo, levelbonustype;
				int leveluptimes = 0;
				int leveluptimesmax = LevelCap - PlayerLevel;
				int StatIncrease;
				PrevATK = PlayerATK;
				PrevDEF = PlayerDEF;
				PrevSPD = PlayerSPD;
				for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
				{
					if (dydudebug_levelup) Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
					if (Experience >= LevelExpRequirement[PlayerLevel])
					{
						if (PlayerLevel < LevelCap)
						{
							PlayerLevel += 1;
							
							LevelUpProcess();
							
							owner.A_SetInventory("PlayerLevel",PlayerLevel);
							string LevelUpMsg = "";
							LevelUpMsg.AppendFormat("\c[Green]Congradulations, you've reached Level %d \c[brick][+%d HP]", PlayerLevel, HPMaxGain);
							if (exex_extraatkdefspd)
							{
								if ((PlayerATK > PrevATK) || (PlayerDEF > PrevDEF) || (PlayerSPD > PrevSPD)) LevelUpMsg.AppendFormat("\n\n");
								if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased Even More than Normal!");
								if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased Even More than Normal!");
								if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased Even More than Normal!");
							}
							if (PlayerLevel == 16) LevelUpMsg.AppendFormat("\n\n\n\c[gold]The Cricket Bat can now be used for a spinning\n\c[gold]attack! (\c[sapphire]Fire + LStrafe + RStrafe\c[gold])");
							owner.A_Print(LevelUpMsg);
							owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
						}
					}
				}

				PrevATK = PlayerATK;
				PrevDEF = PlayerDEF;
				PrevSPD = PlayerSPD;
				leveluptimes = 0;
				leveluptimesmax = NumOfLegendMeds - MedCurrLvl;
				StatIncrease = 0;
				for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
				{
					if (MedCurrLvl < NumOfLegendMeds)
					{
						MedCurrLvl += 1;
						
						int oldhealthratio;
						int oldhealth = owner.health;
						if (owner.CountInv("NormalHealth")) oldhealthratio = 0;
						if (owner.CountInv("DecentHealth")) oldhealthratio = 1;
						if (owner.CountInv("LowHealth")) oldhealthratio = 2;
						if (owner.CountInv("CriticalHealth")) oldhealthratio = 3;
						
						LevelUpProcess();
						
						string LevelUpMsg = "";
						LevelUpMsg.AppendFormat("\c[Green]Ate a Legendary Medicine \c[brick][+%d HP]", HPMaxGain);
						if (exex_extraatkdefspd)
						{
							if ((PlayerATK > PrevATK) || (PlayerDEF > PrevDEF) || (PlayerSPD > PrevSPD)) LevelUpMsg.AppendFormat("\n\n");
							if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased Even More than Normal!");
							if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased Even More than Normal!");
							if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased Even More than Normal!");
						}
						owner.A_Print(LevelUpMsg);

						owner.A_StartSound("Dinah/Pain3",CHAN_VOICE);
						owner.A_SetBlend("8a e1 01",0.334,random(32,33));
						owner.health /= 2;
						if (owner.health < 0) owner.health = 1;

						double base;
						if (exex_ikaripointscalctype == 1)
						{
							base = (oldhealth - owner.health) * 100.0 / oldhealth; // % of remaining HP removed
							if (base >= 0.001)
							{
								if (base >= 0.001 && base <= 50.000) base *= 0.50; // <= 50% equals half of the percent in IP points given [up to 25%]
								if (base >= 50.001 && base <= 65.000) base *= 0.558077; 
								if (base >= 65.001 && base <= 75.000) base *= 0.646154;
								if (base >= 75.001 && base <= 85.000) base *= 0.76; 
								if (base >= 85.001 && base <= 90.000) base *= 0.90; 
								if (base >= 90.001 && base <= 100.000) base *= 1.00; 
								if (base >= 100.001) base *= 1.25;
							}
						}
						else
						{
							base = (oldhealth - owner.health) * 100.0 / MaxHealthTrue;
							if (oldhealthratio == 0) base *= 1.0;
							if (oldhealthratio == 1) base *= 1.125;
							if (oldhealthratio == 2) base *= 1.25;
							if (oldhealthratio == 3) base *= 1.5;
							if (oldhealthratio == 4) base *= 2.25;
							if (oldhealth > 1 && owner.health == 1) base *= 3.25;
						}
						double basef = base;
						if (base <= 0.01) base = 0.01;
						if (basef <= 0.01) basef = 0.01;
						if (base)
						{
							if (IPTimer1 > 0) IPTimer1 = (-350 * basef);
													 else IPTimer1 += (-350 * basef);
							ItemPoints += base;
							globalvars.ItemPoints += base;
							if (exex_playerdmglog) Console.Printf("\c[red]+%.2f%% IP Gained!", base);
						}
						
					}
				}

				//*********************
				//* Super Vac Bagging *
				//*********************
				if (SuperVacBagSize <= 0)
				{ 
					if (TrueGameSkill == SKILL_VERY_EASY) SuperVacBagSize = 240;
					if (TrueGameSkill == SKILL_EASY) SuperVacBagSize = 320;
					if (TrueGameSkill == SKILL_NORMAL) SuperVacBagSize = 400;
					if (TrueGameSkill == SKILL_HARD) SuperVacBagSize = 480;
					if (TrueGameSkill == SKILL_VERY_HARD) SuperVacBagSize = 560;
				}

				HPRegenTimerMax = 7000 - ((StaminaLevel * 5) * 35);
				HPDegenTimerMax = 1750 + ((StaminaLevel * 5) * 17.5);
				CurrentHealth = owner.player.mo.health;
				MaxHealthTrue = (BaseStartMaxHealth + HealthLevelAdd + HealthBonusAdd);
				
				//******************
				//* HP Regen/Degen *
				//******************
				if (CurrentHealth > 0)
				{
					if (dydudebug_hpregen) Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);
					
					//****************************************
					//*Get Health Ratio & Health Level Checks*
					//****************************************
					if (playeractor && MaxHealthTrue > 0)
					{
						HealthRatio = (CurrentHealth * 1000) / MaxHealthTrue;
						HealthRatio = clamp(HealthRatio, 0, 2000);
			
						if (CurrentHealth <= 0) { Owner.A_SetInventory("PlayerIsDead", 1); }
						else
						{
							Owner.A_SetInventory("PlayerIsDead", 0);
							if (HealthRatio != PrevHealthRatio)
							{
								if (HealthRatio < 625)
								{
									if (HealthRatio < 167)
									{
										if (HealthRatio < 21)
										{
											Owner.A_SetInventory("CriticalHealth", 1);
											Owner.A_SetInventory("LowHealth", 0);
											Owner.A_SetInventory("DecentHealth", 0);
											Owner.A_SetInventory("NormalHealth", 0);
										}
										else 
										{
											Owner.A_SetInventory("CriticalHealth", 0);
											Owner.A_SetInventory("LowHealth", 1);
											Owner.A_SetInventory("DecentHealth", 0);
											Owner.A_SetInventory("NormalHealth", 0);
										}
									}
									else 
									{
										Owner.A_SetInventory("CriticalHealth", 0);
										Owner.A_SetInventory("LowHealth", 0);
										Owner.A_SetInventory("DecentHealth", 1);
										Owner.A_SetInventory("NormalHealth", 0);
									}
								}
								else
								{
									Owner.A_SetInventory("CriticalHealth", 0);
									Owner.A_SetInventory("LowHealth", 0);
									Owner.A_SetInventory("DecentHealth", 0);
									Owner.A_SetInventory("NormalHealth", 1);
								}
								if (CurrentHealth >= MaxHealthTrue) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
								
								PrevHealthRatio = HealthRatio;
							}
						}
					}
					
					// Check Item Points
					int IPTimerInc = level.time % 1;
					if (berserked)
					{
						double berserkIPGain;
						berserkIPGain = 0.0025;
						if (ItemPoints <= 100.0000)
						{
							if (ItemPoints >= 75.0001 && ItemPoints <= 100.0000)
							{
								berserkIPGain += 0.0005;
							}
							else
							if (ItemPoints >= 50.0001 && ItemPoints <= 75.0000)
							{
								berserkIPGain += 0.00125;
							}
							else
							if (ItemPoints >= 25.0001 && ItemPoints <= 50.0000)
							{
								berserkIPGain += 0.003125;
							}
							else
							if (ItemPoints <= 25.0000)
							{
								berserkIPGain += 0.0078125;
							}
						}
						double BerIPMulti = (0.25 + (PlayerLevel * 0.03));
						if (BerIPMulti >= 1.00 || PlayerLevel >= 25)
						{
							BerIPMulti = (1.00 + ((PlayerLevel - 25) * 0.01334));
							if (BerIPMulti >= 2.00 || PlayerLevel >= 100) BerIPMulti = 2.00;
						}

						berserkIPGain *= BerIPMulti;
						if (IPTimer1 < 0) 
						{
							if (random(1,16) <= 1) berserkIPGain *= 3;
							else 
							{
								if (random(1,4) <= 1) berserkIPGain *= 2.5;
								else berserkIPGain *= 2;
							}
						}
						else IPTimerInc = level.time % 10;
						//Console.Printf("\c[red]berserkIPGain: %.8f, \c[green]IPTimer1: %d / 2100, \c[yellow]IPTimerInc: %d tics, \c[purple]BerIPMulti: %.8f", berserkIPGain, IPTimer1, IPTimerInc, BerIPMulti);
						ItemPoints += berserkIPGain;
						globalvars.ItemPoints = ItemPoints;
					}
					
					if (ItemPoints > 0.00)
					{
						if (IPTimer1 < -2100) IPTimer1 = -2100;
						if (IPTimer1 < 2100)
						{
							if (IPTimerInc == 0) IPTimer1++;
						}
						else
						{
							IPTimer1 = 0;
							ItemPoints -= (ItemPoints * frandompick(0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.02,0.05,0.05,0.05,0.10,0.10,0.25));
							if (ItemPoints <= 0) globalvars.ItemPoints = ItemPoints = 0;
						}
						if (dydudebug_ipdisplays) Console.Printf("ItemPoints: %.1f [%.1f], IPTimer1: %d / 2100", ItemPoints, globalvars.ItemPoints, IPTimer1);
					}
					else
					{
						if (ItemPoints <= 0) globalvars.ItemPoints = ItemPoints = 0;
						IPTimer1 = 0;
					}
					if (owner.health <= 0) 
					{
						globalvars.ItemPoints = ItemPoints = 0;
					}
					if (owner.CountInv("ItemPointsAdd")) 
					{
						if (exex_ikaripointsenabled) ItemPoints += owner.CountInv("ItemPointsAdd");
						owner.A_SetInventory("ItemPointsAdd",0);
					}

					baseregenmulti = 1.0;
					if (CurrentHealth < MaxHealthTrue)
					{
						if (exex_hpwillregen)
						{
							int inc = 20;
							inc += (PlayerLevel * 0.025);
							baseregenmulti = inc;
							if (HPRegenBoostTimer) inc *= 2.5;
							
							if (Owner.CountInv("CricketBatGuard")) inc = floor(inc * frandom(1.334,1.667)); 
							if (Owner.CountInv("CricketBatGuard2")) inc = floor(inc * frandom(1.334,1.667)); 
							if (Owner.CountInv("DoingSpinAttack")) inc = floor(inc * frandom(0.599880023995201,0.7496251874062969)); 
							if (Owner.CountInv("FistPlayerBlockItem")) inc = ceil(inc * frandompick(1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)); 
							
							if (owner.CountInv("KnightGownItem")) inc = floor(inc * 1.05);
							if (owner.CountInv("KnightGownItem2")) inc = floor(inc * 1.10);
							if (owner.CountInv("KnightGownItem3")) inc = floor(inc * 1.15);
							if (owner.CountInv("KnightGownItem4")) inc = floor(inc * 1.20);

							if (berserked) inc = floor(inc * frandom(1.5,2.0));

							if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
							if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
							if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
							if ((buttons & BT_JUMP) && sv_allowjump) inc = floor(inc * 0.4);
							if ((buttons & BT_CROUCH) && sv_allowcrouch) inc = floor(inc * 1.8);

							if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 1.5);
							if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 2.25);
							if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 3.25);
							if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = floor(inc * 4.5);

							if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 20);
							else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
							else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
							else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
							
							if (afasdroptimer) inc = floor(inc * 0.5);
							
							if (baseregenmulti) baseregenmulti = (inc / baseregenmulti);
							//Console.Printf("BaseRegenMulti: %.8f", baseregenmulti);
							HPRegenTimer += inc;
							
							if (HPRegenTimer > HPRegenTimerMax)
							{
								HPRegenTimer -= HPRegenTimerMax;
								if (HPRegenTimer < 0) HPRegenTimer = 0;
								
								if (CurrentHealth < MaxHealthTrue)
								{
									if (berserked) CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,2);
									else CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
									if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (dydudebug_hpregen) Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
						}
						else
						{
							HPRegenTimer = 0;
						}
					}
					else
					if (CurrentHealth > MaxHealthTrue)
					{
						if (exex_hpwilldegen)
						{
							int inc = 20;
							inc -= (PlayerLevel * 0.0125);
							baseregenmulti = inc;
							if (HPRegenBoostTimer) inc *= 0.4;
							
							if (Owner.CountInv("CricketBatGuard")) inc = ceil(inc * frandom(0.599880023995201,0.7496251874062969));
							if (Owner.CountInv("CricketBatGuard2")) inc = ceil(inc * frandom(0.599880023995201,0.7496251874062969));
							if (Owner.CountInv("DoingSpinAttack")) inc = ceil(inc * frandom(1.334,1.667)); 
							if (Owner.CountInv("FistPlayerBlockItem")) inc = ceil(inc * frandompick(0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556));

							if (owner.CountInv("KnightGownItem")) inc = ceil(inc * 0.95);
							if (owner.CountInv("KnightGownItem2")) inc = ceil(inc * 0.90);
							if (owner.CountInv("KnightGownItem3")) inc = ceil(inc * 0.85);
							if (owner.CountInv("KnightGownItem4")) inc = ceil(inc * 0.80);
							
							if (berserked) inc = ceil(inc * frandom(0.5,0.667));
							
							if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = ceil(inc * 2.5);
							if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = ceil(inc * 2.0);
							if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = ceil(inc * 1.666666666666667);
							if ((buttons & BT_JUMP) && sv_allowjump) inc = ceil(inc * 2.5);
							if ((buttons & BT_CROUCH) && sv_allowcrouch) inc = ceil(inc * 0.5555555555555556);

							if (Owner.CountInv("PowerWineBuffWeak")) inc = ceil(inc * 0.6666666666666667);
							if (Owner.CountInv("PowerWineBuffStrong")) inc = ceil(inc * 0.4444444444444444);
							if (Owner.CountInv("PowerWineBuffStrongest")) inc = ceil(inc * 0.3076923076923077);
							if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = ceil(inc * 0.2222222222222222);
							
							if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = ceil(inc * 3.0);
							else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = ceil(inc * 2.75);
							else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = ceil(inc * 2.5);
							else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = ceil(inc * 2.25);
							else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = ceil(inc * 2.0);
							else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = ceil(inc * 1.75);
							else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = ceil(inc * 1.5);
							else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = ceil(inc * 1.25);
							else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = ceil(inc * 1.0);
							
							if (afasdroptimer) inc = ceil(inc * 2.0);
							
							if (baseregenmulti) baseregenmulti = (inc / baseregenmulti);
							//Console.Printf("BaseDegenMulti: %.8f", baseregenmulti);
							HPDegenTimer += inc;
							if (HPDegenTimer > HPDegenTimerMax)
							{
								HPDegenTimer -= HPDegenTimerMax;
								if (HPDegenTimer < 0) HPDegenTimer = 0;
								
								if (CurrentHealth > MaxHealthTrue)
								{
									if (berserked) CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
									else CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,2);
									if (CurrentHealth <= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (dydudebug_hpregen) Console.Printf("DegenTimer: %d / %d  (inc: %d)", HPDegenTimer, HPDegenTimerMax, inc);
						}
						else
						{
							HPDegenTimer = 0;
						}
					}
					else
					{
						HPRegenTimer = 0;
						HPDegenTimer = 0;
						if (dydudebug_hpregen) Console.Printf("Regen/Degen Neutral");
					}
					
					if (HPRegenBoostTimer) HPRegenBoostTimer--;
					if (HPRegenBoostTimer < 0) HPRegenBoostTimer = 0;
					if (dydudebug_hpregen && HPRegenBoostTimer) Console.Printf("HPRegenBoostTimer: %d", HPRegenBoostTimer);
				}
				
				//**************************
				//* Survival Rate [Buddha] *
				//**************************
				SurvivalRate = 100 * suvfct; // out of 10000 [100 = 1%]
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Base]: %d", SurvivalRate);
				SurvivalRate += (PlayerLevel * 5); // +0.05% per level
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Level]: %d", SurvivalRate);
				if (PlayerLuck) SurvivalRate += (PlayerLuck * 1.25); // +0.0125% per Luck Point
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Luck]: %d", SurvivalRate);
				
				if (owner.CountInv("KnightGownItem")) SurvivalRate += random(312,313);
				if (owner.CountInv("KnightGownItem2")) SurvivalRate += 625;
				if (owner.CountInv("KnightGownItem3")) SurvivalRate += 1250;
				if (owner.CountInv("KnightGownItem4")) SurvivalRate += 2500;
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Armor]: %d", SurvivalRate);

				if (berserked) SurvivalRate += 500;
				if (Owner.CountInv("PowerWineBuffWeak")) SurvivalRate += random(312,313);
				if (Owner.CountInv("PowerWineBuffStrong")) SurvivalRate += 625;
				if (Owner.CountInv("PowerWineBuffStrongest")) SurvivalRate += random(937,938);
				if (Owner.CountInv("PowerWineBuffStrongestEven")) SurvivalRate += 1250;
				if (Owner.CountInv("DoingSpinAttack")) SurvivalRate += 2000;
				if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Buffs]: %d", SurvivalRate);
				
				int buddhatype = 0;
				if (Owner.CountInv("CricketBatGuard")) 
				{
					if (Owner.CountInv("CricketBatGuard2"))
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.125,1.125,1.25));
						if (SurvivalRate > 10000) SurvivalRate = 10000;
						if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/ CricketBat (super)]: %d", SurvivalRate);
					}
					else
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.25,0.375,0.375,0.50,0.50,0.50,0.50,0.625,0.625,0.75));
						if (SurvivalRate > 9375) SurvivalRate = 9375;
						if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/ CricketBat]: %d", SurvivalRate);
					}
				}
				else
				if (Owner.CountInv("FistPlayerBlockItem"))
				{
					if (Owner.CountInv("FistPlayerBlock3"))
					{ 
						SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.375,0.375,0.375,0.375,0.5625));
						if (SurvivalRate > 9000) SurvivalRate = 9000;
						if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (3)]: %d", SurvivalRate);
					}
					else if (Owner.CountInv("FistPlayerBlock2"))
					{ 
						SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.25,0.25,0.25,0.25,0.375));
						if (SurvivalRate > 8500) SurvivalRate = 8500;
						if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (2)]: %d", SurvivalRate);
					}
					else if (Owner.CountInv("FistPlayerBlock"))
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick(0.125,0.125,0.125,0.125,0.1875));
						if (SurvivalRate > 8000) SurvivalRate = 8000;
						if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (1)]: %d", SurvivalRate);
					}
				}
				else
				{
					if (SurvivalRate > 7500) SurvivalRate = 7500;
					if (dydudebug_survivalrate) Console.Printf("SurvivalRate [Final w/o CricketBat]: %d", SurvivalRate);
				}
				if (dydudebug_survivecheat) SurvivalRate = 20000;
				int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
				if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;

				if (dydudebug_survivalrate)
				{
					if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																				else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
				}
				
				//********
				//* Mass *
				//********
				TotalMass = 100;
				let playerset = DDPlayerPawn(owner);
				if (playerset) TotalMass = playerset.originalmass;
				if (dydudebug_masscalcs) Console.Printf("Mass [Base]: %d", TotalMass);

				TotalMass += (PlayerLevel * 0.022223);
				if (dydudebug_masscalcs) Console.Printf("Mass [Level]: %d", TotalMass);
				
				// Buffs
				if ((owner.bINVULNERABLE || owner.player.cheats & CF_GODMODE2 || owner.player.cheats & CF_GODMODE) || 
						owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")) TotalMass *= 128; 
				if (berserked) 
				{
					if (PlayerLevel >= 200) TotalMass *= 2.003;
					else if (PlayerLevel >= 175) TotalMass *= 1.891;
					else if (PlayerLevel >= 150) TotalMass *= 1.779;
					else if (PlayerLevel >= 125) TotalMass *= 1.667;
					else if (PlayerLevel >= 100) TotalMass *= 1.556;
					else if (PlayerLevel >= 75) TotalMass *= 1.445;
					else if (PlayerLevel >= 50) TotalMass *= 1.334;
					else if (PlayerLevel >= 25) TotalMass *= 1.222;
					else TotalMass *= 1.111;
				}

				if (Owner.CountInv("CricketBatGuard")) TotalMass *= frandompick(1.334,1.5,1.667);
				if (Owner.CountInv("CricketBatGuard2")) TotalMass *= frandompick(2.667,3.000,3.334);
				if (Owner.CountInv("DoingSpinAttack")) TotalMass *= frandompick(12,13.5,15);
				
				// Fist Blocks
				if (Owner.CountInv("FistPlayerBlock"))  TotalMass *= 2;
				if (Owner.CountInv("FistPlayerBlock2")) TotalMass *= 2.667;
				if (Owner.CountInv("FistPlayerBlock3")) TotalMass *= 4;

				if (Owner.CountInv("PowerWineBuffWeak")) TotalMass *= 1.125;
				if (Owner.CountInv("PowerWineBuffStrong")) TotalMass *= 1.25;
				if (Owner.CountInv("PowerWineBuffStrongest")) TotalMass *= 1.5;
				if (Owner.CountInv("PowerWineBuffStrongestEven")) TotalMass *= 2;
				if (dydudebug_masscalcs) Console.Printf("Mass [Buffs]: %d", TotalMass);

				// Armor
				if (Owner.CountInv("KnightGownItem"))	{ TotalMass += 4;  TotalMass *= 1.01; }
				if (Owner.CountInv("KnightGownItem2"))	{ TotalMass += 8;  TotalMass *= 1.02; }
				if (Owner.CountInv("KnightGownItem3"))	{ TotalMass += 12; TotalMass *= 1.04; }
				if (Owner.CountInv("KnightGownItem4"))	{ TotalMass += 16; TotalMass *= 1.08; }
				if (dydudebug_masscalcs) Console.Printf("Mass [Armor]: %d", TotalMass);

				owner.Mass = TotalMass;
				if (dydudebug_masscalcs) Console.Printf("    Calculated Mass: %d [Real Mass: %d]", TotalMass, owner.mass);
				
				
				//*********
				//* JumpZ *
				//*********
				double CharacterJumpZ = 8.25;
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Character Base]: %.8f", CharacterJumpZ);

				// Level
				double LevelJumpZ = 1.00;
				LevelJumpZ += (PlayerLevel * (0.0025 * 1.75));
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Level]: %.8f", LevelJumpZ);
				
				// Buffs
				double BuffJumpZ = 1.00;
				if (Owner.CountInv("CricketBatGuard")) BuffJumpZ *= frandom(0.95,0.975);
				if (Owner.CountInv("CricketBatGuard2")) BuffJumpZ *= frandom(0.85,0.925);
				if (Owner.CountInv("DoingSpinAttack")) BuffJumpZ *= frandom(0.2125,0.23125);
				if (Owner.CountInv("FistPlayerBlock")) BuffJumpZ *= frandom(0.625,0.667);
				if (Owner.CountInv("FistPlayerBlock2")) BuffJumpZ *= frandom(0.667,0.75);
				if (Owner.CountInv("FistPlayerBlock3")) BuffJumpZ *= frandom(0.75,0.8334);
				if (berserked) BuffJumpZ *= 1.34;
				if (owner.CountInv("PowerWineBuffWeak")) BuffJumpZ *= frandom(0.98,1.00);
				if (owner.CountInv("PowerWineBuffStrong")) BuffJumpZ *= frandom(0.96,1.00);
				if (owner.CountInv("PowerWineBuffStrongest")) BuffJumpZ *= frandom(0.93,1.00);
				if (owner.CountInv("PowerWineBuffStrongestEven")) BuffJumpZ *= frandom(0.88,1.00);
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Buffs]: %.8f", BuffJumpZ);

				// Armor
				double ArmorJumpZ = 1.00;
				if (Owner.CountInv("KnightGownItem"))					ArmorJumpZ -= 0.0125;
				if (Owner.CountInv("KnightGownItem2"))				ArmorJumpZ -= 0.025;
				if (Owner.CountInv("KnightGownItem3"))				ArmorJumpZ -= 0.0475;
				if (Owner.CountInv("KnightGownItem4"))				ArmorJumpZ -= 0.0875;
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [Armor]: %.8f", ArmorJumpZ);

				// Weapon Checks
				double WeaponJumpZ = 1.00;
				if (weapon is "HandToHand") 
				{
					if (berserked) WeaponJumpZ *= 1.1625;
					else WeaponJumpZ *= 1.125;
				}
				if (weapon is "CricketBat") 
				{
					WeaponJumpZ *= 1.00;
				}
				if (weapon is "BlunderAxe") 
				{
					if (berserked) WeaponJumpZ *= 0.991875;
					else WeaponJumpZ *= 0.96875;
				}
				if (weapon is "AppleJack") 
				{
					if (berserked) WeaponJumpZ *= 1.05;
					else WeaponJumpZ *= 1.03125;
				}
				if (weapon is "Scrambler")
				{
					if (berserked) WeaponJumpZ *= 1.1625;
					else WeaponJumpZ *= 1.125;
				}
				if (weapon is "WizardPike")
				{
					if (berserked) WeaponJumpZ *= 1.08125;
					else WeaponJumpZ *= 1.0625;
				}
				if (weapon is "SuperVac")
				{
					if (berserked) WeaponJumpZ *= (0.984375 - (SuperVacAmmo * 0.000651042));
					else WeaponJumpZ *= (0.9375 - (SuperVacAmmo * 0.002604167));
				}
				if (weapon is "Grimophone") 
				{
					if (berserked) WeaponJumpZ *= 0.996875;
					else WeaponJumpZ *= 0.875;
				}
				if (weapon is "CandleWhip")
				{
					if (berserked) WeaponJumpZ *= 1.08125;
					else WeaponJumpZ *= 1.0625;
				}
				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [WeaponEquipped]: %.8f", WeaponJumpZ);

				if (dydudebug_jumpingcalcs) Console.Printf("JumpZ [jmpfct]: %.8f", jmpfct);

				double TotalJumpZ = CharacterJumpZ
													* LevelJumpZ
													* BuffJumpZ
													* ArmorJumpZ
													* WeaponJumpZ
													* jmpfct;

				PlayerPawn(Owner).JumpZ = TotalJumpZ;
				actualjumpheight = ((TotalJumpZ * 35 / TICRATE) * 18);
				actualjumpheight2 = (((TotalJumpZ*2)**2)/2+owner.maxstepheight)/((TotalJumpZ**2)/2+owner.maxstepheight);
				TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
				if (dydudebug_jumpingcalcs) Console.Printf("%.8f [\c[gold]%d\c- / \c[fire]%d\c-x / \c[blue]%d\c-] (%.8f, %.8f, %.8f, %.8f, %.8f)", TotalJumpZ, actualjumpheight, actualjumpheight2, TrueJumpHeight, CharacterJumpZ, LevelJumpZ, BuffJumpZ, ArmorJumpZ, jmpfct);
				
				
				// SuperVac Ammo
				int vacammoprev = owner.CountInv("VacAmmo");
				int vacgiveammo;
				int vacammocounter = owner.CountInv("VacAmmoCounter");
				if (dydudebug_supervacbag) Console.Printf("Vacuum Bag Size: %d / %d", vacammocounter, SuperVacBagSize);
				while (vacammocounter >= SuperVacBagSize)
				{
					vacammocounter -= SuperVacBagSize;
					owner.A_SetInventory("VacAmmoCounter",vacammocounter);
					vacgiveammo += 1;
					owner.A_StartSound("VacDed",random(11,20),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
					owner.A_StartSound("VacDed",random(21,30),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
				}
				if (vacgiveammo)
				{
					owner.A_GiveInventory("VacAmmo",vacgiveammo);
					Console.Printf("Filled %d bag[s] in the SuperVac!", vacgiveammo);
					vacgiveammo = 0;
				}
				int vacammonow = owner.CountInv("VacAmmo");
				if (vacammoprev < 8 && vacammonow >= 8)
				{
					owner.A_StopSound(CHAN_VOICE);
					owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
					owner.A_Log("The SuperVac's Alt-Fire is Ready!", vacgiveammo);
				}
				if (vacammoprev < 16 && vacammonow >= 16)
				{
					owner.A_StopSound(CHAN_VOICE);
					owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
					owner.A_Log("The SuperVac's Alt-Fire Has TWO Charges now!", vacgiveammo);
				}
				if (vacammoprev < 24 && vacammonow >= 24)
				{
					owner.A_StopSound(CHAN_VOICE);
					owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
					owner.A_Log("The SuperVac's Alt-Fire Has THREE Charges now!", vacgiveammo);
				}
				if (vacammoprev >= 24)
				{
					vacammocounter = 0;
					owner.A_SetInventory("VacAmmoCounter",0);
				}
				
				// TimeFreeze Handler
				int BeatTimer;
				int TickTimer;
				double BeatVol;
				TimeFreezeTimer = owner.CountInv("TimeFreezeTimer");
				TimeFreeze = owner.CountInv("TimePotionTimeFreezer");
				if (TimeFreeze)
				{
					if (TimeFreezeTimer)
					{
						// Start Up
						if (PrevTimeFreezeTimer == 0)
						{
							owner.A_StopSound(CHAN_6);
							owner.A_StartSound("TimeFreezeIn4",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
							//owner.A_StartSound("TheWorldIn",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
						}
						owner.A_SetInventory("TimePotionTimeFreezer",1);
						
						// Ticks
						TickTimer = TimeFreezeTimer % 35;
						if (TickTimer == 0 && PrevTimeFreezeTimer != 0)
						{
							owner.A_StopSound(CHAN_6); 
							owner.A_StartSound("TimeStopTick",CHAN_6,CHANF_DEFAULT,frandom[statitem2](0.80,1.20),ATTN_NONE); 
						}
						
						// Heart Beat Effect
						if (TimeFreezeTimer > 66 && PrevTimeFreezeTimer != 0)
						{
							BeatVol = 0.5;
							int BeatInt1 = 42;
							int BeatInt2 = 34;
							int BeatInt3 = 26;
							int BeatInt4 = randompick(13,14,14,14,15);
							double BeatVol1 = 0.25;
							double BeatVol2 = 0.3125;
							double BeatVol3 = 0.3875;
							double BeatVol4 = 0.5;
							double BeatBersMulti = 0.875;
							double BeatBersMulti2 = 1.167;
							if (berserked)
							{
								if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % (BeatInt1 * BeatBersMulti); BeatVol = (BeatVol1 * BeatBersMulti2); }
								else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % (BeatInt2 * BeatBersMulti); BeatVol = (BeatVol2 * BeatBersMulti2); }
								else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % (BeatInt3 * BeatBersMulti); BeatVol = (BeatVol3 * BeatBersMulti2); }
								else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % (BeatInt4 * BeatBersMulti); BeatVol = (BeatVol4 * BeatBersMulti2); }
							}
							else
							{
								if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % BeatInt1; BeatVol = BeatVol1; }
								else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % BeatInt2; BeatVol = BeatVol2; }
								else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % BeatInt3; BeatVol = BeatVol3; }
								else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % BeatInt4; BeatVol = BeatVol4; }
							}
						}
						if (dydudebug_timefreeze) Console.Printf("BeatTimer: %d", BeatTimer);
						if (BeatTimer == 0)
						{
							owner.A_StopSound(33);
							owner.A_StartSound("TimeFreezeLoop4",CHANF_DEFAULT,33,BeatVol,ATTN_NONE); 
						}
						
						// Wind Down
						if (TimeFreezeTimer >= 64 && TimeFreezeTimer <= 66) 
						{
							owner.A_StopSound(CHAN_7); 
							owner.A_StartSound("TimeFreezeOut4",CHAN_7,CHANF_DEFAULT,0.875,ATTN_NONE); 
						}

						TimeFreezeTimer -= 1;
						if (TimeFreezeTimer < 1)
						{
							TimeFreezeTimer = 0;
							TimeFreeze = 0;
						}
					}
					if (dydudebug_timefreeze) Console.Printf("%d Tics of Time Freeze Left", TimeFreezeTimer);
					PrevTimeFreezeTimer = TimeFreezeTimer;
				}
				owner.A_SetInventory("TimeFreezeTimer",TimeFreezeTimer);
				owner.A_SetInventory("TimePotionTimeFreezer",TimeFreeze);
				
				
				//
				if (dydudebug_timeslowinterval)
				{
					if (level.time % (dydudebug_timeslowinterval + 1)) owner.A_SetInventory("DebugTimeFreezer",1);
					else owner.A_SetInventory("DebugTimeFreezer",0);
				}
				else
				{
					if (owner.CountInv("DebugTimeFreezer")) owner.A_SetInventory("DebugTimeFreezer",0);
				}
				
				// Land Damage
				bool debuglanddmg = false;
				landdmgbonus = 0;
				if (owner.vel.z < -128.0)
				{
					landdmgbonus = 4;
					if (debuglanddmg) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]: ZVel: %.8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -32.0)
				{
					landdmgbonus = 3;
					if (debuglanddmg) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]: ZVel: %.8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -8.0)
				{
					landdmgbonus = 2;
					if (debuglanddmg) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]: ZVel: %.8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -0.0625)
				{
					landdmgbonus = 1;
					if (debuglanddmg) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]: ZVel: %.8f", owner.vel.z);
				}
				
				//
				owner.player.health = owner.player.mo.health = CurrentHealth;
				owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
				
				if (CricketBatBuffTimer2)
				{
					CricketBatBuffTimer2--;
					owner.A_SetInventory("CricketBatGuard2",1);
					if (dydudebug_cricketbatguard) Console.Printf("CricketBatBuffTimer2: %d", CricketBatBuffTimer2);
				}
				else
				{
					owner.A_SetInventory("CricketBatGuard2",0);
				}

				if (CricketBatBuffTimer)
				{
					CricketBatBuffTimer--;
					owner.A_SetInventory("CricketBatGuard",1);
					if (dydudebug_cricketbatguard) Console.Printf("CricketBatBuffTimer: %d", CricketBatBuffTimer);
				}
				else
				{
					owner.A_SetInventory("CricketBatGuard",0);
				}

				if (CricketBatSwingBuffTimer)
				{
					CricketBatSwingBuffTimer--;
					owner.A_SetInventory("CricketBatSwingDEF",1);
					if (dydudebug_cricketbatguard) Console.Printf("timer: %d", CricketBatSwingBuffTimer);
				}
				else
				{
					owner.A_SetInventory("CricketBatSwingDEF",0);
				}
				
				//*********************
				//* Grimophone Debuff *
				//*********************
				int DashTics = owner.CountInv("DashTics");
				int gdebuffbase = 90;
				if (GrimophoneDebuffTimer)
				{
					if (GrimophoneDebuffTimer >= (gdebuffbase*27)) 
					{
						owner.A_SetInventory("GrimophoneDEFDown4",1);
						owner.A_SetInventory("GrimophoneDEFDown3",0);
						owner.A_SetInventory("GrimophoneDEFDown2",0);
						owner.A_SetInventory("GrimophoneDEFDown1",0);
					}
					else if (GrimophoneDebuffTimer >= (gdebuffbase*9)) 
					{
						owner.A_SetInventory("GrimophoneDEFDown4",0);
						owner.A_SetInventory("GrimophoneDEFDown3",1);
						owner.A_SetInventory("GrimophoneDEFDown2",0);
						owner.A_SetInventory("GrimophoneDEFDown1",0);
					}
					else if (GrimophoneDebuffTimer >= (gdebuffbase*3))
					{
						owner.A_SetInventory("GrimophoneDEFDown4",0);
						owner.A_SetInventory("GrimophoneDEFDown3",0);
						owner.A_SetInventory("GrimophoneDEFDown2",1);
						owner.A_SetInventory("GrimophoneDEFDown1",0);
					}
					else
					if (GrimophoneDebuffTimer >= (gdebuffbase)) 
					{
						owner.A_SetInventory("GrimophoneDEFDown4",0);
						owner.A_SetInventory("GrimophoneDEFDown3",0);
						owner.A_SetInventory("GrimophoneDEFDown2",0);
						owner.A_SetInventory("GrimophoneDEFDown1",1);
					}
					owner.bFORCERADIUSDMG = true;
					GrimophoneDebuffTimer--;
					if (dydudebug_grimophonealtfire) Console.Printf("GrimophoneDebuffTimer %d", GrimophoneDebuffTimer);
				}
				else
				{
					owner.A_SetInventory("GrimophoneDEFDown4",0);
					owner.A_SetInventory("GrimophoneDEFDown3",0);
					owner.A_SetInventory("GrimophoneDEFDown2",0);
					owner.A_SetInventory("GrimophoneDEFDown1",0);
					if (berserked && DashTics) owner.bFORCERADIUSDMG = true;
					else owner.bFORCERADIUSDMG = false;
				}
				
				double MercyFlickerAlpha = 1.0;
				if (MercyInvulnOn)
				{
					if (MercyInvulnTimer > 0)
					{
						if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
						{
							owner.player.cheats |= CF_GODMODE;
							owner.bINVULNERABLE = 1;
						}
						MercyInvulnMod = MercyInvulnTimer % 120;
						if (MercyInvulnMod >= 0 && MercyInvulnMod <= 14) MercyFlickerAlpha = 0.25;
						if (MercyInvulnMod >= 15 && MercyInvulnMod <= 29) MercyFlickerAlpha = 0.3125;
						if (MercyInvulnMod >= 30 && MercyInvulnMod <= 44) MercyFlickerAlpha = 0.375;
						if (MercyInvulnMod >= 45 && MercyInvulnMod <= 59) MercyFlickerAlpha = 0.4375;
						if (MercyInvulnMod >= 60 && MercyInvulnMod <= 74) MercyFlickerAlpha = 0.5;
						if (MercyInvulnMod >= 75 && MercyInvulnMod <= 89) MercyFlickerAlpha = 0.4375;
						if (MercyInvulnMod >= 90 && MercyInvulnMod <= 104) MercyFlickerAlpha = 0.375;
						if (MercyInvulnMod >= 105 && MercyInvulnMod <= 119) MercyFlickerAlpha = 0.3125;
						if (dydudebug_mercyinvulndisplays) Console.Printf("MercyFlickerAlpha: %.8f, MercyInvulnMod [Timer]: %d [%d]", MercyFlickerAlpha, owner.GetRenderStyle(), MercyInvulnMod, MercyInvulnTimer);
						MercyInvulnTimer -= 20;
					}
					else // Timer at zero
					{
						if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
						{
							owner.player.cheats &= ~CF_GODMODE;
							owner.bINVULNERABLE = 0;
						}
						MercyInvulnTimer = MercyInvulnMod = 0;
						MercyInvulnOn = false;
					}
				}
				else
				{
					if (!(owner.CountInv("PowerInvulnDD") || owner.CountInv("PowerInvulnerable")))
					{
						owner.player.cheats &= ~CF_GODMODE;
						owner.bINVULNERABLE = 0;
					}
				}
				if (dydudebug_mercyinvulndisplays) Console.Printf("MercyInvuln: %d {%d} [%d]", MercyInvulnOn, MercyInvulnMod, MercyInvulnTimer);
				
				//**************************************************
				//* RenderStyle Stuff [Dashing, Invisibility, etc] *
				//**************************************************
				int InvisPulseTimer = level.totaltime % 40;
				double InvisPulseAlpha = 1.00;
				double DashAlpha = 1.00;

				int InvisibilityTimer;
				let MiscItem = PowerInvisibility(owner.FindInventory("PowerInvisibility",true));
				if (MiscItem)
				{
					InvisibilityTimer = MiscItem.EffectTics;
					if (InvisibilityTimer > 0)
					{
						if (InvisPulseTimer == 0 || InvisPulseTimer == 20 || InvisPulseTimer == 40) InvisPulseAlpha = 0.20;
						if (InvisPulseTimer == 1 || InvisPulseTimer == 19) InvisPulseAlpha = 0.205;
						if (InvisPulseTimer == 2 || InvisPulseTimer == 18) InvisPulseAlpha = 0.21;
						if (InvisPulseTimer == 3 || InvisPulseTimer == 17) InvisPulseAlpha = 0.215;
						if (InvisPulseTimer == 4 || InvisPulseTimer == 16) InvisPulseAlpha = 0.22;
						if (InvisPulseTimer == 5 || InvisPulseTimer == 15) InvisPulseAlpha = 0.225;
						if (InvisPulseTimer == 6 || InvisPulseTimer == 14) InvisPulseAlpha = 0.23;
						if (InvisPulseTimer == 7 || InvisPulseTimer == 13) InvisPulseAlpha = 0.235;
						if (InvisPulseTimer == 8 || InvisPulseTimer == 12) InvisPulseAlpha = 0.24;
						if (InvisPulseTimer == 9 || InvisPulseTimer == 11) InvisPulseAlpha = 0.245;
						if (InvisPulseTimer == 10) InvisPulseAlpha = 0.25;
						if (InvisPulseTimer == 21 || InvisPulseTimer == 39) InvisPulseAlpha = 0.195;
						if (InvisPulseTimer == 22 || InvisPulseTimer == 38) InvisPulseAlpha = 0.19;
						if (InvisPulseTimer == 23 || InvisPulseTimer == 37) InvisPulseAlpha = 0.185;
						if (InvisPulseTimer == 24 || InvisPulseTimer == 36) InvisPulseAlpha = 0.18;
						if (InvisPulseTimer == 25 || InvisPulseTimer == 35) InvisPulseAlpha = 0.175;
						if (InvisPulseTimer == 26 || InvisPulseTimer == 34) InvisPulseAlpha = 0.17;
						if (InvisPulseTimer == 27 || InvisPulseTimer == 33) InvisPulseAlpha = 0.165;
						if (InvisPulseTimer == 28 || InvisPulseTimer == 32) InvisPulseAlpha = 0.16;
						if (InvisPulseTimer == 29 || InvisPulseTimer == 31) InvisPulseAlpha = 0.155;
						if (InvisPulseTimer == 30) InvisPulseAlpha = 0.15;
					}

					if (DashTics)
					{
						if (random(1,128) <= (68 + (PlayerLevel * frandom(2.75,4.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
					}
					else
					{
						if (random(1,128) <= (64 + (PlayerLevel * frandom(0.75,1.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
					}
				}
				else
				{
					if (DashTics)
					{
						if (random(1,128) <= (4 + (PlayerLevel * frandom(2,3)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
					}
					else
					{
						Owner.bCANTSEEK = false;
					}
				}

				if (DashTics)
				{
					if (level.time % 4 <= 1) DashAlpha = frandompick(0.375,0.5,0.625);
															else DashAlpha = frandompick(0.625,0.75,0.875);
				}
				if (DashTics) owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Add);
								 else owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Translucent);

				let MiscItem3 = Powerup(owner.FindInventory("PowerInvulnerable",true));
				if (MiscItem3)
				{
				}
				
				if (afasdroptimer) afasdroptimer--;
				
				//********************
				//* Inventory Limits *
				//********************
				int dropamt;
				string itemname;
				int baseholdamount;
				double leveladd;
				int itemsmax;
				int itemid;
				double baselvlfactor = 50.0;
				if (owner.CountInv("PlayingHexen")) baselvlfactor = 33.4;
				let currentitemtype = owner.FindInventory("AppleWine");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 15016;
					baseholdamount = 16;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("TurkeyDinner");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 12012;
					baseholdamount = 6;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("CherryBombPickup");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 12011;
					baseholdamount = 24;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("SpinnerPickup");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 12018;
					baseholdamount = 16;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("BRocketPickup");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 12017;
					baseholdamount = 4;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("PopperPickup");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 13019;
					baseholdamount = 2;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("SnakePickup");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 12091;
					baseholdamount = 2;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("FuryPotion");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 13164;
					baseholdamount = 3;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("TimePotion");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 13162;
					baseholdamount = 3;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("DivingHelm");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 15126;
					baseholdamount = 2;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("KilletanteEffigy");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 9886;
					baseholdamount = 5;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				currentitemtype = owner.FindInventory("DoorBell");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					itemid = 13126;
					baseholdamount = 1;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (baseholdamount * (PlayerLevel / baselvlfactor));
					if (dydudebug_inventorylimits) Console.Printf("leveladd [%s]: %.8f", itemname, int(leveladd));
					itemsmax = (baseholdamount + int(leveladd));
					currentitemtype.MaxAmount = (itemsmax);
					if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				
				ClassCheck++;
				itemtimer++;

				owner.player.mo.maxhealth = MaxHealthTrue;
				// Set Global Vars [End]
				globalvars.ItemPoints = ItemPoints;
				globalvars.BaseStartMaxHealth = BaseStartMaxHealth;
				globalvars.HealthLevelAdd = HealthLevelAdd;
				globalvars.HealthBonusAdd = HealthBonusAdd;
				globalvars.MaxHealthTrue = MaxHealthTrue;
				globalvars.Experience = Experience;
				globalvars.PlayerLevel = PlayerLevel;
				globalvars.ClassCheck = ClassCheck;
				globalvars.atkfct = atkfct;
				globalvars.deffct = deffct;
				globalvars.spdfct = spdfct;
				globalvars.jmpfct = jmpfct;
				globalvars.suvfct = suvfct;
				globalvars.PlayerATK = PlayerATK;
				globalvars.PlayerDEF = PlayerDEF;
				globalvars.PlayerSPD = PlayerSPD;
				globalvars.PlayerLuck = PlayerLuck;
			}
			if (dydudebug_miscitemdebug) Console.Printf("ClassCheck: %d", ClassCheck);
			super.DoEffect();
		}
	}
	
	void LevelUpProcess()
	{
		int MaxHPGain;
		int levelmodulo, levelbonustype;
		levelmodulo = PlayerLevel % 20;
		if (levelmodulo == 0) levelbonustype = 0;
		else if (levelmodulo == 4) levelbonustype = 1;
		else if (levelmodulo == 5) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 8) levelbonustype = 1;
		else if (levelmodulo == 10) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 12) levelbonustype = 1;
		else if (levelmodulo == 15) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 16) levelbonustype = 1;
		else levelbonustype = 2;
		if (dydudebug_levelupdisplays) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);
		
		double RandomizedStatChance, RandomizedStatChance2;
		RandomizedStatChance = 1.00000000; // 192;
		if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
		{
			RandomizedStatChance -= (0.1 * random[statitem](4,8)); // 112 to 152
		}
		else
		if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
		{
			RandomizedStatChance -= (0.02 * random[statitem](4,8)); // 160 to 176
		}
		else
		if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20
		{
			RandomizedStatChance -= (0.004 * random[statitem](4,8));
		}
		double RNDSCSubtractor1 = 0;
		double RNDSCSubtractor2 = 0;
		RNDSCSubtractor1 = (PlayerLevel * 0.32);
		RNDSCSubtractor1 = clamp(RNDSCSubtractor1, 0.00000, 0.33334);
		if (PlayerLevel > 100)
		{
			RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
			RNDSCSubtractor2 = clamp(RNDSCSubtractor2, 0.00000, 0.33334);
		}
		if (dydudebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor1\c-: %.8f, \cxRNDSCSubtractor2\c-: %.8f", RNDSCSubtractor1, RNDSCSubtractor2);

		double RNDSCSubtractor = 0;
		RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
		RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
		RandomizedStatChance -= RNDSCSubtractor;
		if (owner.CountInv("MysteryItem")) RandomizedStatChance *= 0.75;
		if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
		if (dydudebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor\c-: %.8f, \cxRandomizedStatChance\c-: %.8f", RNDSCSubtractor, RandomizedStatChance);

		RandomizedStatChance2 = 1.00000000;
		if (PlayerLevel >= 25) RandomizedStatChance2 -= 0.041666667; // 23
		if (PlayerLevel >= 50) RandomizedStatChance2 -= 0.041666667; // 22
		if (PlayerLevel >= 75) RandomizedStatChance2 -= 0.041666667; // 21
		if (PlayerLevel >= 100) RandomizedStatChance2 -= 0.041666667; // 20
		if (PlayerLevel >= 125) RandomizedStatChance2 -= 0.083333334; // 18
		if (PlayerLevel >= 150) RandomizedStatChance2 -= 0.083333334; // 16
		if (PlayerLevel >= 175) RandomizedStatChance2 -= 0.083333334; // 14
		if (dydudebug_levelupdisplays) Console.Printf("\cyStat Chance 1\c-: %.8f, \cxStat Chance 2\c-: %.8f", RandomizedStatChance, RandomizedStatChance2);
		
		//********************************
		//*Random Levelups to Stat Values*
		//********************************
		int SeedIncreaseAmt;
		double LvlSkillMulti;
		double RollValue;
		double BaseChance1;
		double BaseChance2;
		int LvlStatMulti = 1;
		// Luck Boost [1]
		BaseChance1 = (0.2 + (NumOfAfasDrops * 0.05)) * (1.0 + (NumOfAfasDrops * 0.25));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.05));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;

		// Speed Boost [1]
		BaseChance1 = (0.125 + (NumOfAfasDrops * 0.05)) * (1.0 + (NumOfAfasDrops * 0.25));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.05));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		
		// Attack Boost [1]
		BaseChance1 = (0.25 + (NumOfAfasDrops * 0.05)) * (1.0 + (NumOfAfasDrops * 0.25));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.05));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		
		// Defense Boost [1]
		BaseChance1 = (0.1875 + (NumOfAfasDrops * 0.05)) * (1.0 + (NumOfAfasDrops * 0.25));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.05));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;

		// Health/HP Boost
		CurrentHealth = owner.player.mo.health;
		int LevelAddMaxHP = 0;
		HPMaxGain = 0;
		int HPRandomizer1;
		
		if (PlayerLevel >= 151 && PlayerLevel <= 200)				HPMaxGain += floor(PlayerLevel * frandompick(0.0525,0.06));
		else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick(0.045,0.0525));
		else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick(0.0375,0.045));
		else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick(0.03,0.0375));
		
		HPMaxGain += 													randompick(0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3);
		if (levelbonustype == 0) HPMaxGain += randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3);
		if (levelbonustype == 1) HPMaxGain += randompick(0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3);
		if (levelbonustype == 2) HPMaxGain += randompick(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2);
		if (TrueGameSkill <= SKILL_VERY_EASY) HPMaxGain += (MaxHealthTrue / 216); // 288
		if (TrueGameSkill == SKILL_EASY) HPMaxGain += (MaxHealthTrue / 270); // 360
		if (TrueGameSkill == SKILL_NORMAL) HPMaxGain += (MaxHealthTrue / 324); // 432
		if (TrueGameSkill == SKILL_HARD) HPMaxGain += (MaxHealthTrue / 378); // 504
		if (TrueGameSkill == SKILL_VERY_HARD) HPMaxGain += (MaxHealthTrue / 432); // 576
		if (HPMaxGain < 1) HPMaxGain = 1;
		owner.player.mo.health += HPMaxGain;
		HealthLevelAdd += HPMaxGain;
		MaxHealthTrue = (BaseStartMaxHealth + HealthLevelAdd + HealthBonusAdd);
		if (dydudebug_levelupdisplays) Console.Printf("HPMaxGain: %d", HPMaxGain);
		
		owner.A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(0.6,0.75),ATTN_NORM,frandom(1.25,1.5));
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		if (owner && (Owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD"))) berserked = true;

		let globalvars = DDGlobalVariables.Get();
		let weapon = owner.player.ReadyWeapon;
		TrueGameSkill = skill;
		double BerserkFactorblock;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		double baseatkfct = 0.0125;
		if (skill <= 0) baseatkfct = 0.015;
		if (skill == 1) baseatkfct = 0.01375;
		if (skill == 2) baseatkfct = 0.0125;
		if (skill == 3) baseatkfct = 0.01125;
		if (skill >= 4) baseatkfct = 0.010;
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive): %d", damage);
			// Level
			double LVLFactor = (1.00 + (PlayerLevel * baseatkfct));
			if (LVLFactor >= 10.00) LVLFactor = 10.00;
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Level): %.8f", LVLFactor);

			// Attack
			double ATKFactor = 1.00;
			if (exex_extraatkdefspd) ATKFactor = (1.00 + (PlayerATK * baseatkfct));
			if (ATKFactor >= 10.00) ATKFactor = 10.00;
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - EAttack): %.8f", ATKFactor);

			// Luck
			double LUKFactor = 1.00;
			if (PlayerLuck) LUKFactor = (1.00 + (random(1,PlayerLuck) * frandompick(0,0,0,0,0,0,(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*1),(baseatkfct*1),(baseatkfct*2))));
			if (LUKFactor >= 10.00) LUKFactor = 10.00;
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Luck): %.8f", LUKFactor);

			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 0.75;
			if (Skill == SKILL_HARD) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_EASY) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 1.25;
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Skill): %.8f", SkillFactor);

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
					damageType == 'Bonk' || damageType == 'Bap')
			{
				if (landdmgbonus == 1) LandingFactor = 1.5;
				if (landdmgbonus == 2) LandingFactor = 2.25;
				if (landdmgbonus == 3) LandingFactor = 3.78125;
				if (landdmgbonus == 4) LandingFactor = 7.47265625;
				if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Landing): %.8f", LandingFactor);
			}

			// Dashing Bonus
			double DashingFactor = 1.0;
			if (owner.CountInv("PlayerDashing"))
			{
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
						damageType == 'Bonk' || damageType == 'Bap') DashingFactor = frandompick(1.25,1.334,1.425,1.5);
				if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Dashing): %.8f", DashingFactor);
			}
			
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerInvisibility") || Owner.CountInv("PowerInvisibility2") || Owner.CountInv("PowerGhost") || Owner.CountInv("PowerGhost2") || Owner.CountInv("PowerRavenInvisibility")) BuffFactor *= frandompick(1.00,1.00,1.125,1.125,1.25);

			if (Owner.CountInv("PowerWineBuffWeak")) BuffFactor *= frandompick(0.985,1.015);
			if (Owner.CountInv("PowerWineBuffStrong")) BuffFactor *= frandompick(0.955,1.045);
			if (Owner.CountInv("PowerWineBuffStrongest")) BuffFactor *= frandompick(0.91,1.09);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) BuffFactor *= frandompick(0.85,1.15);
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Buff): %.8f", BuffFactor);
			
			double SigilFactor = 1.00;
			if (damageType == 'Sigil' || damageType == 'SpectralLow')
			{
				let Sigl = SigilDD(owner.FindInventory("SigilDD"));
				if (Sigl)
				{
					SigilFactor = (0.875 + ((Sigl.health - 1) * 0.03125));
				}
				if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Sigil): %.8f", SigilFactor);
			}
			
			double SecretFactor = 1.0;
			if (globalvars.TotalSecretsFound)
			{
				SecretFactor = (1.0 + (globalvars.TotalSecretsFound * 0.01));
				if (SecretFactor > 4) SecretFactor = 4;
				if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - SecretsFound): %.8f (%d)", SecretFactor, globalvars.TotalSecretsFound);
			}
			
			double CrisisFactor = 1.0;
			if (owner.CountInv("MysteryItem"))
			{
				if (owner.CountInv("DecentHealth")) CrisisFactor = 1.05;
				if (owner.CountInv("LowHealth")) CrisisFactor = 1.25;
				if (owner.CountInv("CriticalHealth")) CrisisFactor = 2.25;
			}
			
			double TOTALFactor = 1.0
													 * LVLFactor
													 * ATKFactor
													 * LUKFactor
													 * SkillFactor
													 * LandingFactor
													 * BuffFactor
													 * SecretFactor
													 * CrisisFactor
													 * SigilFactor
													 * atkfct;
			if (dydudebug_attackcalcs) Console.Printf("Damage (!passive - Total): %.8f", TOTALFactor);

			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (dydudebug_attackcalcs) Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		double basedeffct = 0.0025;
		if (skill <= 0) baseatkfct = 0.0030;
		if (skill == 1) baseatkfct = 0.00275;
		if (skill == 2) baseatkfct = 0.0025;
		if (skill == 3) baseatkfct = 0.00225;
		if (skill >= 4) baseatkfct = 0.0020;
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			if (dydudebug_defensecalcs) Console.Printf("FDamage (passive[pre]): %d", damage);
			// Level
			double LVLFactor = (1.00 - (PlayerLevel * basedeffct));
			if (LVLFactor <= 0.10) LVLFactor = 0.10;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Level): %.8f", LVLFactor);

			// Defense
			double DEFFactor = 1.00;
			if (exex_extraatkdefspd) DEFFactor = (1.00 - (PlayerDEF * basedeffct));
			if (DEFFactor <= 0.10) DEFFactor = 0.10;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - EDefense): %.8f", DEFFactor);

			// Luck
			double LUKFactor = 1.00;
			if (PlayerLuck) LUKFactor = (1.00 - (random(1,PlayerLuck) * frandompick(0,0,0,0,0,0,(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.5),(basedeffct*0.5),(basedeffct*0.5),(basedeffct),(basedeffct),(basedeffct*2))));
			if (LUKFactor <= 0.10) LUKFactor = 0.10;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Luck): %.8f", LUKFactor);

			// Difficulty Level
			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 0.75;
			if (Skill == SKILL_EASY) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_HARD) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 1.25;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Skill): %.8f", SkillFactor);
			
			// Buffs
			double BuffFactor = 1.00;
			if (berserked) BuffFactor *= frandompick(0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility") || Owner.CountInv("PowerInvisibility2") || Owner.CountInv("PowerGhost") || Owner.CountInv("PowerGhost2") || Owner.CountInv("PowerRavenInvisibility")) BuffFactor *= frandompick(1.00,1.00,0.875,0.875,0.75);

			if (Owner.CountInv("PowerWineBuffWeak")) BuffFactor *= frandompick(0.995,1.005);
			if (Owner.CountInv("PowerWineBuffStrong")) BuffFactor *= frandompick(0.985,1.015);
			if (Owner.CountInv("PowerWineBuffStrongest")) BuffFactor *= frandompick(0.97,1.03);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) BuffFactor *= frandompick(0.95,1.05);
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Buff): %.8f", BuffFactor);
			

			double PlayerFistBlockFactor = 1.00;
			int UsingFistBlock = 0;
			BerserkFactorblock = frandompick[statitem2](0.25,0.334,0.5,0.667,0.75);
			if (Owner.CountInv("FistPlayerBlock")) 
			{
				UsingFistBlock++;
				PlayerFistBlockFactor *= 0.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.5;
			}
			if (Owner.CountInv("FistPlayerBlock2")) 
			{
				UsingFistBlock++;
				PlayerFistBlockFactor *= 0.375;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.375;
			}
			if (Owner.CountInv("FistPlayerBlock3")) 
			{
				UsingFistBlock++;
				PlayerFistBlockFactor *= 0.25;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.25;
			}
			if (Owner.CountInv("FistPlayerBlockExtra") && UsingFistBlock) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.1;
			}
			if (PlayerFistBlockFactor < 1.00 && UsingFistBlock && Owner.CountInv("PowerStrength") || owner.CountInv("PowerStrengthDD")) PlayerFistBlockFactor *= BerserkFactorblock;
			if (dydudebug_defensecalcs && UsingFistBlock) Console.Printf("Damage (!passive - Fist): %.8f", PlayerFistBlockFactor);

			// Weapons
			double WeaponFactor = 1.00;
			if (weapon is "HandToHand" && !UsingFistBlock)		WeaponFactor = 1.125;
			if (weapon is "CricketBat")		WeaponFactor = 1.00;
			if (weapon is "BlunderAxe")		WeaponFactor = 1.0625;
			if (weapon is "AppleJack")		WeaponFactor = 0.9375;
			if (weapon is "Scrambler")		WeaponFactor = 0.75;
			if (weapon is "WizardPike")		WeaponFactor = 0.875;
			if (weapon is "SuperVac")			WeaponFactor = 1.125;
			if (weapon is "Grimophone")		WeaponFactor = 1.25;
			if (weapon is "CandleWhip")		WeaponFactor = 1.125;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - WeaponEquipped): %.8f", WeaponFactor);

			double SecretFactor = 1.0;
			if (globalvars.TotalSecretsFound)
			{
				SecretFactor = (1.0 - (globalvars.TotalSecretsFound * 0.005));
				if (SecretFactor < 0.25) SecretFactor = 0.25;
				if (dydudebug_defensecalcs) Console.Printf("Damage (passive - SecretsFound): %.8f (%d)", SecretFactor, globalvars.TotalSecretsFound);
			}
			
			double CrisisFactor = 1.0;
			if (owner.CountInv("MysteryItem"))
			{
				if (owner.CountInv("DecentHealth")) CrisisFactor = 0.975;
				if (owner.CountInv("LowHealth")) CrisisFactor = 0.75;
				if (owner.CountInv("CriticalHealth")) CrisisFactor = 0.375;
				if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Crisis): %.8f", CrisisFactor);
			}

			double TOTALFactor = 1.0
													 * LVLFactor
													 * DEFFactor
													 * LUKFactor
													 * SkillFactor
													 * BuffFactor
													 * PlayerFistBlockFactor
													 * WeaponFactor
													 * SecretFactor
													 * CrisisFactor
													 * deffct;
			if (dydudebug_defensecalcs) Console.Printf("Damage (passive - Total): %.8f", TOTALFactor);

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (dydudebug_defensecalcs) Console.Printf("FDamage (passive - Final): %d", newdamage);
		}
	}
	
	double HUDSpeed;
	override double GetSpeedFactor()
	{
		let weapon = owner.player.ReadyWeapon;
		CurrentHealth = owner.health;
		MaxHealthTrue = (BaseStartMaxHealth + HealthLevelAdd + HealthBonusAdd);

		Speed = 1.00;
		HUDSpeed = Speed;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [base]: %.8f", Speed);

		double LevelFactor = 1.0;
		LevelFactor *= (1.00 + (PlayerLevel * (0.0075 * 2.5)));
		if (LevelFactor >= 3.75) LevelFactor = 3.75;
		Speed *= LevelFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [level]: %.8f", LevelFactor);

		double SPDFactor = 1.0;
		if (exex_extraatkdefspd) SPDFactor *= (1.00 + (PlayerSPD * (0.0075 * 2.5)));
		if (SPDFactor >= 3.75) SPDFactor = 3.75;
		Speed *= SPDFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [espeed]: %.8f", SPDFactor);

		double HealthFactor = 1.0;
		if (CurrentHealth >= (MaxHealthTrue * 3)) HealthFactor *= 1.25;
		else if (CurrentHealth >= (MaxHealthTrue * 2.75)) HealthFactor *= 1.21875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) HealthFactor *= 1.1875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) HealthFactor *= 1.15625;
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) HealthFactor *= 1.125;
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) HealthFactor *= 1.09375;
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) HealthFactor *= 1.0625;
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) HealthFactor *= 1.03125;
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) HealthFactor *= 1.00;
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) HealthFactor *= 0.9375;
		else if (CurrentHealth >= (MaxHealthTrue * 0.25)) HealthFactor *= 0.875;
		else HealthFactor *= 0.8125;
		Speed *= HealthFactor;
		HUDSpeed *= HealthFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [health]: %.8f", HealthFactor);

		double PlayerFistBlockFactor = 1.0;
		if (Owner.CountInv("FistPlayerBlockItem"))
		{
			if (Owner.CountInv("FistPlayerBlock")) PlayerFistBlockFactor *= frandom(0.625,0.667);
			if (Owner.CountInv("FistPlayerBlock2")) PlayerFistBlockFactor *= frandom(0.667,0.75);
			if (Owner.CountInv("FistPlayerBlock3")) PlayerFistBlockFactor *= frandom(0.75,0.8334);
			Speed *= PlayerFistBlockFactor;
			HUDSpeed *= PlayerFistBlockFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Fist Block]: %.8f", PlayerFistBlockFactor);
		}

		double BerserkFactor = 1.0;
		if (berserked) 
		{
			BerserkFactor = 1.125;
			Speed *= BerserkFactor;
			HUDSpeed *= BerserkFactor;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Berserk]: %.8f", BerserkFactor);
		}
		
		double BuffFactor = 1.0;
		if (Owner.CountInv("CricketBatGuard")) BuffFactor *= frandom(0.95,0.975);
		if (Owner.CountInv("CricketBatGuard2")) BuffFactor *= frandom(0.85,0.925);
		if (Owner.CountInv("DoingSpinAttack")) BuffFactor *= frandom(0.2125,0.23125);
		if (Owner.CountInv("PowerWineBuffWeak")) BuffFactor *= frandom(0.965,0.975);
		if (Owner.CountInv("PowerWineBuffStrong")) BuffFactor *= frandom(0.89,0.91);
		if (Owner.CountInv("PowerWineBuffStrongest")) BuffFactor *= frandom(0.80,0.84);
		if (Owner.CountInv("PowerWineBuffStrongestEven")) BuffFactor *= frandom(0.69,0.75);
		Speed *= BuffFactor;
		HUDSpeed *= BuffFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Buffs]: %.8f", BuffFactor);

		double ArmorFactor = 1.0;
		if (owner.CountInv("KnightGownItem")) 
		{
			if (berserked) ArmorFactor *= 0.995;
								else ArmorFactor *= 0.99;
		}
		if (owner.CountInv("KnightGownItem2")) 
		{
			if (berserked) ArmorFactor *= 0.985;
								else ArmorFactor *= 0.97;
		}
		if (owner.CountInv("KnightGownItem3")) 
		{
			if (berserked) ArmorFactor *= 0.97;
								else ArmorFactor *= 0.94;
		}
		if (owner.CountInv("KnightGownItem4")) 
		{
			if (berserked) ArmorFactor *= 0.95;
								else ArmorFactor *= 0.90;
		}
		Speed *= ArmorFactor;
		HUDSpeed *= ArmorFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Armor]: %.8f", ArmorFactor);
		
		double WeaponFactor = 1.0;
		// Weapon Checks
		if (weapon is "HandToHand")
		{
			if (berserked) WeaponFactor *= 1.25;
								else WeaponFactor *= 1.125;
		}
		if (weapon is "CricketBat") WeaponFactor *= 1.00;
		if (weapon is "BlunderAxe") 
		{
			if (berserked) WeaponFactor *= 0.975;
								else WeaponFactor *= 0.95;
		}
		if (weapon is "AppleJack") 
		{
			if (berserked) WeaponFactor *= 1.075;
								else WeaponFactor *= 1.05;
		}
		if (weapon is "Scrambler") 
		{
			if (berserked) WeaponFactor *= 1.1875;
								else WeaponFactor *= 1.125;
		}
		if (weapon is "WizardPike")
		{
			if (berserked) WeaponFactor *= 1.1875;
								else WeaponFactor *= 1.125;
		}
		if (weapon is "SuperVac")
		{
			if (berserked) WeaponFactor *= (0.9375 - (SuperVacAmmo * 0.0013020835));
								else WeaponFactor *= (0.875 - (SuperVacAmmo * 0.002604167));
		}
		if (weapon is "Grimophone")
		{
			if (berserked) WeaponFactor *= 0.90625;
								else WeaponFactor *= 0.8125;
		}
		if (weapon is "CandleWhip")
		{
			if (berserked) WeaponFactor *= 1.125;
								else WeaponFactor *= 1.0625;
		}
		Speed *= WeaponFactor;
		HUDSpeed *= WeaponFactor;
		if (dydudebug_speedcalcs) Console.Printf("SpeedX [WeaponEquipped]: %.8f", WeaponFactor);
		
		double MystItemFactor = 1.0;
		if (owner.CountInv("MysteryItem"))
		{
			if (owner.CountInv("DecentHealth")) MystItemFactor *= 1.0125;
			if (owner.CountInv("LowHealth")) MystItemFactor *= 1.0625;
			if (owner.CountInv("CriticalHealth")) MystItemFactor *= 1.3125;
			if (dydudebug_speedcalcs) Console.Printf("SpeedX [Crisis]: %.8f", MystItemFactor);
		}
		Speed *= MystItemFactor;
		HUDSpeed *= MystItemFactor;

		Speed *= spdfct;

		if (dydudebug_speedcalcs) Console.Printf("SpeedX [Final]: %.8f, HUDSpeed: %.2f", Speed, HUDSpeed);
		return Speed; 
	}
}

// For a later attempt at dynamic music. :V
class DynamicMusic : Inventory
{
	bool fightmusic;
	bool bossmusic;
	

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}

	override void Tick()
	{
		Super.Tick();
		//
	}
}

/////////////////////////////////////////////////////////////DASH
// Dash and double jump code by TheCamaleonMaligno ( https://www.youtube.com/watch?v=mTfGxY_Afhs )
// This code is heavily modified from the "Hell Crusher" variation of it :V
class PlayerDashJump : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	int itemtimer;
	
	Double DashDir, DashSpeed, DashVSpeed;
	Int DashTics, DashCharge, AirTics, DashCost;
	Bool DJump, Waiting;
	string dashgruntsound;
	int dashgruntchance;
	int dashtype;
	int airdashtype;
	Int DashMaxCharge, MaxDashes, MaxDashTics;
	bool slownthres1, slownthres2, slownthres3;
	bool berserked;
	int PlayerLevel;
	int BaseDashChargeMax;
	int ExtraDashCharge;
	int SuperVacAmmo;
	
	Default
	{
		+Inventory.PERSISTENTPOWER
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.UNCLEARABLE;
	}
	
	override void Tick()
	{
		Super.Tick();
		if (!Owner || Owner && (!Owner.Player || Owner.Health < 1)) Return;
		let globalvars = DDGlobalVariables.Get();
		let weapon = owner.player.ReadyWeapon;
		if (Owner.CountInv("PowerStrength") || Owner.CountInv("PowerStrengthDD")) berserked = true;
		else berserked = false;
		
		SuperVacAmmo = owner.CountInv("VacAmmo");
		PlayerInfo PlayDash = Owner.Player;
		Int BTInput = PlayDash.cmd.buttons;
		dashgruntchance = randompick(66,66,67);
		MaxDashes = 1;
		double dashsndvol = 0.67;
		double dashgruntsndvol = 1.0;
		PlayerLevel = owner.CountInv("PlayerLevel");
		MaxDashTics = randompick(6,6,7,7,7) + (PlayerLevel / 20);
		if (berserked) MaxDashTics *= (1.34 + (PlayerLevel * 0.004));
		let MiscItem = PlayerStatItem(Owner.FindInventory("PlayerStatItem"));

		int DashLvlTier1Thresh = 25;
		int DashLvlTier2Thresh = 50;
		int DashLvlTier3Thresh = 75;
		int DashLvlTier4Thresh = 100;

		double baseAddDashLevel = 1.25;
		int AddDashLevel = (PlayerLevel * baseAddDashLevel);
		double ADashFactor = 1.5;
		if (skill <= SKILL_VERY_EASY) baseAddDashLevel = 1.625;
		if (skill == SKILL_EASY) baseAddDashLevel = 1.5;
		if (skill == SKILL_NORMAL) baseAddDashLevel = 1.375;
		if (skill == SKILL_HARD) baseAddDashLevel = 1.25;
		if (skill >= SKILL_VERY_HARD) baseAddDashLevel = 1.125;

		AddDashLevel = (PlayerLevel * (baseAddDashLevel * ADashFactor));
		if (PlayerLevel >= DashLvlTier1Thresh) AddDashLevel += ((PlayerLevel - DashLvlTier1Thresh) * ((baseAddDashLevel * 0.5) * ADashFactor));
		if (PlayerLevel >= DashLvlTier2Thresh) AddDashLevel += ((PlayerLevel - DashLvlTier2Thresh) * ((baseAddDashLevel * 0.25) * ADashFactor));
		if (PlayerLevel >= DashLvlTier3Thresh) AddDashLevel += ((PlayerLevel - DashLvlTier3Thresh) * ((baseAddDashLevel * 0.125) * ADashFactor));
		if (PlayerLevel >= DashLvlTier4Thresh) AddDashLevel += ((PlayerLevel - DashLvlTier4Thresh) * ((baseAddDashLevel * 0.0625) * ADashFactor));
		
		if (itemtimer <= 2)
		{
			if (globalvars) 
			{
				if (exex_deathexitaffectsstats) 
				{
					BaseDashChargeMax = random(27,30);
					if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random(32,35);
					if (skill == SKILL_EASY) BaseDashChargeMax = random(30,32);
					if (skill == SKILL_NORMAL) BaseDashChargeMax = random(27,30);
					if (skill == SKILL_HARD) BaseDashChargeMax = random(25,27);
					if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random(22,25);
				}
				else
				{
					if (globalvars.ClassCheck <= 2)
					{
						BaseDashChargeMax = random(27,30);
						if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random(32,35);
						if (skill == SKILL_EASY) BaseDashChargeMax = random(30,32);
						if (skill == SKILL_NORMAL) BaseDashChargeMax = random(27,30);
						if (skill == SKILL_HARD) BaseDashChargeMax = random(25,27);
						if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random(22,25);
					}
					else
					{
						BaseDashChargeMax = globalvars.BaseDashChargeMax;
					}
				}
			}
		}
		else
		{
			if (BaseDashChargeMax == 0) BaseDashChargeMax = globalvars.BaseDashChargeMax;
		}

		DashMaxCharge = BaseDashChargeMax + AddDashLevel + ExtraDashCharge;
		if (berserked) DashMaxCharge *= 1.125;
		if (itemtimer == 0) DashCharge = DashMaxCharge;

		double DashSpdMul = 1.00;
		DashSpeed = (25 + (PlayerLevel * 0.125));
		if (owner.CountInv("PowerRoastBuff")) DashSpdMul += 0.04;
		if (owner.CountInv("PowerMealBuff") || owner.CountInv("PowerMealBuff2")) DashSpdMul += 0.08;
		if (owner.CountInv("PowerMeal2Buff") || owner.CountInv("PowerMeal2Buff2")) DashSpdMul += 0.08;
		if (weapon is "HandToHand") DashSpdMul += 0.0925;
		if (weapon is "SuperVac") DashSpdMul -= (0.0925 + (SuperVacAmmo * (0.0925 / 24)));
		if (weapon is "Grimophone") DashSpdMul -= 0.185;
		DashSpeed *= DashSpdMul;
		if (berserked) DashSpeed *= 1.125;
		if (dydudebug_dashing) Console.Printf("DashSpeed: %.8f", DashSpeed);

		DashCost = 35;
		if (owner.CountInv("PowerRoastBuff")) DashCost -= 1;
		if (owner.CountInv("PowerMealBuff") || owner.CountInv("PowerMealBuff2")) DashCost -= 2;
		if (owner.CountInv("PowerMeal2Buff") || owner.CountInv("PowerMeal2Buff2")) DashCost -= 2;
		if (weapon is "HandToHand")
		{
			if (berserked) DashCost -= 4;
								else DashCost -= 3;
		}
		if (weapon is "CandleWhip")
		{
			if (berserked) DashCost -= 2;
								else DashCost -= 1;
		}
		if (weapon is "CricketBat" && owner.CountInv("IsInBatGuardFrame"))
		{
			if (PlayerLevel >= DashLvlTier4Thresh)
			{
				if (!berserked) DashCost *= 1.125;
									 else DashCost *= 1.03125;
			}
			else
			if (PlayerLevel >= DashLvlTier3Thresh)
			{
				if (!berserked) DashCost *= 1.1875;
									 else DashCost *= 1.046875;
			}
			else
			if (PlayerLevel >= DashLvlTier2Thresh)
			{
				if (!berserked) DashCost *= 1.1875;
									 else DashCost *= 1.0625;
			}
			else
			if (PlayerLevel >= DashLvlTier1Thresh)
			{
				if (!berserked) DashCost *= 1.25;
									 else DashCost *= 1.0625;
			}
			else
			{
				if (!berserked) DashCost *= 1.25;
									 else DashCost *= 1.125;
			}
		}
		if (weapon is "SuperVac")
		{
			if (!berserked) DashCost += (1 + (SuperVacAmmo * 0.041666667));
								 else DashCost += (0 + (SuperVacAmmo * 0.027777775));
		}
		if (weapon is "Grimophone")
		{
			if (berserked) DashCost += 1;
								else DashCost += 2;
		}
		if (dydudebug_dashing) Console.Printf("DashCost [start]: %d", DashCost);

		if (dydudebug_dashmeter) Console.Printf("DashMaxCharge: %d (%d, %d, %d), DashCost: %d", DashMaxCharge, BaseDashChargeMax, AddDashLevel, ExtraDashCharge, DashCost);
		
		airdashtype = 0;
		// 0 = No loss of altitude
		// 1 = Start with a short "hop" but fall to the ground afterwards.
		
		int pushingdirection = 0;
		If (BTInput & BT_FORWARD) pushingdirection += 1;
		If (BTInput & BT_BACK) pushingdirection += 2;
		If (BTInput & BT_MOVELEFT) pushingdirection += 4;
		If (BTInput & BT_MOVERIGHT) pushingdirection = 8;
		
		if (!Waiting && 
				(BTInput & BT_USER3) && 
				DashCharge >= DashCost && 
				pushingdirection &&
				!DashTics)
		{
			//Console.Printf("OnGround: %d", PlayDash.OnGround);
			DashDir = 0;
			If (BTInput & BT_FORWARD) DashDir = 0;
			If (BTInput & BT_BACK) DashDir = 180;
			If (BTInput & BT_MOVELEFT) DashDir = 90;
			If (BTInput & BT_MOVERIGHT) DashDir = -90;
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVELEFT)) DashDir = 45;
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVERIGHT)) DashDir = -45;
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVELEFT)) DashDir = (180 - 45);
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVERIGHT)) DashDir = (180 + 45);
			DashDir += Owner.Angle;

			DashCharge -= DashCost;
			if (DashCharge <= 0) 
			{
				Waiting = True;
				DashCharge = 0;
			}
			
			// Dash "Speed"
			
			if (PlayDash.OnGround)
			{
				DashTics = MaxDashTics;
				dashtype = 0;
				Owner.A_StartSound("player/dash",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			else
			{
				if (airdashtype != 1) DashSpeed *= 0.8;
				DashVSpeed = (5 * (PlayerLevel * 0.025));
				if (berserked) DashVSpeed *= 1.04;
				DashTics = MaxDashTics;
				dashtype = 1; // Airdash
				Owner.A_StartSound("player/airjump",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			
			if (random(1,100) <= dashgruntchance)
			{
				if (Owner.GetClassName() == "DinahPlayer") 
				{
					if (exex_dinahextravoices)
					{
						int dashgruntrand = random(1,6);
						if (dashgruntrand >= 1 && dashgruntrand <= 3) dashgruntsound = "dinah/jump";
						if (dashgruntrand == 4) dashgruntsound = "dinah/kiai1";
						if (dashgruntrand == 5) dashgruntsound = "dinah/kiai2";
						if (dashgruntrand == 6) dashgruntsound = "dinah/kiai3";
					}
					else
					{
						dashgruntsound = "dinah/jump";
					}
				}
				Owner.A_StopSound(CHAN_VOICE);
				Owner.A_StartSound(dashgruntsound,CHAN_VOICE,CHANF_DEFAULT,(dashgruntsndvol * frandom(1.25,1.375)));
			}

			bool CollisonSpawn = false;
			if (CollisonSpawn)
			{
				Actor CollDash = Spawn("DashCollisionChecker", Owner.Pos);
				CollDash.bSOLID = True;
				CollDash.Master = Self;
				CollDash.Target = Owner;
				CollDash.A_SetSize(Owner.Radius, Owner.Height);
				CollDash.bNOTIMEFREEZE = True;
			}
		}
		if (DashTics)
		{
			if (MiscItem.GrimophoneDebuffTimer) { }
			else { owner.bFORCERADIUSDMG = false; }

			//if (PlayDash.OnGround) { PlayDash.OnGround = False; Owner.AddZ(1); }
			if (PlayDash.OnGround && DashTics % 2) 
			{
				Owner.A_SpawnItemEx("DashPuff",0,0,randompick(4,6,8),0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); 
				//Owner.A_QuakeEx(1,1,1,random(2,3),0,1,"",QF_SCALEDOWN);
			}
			if (!PlayDash.OnGround && 
					(DashTics > (MaxDashTics - 2)) 
					&& airdashtype == 1) 
					{
						Owner.Vel.Z += DashVSpeed;
					}
					else
					{
						Owner.Vel.Z = 0.0;
					}
			/*
			if (level.time % 4 <= 1) owner.A_SetRenderStyle(frandompick(0.375,0.5,0.625),STYLE_Add); 
													else owner.A_SetRenderStyle(frandompick(0.625,0.75,0.875),STYLE_Add);
			*/

			Owner.A_SetBlend("78447E",frandom(0.08,0.12),random(2,3));
			Owner.A_SetInventory("PlayerDashing",1);
			Owner.bSHOOTABLE = false;
			Owner.bVISIBILITYPULSE = true;
			Owner.bTHRUACTORS = true;
			DashTics--;

			Owner.A_SetInventory("DashTimeFreezer",0);
			Owner.VelFromAngle(DashSpeed, DashDir);
			if (berserked)
			{
				if (PlayDash.OnGround && DashTics % 4 <= 2) 
				{
					if (!owner.player.timefreezer) Owner.A_SetInventory("DashTimeFreezer",1);
				}
				if (DashTics > (MaxDashTics * 0.75)) DashSpeed *= 1.025;

				if (DashTics % 2) 
				{
					if (MiscItem.GrimophoneDebuffTimer) { }
					else { owner.bFORCERADIUSDMG = true; }

					if (owner.CountInv("IsInBatGuardFrame"))
					{
						Owner.A_Explode(((random(8,12)+random(6,8))*random(1,3)),(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"","DashingBG");
					}
					else
					{
						Owner.A_Explode((random(8,12)*random(1,3)),(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"","Dashing");
					}
				}
				if (owner.CountInv("IsInBatGuardFrame") && DashTics % 2 == 1)
				{
					if (random(1,4) <= 3)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }
	
						Owner.A_Explode(((random(8,12)+random(6,8))*random(1,3)),(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"","DashingBG");
					}
				}
				/*
				if (DashTics % 4)
				{
					bool success;
					Actor firetrail;
					[success, firetrail] = Owner.A_SpawnItemEx("ArchvileFire",frandom(-1,1),frandom(-1,1));
					if (firetrail && success) 
					{
						firetrail.scale.x = frandom(0.4,0.6);
						firetrail.scale.y = frandom(0.4,0.6);
						firetrail.A_SetRenderStyle(frandom(0.4,0.6),6); // Sets to Transperant
					}
				}
				*/
			}
			else
			{
				if (PlayDash.OnGround && DashTics % 4 <= 1) 
				{
					if (!owner.player.timefreezer) Owner.A_SetInventory("DashTimeFreezer",1);
				}
				if (DashTics % 2) 
				{
					if (random(1,4) <= 3)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }

						if (owner.CountInv("IsInBatGuardFrame"))
						{
							Owner.A_Explode((random(6,8)*random(1,3)),(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"","DashingBG");
						}
					}
				}
				if (DashTics % 2 == 1) 
				{
					if (random(1,16) <= 9)
					{
						if (MiscItem.GrimophoneDebuffTimer) { }
						else { owner.bFORCERADIUSDMG = true; }

						if (owner.CountInv("IsInBatGuardFrame"))
						{
							Owner.A_Explode((random(6,8)*random(1,3)),(radius*3),XF_NOTMISSILE,false,(radius*1.5),0,0,"","DashingBG");
						}
					}
				}
			}
			
			if (DashTics <= (MaxDashTics * 0.25))
			{
				if (!slownthres1)
				{
					slownthres1 = true;
					DashSpeed *= 0.85;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.5)) 
			{
				if (!slownthres2)
				{
					slownthres2 = true;
					DashSpeed *= 0.9;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.75))
			{
				if (!slownthres3)
				{
					slownthres3 = true;
					DashSpeed *= 0.95;
				}
			}
			if (dydudebug_dashing) Console.Printf("DashTics: %d / %d, Thresh: [1] %d, [2] %d, [3] %d, DashSpeed: %.8f, DashSpdMul: %.8f", DashTics, MaxDashTics, slownthres1, slownthres2, slownthres3, DashSpeed, DashSpdMul);
		}
		else
		{
			Owner.A_SetInventory("DashTimeFreezer",0);
			Owner.A_SetInventory("PlayerDashing",0);
			Owner.bSHOOTABLE = true;
			Owner.bVISIBILITYPULSE = false;
			Owner.bTHRUACTORS = false;
			dashtype = -1;
			slownthres1 = false;
			slownthres2 = false;
			slownthres3 = false;

			if (MiscItem.GrimophoneDebuffTimer) { }
			else { owner.bFORCERADIUSDMG = false; }
		}
/*
		if (PlayDash.onGround)
		{
			DJump = True;
			//AirTics = 0;
		}
		else 
		if (!(Owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && 
				(Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && 
				DJump &&
				AirTics >= 5)
		{
			//Owner.Vel.Z = Max((Owner.Vel.Z + 8),8);
			//Owner.A_StartSound("DoubleJump",69,CHANF_OVERLAP);
			
			DJump = False;
		}
		else AirTics++;
*/
		
		if (DashCharge < DashMaxCharge)
		{
			if (!DashTics)
			{
				if (dydudebug_dashing) Console.Printf("(!DashTics)");
				if (berserked)
				{
					if (level.time % 4) 
					{
						DashCharge += 2; 
					}
					else
					{
						DashCharge += 1; 
					}
				}
				else
				{
					DashCharge += 1; 
				}
				if (DashCharge > DashMaxCharge) DashCharge = DashMaxCharge;
			}
			else
			if (level.time % 16)
			{
				/*
				if (dydudebug_dashing) Console.Printf("if (level.time % 16)");
				if (berserked)
				{
					if (level.time % 64) 
					{
						DashCharge += 2; 
					}
					else
					{
						DashCharge += 1; 
					}
				}
				else
				{
					if (level.time % 64) 
					{
						DashCharge += 1; 
					}
					else
					{
						if (level.time % 256) 
						{
							DashCharge += 1; 
						}
					}
				}
				if (DashCharge > DashMaxCharge) DashCharge = DashMaxCharge;
				*/
			}
			//if (DashCharge == DashMaxCharge && !PlayDash.OnGround) DashCharge = DashMaxCharge - 1; 

			if (DashCharge >= DashMaxCharge)
			{
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (dydudebug_dashing) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		else
		{
			if (DashCharge > DashMaxCharge)
			{
				DashCharge = DashMaxCharge;
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (dydudebug_dashing) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		if (dydudebug_dashing) Console.Printf("DashCost [end]: %d", DashCost);
		
		int dashcharges = (DashCharge / DashCost);
		int dashgauge;
		if (DashMaxCharge) dashgauge = DashCharge * 100 / DashMaxCharge;
		if (dashgauge > 100) dashgauge = 100;
		owner.A_SetInventory("DashGauge",dashgauge);
		owner.A_SetInventory("DashMaxCharge",DashMaxCharge);
		owner.A_SetInventory("DashCharges",dashcharges);
		owner.A_SetInventory("DashCharge",DashCharge);
		owner.A_SetInventory("DashTics",DashTics);
		owner.A_SetInventory("DashCost",DashCost);

		if (Waiting) owner.A_SetInventory("DashReady",0);
						else owner.A_SetInventory("DashReady",1);
		
		itemtimer++;
		if (globalvars)
		{
			globalvars.BaseDashChargeMax = BaseDashChargeMax;
		}
	}
}

Class DashCollisionChecker : Actor
{
	PlayerDashJump je;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let sas = PlayerDashJump(Master);
		je = sas;
	}

	Override bool CanCollideWith(Actor other, bool passive)
	{
		if (Other == target || Other.bMissile)
		Return False;
		if (Pos.Z > (Other.Pos.Z + Other.Height) || Other.Pos.Z > (Pos.Z + Height)) Return False;
		if (Other.bSolid && Other.bShootable && Other.CanCollideWith(Self,0))
		Tracer = Other;
		Return False;
	}

	Override Void Tick()
	{
		Super.Tick();
		if (!target || !je || je && !je.dashtics) { Destroy(); Return; }
		SetOrigin((Target.Pos + (Target.Vel * 0.1)),0);
		Vel = Target.Vel;
		if (Tracer)
		{
			bThruActors = True;
			/*
			Let Cg = Weapon_Chaingun(Target.player.ReadyWeapon);
			if (Cg && Cg.Tracer)
			{
				bForcePain = True;
				Target.Vel *= 0;
				Tracer.DamageMobj(Self, Target, 75, 'Normal', 0, Target.Angle);
				Tracer.ApplyKickback(Target, Target, 300, Target.Angle, 'Normal', 0);
				Tracer.A_TakeInventory("DashStun");
				Tracer.A_GiveInventory("DashStun");
				Target.A_StartSound("Weapons/DE/ChaingunShieldDash",9,CHANF_OVERLAP,0.5);
				Target.A_QuakeEx(1,1,1,8,0,1,"",QF_SCALEDOWN);
				Cg.DashImpact();
				Cg.DashImpact();
			}
			*/
			je.DashSpeed = 0;
			Destroy();
		}
	}
}