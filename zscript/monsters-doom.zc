class ZombiemanNew : EECreature
{
	default
	{
		Tag "Zombieman";
		Health 20;
		Radius 20;
		Height 56;
		Speed 8;
		Painchance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "$OB_ZOMBIE";
		//DropItem "Clip";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		int havecb = player.CountInv("CricketBat");
		bool check1 = true;
		
		if (check1)
		{
			//Console.Printf("Check1");
			if (havecb <= 0) 
			{
				A_DropItem("CricketBat",1,256);
			}
			else
			{
				if (random(1,32) <= 1) 
				{
					A_DropItem("CricketBat",1,256);
				}
				else
				{
					if (random(1,8) <= 1) A_DropItem("MalletAmmoBig",1,256,ADI_FULLAMMO);
													 else A_DropItem("MalletAmmo",1,256,ADI_FULLAMMO);
				}
			}
		}
	}
	
	void A_PosAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			ang += Random2[PosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			A_StartSound("grunt/attack", CHAN_WEAPON);
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (exex_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					EEBulletTracer TraceShotEE;
					TraceShotEE = EEBulletTracer(TraceShot);
					if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			POSS AB 10 A_Look();
			Loop;
		See:
			POSS AABBCCDD 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			POSS E 10 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2;
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}

				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		Missile1:
			POSS F 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_PosAttack();
			}
			POSS E 8
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				user_shotsfired += 1;
				A_FaceTarget();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1;
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}
	
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			POSS G 3;
			POSS G 3 A_EEPain();
			Goto See;
		Death:
			POSS H 5;
			POSS I 5 A_Scream();
			POSS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS K 5;
			POSS L -1;
			Stop;
		XDeath:
			POSS M 5;
			POSS N 5 A_XScream();
			POSS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS PQRST 5;
			POSS U -1;
			Stop;
		Raise:
			POSS K 5;
			POSS JIH 5;
			Goto See;
	}
}

class ShotgunGuyNew : EECreature
{
	default
	{
		Tag "Shotgun Guy";
		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "shotguy/sight";
		AttackSound "shotguy/attack";
		PainSound "shotguy/pain";
		DeathSound "shotguy/death";
		ActiveSound "shotguy/active";
		Obituary "$OB_SHOTGUY";
	}

	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (exex_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						EEBulletTracer TraceShotEE;
						TraceShotEE = EEBulletTracer(TraceShot);
						if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		int havescr = player.CountInv("Scrambler");
		int havebla = player.CountInv("Blunderaxe");
		bool check1;
		if (player.CountInv("PlayingDoom1") > 0)
		{
			//Console.Printf("PD1");
			if (havescr <= 0) 
			{
				//Console.Printf("havescr0");
				if (random(1,32) <= 1) A_DropItem("Scrambler",1,256);
				else check1 = true;
			}
			else check1 = true;
		}
		else check1 = true;
		
		if (check1)
		{
			//Console.Printf("Check1");
			if (havebla <= 0) 
			{
				A_DropItem("Blunderaxe",1,256);
			}
			else
			{
				if (random(1,8) <= 1) 
				{
					A_DropItem("Blunderaxe",1,256);
				}
				else
				{
					if (random(1,8) <= 1) A_DropItem("BlunderAmmoBig",1,256,ADI_FULLAMMO);
													 else A_DropItem("BlunderAmmo",1,256,ADI_FULLAMMO);
				}
			}
		}
	}
	
	States
	{
		Spawn:
			SPOS AB 10 A_Look();
			Loop;
		See:
			SPOS AABBCCDD 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			SPOS E 10 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			SPOS F 10 BRIGHT 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_SposAttackUseAtkSound();
			}
			SPOS E 10
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			SPOS G 3;
			SPOS G 3 A_EEPain();
			Goto See;
		Death:
			SPOS H 5;
			SPOS I 5 A_Scream();
			SPOS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS K 5;
			SPOS L -1;
			Stop;
		XDeath:
			SPOS M 5;
			SPOS N 5 A_XScream();
			SPOS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS PQRST 5;
			SPOS U -1;
			Stop;
		Raise:
			SPOS L 5;
			SPOS KJIH 5;
			Goto See;
	}
}

class ChaingunGuyNew : EECreature
{
	default
	{
		Tag "Chaingun Guy";
		Health 70;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "chainguy/attack";
		Obituary "$OB_CHAINGUY";
		//Dropitem "Chaingun";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		int haveaj = player.CountInv("AppleJack");
		bool check1 = true;
		
		if (check1)
		{
			//Console.Printf("Check1");
			if (haveaj <= 0) 
			{
				A_DropItem("AppleJack",1,256);
			}
			else
			{
				if (random(1,8) <= 1) 
				{
					A_DropItem("AppleJack",1,256);
				}
				else
				{
					if (random(1,8) <= 1) A_DropItem("JackAmmoBig",1,256,ADI_FULLAMMO);
													 else A_DropItem("JackAmmo",1,256,ADI_FULLAMMO);
				}
			}
		}
	}

	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_FaceTarget();
			A_StartSound(AttackSound, CHAN_WEAPON);
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (exex_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					EEBulletTracer TraceShotEE;
					TraceShotEE = EEBulletTracer(TraceShot);
					if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
				}
			}
		}
	}
	
	void A_CPosRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	States
	{
		Spawn:
			CPOS AB 10 A_Look();
			Loop;
		See:
			CPOS A 0
			{
				user_shotsfired = 0;
			}
			CPOS AABBCCDD 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += random((25 + (CountInv("MonsterLevel") / 8)),(50 + (CountInv("MonsterLevel") / 4))); }
					else { user_shotsfiredmax = random(25,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			#### # 0 A_DynamicMusic();
			CPOS E 10 
			{
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			CPOS FE 4 BRIGHT 
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_CPosAttack();
				A_DynamicMusic();
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 1 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(0); }
			}
			CPOS F 0 A_MonsterRefire(40,"See"); // A_CPosRefire();
			loop;
			
		MissileEnd:
			TNT1 A 0 
			{
				user_shotsfired = 0;
			}
			CPOS F 0 A_FaceTarget();
			Goto See;

		Pain:
			CPOS G 3;
			CPOS G 3 A_EEPain();
			Goto See;
		Death:
			CPOS H 5;
			CPOS I 5 A_Scream();
			CPOS J 5
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS KLM 5;
			CPOS N -1;
			Stop;
		XDeath:
			CPOS O 5;
			CPOS P 5 A_XScream();
			CPOS Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS RS 5;
			CPOS T -1;
			Stop;
		Raise:
			CPOS N 5;
			CPOS MLKJIH 5;
			Goto See;
	}
}

class WolfensteinSSNew : EECreature replaces WolfensteinSS
{
	default
	{
		Tag "Schutzstaffel";
		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "wolfss/sight";
		PainSound "nazi/pain";
		DeathSound "wolfss/death";
		ActiveSound "wolfss/active";
		AttackSound "wolfss/attack";
		Obituary "$OB_WOLFSS";
		//Dropitem "Clip";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		int havecb = player.CountInv("CricketBat");
		bool check1 = true;
		
		if (check1)
		{
			//Console.Printf("Check1");
			if (havecb <= 0) 
			{
				A_DropItem("CricketBat",1,256);
			}
			else
			{
				if (random(1,32) <= 1) 
				{
					A_DropItem("CricketBat",1,256);
				}
				else
				{
					if (random(1,8) <= 1) A_DropItem("MalletAmmoBig",1,256,ADI_FULLAMMO);
													 else A_DropItem("MalletAmmo",1,256,ADI_FULLAMMO);
				}
			}
		}
	}
	
	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (22.5/256);

			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (exex_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					EEBulletTracer TraceShotEE;
					TraceShotEE = EEBulletTracer(TraceShot);
					if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			SSWV AB 10 A_Look;
			Loop;
		See:
			SSWV AABBCCDD 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			SSWV E 10 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			SSWV F 10 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
		MissileLoop:
			SSWV G 4 BRIGHT 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				
				A_FaceTarget();
			}
			SSWV G 4 BRIGHT
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 1 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(0); }
				A_CPosRefire();
			}
			Goto Missile+2;
		Pain:
			SSWV H 3;
			SSWV H 3 A_EEPain();
			Goto See;
		Death:
			SSWV I 5;
			SSWV J 5 A_Scream();
			SSWV K 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV L 5;
			SSWV M -1;
			Stop;
		XDeath:
			SSWV N 5 ;
			SSWV O 5 A_XScream();
			SSWV P 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV QRSTU 5;
			SSWV V -1;
			Stop;
		Raise:
			SSWV M 5;
			SSWV LKJI 5;
			Goto See;
	}
}

class DoomImpNew : EECreature
{
	default
	{
		Tag "Imp";
		Health 60;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 200;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 80;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.6;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		HitObituary "$OB_IMPHIT";
		Obituary "$OB_IMP";
		Species "Imp";
		+DONTHARMSPECIES;
	}
	
	void A_TroopAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
				A_StartSound ("imp/melee", CHAN_WEAPON);
				int newdam = targ.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("DoomImpBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			TROO AB 10 A_Look();
			Loop;
		See:
			TROO AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			TROO EF 8 A_FaceTarget();
			TROO G 6 
			{
				A_TroopAttack();
			}
			Goto See;
		Pain:
			TROO H 2;
			TROO H 2 A_EEPain();
			Goto See;
		Death:
			TROO I 8;
			TROO J 8 A_Scream();
			TROO K 6;
			TROO L 6 A_NoBlocking();
			TROO M -1;
			Stop;
		XDeath:
			TROO N 5;
			TROO O 5 A_XScream();
			TROO P 5;
			TROO Q 5 A_NoBlocking();
			TROO RST 5;
			TROO U -1;
			Stop;
		Raise:
			TROO ML 8;
			TROO KJI 6;
			Goto See;
	}
}

class DemonNew : EECreature
{
	default
	{
		Tag "Pinky Demon";
		Health 150;
		Speed 10;
		Radius 30;
		Height 56;
		Mass 400;
		PainChance 180;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 135;
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 135;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 157;
		DamageFactor "Chop", 0.625;
		Painchance "Chop", 113;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 202;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 240;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 240;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "demon/sight";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "$OB_DEMONHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(4,random(1,10),0.005,0.3334,0.1667,0.005);

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	States
	{
		Spawn:
			SARG AB 10 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) 
				{ 
					if (random(1,1) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{ 
					if (random(1,2) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{ 
					if (random(1,3) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{ 
					if (random(1,4) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else { A_EEChase("Melee",null,0,1,3,1,1); }
			}
			Loop;
		
		Missile:
			SARG AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(2); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(3); }
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("DemonFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_DynamicMusic();
			SARG EEFF 4 Fast 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 4 Fast 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 4 Fast 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_EEPain();
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 5;
			SARG MLKJI 5;
			Goto See;
	}
}

class SpectreNew : DemonNew
{
	default
	{
		Tag "Pinky Spectre";
		RenderStyle "OptFuzzy";
		+SHADOW
		Alpha 0.5;
		SeeSound "spectre/sight";
		AttackSound "spectre/melee";
		PainSound "spectre/pain";
		DeathSound "spectre/death";
		ActiveSound "spectre/active";
		Obituary "$OB_SPECTREHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
}

class NightmareSpectre : DemonNew
{
	default
	{
		Tag "Pinky Spectre (Nightmare)";
		Health 300;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was devoured by a nightmare spectre.";
		Meleedamage 5;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(random(4,5),random(1,10),0.005,0.3334,0.1667,frandom(0.005,0.0625));

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}

	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SARG AABB 5 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast 
			{
				A_SetTics(randompick(1,2,2,2,2,3));
				//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) 
				{ 
					if (random(1,1) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{ 
					if (random(1,2) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{ 
					if (random(1,3) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{ 
					if (random(1,4) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				} 
				else { A_EEChase("Melee",null,0,1,3,1,1); }
			}
			Loop;

		Missile:
			SARG AEF 3
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(2); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(3); }
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("NightmareSpectreFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_DynamicMusic();
			SARG EEFF 3 Fast 
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 3 Fast 
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 3 Fast 
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_EEPain();
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 4;
			SARG MLKJI 4;
			Goto See;
		}
}

class LostSoulNew : EECreature
{
	default
	{
		Tag "Lost Soul";
		Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PainChance 256;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 85;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 256;
		DamageFactor "Cricket", 2.5;
		Painchance "Cricket", 256;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 128;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 64;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 128;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 256;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT
		+NOGRAVITY
		+MISSILEMORE
		+DONTFALL
		+NOICEDEATH
		+ZDOOMTRANS 
		+RETARGETAFTERSLAM
		AttackSound "skull/melee";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		Obituary "$OB_SKULL";
	}
	
	override void Tick()
	{
		if (!bDORMANT)
		{
			int damage = A_CalcDamageFormula(3,random(1,8),0.05,0.3334,0.1667,0.005);
			finaldamagedealt = damage;
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			SKUL AB 10 BRIGHT A_Look();
			Loop;
		See:
			SKUL AB 6 BRIGHT
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
			
		Missile:
			TNT1 A 0 
			{
				A_DynamicMusic();
				user_painfastchase = 0; 
			}
			SKUL C 10 BRIGHT A_FaceTarget();
			SKUL D 4 BRIGHT 
			{
				A_SkullAttack();
				A_DynamicMusic();
			}
			SKUL CD 4 BRIGHT;
			Goto Missile+3;
		Pain:
			SKUL E 3 BRIGHT;
			SKUL E 3 BRIGHT
			{
				A_EEPain();
				user_painfastchase = 2 * random(1,8);
			}
			Goto See;
		Death:
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class BetaLostSoul : LostSoulNew
{
	default
	{
		Tag "Strange Lost Soul";
	}
	
	States
	{
		Spawn:
			BSKL A 10 A_Look();
			Loop;
		See:
			BSKL BCDA 5
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			BSKL E 4 A_FaceTarget();
			BSKL F 5 A_BetaSkullAttack(randompick(1,1,1,2),1,randompick(4,4,4,8));
			BSKL F 4;
			Goto See;
		Pain:
			BSKL G 4;
			BSKL H 2 A_EEPain();
			Goto See;
			BSKL I 4;
			Goto See;
		Death:
			BSKL JKLM 5;
			BSKL N 5 A_Scream();
			BSKL O 5;
			BSKL P 5 A_Fall();
			BSKL Q 5 A_Stop();
			TNT1 A 0 CCCardDeathCheck();
			stop;
	}
}

class CacodemonNew : EECreature
{
	default
	{
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		Tag "Cacodemon";
		MeleeRange 80;
		PainChance 128;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 32;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Spinner", 3.75;
		Painchance "Spinner", 256;
		DamageFactor "Dust", 5;
		Painchance "Dust", 256;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 32;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		BloodColor "00 00 CD";
		Monster;
		+FLOAT;
		+NOGRAVITY;
		SeeSound "caco/sight";
		PainSound "cacodemon/pain";
		DeathSound "caco/death";
		ActiveSound "caco/active";
		Obituary "$OB_CACO";
		HitObituary "$OB_CACOHIT";
		Species "Cacodemon";
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			HEAD A 10 A_FloatLook(16);
			Loop;
		See:
			HEAD A 3 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				user_painfastchase = 0; 
			}
			HEAD B 5 A_FaceTarget();
			HEAD C 5 A_FaceTarget();
			HEAD D 5 BRIGHT 
			{
				A_FaceTarget();
				
				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				
				int mldmg = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("CacodemonBallNew", user_tempvar1, (mldmg), "caco/melee");
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= random(37,38))
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*1));
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*2));
					}
					if (CountInv("MonsterLevel") >= random(112,113))
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			Goto See;
		Pain:
			HEAD E 0;
			HEAD E 0 A_ActorShadowSplit(60,256);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;

		Death:
			HEAD G 8;
			HEAD H 8 A_Scream();
			HEAD I 8;
			HEAD J 8;
			HEAD K 8 A_NoBlocking();
			HEAD L -1 A_SetFloorClip();
			Stop;
		Raise:
			HEAD L 8 A_UnSetFloorClip();
			HEAD KJIHG 8;
			Goto See;
	}
}

class PainElementalNew : EECreature
{
	default
	{
		Tag "Pain Elemental";
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		MeleeRange 80;
		PainChance 16;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 28;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 80;
		DamageFactor "Suck", 7.5;
		Painchance "Suck", 120;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Dust", 5;
		Painchance "Dust", 80;
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT 
		+NOGRAVITY
		SeeSound "pain/sight";
		PainSound "pain/pain";
		DeathSound "pain/death";
		ActiveSound "pain/active";
		HitObituary "%o got too close to a Pain Elemental.";
		//-RETARGEAFTERNSLAM
	}
	
	States
	{
		Spawn:
			PAIN A 10 A_FloatLook(16);
			Loop;
		See:
			PAIN AABBC 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			PAIN C 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { if (random(1,1000) <= 550) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { if (random(1,1000) <= 400) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				else { return resolvestate(null); }
				return resolvestate(null);
			}
			Loop;
		IdleMissile:
			#### # 0 A_DynamicMusic();
			PAIN DE 5
			{
				A_FaceTarget();
			}
			PAIN F 5 bright
			{
				A_FaceTarget();

				string classname = "LostSoulNew";
				int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (exex_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,16) <= 1) classname = "BetaLostSoul"; else classname = "LostSoulAnnoying";
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainAttack(classname,0,flags,10);
			}
			goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				user_painfastchase = 0;
			}
			PAIN D 5 A_FaceTarget();
			PAIN E 5 A_FaceTarget();
			PAIN F 5 BRIGHT A_FaceTarget();
			PAIN F 0 BRIGHT 
			{
				if (CheckMeleeRange()) 
				{ 
					int mldmg = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
					A_CustomMeleeAttack(mldmg,"caco/melee","none","Melee",true);
				}
				else
				{
					string classname = "LostSoulNew";
					int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
					if (exex_monsterevolutions)
					{
						if (random(1,6) <= 1)
						{
							if (random(1,16) <= 1) classname = "BetaLostSoul"; else classname = "LostSoulAnnoying";
						}
					}
					if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
					A_PainAttack(classname,0,flags,10);
				}
			}
			Goto See;
		Pain:
			PAIN G 0;
			PAIN G 0 A_ActorShadowSplit(60,64);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			PNSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			TNT1 A 0
			{
				if (random(1,4) <= 3) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		Death:
			PAIN H 8 BRIGHT;
			PAIN I 8 BRIGHT A_Scream();
			PAIN JK 8 BRIGHT;
			PAIN L 8 BRIGHT 
			{
				if (target && IsFriend(target))
				{ // And I thought you were my friend!
					bFriendly = false;
				}
				A_NoBlocking();

				string classname = "LostSoulNew";
				int flags = PAF_NOSKULLATTACK|PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (exex_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,16) <= 1) classname = "BetaLostSoul"; else classname = "LostSoulAnnoying";
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 90, flags, 10);
				classname = "LostSoulNew";
				flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (exex_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,16) <= 1) classname = "BetaLostSoul"; else classname = "LostSoulAnnoying";
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 180, flags, 10);
				classname = "LostSoulNew";
				flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (exex_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,16) <= 1) classname = "BetaLostSoul"; else classname = "LostSoulAnnoying";
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 270, flags, 10);
			}
			PAIN M 8 BRIGHT;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Raise:
			PAIN MLKJIH 8;
			Goto See;
	}
}

class RevenantNew : EECreature
{
	default
	{
		Tag "Revenant";
		Health 300;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 10;
		PainChance 100;
		DamageFactor "Fire", 1.25;
		Painchance "Fire", 125;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 175;
		DamageFactor "CherryBomb", 1.125;
		Painchance "CherryBomb", 112;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 75;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 75;
		DamageFactor "Breakfast", 0.5;
		Painchance "Breakfast", 50;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 150;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MeleeThreshold 196;
		+MISSILEMORE 
		+FLOORCLIP
		SeeSound "skeleton/sight";
		PainSound "revenant/pain";
		DeathSound "skeleton/death";
		ActiveSound "skeleton/active";
		MeleeSound "skeleton/melee";
		HitObituary "%o tried to play a game of punch-out with a Revenant.";
		Obituary "$OB_UNDEAD";
	}
	
	void A_SkelMissile(class<actor> type = "RevenantTracerNew")
	{
		if (target == null) return;
		A_FaceTarget();
		if (A_CheckCCInvertGrav()) AddZ(-16); else AddZ(16);
		Actor missile = SpawnMissile(target, type);
		if (A_CheckCCInvertGrav()) AddZ(16); else AddZ(-16);
		if (missile != null)
		{
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}
	
	void A_SkelFist()
	{
		let targ = target;
		if (targ == null) return;
		A_FaceTarget();
		
		if (CheckMeleeRange ())
		{
			int damage = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
			
			A_StartSound("skeleton/melee", CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, damage, 'Melee');
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	States
	{
		Spawn:
			SKEL AB 10 A_Look();
			Loop;
		See:
			SKEL AABBCCDDEEFF 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			SKEL G 0 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			SKEL G 6 A_SkelWhoosh();
			SKEL H 6 A_FaceTarget();
			SKEL I 6 A_SkelFist();
			Goto See;
		Missile:
			SKEL J 0 BRIGHT 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			SKEL J 10 BRIGHT A_FaceTarget();
			SKEL K 10 A_SkelMissile("RevenantTracerNew");
			SKEL K 10 A_FaceTarget();
			Goto See;
		Pain:
			SKEL L 5;
			SKEL L 5 A_EEPain();
			Goto See;
		Death:
			SKEL LM 7;
			SKEL N 7 A_Scream();
			SKEL O 7 A_NoBlocking();
			SKEL P 7;
			SKEL Q -1;
			Stop;
		Raise:
			SKEL Q 5;
			SKEL PONML 5;
			Goto See;
	}
}

class ArachnotronNew : EECreature
{
	default
	{
		Tag "Arachnotron";
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 128;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 112;
		DamageFactor "Bonk", 0.625;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 64;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 192;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+MAP07BOSS2;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
		Species "Arachnotron";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_BspiAttack()
	{
		if (target)
		{
			A_FaceTarget();
			A_SpawnProjectile("ArachnotronPlasma",32,ptr:AAPTR_TARGET); // SpawnMissile(target, "ArachnotronPlasma");
		}
	}

	States
	{
		Spawn:
			BSPI AB 10 A_Look();
			Loop;
		See:
			BSPI A 0 { user_walksound = 0; }
			BSPI A 20 { user_walksound = 0; }
			BSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("baby/walk",CHAN_BODY); 
				}
				if (user_walksound >= 6) { user_walksound = 0; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			goto See+2;
		Missile:
			#### # 0 A_DynamicMusic();
			BSPI A 20 BRIGHT A_FaceTarget();
			BSPI G 4 BRIGHT 
			{
				A_BspiAttack();
				A_DynamicMusic();
			}
			BSPI H 4 BRIGHT;
			BSPI H 1 BRIGHT A_SpidRefire();
			Goto Missile+2;
		Pain:
			BSPI I 3;
			BSPI I 3 A_EEPain();
			Goto See+2;
		Death:
			BSPI J 20 A_Scream();
			BSPI K 7 A_NoBlocking();
			BSPI LMNO 7;
			BSPI P -1 A_BossDeath();
			Stop;
		Raise:
			BSPI P 5;
			BSPI ONMLKJ 5;
			Goto See+2;
	}
}

class MancubusNew : EECreature
{
	int spreadtype;
	default
	{
		Tag "Mancubus";
		Health 600;
		Radius 48;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 80;
		DamageFactor "Fire", 0.667;
		Painchance "Fire", 53;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 200;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 40;
		DamageFactor "Bonk", 3.75;
		Painchance "Bonk", 256;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 40;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 100;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 120;
		DamageFactor "CherryBomb", 2;
		Painchance "CherryBomb", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 140;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 100;
		Painchance "Fist", 120; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 200; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		+BOSSDEATH
		+MAP07BOSS1
		SeeSound "fatso/sight";
		PainSound "fatso/pain";
		DeathSound "fatso/death";
		ActiveSound "fatso/active";
		Obituary "$OB_FATSO";
	}
	
	States
	{
		Spawn:
			FATT AB 15 A_Look();
			Loop;
		See:
			FATT AABBCCDDEEFF 4 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			FATT G 0
			{
				A_DynamicMusic();
				spreadtype = 0;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 100) spreadtype = random(0,1);
					else if (CountInv("MonsterLevel") >= 80 && random(1,2) <= 1) spreadtype = random(0,1);
					else if (CountInv("MonsterLevel") >= 60 && random(1,4) <= 1) spreadtype = random(0,1);
					else if (CountInv("MonsterLevel") >= 40 && random(1,8) <= 1) spreadtype = random(0,1);
					else if (CountInv("MonsterLevel") >= 20 && random(1,12) <= 1) spreadtype = random(0,1);
					else if (random(1,16) <= 1) spreadtype = random(0,1);
				}
				else
				{
					if (random(1,16) <= 1) spreadtype = random(0,1);
				}
			}
			FATT G 20 A_FatRaise();
			FATT H 10 BRIGHT 
			{
				if (spreadtype == 1) A_FatAttack2("FatShotNew");
				else A_FatAttack1("FatShotNew");
			}
			FATT IG 5 A_FaceTarget();
			FATT H 10 BRIGHT 
			{
				if (spreadtype == 1) A_FatAttack1("FatShotNew");
				else A_FatAttack2("FatShotNew");
			}
			FATT IG 5 A_FaceTarget();
			FATT H 10 BRIGHT
			{
				if (spreadtype == 1) A_FatAttack3("FatShotNew");
				else A_FatAttack3("FatShotNew");
			}
			FATT IG 5 A_FaceTarget();
			Goto See;
		Pain:
			FATT J 3;
			FATT J 3 A_EEPain();
			Goto See;
		Death:
			FATT K 6;
			FATT L 6 A_Scream();
			FATT M 6 A_NoBlocking();
			FATT NOPQRS 6;
			FATT T -1 A_BossDeath();
			Stop;
		Raise:
			FATT R 5;
			FATT QPONMLK 5;
			Goto See;
	}
}

class HellKnightNew : EECreature
{
	default
	{
		Tag "Hell Knight";
		Health 500;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 100;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 50;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 200;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 256;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 250;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 250;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 75;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		-BOSSDEATH
		+E1M8BOSS
		BloodColor "00 64 00";
		SeeSound "knight/sight";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "knight/death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";
		Species "HellNoble";
		+DONTHARMSPECIES
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);

				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("KnightBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (target, "KnightBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOS2 AB 10 A_Look();
			Loop;
		See:
			BOS2 AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			BOS2 EF 8 A_FaceTarget();
			BOS2 G 8 A_BruisAttack();
			Goto See;
		Pain:
			BOS2 H 2;
			BOS2 H 2 A_EEPain();
			Goto See;
		Death:
			BOS2 I 8;
			BOS2 J 8 A_Scream();
			BOS2 K 8;
			BOS2 L 8 A_NoBlocking();
			BOS2 MN 8;
			BOS2 O -1;
			Stop;
		Raise:
			BOS2 O 8;
			BOS2 NMLKJI 8;
			Goto See;
	}
}

class BaronOfHellNew : EECreature
{
	default
	{
		Tag "Baron of Hell";
		Health 1000;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 187;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 37;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		BloodColor "00 64 00";
		Monster;
		Species "HellNoble";
		+DONTHARMSPECIES
		+FLOORCLIP
		+BOSSDEATH
		+E1M8BOSS
		SeeSound "baron/sight";
		PainSound "baron/pain";
		DeathSound "baron/death";
		ActiveSound "baron/active";
		Obituary "$OB_BARON";
		HitObituary "$OB_BARONHIT";
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(10,random(1,8),0.01,0.5,0.25,frandom(0.005,0.0075));
				
				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("BaronBallNew",32,ptr:AAPTR_TARGET); //SpawnMissile (target, "BaronBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOSS AB 10 A_Look();
			Loop;
		See:
			BOSS AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			BOSS EF 8 A_FaceTarget();
			BOSS G 8 A_BruisAttack();
			Goto See;
		Pain:
			BOSS H 2;
			BOSS H 2 A_EEPain();
			Goto See;
		Death:
			BOSS I 8;
			BOSS J 8 A_Scream();
			BOSS K 8;
			BOSS L 8 A_NoBlocking();
			BOSS MN 8;
			BOSS O -1 A_BossDeath();
			Stop;
		Raise:
			BOSS O 8;
			BOSS NMLKJI 8;
			Goto See;
	}
}

class ArchvileNew : EECreature
{
	default
	{
		Tag "Archvile";
		Health 700;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 15;
		PainChance 10;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 5.0;
		Painchance "Ice", 100;
		DamageFactor "Suck", 3.75;
		Painchance "Suck", 38;
		DamageFactor "Bonk", 2.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 5;
		Painchance "Cricket", 5;
		DamageFactor "Chop", 5.0;
		Painchance "Chop", 50;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 15;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 15;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 2;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 15;
		DamageFactor "Popper", 1.5;
		Painchance "Popper", 15;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MaxTargetRange 896;
		+QUICKTORETALIATE 
		+FLOORCLIP 
		+NOTARGET
		SeeSound "vile/sight";
		PainSound "vile/pain";
		DeathSound "vile/death";
		ActiveSound "vile/active";
		MeleeSound "vile/stop";
		Obituary "$OB_VILE";
	}
	
	void A_SetVileRange()
	{
		if (exex_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * 17.92));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}
	
	States
	{
		Spawn:
			VILE AB 10 
			{
				A_SetVileRange();
				A_Look();
			}
			Loop;
		See:
			VILE AABBCCDDEEFF 2 
			{
				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 8)
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				A_EEChase("Melee","Missile",flag2,1,3,1,1);
				A_SetVileRange();
			}
			Loop;
		Missile:
			VILE G 0 BRIGHT
			{
				A_SetVileRange();
				A_VileStart();
				A_DynamicMusic();
			}
			VILE G 10 BRIGHT A_FaceTarget();
			VILE H 8 BRIGHT A_VileTarget();
			VILE IJKLMN 8 BRIGHT A_FaceTarget();
			VILE O 8 BRIGHT 
			{
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(20,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(70,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			VILE P 20 BRIGHT;
			Goto See;
		Heal:
			#### # 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetVileRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			VILE [\] 10 BRIGHT;
			Goto See;
		Pain:
			VILE Q 5;
			VILE Q 5 
			{
				A_EEPain();
				A_SetVileRange();
			}
			Goto See;
		Death:
			VILE Q 7;
			VILE R 7 A_Scream();
			VILE S 7 A_NoBlocking();
			VILE TUVWXY 7;
			VILE Z -1;
			Stop;
	}
}

class CyberdemonNew : EECreature
{
	default
	{
		Tag "Cyberdemon";
		Health 4000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		//MeleeRange 120;
		PainChance 20;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 75;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 13;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 25;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 5;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MinMissileChance 160;
		+BOSS 
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E2M8BOSS
		+E4M6BOSS
		SeeSound "cyber/sight";
		PainSound "cyberdemon/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "$OB_CYBORG";
		Species "Cyberdemon";
	}
	
	state A_CybCheckStompDist(int basedist = 24, int minc = 1, int maxc = 5, bool domissile = false)
	{
		if (A_CheckCCInvertGrav() == false)
		{
			float basechance;
			if (A_JumpIfCloser((basedist*random(1,5)), "Stomp"))
			{
				basechance = 0 + (CountInv("MonsterLevel") * 3.3334);
				if (frandom(0.1,100.0) <= basechance) return resolvestate("Stomp");
				else 
				{
					if (domissile)
					{
						basechance = 0 + (CountInv("MonsterLevel") * 6.6667);
						if (frandom(0.1,100.0) <= basechance) return resolvestate("Missile");
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			return resolvestate(null);
		}
		return resolvestate(null);
	}
	
	States
	{
		Spawn:
			CYBR AB 10 A_Look();
			Loop;
		See:
			CYBR A 0 { user_walksound = 0; }
			CYBR AABBCCDD 3 
			{
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("cyber/hoof",CHAN_BODY); 
				}
				if (user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}

				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			Loop;

		Stomp:
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR Z 5 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA A 7 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA B 7
			{
				A_FaceTarget();
				A_SpawnProjectile("CyberStomp",10,0,0,0);
				A_Quake(2,21,0,512,"nosound/silent");
				A_DynamicMusic();
			}
			CYMA B 7
			{
				A_DynamicMusic();
			}
			CYMA B 0 A_Jump(64,2);
			CYMA B 0 A_CybCheckStompDist(24,3,5,true);
			CYMA B 0;
			Goto See;
		
		Missile:
			#### # 0 A_DynamicMusic();
			CYBR E 6 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			CYBR E 12 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			CYBR E 12 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			Goto See;
		Pain:
			CYBR G 10 A_EEPain();
			Goto See;
		Death:
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P -1 A_BossDeath();
			Stop;
	}
}

// Cyberdemon Stomps
class CyberStomp : EEProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "Add";
		Alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+DONTREFLECT;
		Health 5;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp",CHAN_7);
			}
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(85,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,128,0,0,32);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
	}
}

class ExplosionSmoke : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+THRUACTORS;
		Health 99999;
		BounceFactor 0.5;
		Radius 0;
		Height 0;
		Alpha 0.1;
		RenderStyle "Translucent";
		Scale 1.1;
		Speed 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(waterlevel > 1, "Stap");
			SMK3 BBB 2 A_FadeIn(0.1);
			SMK3 B 20;
			TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
			SMK3 CDEFGHIJKLM 3;
			Goto Death;
		Death:
			TNT1 A 0;
			Stop;
		Stap:		
			TNT1 A 0;
			Stop;
	}
}

class BigSmokes : ExplosionSmoke
{
	default
	{
		Speed 1;
		Alpha 0.1;
		Scale 1.5;
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			Goto Death;
		Death:
			SMK3 B 100;
			SMK3 CDEFGHIJKLM 1;
			Stop;
	}
}

class FootStep : EEProjectile
{
	default
	{
		Radius 10;
		Height 10;
		Speed 7;
		Projectile;
		-NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+NOEXTREMEDEATH;
		DamageType "Trample";
		Damage 0;
		+NODAMAGETHRUST;
		+BLOODLESSIMPACT; 
		+THRUACTORS;
		+DONTREFLECT;
		Gravity 40;
		Mass 1000;
		Obituary "%o was trampled by %k.";
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
		Death:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
	}
}

class Footstep5 : FootStep
{
	default
	{
		Damage 0;
		-CLIENTSIDEONLY;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
}

class Footstep6 : FootStep
{
	default
	{
		DamageFunction (random(2,3));
		-CLIENTSIDEONLY;
		-DONTSPLASH;
		-EXPLODEONWATER;
		Mass 500;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 3;
			Goto Death;
		Death:
			TNT1 A 1;
			//NULL A 0 A_StartSound("floor/tile2")
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			stop;
	}
}

class WallChunk : EEBaseZSC
{
	int user_random1;
	default
	{
		Scale 0.16;
		+NOTELEPORT;
		+MISSILE;
		+BOUNCEONACTORS;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		Speed 6;
		Gravity 0.7;
		Bouncefactor 0.2;
		BounceType "Doom";
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		See:
			TNT1 A 0
			{
				user_random1 = random(1,4);
				if (user_random1 == 1) { return resolvestate("See1"); }
				if (user_random1 == 2) { return resolvestate("See2"); }
				if (user_random1 == 3) { return resolvestate("See3"); }
				if (user_random1 == 4) { return resolvestate("See4"); }
				return resolvestate(null);
			}
		See1:
			DUST A 1;
			loop;
		See2:
			DUST B 1;
			loop;
		See3:
			DUST C 1;
			loop;
		See4:
			DUST D 1;
			loop;
		Death:
			TNT1 A 0 
			{
				bMISSILE = false;
				bBOUNCEONACTORS = false;
			}
			TNT1 A 0
			{
				if (user_random1 == 1) { return resolvestate("Death1"); }
				if (user_random1 == 2) { return resolvestate("Death2"); }
				if (user_random1 == 3) { return resolvestate("Death3"); }
				if (user_random1 == 4) { return resolvestate("Death4"); }
				return resolvestate(null);
			}
		Death1:
			DUST A 100;
			Stop;
		Death2:
			DUST B 100;
			Stop;
		Death3:
			DUST C 100;
			Stop;
		Death4:
			DUST D 100;
			Stop;
	}
}

class TinyWallChunk : WallChunk
{
	default
	{
		Scale 0.12;
	}
}

class BigWallChunk : WallChunk
{
	default
	{
		Scale 0.3;
	}
}

class HugeWallChunk : WallChunk
{
	default
	{
		Scale 0.4;
	}
}

class DirtChunk1 : WallChunk
{
	default
	{
		Scale 0.6;
		Speed 16;
		BounceFactor 0.5;
		Translation "128:151=74:79", "96:111=71:79";
	}
}

class DirtChunk2 : WallChunk
{
	default
	{
		Scale 0.4;
		Speed 12;
		BounceFactor 0.3;
		Translation "128:151=74:79", "96:111=71:79";
	}
}

//
class Annihilator : CyberdemonNew 
{
	default
	{
		Tag "Cyber-Annhilator";
		Health 8000;
		Radius 40;
		Height 110;
		Mass 1500;
		Speed 16;
		MeleeRange 120;
		Painchance 10;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 100;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 38;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 7;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 13;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 25;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 2;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "Cyberdemon";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		+MISSILEEVENMORE;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/annsit";
		DeathSound "monster/anndth";
		ActiveSound "cyber/active";
		PainSound "annihilator/pain";
		Obituary "The Cyber Annihilator blew %o away with its rockets.";
	}
	
	States 
	{
		Stomp:
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI B 5 A_FaceTarget;
			ANMA A 7 A_FaceTarget;
			ANMA B 7
			{
				A_FaceTarget();
				A_SpawnProjectile("AnnhiliatorStomp",10,0,0,0);
				A_Quake(3,32,0,768,"nosound/silent");
			}
			ANMA B 7;
			ANMA B 0 A_Jump(64,2);
			ANMA B 0 A_CybCheckStompDist(24,3,5,true);
			ANMA B 0;
			Goto See;

		AttackPhaseChange:
			ANNI E 0 A_Jump(128,"Missile2");
			goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			TNT1 A 0 A_CybCheckStompDist(24,3,5,false);
			ANNI E 0 A_Jump(128,"Missile2");

		Missile1:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI E 6 A_FaceTarget();
			ANNI F 12 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("Rocket2",40,27,0);
				A_SpawnProjectile("Rocket2",40,-27,0);
			}
			ANNI E 12 A_FaceTarget();
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI F 12 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("Rocket2",40,27,0);
				A_SpawnProjectile("Rocket2",40,-27,0);
			}
			ANNI E 12 A_FaceTarget();
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI F 12 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("Rocket2",40,27,0);
				A_SpawnProjectile("Rocket2",40,-27,0);
			}
			Goto See;

		Missile2:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 6 A_FaceTarget();
			ANNI F 12 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("HomRocket1",40,27,0);
				A_SpawnProjectile("HomRocket1",40,-27,0);
			}
			ANNI E 12 A_FaceTarget();
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI F 12 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("HomRocket1",40,27,0);
				A_SpawnProjectile("HomRocket1",40,-27,0);
			}
			ANNI E 12 A_FaceTarget();
			ANNI E 0 A_CheckIfTargetDead("See");
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI F 12 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("HomRocket1",40,27,0);
				A_SpawnProjectile("HomRocket1",40,-27,0);
			}
			Goto See;

		Spawn: 
			ANNI AB 10 A_Look();
			goto Spawn;
		See:
			ANNI A 0 { user_walksound = 0; }
			ANNI AABBCCDD 3 
			{
				user_walksound++;
				if (user_walksound == 1 || user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound ("monster/anhoof"); 
				}
				
				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			loop;

		Pain: 
			ANNI G 5;
			ANNI G 5 A_EEPain();
			Goto See;
		Death:
			ANNI H 10 Bright;
			ANNI I 10 Bright A_Scream();
			ANNI JKL 10 Bright;
			ANNI M 10 Bright A_NoBlocking();
			ANNI NO 10 Bright;
			ANNI P 30;
			ANNI P -1 A_BossDeath();
		Ice:
			ANNI G 5 A_GenericFreezeDeath();
			ANNI G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ANNI O 10 Bright;
			ANNI NMLKJIH 10 Bright;
			goto See;
	}
}

class AnnhiliatorStomp : EEProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "translucent";
		alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		Health 5;
		Obituary "%o was stomped on by the Cyber-Annhiliator.";
	}
	
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp");
			}
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,192,0,0,48);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
  }
}

//

class SpiderMastermindNew : EECreature
{
	default
	{
		Tag "Spider Mastermind";
		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 4;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 130;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 256;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 26;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 50;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 10;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E3M8BOSS
		+E4M8BOSS
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "mastermind/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
	}
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				//Console.Printf("i: %d, angle: %.8f, slope: %.8f", i, ang, slope);

				int damage = A_CalcDamageFormula(3,random(1,5),0.015,0.3334,0.1667,0.01);
				if (exex_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						EEBulletTracer TraceShotEE;
						TraceShotEE = EEBulletTracer(TraceShot);
						if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	States
	{
		Spawn:
			SPID AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SPID AABBCCDDEEFF 3
			{
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			SPID A 20 BRIGHT A_FaceTarget();
			SPID G 4 BRIGHT 
			{
				A_SPosAttackUseAtkSound();
				A_DynamicMusic();
			}
			SPID H 4 BRIGHT 
			{
				A_SposAttackUseAtkSound();
				A_DynamicMusic();
			}
			SPID H 1 BRIGHT A_SpidRefire();
			Goto Missile+2;
		Pain:
			SPID I 3;
			SPID I 3 A_EEPain();
			Goto See;
		Death:
			SPID J 20 A_Scream();
			SPID K 10 A_NoBlocking();
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S -1 A_BossDeath();
			Stop;
	}
}

class Demolisher : SpiderMastermindNew
{
	default
	{
		Tag "Spider-Demolisher";
		Health 6000;
		Radius 128;
		Height 100;
		Mass 1500;
		Speed 16;
		Painchance 20;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 65;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 13;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 25;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 5;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "SpiderMastermind";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+BOSS;
		+MISSILEEVENMORE;
		+NORADIUSDMG;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/demsit";
		AttackSound "spider2/attack";
		PainSound "demolisher/pain";
		DeathSound "monster/demdth";
		ActiveSound "spider/active";
		Obituary "%o felt the power of the Spider-Demolisher.";
	}
	
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double bslope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (33.75/256);
				double slope = bslope + Random2[SPosAttack]() * (6.4/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.025,0.5,0.25,0.01);
				if (exex_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						EEBulletTracer TraceShotEE;
						TraceShotEE = EEBulletTracer(TraceShot);
						if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}

	States 
	{
		Spawn:
			DEMO AB 10 A_Look();
			goto Spawn;
		See:
			DEMO A 0 { user_walksound = 0; }
			DEMO AABBCCDDEEFF 3
			{
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			loop;

		Missile:
			TNT1 A 0 
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (random(1,256) <= 48)
				{
					return resolvestate("Missile1");
				}
				return resolvestate(null);
			}
			goto Missile2;
		Missile1:
			DEMO A 20 BRIGHT A_FaceTarget();
			DEMO A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO TT 4 BRIGHT  A_FaceTarget();
			DEMO TTTT 5 BRIGHT A_FaceTarget;
			DEMO U 10 BRIGHT
			{
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 0 BRIGHT A_Jump(88,"Missile2");
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO TT 4 BRIGHT A_FaceTarget();
			DEMO TTTT 5 BRIGHT A_FaceTarget();
			DEMO U 10 BRIGHT
			{
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				user_tempvar2 *= 0.5;
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 A_CheckIfTargetDead("See");
			DEMO T 0 BRIGHT A_Jump (8, "MissileLoop");
			DEMO T 0 BRIGHT A_Jump (192, "Missile2");
			Goto See;

		Missile2:
			DEMO A 20 BRIGHT
			{
				A_FaceTarget();
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		Missile2Loop:
			DEMO G 0 A_CheckIfTargetDead("See");
			DEMO G 4
			{
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				A_SPosAttackInternal();
				A_SPosAttackInternal();
				A_DynamicMusic();
			}
			DEMO G 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO H 0 A_CheckIfTargetDead("See");
			DEMO H 4
			{
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				A_SPosAttackInternal();
				A_SPosAttackInternal();
				A_DynamicMusic();
			}
			DEMO H 1 BRIGHT A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain: 
			DEMO I 3;
			DEMO I 3 A_EEPain(); 
			Goto See;
		Death:
			DEMO J 20 A_Scream();
			DEMO K 10 Bright A_NoBlocking();
			DEMO LMNOPQR 10 Bright;
			DEMO S 30;
			DEMO S -1 A_BossDeath();
			Stop;
		Ice:
			DEMO I 5 A_GenericFreezeDeath();
			DEMO I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DEMO S 30;
			DEMO QRPONMLK 10;
			DEMO J 20;
			goto See;
	}
}

class BFGBallMonster : BFGBallBase 
{
	default
	{
		DamageFunction (finaldamagedealt);
		Tag "BFG Ball";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BFS1 AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/bfgx",CHAN_7);
				A_Quake(1, 12, 0, 768, "");
				A_Quake(5, 12, 0, 512, "");
			}
			BFE1 AB 8 Bright;
			BFE1 C 8 Bright A_BFGSpray();
			BFE1 DEF 8 Bright;
			Stop;
		
		ShotDown:
			TNT1 A 0 
			{
				A_ScaleVelocity(0);
				A_StartSound("weapons/bfgx",CHAN_7, CHANF_DEFAULT, 0.5);
				A_Quake(1, 12, 0, 384, "");
				A_Quake(5, 12, 0, 256, "");
			}
			BFE1 ABCDEF 4 Bright;
			Stop;
	}
}
