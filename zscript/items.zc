// Backpack
class ItemSatchel : CustomInventoryExt
{
	default
	{
		Height 26;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "Picked up an item satchel with some ammo/goodies!";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			DSTC A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("Backpack",AAPTR_PLAYER1);
				if (!CountInv("PlayingHexen")) // You're only given a single pack at the start of Hexen mode and only its extra ammo, nothing else.
				{
					A_StartSound("Dinah/there",CHAN_VOICE);
					if (!CountInv("CandleWhip",AAPTR_PLAYER1)) { A_GiveInventory("CandleWhip",1,AAPTR_PLAYER1); }
					A_GiveInventory("CherryBombPickup",2,AAPTR_PLAYER1);
					if (random(1,3) <= 1) { A_GiveInventory("CherryBombPickup",1,AAPTR_PLAYER1); }
					if (random(1,6) <= 1) { A_GiveInventory("CherryBombPickup",1,AAPTR_PLAYER1); }
					if (random(1,12) <= 1) { A_GiveInventory("CherryBombPickup",1,AAPTR_PLAYER1); }
					
					A_GiveInventory("SpinnerPickup",random(1,2),AAPTR_PLAYER1);
					if (random(1,3) <= 1) { A_GiveInventory("SpinnerPickup",1,AAPTR_PLAYER1); }
					if (random(1,12) <= 1) { A_GiveInventory("SpinnerPickup",1,AAPTR_PLAYER1); }
					
					if (random(1,3) <= 2) { A_GiveInventory("BRocketPickup",1,AAPTR_PLAYER1); }
					if (random(1,6) <= 1) { A_GiveInventory("BRocketPickup",1,AAPTR_PLAYER1); }
					if (random(1,24) <= 1) { A_GiveInventory("BRocketPickup",1,AAPTR_PLAYER1); }
				}

			}
			stop;
	}
}

class PortalSatchel : CustomInventoryExt replaces ArtiBoostMana
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+FLOATBOB
		+DONTGIB
		+NOGRAVITY
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.Icon "DLSTI0";
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "Got a Portal Satchel! Use it to fully replenish \c[gold]ALL\c- ammo when needed!"; // "KRATER OF MIGHT"
		Inventory.PickupFlash "PickupFlash";
		Tag "Portal Satchel: Fills all ammo types to maximum when used.";
		Scale 1;
	}
	states
	{
		Spawn:
			DLST A -1;
			Stop;
		Use:
			TNT1 A 0
			{
				int giveamt = 999999;
				A_StartSound("Dinah/There",CHAN_VOICE,CHANF_DEFAULT);
				A_GiveInventory("MalletAmmo", giveamt);
				A_GiveInventory("BlunderAmmo", giveamt);
				A_GiveInventory("EggAmmo", giveamt);
				A_GiveInventory("JackAmmo", giveamt);
				A_GiveInventory("PikeAmmo", giveamt);
				A_GiveInventory("VacAmmo", giveamt);
				A_GiveInventory("MusicAmmo", giveamt);
				if (!CountInv("CandleWhip")) A_GiveInventory("CandleWhip", 1);
				A_GiveInventory("CandleAmmo", giveamt);
			}
			Stop;
	}
	
}

//Apple
class GalaApple : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "APPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Gala Apple";
		+DONTGIB
	}
	States
	{
		Spawn:
			APPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = player.mo.CountInv("PlayerMaxHP");
					temp3 *= 0.10;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += randompick(9,10,10,11,11,12,13);

					A_StartSound("Dinah/eatapple",CHAN_VOICE);
					A_SetBlend("f1 ff f1",0.1,4);
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

class GalaAppleWeak : GalaApple
{
	States
	{
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = temp2;
					temp3 *= 0.05;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += randompick(4,4,5,5,5,6,6,7);
					
					A_StartSound("Dinah/eatapple",CHAN_VOICE);
					A_SetBlend("f1 ff f1",0.1,random(4,6));
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

//Apple
class GalaApple_Flipped : GalaApple
{
	default
	{
		//$Category RPPropsFlipped
		+NOGRAVITY
		Tag "Gala Apple (Flipped)";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			UPPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = player.mo.CountInv("PlayerMaxHP");
					temp3 *= 0.10;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += randompick(9,10,10,11,11,12,13);

					A_StartSound("Dinah/eatapple",CHAN_VOICE);
					A_SetBlend("f1 ff f1",0.1,4);
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

class GoldApple : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "GAPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Golden Apple: Gives +2 Maximum HP";
		+COUNTITEM
		+DONTGIB
	}
	States
	{
		Spawn:
			GAPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 2;
				int inc2 = (inc * frandompick(2,2.5,3));
				int inc3 = random(0,2);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				
				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				player.mo.health = player.health = temp1;
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				if (MiscItem) MiscItem.ExtraDashCharge += randompick(0,1,1);
				if (MiscItem2) MiscItem2.HPRegenBoostTimer += randompick(9,10,10,11,11,12,13);

				A_StartSound("Dinah/eatapple",CHAN_VOICE);
				A_StartSound("Dinah/eatapple",101,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10));
				A_SetBlend("f1 ff f1",0.25,10);
				Console.Printf("\c[red]A Golden gala apple! \c[green]+%d HP! \c[gold]+%d Maximum HP!", inc2, inc);
				invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			Fail;
	}
}

class PlatinumApple : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "GAPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Golden Apple: Gives +5 Maximum HP";
		+COUNTITEM
		+DONTGIB
	}
	States
	{
		Spawn:
			PAPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 5;
				int inc2 = (inc * frandompick(2,2.5,3));
				int inc3 = random(2,5);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));

				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				player.mo.health = player.health = temp1;
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				if (MiscItem) MiscItem.ExtraDashCharge += randompick(2,2,2,3,3);
				if (MiscItem2) MiscItem2.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);

				A_StartSound("Dinah/eatapple",CHAN_VOICE);
				A_StartSound("Dinah/eatapple",101,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10));
				A_StartSound("Dinah/eatapple",102,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.825,1.175));
				A_StartSound("Dinah/eatapple",103,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.75,1.25));
				A_SetBlend("f1 ff f1",0.625,25);
				Console.Printf("\c[red]A Platinum gala apple! \c[green]+%d HP! \c[gold]+%d Maximum HP!", inc2, inc);
				invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			Fail;
	}
}

class CupOfTea : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "TCUPA0";
		Tag "Cup of Tea";
	}
	states
	{
		Spawn:
			TCUP A 0 NoDelay
			{
			}
		Idle:
			TCUP BC 5 Bright
			{
				A_SetTics(random(3,5));
			}
			loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= frandompick(0.015,0.0175,0.0175,0.02,0.02,0.02,0.02,0.02,0.02,0.0225,0.0225,0.025);
				if (temp3 < 1) temp3 = 1;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += randompick(1,1,1,2);

				A_StartSound("Tea/Sipping",CHAN_VOICE);
				A_SetBlend("f1 ff f1",0.1,random(3,4));
				Console.Printf("\c[red]A Cup of Tea! \c[green]+%d (Over)HP", temp3);
			}
			stop;
	}
}

class FoodPlateFruit : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODB0";
		Tag "Food Plate (Fruit)";
	}
	States
	{
		Spawn:
			FOOD B -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 0.10;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += randompick(9,10,10,11,11,12,13);

				A_StartSound("Dinah/eat",CHAN_VOICE);
				A_SetBlend("f1 ff f1",0.1,random(4,6));
				Console.Printf("\c[red]Food Plate (Fruit)! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class PigRoastDish : CustomInventoryExt
{
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODA0";
		Tag "Food Plate (Roasted Pig)";
	}
	States
	{
		Spawn:
			FOOD A 0 NoDelay
			{
				if (random(1,16) == 1) { invoker.A_SpawnItemEx("PigRoastDishExtra",0.0,0.0,0.0,frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),SXF_NOCHECKPOSITION); }
				invoker.A_SpawnItemEx("PigRoastDishExtra",0.0,0.0,0.0,frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),SXF_NOCHECKPOSITION);
			}
		Idle:
			FOOD A -1 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 0.50;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += random(45,65);

				A_StartSound("Dinah/eat",CHAN_VOICE);
				A_SetBlend("f1 ff f1",0.1,random(4,6));
				player.mo.A_GiveInventory("PowerRoastBuff");
				Console.Printf("\c[red]Ate a dish of Roasted Pig! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class GourmetMeal : CustomInventoryExt
{
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODY0";
		Tag "Food Plate (GourmetMeal)";
	}
	States
	{
		Spawn:
			FOOD Z 0 NoDelay
			{
			}
		Idle:
			FOOD Y -1 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 2.00;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += random(225,325);

				A_StartSound("Dinah/eat",CHAN_VOICE);
				A_SetBlend("f1 ff f1",0.1,random(10,15));
				player.mo.A_GiveInventory("PowerMealBuff");
				player.mo.A_GiveInventory("PowerMealBuff2");
				Console.Printf("\c[red]Ate a massive Gourmet Meal! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class PigRoastDishExtra : PigRoastDish
{
	States
	{
		Spawn:
			FOOD A -1 Bright;
			Loop;
	}
}

class BerserkNew : CustomInventory replaces Berserk
{
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 1.00;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
				}

				A_StartSound("getberserkpack",CHAN_BODY);
				A_StartSound("Dinah/Gotcha",CHAN_VOICE);
				A_SetBlend("f0 f0 f0",0.2,random(8,12));
				if (!player.mo.CountInv("PowerStrengthDD"))
				{
					player.mo.SetInventory("PowerStrengthDD",1);
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics = 150 * TICRATE;
				}
				else
				{
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics += 150 * TICRATE;
				}
				if (prevtemp1 < temp2) Console.Printf("\c[red]Berserk! All Melee Attacks \c[purple]x10\c[red] Damage! \c[green]HP restored to %d%% of max!", perc);
													else Console.Printf("\c[red]Berserk! All Melee Attacks \c[purple]x10\c[red] Damage!");
			}
			Stop;
	}
}

// A more "artifact" style version of the Berserk Pack [for Heretic/Hexen mode, etc]
class BerserkSphere : BerserkNew
{
	default
	{
		+FLOATBOB
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			BERS ABCDEFGH 3 Bright;
			loop;
		Pickup:
			TNT1 A 0 
			{
				int temp1 = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 1.00;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
				}

				A_StartSound("Dinah/Gotcha",CHAN_VOICE);
				A_SetBlend("f0 f0 f0",0.2,random(8,12));
				if (!player.mo.CountInv("PowerStrengthDD"))
				{
					player.mo.SetInventory("PowerStrengthDD",1);
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics = 150 * TICRATE;
				}
				else
				{
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics += 150 * TICRATE;
				}
				if (prevtemp1 < temp2) Console.Printf("\c[red]Berserk Sphere! All Melee Attacks \c[purple]x10\c[red] Damage! \c[green]HP restored to %d%% of max!", perc);
													else Console.Printf("\c[red]Berserk Sphere! All Melee Attacks \c[purple]x10\c[red] Damage!");
			}
			Stop;
	}
}

// Turkey Dinner [Mystic Urn esque item that heals overhealth as well :P]
class TurkeyDinner : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		Inventory.PickupSound "Dinah/giggle";
		Inventory.Amount 1;
		Inventory.MaxAmount 6;
		Inventory.InterHubAmount 6;
		Inventory.PickupMessage "A delicious Turkey Dinner! (Eat for Health and a 'well fed' buff)";
		Inventory.Icon "FOODD0";
		Tag "Turkey Dinner: Heals 45-55% Health (up to 300% of Maximum) and a gives a 'well fed' buff.";
	}

	States
	{
		Spawn:
			FOOD D -1;
			stop;
		Use:
			TNT1 A 0 
			{
				A_UseTurkeyDinner();
			}
			fail;
	}
}

//Goblet
class AppleWine : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.PickupSound "Dinah/giggle";
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 8
		Inventory.InterHubAmount 16; // 8
		Inventory.PickupMessage "\c[gold]'Hehehe... Sweet apple wine!'\c- \c[green](Drink for Health and Brief buff)\c-";
		Inventory.Icon "GOBLI0";
		Tag "Apple Wine Goblet: Heals 18-22% Health and Gives Defense Buff up to 4 tiers. Cannot be drank when buff is at max.";
	}

	States
	{
		Spawn:
			GOBL ABC 6;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_UseAppleWine();
			}
			fail;
	}
}

class AppleWine_Flipped : CustomInventoryExt
{
	default
	{
		//$Category RPPropsFlipped
		Height 20;
		Radius 20;
		+DONTGIB
		+COUNTITEM
		+NOGRAVITY
		+FLOATBOB
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]'Hehehe... Sweet apple wine!'\c- \c[green](Drink for Health and Brief buff)\c-";
		Tag "Apple Wine Goblet (Flipped)";
	}
	States
	{
		Spawn:
			UOBL ABC 6;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("AppleWine",1);
			Stop;
	}
}

//Cherry Bomb
class FireTrail : DDProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			FTRL ABCDE 4 BRIGHT;
			Stop;
	}
}

class IceTrail : DDProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			ITRL ABCDE 4 BRIGHT;
			Stop;
	}
}

class CherryBombPickup : CustomInventoryExt replaces RocketAmmo
{
	default
	{
		//$Category RPFireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 24; // 12
		Inventory.InterHubAmount 24; // 12
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "A Cherry Bomb!";
		Inventory.Icon "CBOMI0";
		Tag "Cherry Bomb: Thrown at Enemies and explodes. Berserk effects its' arc/distance and impact damage. Can deal self-damage via AOE.";
		Scale 0.8;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}

	States
	{
		Spawn:
			CBOP A -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				bool wutthis = false;
				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (wutthis) // >.> <.<
				{
					shotangle = -60;
					shotangleend = 60;
					shotangleinc = 10;
					maxshots = 13;
				}
				if (wutthis) A_SetAngle(angle+shotangle);
				for (int i = 0; i < maxshots; i++)
				{
					if (i && wutthis) A_SetAngle(angle+shotangleinc);
					if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
					{
						A_ThrowGrenade("CherryBombShotBerserk",-2,(random(14,18) * 2.5),(frandom(2.75,3.25) * 1.75),0);
					}
					else
					{
						A_ThrowGrenade("CherryBombShot",-2,random(14,18),frandom(2.75,3.25),0);
					}
					//Console.Printf("Angle: %.4f", angle);
				}
				if (wutthis) A_SetAngle(origangle);
			}
			Stop;
	} 
}

class CherryBombShot : DDProjectile
{
	default
	{
		ProjectileKickback 5;
		Tag "Cherry Bomb";
		Radius 3;
		Height 3;
		Speed 40;
		Damage 10;
		DamageType "CherryBomb";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "weapons/cherrywick";
	}
	States
	{
		Spawn:
			CBOM ABCD 2 Bright A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
			loop;

		Death:
		XDeath:
		Crash:
			BMX2 A 2 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_Explode(16,32,XF_HURTSOURCE|XF_THRUSTZ,0,4);
			}
			BMX2 B 2 Bright 
			{
				A_AlertMonsters();
				A_Explode(24,48,XF_HURTSOURCE|XF_THRUSTZ,0,6);
			}
			BMX2 C 1 Bright 
			{
				A_Explode(32,64,XF_HURTSOURCE|XF_THRUSTZ,0,8);
			}
			BMX2 D 2 Bright 
			{
				A_Explode(40,80,XF_HURTSOURCE|XF_THRUSTZ,0,10);
			}
			BMX2 E 1 Bright 
			{
				A_Explode(48,96,XF_HURTSOURCE|XF_THRUSTZ,0,12);
			}
			BMX2 F 2 Bright 
			{
				A_Explode(56,112,XF_HURTSOURCE|XF_THRUSTZ,0,14);
			}
			BMX2 G 1 Bright 
			{
				A_Explode(64,128,XF_HURTSOURCE|XF_THRUSTZ,0,16);
			}
			stop;
	}
}

class CherryBombShotBerserk : CherryBombShot
{
	default
	{
		ProjectileKickback 25;
		Tag "-Cherry Bomb-";
		Speed 80;
		Damage 50;
		DamageType "CherryBomb";
	}
	States
	{
		Spawn:
			CBOM ABCD 2 Bright A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
			loop;
	}
}


class BadCherryBomb : CherryBombShot
{
	default
	{
		ProjectileKickback 5;
		Tag "Cherry Bomb";
		Speed 15;
		Gravity 0.05;
	}
	
	States
	{
		Spawn:
			CBOM ABCD 2 Bright A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
			loop;
	}
}

//Bottle Rocket
class BRocketPickup : CustomInventoryExt
{
	default
	{
		//$Category RPFireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 4; // 2
		Inventory.InterHubAmount 4; // 2
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "A Bottle Rocket!";
		Inventory.Icon "BROKI0";
		Tag "Bottle Rocket: Shot forward and creates a row of explosions to the left and right of it's impact site. Can deal self-damage via AOE.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			BROK P -1;
			Stop;
		Use:
			TNT1 A 0 A_FireProjectile("BRocketShot", 0);
			Stop;
	} 
}

class BRocketShot : DDProjectile
{
	default
	{
		ProjectileKickback 5;
		Tag "Bottle Rocket";
		Radius 8;
		Height 8;
		Speed 60;
		Damage 20;
		DamageType "BRocket";
		Projectile;
		renderstyle "Normal";
		+RANDOMIZE
		+DEHEXPLOSION
		+ROCKETTRAIL
		//+NOEXTREMEDEATH
		SeeSound "weapons/rocketfire";
		DeathSound "weapons/cherryboom";
	}
	
	States
	{
		Spawn:
			BROK A 0 NoDelay;
			BROK ABCD 2 Bright A_StartSound("weapons/spinnerfire",CHAN_7,CHANF_LOOPING);
			Loop;
		Death:
			TNT1 A 0 A_StopSound(CHAN_7);
			TNT1 A 0 A_AlertMonsters();
			BMX1 A 5 Bright A_Explode(128,128,1,true,32);
			BMX1 B 5 Bright;
			BMX1 C 8 Bright A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			BMX1 D 8 Bright A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			BMX1 E 8 Bright A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			TNT1 A 8 Bright A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			Stop;
	}
}

class BigBRocketShot : DDProjectile
{
	int user_explosion;
	default
	{
		ProjectileKickback 15;
		Tag "Big Bottle Rocket";
		Radius 12;
		Height 12;
		Speed 60;
		Damage 100;
		DamageType "BRocket";
		Scale 1.5;
		Projectile;
		renderstyle "Normal";
		+RANDOMIZE
		+DEHEXPLOSION
		+ROCKETTRAIL
		//+NOEXTREMEDEATH
		SeeSound "weapons/rocketfire";
		DeathSound "weapons/cherryboom";
	}
	
	States
	{
		Death:
			TNT1 A 0 A_StopSound(CHAN_7);
			TNT1 A 0 A_AlertMonsters;
			BMX1 AABBB 2 Bright 
			{
				A_Explode(640,128,1,true,32);
			}
			BMX1 CCCCC 2 Bright 
			{
				if (user_explosion % 2 == 1) { A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
																else { A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
				user_explosion++;
			}
			BMX1 DDDDD 2 Bright
			{
				if (user_explosion % 2 == 1) { A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
																else { A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
				user_explosion++;
			}
			BMX1 EEEEE 2 Bright
			{
				if (user_explosion % 2 == 1) { A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
																else { A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
				user_explosion++;
			}
			TNT1 AAAAA 2 Bright
			{
				if (user_explosion % 2 == 1) { A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
																else { A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); }
				user_explosion++;
			}
			Stop;
	}
}

class MultiBRocketShot : BigBRocketShot
{
	default
	{
		ProjectileKickback 5;
		Tag "Multi-Bottle Rocket";
		Radius 18;
		Height 18;
		Scale 2.25;
		Damage 400;
	}
}

class BadBrocketShot : BrocketShot
{
	default
	{
		Speed 30;
		DontHurtShooter;
	}
	States
	{
		Death:
			TNT1 A 0 A_StopSound(CHAN_7);
			TNT1 A 0 A_AlertMonsters;
			BMX1 A 5 Bright A_Explode;
			BMX1 B 5 Bright;
			BMX1 C 8 Bright A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			BMX1 D 8 Bright A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); 
			BMX1 E 8 Bright A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);  
			Stop;
	}
}

class BRocketBoom1 : DDProjectile
{
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		seesound "weapons/cherryboom";
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 0 A_Die;
		Death:
			CBAL C 6 Bright A_Explode;
			CBAL DEF 6 Bright;
			stop;
	}
}

class BRocketBoom2 : DDProjectile
{
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		seesound "weapons/cherryboom";
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	states
	{
		Spawn:
			TNT1 A 0 A_Die;
		Death:
			BROX A 6 Bright A_Explode;
			BROX BCD 6 Bright;
			stop;
	}
}

// Popper
//Party Popper
class PopperPickup : CustomInventoryExt
{
	int debris1amt, debris2amt, debris3amt, debris4amt;
	int basedmg, baseradi;
	double basevol;

	default
	{
		//$Category RPFireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "A Scatter-Popper!";
		Inventory.Icon "POPRI0";
		Tag "Scatter-Popper: Emits a powerful soundwave and scatters ripping debris in an somewhat upward-forward momentum. Aim carefully when using it!";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}

	States
	{
		Spawn:
			POPR P -1;
			Stop;
		Use:
			TNT1 A 0 Bright 
			{
				A_UsePartyPopper();
				invoker.basedmg = randompick(32,48,64);
				invoker.baseradi = randompick(96,128,160);
				invoker.basevol = 1.0;
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					invoker.basedmg *= frandom(9,11);
					invoker.baseradi = frandom(4.5,5.5);
					invoker.basevol = 1.2;
				}
				bFORCERADIUSDMG = true; // Forces the Popper's soundwave(s) to damage AOE immune enemies/bosses
				A_StartSound("popper/toot",70,CHANF_DEFAULT,(frandom(0.95,1.1)*invoker.basevol),ATTN_NORM,frandom(0.8,1.2));
				A_Explode(invoker.basedmg,256,0,0,invoker.baseradi,0,0,"","Beats");
				invoker.debris1amt = random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 25));
				invoker.debris2amt = random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
				invoker.debris3amt = random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
				invoker.debris4amt = random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
				if (random(1,4) <= 3) 
				{
					A_StartSound("popper/toot",71,CHANF_DEFAULT,(frandom(0.85,1.0)*invoker.basevol),ATTN_NORM,frandom(0.85,1.15));
					A_Explode(invoker.basedmg,256,0,0,invoker.baseradi,0,0,"","Beats"); 
					invoker.debris1amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 25));
					invoker.debris2amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
					invoker.debris3amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
					invoker.debris4amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
					if (random(1,12) <= 3) 
					{
						A_StartSound("popper/toot",72,CHANF_DEFAULT,(frandom(0.75,0.9)*invoker.basevol),ATTN_NORM,frandom(0.9,1.1));
						A_Explode(invoker.basedmg,256,0,0,invoker.baseradi,0,0,"","Beats"); 
						invoker.debris1amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 25));
						invoker.debris2amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
						invoker.debris3amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
						invoker.debris4amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
						if (random(1,36) <= 3) 
						{
							A_StartSound("popper/toot",73,CHANF_DEFAULT,(frandom(0.65,0.8)*invoker.basevol),ATTN_NORM,frandom(0.95,1.05));
							A_Explode(invoker.basedmg,256,0,0,invoker.baseradi,0,0,"","Beats"); 
							invoker.debris1amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 25));
							invoker.debris2amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
							invoker.debris3amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
							invoker.debris4amt += random(0,(CountInv("PlayerLevel",AAPTR_PLAYER1) / 16));
						}
					}
				}
				bFORCERADIUSDMG = false; // now turn of forced AOE damage, just in case :V
				//Console.Printf("D1Amt: %d, D2Amt: %d, D3Amt: %d, D4Amt: %d", invoker.debris1amt, invoker.debris2amt, invoker.debris3amt, invoker.debris4amt);

				for (int i; i < (5 + invoker.debris1amt); i++) { A_ThrowGrenade("StreamerShot",4,random(8,16),random(1,5),0); }
				for (int i; i < (8 + invoker.debris2amt); i++) { A_ThrowGrenade("Confetti_Y",4,random(2,8),random(1,3),0); }
				for (int i; i < (8 + invoker.debris3amt); i++) { A_ThrowGrenade("Confetti_B",4,random(2,8),random(1,3),0); }
				for (int i; i < (8 + invoker.debris4amt); i++) { A_ThrowGrenade("Confetti_P",4,random(2,8),random(1,3),0); }

				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{ 
					A_Recoil(frandom(0.96,1.44)); 
				}
				else
				{
					A_Recoil(frandom(4.8,7.2));
				}
			}
			Stop;
	} 
}

class DDFeather : DDProjectile
{
	default
	{
		Radius 2;
		Height 4;
		+MISSILE
		+DROPOFF
		+NOTELEPORT
		+CANNOTPUSH
		+WINDTHRUST
		+DONTSPLASH
		Gravity 0.125;
	}
	
	States
	{
		Spawn:
			CHKN MNOPQPON 3;
			Loop;
		Death:
			CHKN N 6;
			Stop;
	}
}

class Confetti_B : DDFeather
{
	default
	{
		ProjectileKickback 5;
		Scale 0.5;
	}
	
	States
	{
		Spawn:
			CON1 ABCDEDCB 3;
			Loop;
		Death:
			CON1 B 6;
			Stop;
	}
}

class Confetti_P : DDFeather
{
	default
	{
		ProjectileKickback 5;
		Scale 0.5;
	}
	
	States
	{
		Spawn:
			CON2 ABCDEDCB 3;
			Loop;
		Death:
			CON2 B 6;
			Stop;
	}
}

class Confetti_Y : DDFeather
{
	default
	{
		Scale 0.5;
	}
}

class StreamerShot : SingleDamageRipper
{
	default
	{
		ProjectileKickback 5;
		Radius 3;
		Height 3;
		Speed 20;
		Damage 25; // From 10 now that it only rips each thing it hits ONCE
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+RIPPER
		+LOWGRAVITY
		renderstyle "Normal";
	}
	
	States
	{
		Spawn:
			STRM A 1 Bright A_SpawnItemEx("StreamerTrail",0,0,0);
			loop;
		Death:
			STRM A 1;
			stop;
	}
}

class StreamerTrail : DDProjectile
{
	default
	{
		ProjectileKickback 5;
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			STRM AAAAAA 4 BRIGHT;
			Stop;
	}
}

class PopperPuff1 : DDPuff
{
	default
	{
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
	}
	
	States
	{
		Spawn:
			CBAL C 0 A_AlertMonsters();
			CBAL CD 4 Bright;
			CBAL EF 3 bright;
			Stop;
	}
}

class PopperPuff2 : DDPuff
{
	default
	{
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
	}
	
	States
	{
		Spawn:
			SPNR C 0 A_AlertMonsters;
			SPNR C 4 Bright A_Explode(128,128);
			SPNR DEFG 4 Bright;
			Stop;
	}
} 

//Snake Grenade
class SnakePickup : CustomInventoryExt
{
	default
	{
		//$Category RPFireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "A King Sugar Snake!";
		Inventory.Icon "FSNKI0";
		Tag "Sugar Snake: Summons a King Sugar Snake ally when used.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			FSNK P -1;
			Stop;
		Use:
			TNT1 A 0 A_ThrowGrenade("SnakeGrenade",4,16,3,0);
			Stop;
	} 
}

class ArmorScrap : ArmorBonus
{
	int user_type;
	default
	{
		Inventory.Icon "DACLB0";
		Inventory.Pickupmessage "Knight-Gown Scrap! \c[green]+1 Armor";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 50;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 1000; //500
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			DACL B 0 NoDelay
			{
				if (random(1,20) == 1)
				{
					user_type = random(1,20);
					if (user_type == 1) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 2) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 3) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 4) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 5) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 6) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 7) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 8) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 9) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 10) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 11) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 12) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 13) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 14) { A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 15) { A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 16) { A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 17) { A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 18) { A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 19) { A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type == 20) { A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }

					Thing_Remove(0); 
				}
			}
		Idle:
			DACL B -1;
			stop;
	}
}

class ArmorScrap2 : ArmorScrap
{
	default
	{
		Inventory.Icon "DACLC0";
		Inventory.Pickupmessage "Knight-Gown Scrap! \c[green]+1 Armor";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 75;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 1000; //500
		DamageFactor "Melee", 0.6;
		DamageFactor "Zap", 0.8;
	}
	
	States
	{
		Spawn:
			DACL C -1;
			stop;
	}
}

class ArmorScrap3 : ArmorScrap2
{
	default
	{
		Inventory.Icon "DACLB0";
		Inventory.Pickupmessage "Knight-Gown Scrap! \c[green]+1 Armor";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 87.5;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 1000; //500
		DamageFactor "Melee", 0.4;
		DamageFactor "Zap", 0.6;
	}
	
	States
	{
		Spawn:
			DACL D -1;
			stop;
	}
}

class ArmorScrap4 : ArmorScrap3
{
	default
	{
		Inventory.Icon "DACLB0";
		Inventory.Pickupmessage "Knight-Gown Scrap! \c[green]+1 Armor";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 93.75;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 1000; //500
		DamageFactor "Melee", 0.2;
		DamageFactor "Zap", 0.3;
	}
	
	States
	{
		Spawn:
			DACL D -1;
			stop;
	}
}

//Armor
class KnightGown : SilverShield
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "AGWNI0";
		Inventory.Pickupmessage "Knight-Gown (50% Protection)";
		Inventory.PickupSound "Dinah/marvelous";
		Armor.SavePercent 50;
		Armor.SaveAmount 125;
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		int SaveAmount = GetSaveAmount();
		let armor = BasicArmor(Owner.FindInventory("BasicArmor"));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = BasicArmor(Spawn("BasicArmor"));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			//Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			int maxa = ((SaveAmount*2) + (armor.BonusCount*2));
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		if (armor.Amount <= 0) armor.Amount = SaveAmount + armor.BonusCount;
											else armor.Amount += (SaveAmount + armor.BonusCount);
		armor.MaxAmount = ((SaveAmount*2) + (armor.BonusCount*2));
		if (armor.Amount > armor.MaxAmount) armor.Amount = armor.MaxAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	States
	{
		Spawn:
			AGWN A -1;
			Stop;
	}
}

class KnightGown_Flipped : KnightGown
{
	default
	{
		//$Category RPPropsFlipped
		+NOGRAVITY
		Tag "Knight-Gown (Flipped)";
	}
	
	States
	{
		Spawn:
			UGWN A -1;
			Stop;
	}
}

class KnightGown2 : EnchantedShield
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "AGWNJ0";
		Inventory.Pickupmessage "Expert's Knight-Gown (75% Protection)";
		Inventory.PickupSound "Dinah/marvelous";
		Armor.SavePercent 75;
		Armor.SaveAmount 250;
		DamageFactor "Melee", 0.6;
		DamageFactor "Zap", 0.8;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Expert's Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		int SaveAmount = GetSaveAmount();
		let armor = BasicArmor(Owner.FindInventory("BasicArmor"));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = BasicArmor(Spawn("BasicArmor"));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			//Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			int maxa = ((SaveAmount*2) + (armor.BonusCount*2));
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		if (armor.Amount <= 0) armor.Amount = SaveAmount + armor.BonusCount;
											else armor.Amount += (SaveAmount + armor.BonusCount);
		armor.MaxAmount = ((SaveAmount*2) + (armor.BonusCount*2));
		if (armor.Amount > armor.MaxAmount) armor.Amount = armor.MaxAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	States
	{
		Spawn:
			AGWN B -1;
			Stop;
	}
}

class KnightGown3 : EnchantedShield
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "AGWNK0";
		Inventory.Pickupmessage "Master's Knight-Gown (87.5% Protection)";
		Inventory.PickupSound "Dinah/giggle";
		Armor.SavePercent 87.5;
		Armor.SaveAmount 500;
		DamageFactor "Melee", 0.4;
		DamageFactor "Zap", 0.6;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Master's Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		int SaveAmount = GetSaveAmount();
		let armor = BasicArmor(Owner.FindInventory("BasicArmor"));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = BasicArmor(Spawn("BasicArmor"));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			//Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			int maxa = ((SaveAmount*2) + (armor.BonusCount*2));
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		if (armor.Amount <= 0) armor.Amount = SaveAmount + armor.BonusCount;
											else armor.Amount += (SaveAmount + armor.BonusCount);
		armor.MaxAmount = ((SaveAmount*2) + (armor.BonusCount*2));
		if (armor.Amount > armor.MaxAmount) armor.Amount = armor.MaxAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}

	States
	{
		Spawn:
			AGWN C -1;
			Stop;
	}
}

class WineArmor : BasicArmorPickup
{
	default
	{
		+DONTGIB
		+FLOATBOB
		Inventory.PickupMessage "One little sip won't hurt...";
		Inventory.Icon "WINEI0";
		Armor.SavePercent 33; // 33
		Armor.SaveAmount 50; // 50
	}
	
	States
	{
		Spawn:
			WINE A -1;
			Stop;
	}
}

// Invuln Sphere
class InvulnerabilitySphere2 : CustomInventoryExt replaces InvulnerabilitySphere
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[gold]W-what?! Why do I feel so... invincible suddenly?!";
		Inventory.PickupSound "powerups/invuln";
	}
	States
	{
		Spawn:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_StartSound("Dinah/What",CHAN_VOICE);
				A_GiveInventory("PowerInvulnDD");
			}
			Stop;
	}
}

class BlurSphere2 : BlurSphere replaces BlurSphere
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+VISIBILITYPULSE
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.MaxAmount 0;
		Powerup.Type "PowerInvisibility2";
		RenderStyle "Translucent";
		Inventory.PickupMessage "\c[gold]Woah! I can barely see my body anymore! Is this some kinda invisibility magic?!"; // "Partial Invisibility"
		Inventory.PickupSound "powerups/invis";
	}
	
	States
	{
		Spawn:
			PINS ABCD 6 Bright;
			Loop;
	}
}

//Spinner
class SpinnerPickup : CustomInventoryExt
{
	default
	{
		//$Category RPFireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 8
		Inventory.InterHubAmount 16; // 8
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "A Spinner-Chaser!";
		Inventory.Icon "SPINI0";
		Tag "Spinner-Chaser: Shot forward and will seek a close target and explode on impact. Can deal self-damage via AOE. Hold down <ZOOM> when using to fire an Icy Spinner instead of tne standard type.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	States
	{
		Spawn:
			SPNR P -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				let player1 = DDPlayerPawn(player.mo);
				if (player1 && player1.buttons & BT_ZOOM) { A_FireProjectile("SpinnerShotIcy", 0); }
				else { A_FireProjectile("SpinnerShot", 0); }
			}
			Stop;
	} 
}

class SpinnerShot : DDProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		Damage 5;
		DamageType "Spinner";
		+SEEKERMISSILE
		//+NOEXTREMEDEATH
		Projectile;
		renderstyle "Add";
		SeeSound "weapons/spinnerfire";
		DeathSound "weapons/cherryboom";
	}
	
	States
	{
		Spawn:
			SPNR A 0 Bright NoDelay
			{
				A_SpawnItemEx("Firetrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
			}
			SPNR AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNR C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			BMX1 A 2 Bright A_Explode(128,128,1,true,32);
			BMX1 BCDE 2 Bright;
			Stop;
	}
}

class SpinnerShotIcy : SpinnerShot
{
	default
	{
		DamageType "Ice";
		+SEEKERMISSILE
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		DDPlayerPawn playpawn;
		DDPlayerPawn playpawn2;
		Actor DDActor;
		Actor DDActor2;
		playpawn = DDPlayerPawn(target);
		playpawn2 = DDPlayerPawn(other);
		DDActor = Actor(target);
		DDActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					if (A_CheckFriendCollisionProjTypePlayer(self) > 0) return false;
					if (A_CheckFriendCollisionProjTypePlayer2(self) > 0) return false;
				}
			}
			else
			if (DDActor && DDActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			
			let checkedenemy = Actor(other);
			if (!checkedenemy.bICECORPSE == 0) return false; else return true; // Makes the ice projectiles move PAST the frozen monster to hit other monsters.
		}
		// We don't really care about others making the check.

		return true;
	}

	States
	{
		Spawn:
			SPNI A 0 Bright NoDelay
			{
				A_SpawnItemEx("IceTrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
			}
			SPNI AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNI C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			BMX1 A 2 Bright A_Explode(128,128,1,true,32);
			BMX1 BCDE 2 Bright;
			Stop;
	}
}

class RadSuit2 : RadSuit replaces RadSuit
{
	default
	{
		Height 46;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]This bulky suit looks like it could give me some protection from heated surfaces..."; // "Radiation Shielding Suit"
		Inventory.PickupSound "powerups/suit";
		Powerup.Type "PowerIronFeet2";
	}

	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
	}
}

class BirdPotion : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Scale 1;
		Tag "Nevermore Potion";
		Inventory.PickupSound "Misc/p_pkup";
		Inventory.PickupMessage "\c[gold]The label simply says, 'Nevermore'.";
		Inventory.Icon "RAVNI0";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
	}
	States
	{
		Spawn:
			RAVN A 6 Bright;
			Loop;
		Use:
			TNT1 A 0
			{
				//A_GiveInventory("PowerRavenStealth",1,AAPTR_PLAYER1);
				A_GiveInventory("PowerRavenFlight",1,AAPTR_PLAYER1);
				A_GiveInventory("PowerRavenInvisibility",1,AAPTR_PLAYER1);
			}
			stop;
	}
}

class TimePotion : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.PickupSound "Dinah/Gotcha";
		Inventory.PickupMessage "\c[gold]'Essence of Time?' Hmm...";
		Tag "Essence of Time: Freezes time for 8-10 seconds per use. Stackable.";
		Inventory.Icon "TIMPI0";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
	}
	
	States
	{
		Spawn:
			TIMP AB 6;
			Loop;
		Use:
			TNT1 A 0
			{
				A_SetInventory("TimePotionTimeFreezer",1,AAPTR_PLAYER1);
				A_GiveInventory("TimeFreezeTimer",randompick(280,315,350),AAPTR_PLAYER1);
				A_TakeInventory("TimePotion",1,AAPTR_PLAYER1);
			}
			Fail;
	}
}

class FuryPotion : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
		Inventory.PickupFlash "PickupFlash";
		Inventory.PickupSound "Dinah/Gotcha";
		Inventory.PickupMessage "\c[gold]'Essence of Fury?' Sounds useful...! >:)";
		Tag "Essence of Fury: Berserks you for 12-18 seconds. Stackable.";
		Inventory.Icon "FRPTI0";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
	}
	
	States
	{
		Spawn:
			FRPT A -1;
			Loop;
		Use:
			TNT1 A 0
			{
				A_StartSound("CastBerserk",122,CHANF_DEFAULT);
				A_TakeInventory("FuryPotion",1,AAPTR_PLAYER1);
				A_GiveInventory("FuryBuff",1,AAPTR_PLAYER1);
			}
			Fail;
	}
}


class DivingHelm : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.PickupMessage "Chic Diving Helmet";
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
		Inventory.Icon "DIVRI0";
		Tag "Chic Diving Helmet: Gives temporary immunity to drowning.";
	}
	
	states
	{
		Spawn:
			DIVR A -1;
			Stop;
		Use:
			TNT1 A 0
			{
			}
			stop;
	}
}

//Palace Key
class PalaceKey : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.Icon "GKEYI0";
		Inventory.PickupMessage "\c[gold]A fancy palace k... wait, why are one of THESE here?!";
		Inventory.PickupSound "Dinah/allowme";
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		//PuzzleItem.Number 1
		Tag "Palace Key";
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			GKEY AB 6 Bright;
			Loop;
		Use:
			TNT1 A 0
			{
			}
			fail;
	}
}

class PalaceKey_Flipped : CustomInventoryExt
{
	default
	{
		//$Category RPPropsFlipped
		Height 20;
		Radius 20;
		Tag "Palace Key (Flipped)";
		Inventory.PickupMessage "\c[gold]A fancy palace k... wait, why are one of THESE here?!";
		Inventory.PickupSound "Dinah/allowme";
		+NOGRAVITY
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			UKEY AB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("PalaceKey",1);
			Stop;
	}
}

class DoorBellDingALing : DDBaseZSC
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NORM,frandom(1.25,1.5));
			}
			TNT1 A 35 A_SetTics(random(35,51));
			TNT1 A 0 Exit_Normal(0);
			Stop;
	}
}

//Exit Bell
class DoorBell : CustomInventoryExt 
{
	default
	{
		//$Category RPArtifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
		Inventory.PickupMessage "Grabbed a Door Bell. (Instantly Exit the Current Map [non secret])";
		Inventory.Icon "BELLI0";
		Tag "Door Bell: Use to exit the current level immediately.";
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			GBEL AB 10;
			Loop;
		Use:
			TNT1 A 0
			{
				A_SpawnItemEx("DoorBellDingALing",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
			Stop;
	} 
}

// ?????
class MysteryItem : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.PickupSound "Dinah/Gotcha";
		Inventory.PickupMessage "\c[gold]'What in the world...' D:";
		Tag "?: ?";
		Inventory.Icon "";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
	
	States
	{
		Spawn:
			TNT1 A -1;
			Loop;
		Use:
			TNT1 A 0
			{
			}
			Fail;
	}
}

class RatPotion : CustomInventoryExt
{
	default
	{
		//$Category RPArtifacts
		Inventory.PickupSound "Misc/p_pkup";
		Inventory.PickupMessage "\c[gold]'Rodentum?' Hmm...";
		Tag "Rodentum Potion";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
		Inventory.Icon "RBOTI0";
		//Powerup.Type "RatMorph";
		+Inventory.InvBar
		+FloatBob
		Inventory.PickupFlash "PickupFlash";
	}
		
	States
	{
		Spawn:
			RBOT AB 6;
			Loop;
		Use:
			TNT1 A 0
			{
				A_GiveInventory("PowerRatMorph",AAPTR_PLAYER1);
				A_TakeInventory("RatPotion",1,AAPTR_PLAYER1);
			}
			Fail;
	}
}

class RavenPowerups : CustomInventoryExt
{
	default
	{
		Inventory.MaxAmount 0;
		+Inventory.AutoActivate
	}
	States
	{
		Use:
			TNT1 A 0
			{
				A_GiveInventory("PowerRavenFlight", 1);
				//A_GiveInventory("PowerRavenInvisibility", 1);
			}
			Stop;
	}
}

class Infrared2 : PowerupGiver replaces Infrared
{
	Default
	{
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Powerup.Type "PowerLightAmp2";
		Inventory.PickupMessage "\c[gold]Oooh! These goggles actually me see in the dark. Neat...";
		Inventory.PickupSound "powerups/light";
	}
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
	}
}

class BlunderAxeSchematic : CustomInventoryExt
{
	Default
	{
		Height 12;
		Radius 6;
		Scale 0.375;
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]Heeeey... this looks like an upgrade document for the Blunderaxe? More shots? Stronger shots? Yes, please!";
		Inventory.PickupSound "Dinah/AllowMe";
	}
	
	States
	{
		Spawn:
			BSHM A -1;
			stop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("BlunderShotUpgrade",1);
			}
			stop;
	}
}

// Raven Specific Artifact Recreations :V
class ArtiInvisibilityNew : CustomInventoryExt replaces ArtiInvisibility
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 16;
		Inventory.InterHubAmount 16;
		Inventory.PickupFlash "PickupFlash";
		RenderStyle "Translucent";
		Alpha 0.4;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTISHDS";
		Inventory.PickupMessage "$TXT_ARTIINVISIBILITY";
		Tag "$TAG_ARTIINVISIBILITY";
	}
	States
	{
		Spawn:
			INVS A 350 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerGhost2"))
				{
					player.mo.SetInventory("PowerGhost2",1);
					let GhostItem = PowerGhost2(player.mo.FindInventory("PowerGhost2"));
					if (GhostItem) GhostItem.EffectTics = 60 * TICRATE;
				}
				else
				{
					let GhostItem = PowerGhost2(player.mo.FindInventory("PowerGhost2"));
					if (GhostItem) GhostItem.EffectTics += 60 * TICRATE;
				}
				//PowerGhost2
			}
			stop;
	}
}

class ArtiInvulnerabilityNew : CustomInventoryExt replaces ArtiInvulnerability
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 16;
		Inventory.InterHubAmount 16;
		Inventory.PickupFlash "PickupFlash";
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIIRIN";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY";
		Tag "$TAG_ARTIINVULNERABILITY";
	}
	States
	{
		Spawn:
			INVU ABCD 3 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerInvulnDD"))
				{
					player.mo.SetInventory("PowerInvulnDD",1);
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics = 30 * TICRATE;
				}
				else
				{
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics += 30 * TICRATE;
				}
			}
			stop;
	}
}

class ArtiInvulnerability2New : CustomInventoryExt replaces ArtiInvulnerability2
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 25;
		Inventory.InterHubAmount 25;
		Inventory.PickupFlash "PickupFlash";
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIDEFN";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY2";
		Tag "$TAG_ARTIDEFENDER";
	}
	States
	{
		Spawn:
			DEFN ABCD 3 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerInvulnDD"))
				{
					player.mo.SetInventory("PowerInvulnDD",1);
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics = 30 * TICRATE;
				}
				else
				{
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics += 30 * TICRATE;
				}
			}
			stop;
	}
}

class AfasDrop : CustomInventoryExt
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.NOATTENPICKUPSOUND
		+INVENTORY.UNCLEARABLE
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 4;
		Inventory.InterHubAmount 4;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "AFASZ0";
		Inventory.PickupMessage "\c[gold]W-woah! What in the devil are these?";
		Tag "Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 5 minutes when used however... Cannot be used again until said five minutes are up.";
	}
	
	States
	{
		Spawn:
			AFAS A -1 Bright;
			stop;
		Use:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem && !MiscItem.afasdroptimer)
				{
					A_TakeInventory("AfasDrop",1);
					A_StartSound("Dinah/What",CHAN_VOICE);
					MiscItem.afasdroptimer = (TICRATE * 5 * 60);
					MiscItem.NumOfAfasDrops++;
				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
			fail;
	}
}

class LegendaryMedicine : CustomInventoryExt
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.NOATTENPICKUPSOUND
		+INVENTORY.UNCLEARABLE
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 4;
		Inventory.InterHubAmount 4;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "LGMDZ0";
		Inventory.PickupMessage "\c[gold]W-woah! What in the devil are these?";
		Tag "Legendary Medicine: Gives an artificial level up. Halves current health when used.";
	}
	
	States
	{
		Spawn:
			LGMD A -1 Bright;
			stop;
		Use:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					A_TakeInventory("LegendaryMedicine",1);
					MiscItem.NumOfLegendMeds++;
				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
			fail;
	}
}

class KilletanteEffigy : Inventory
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		Inventory.DefMaxAmount;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "DAKEZ0";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "\c[gold]A Killetante... effigy? What.";
		Tag "Killetante Effigy: Summons a Killetante Soloist to fight for you for up to 45 seconds, with a buffed status.";
	}
	
	States
	{
		Spawn:
			DAKE ABCDE 4 Bright;
			Loop;
	}
	
	override bool Use (bool pickup)
	{
		bool effective = false;
		bool worked = false;
		bool success;
		actor summon;
		KilletanteSoloist summon2;
		//Console.Printf("Used Incant?");
		
		actor pp = actor(Owner);
		if (pp != null && pp.health > 0)
		{
			//Console.Printf("Player Use Attempt [Incant]?");
			[success, summon] = pp.A_SpawnItemEx("KilletanteSoloist",0,0,0,0.0,0.0,0.0,0,SXF_SETMASTER|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			if (summon && success)
			{
				//Console.Printf("Player Use Summon Attempt Phase 2 [Incant]?");
				summon2 = KilletanteSoloist(summon);
				if (summon2)
				{
					//Console.Printf("Player Use Summon Attempt Phase 3 [Incant]?");
					pp.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					pp.A_SpawnItemEx("MinotaurSmoke",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					pp.A_StartSound("monstersummon", 161, CHANF_DEFAULT);
					summon2.bFRIENDLY = true;
					summon2.bNOBLOCKMONST = true;
					summon2.bJUMPDOWN = true;
					summon2.IncantSummon = true;
					summon2.IncantSummonTimer = 1575; // summons her with FORTYFIVE seconds of time to exist
					summon2.reactive1 = random(1312,1313); // summons her with FORTYFIVE seconds of buff to use against enemies
					summon2.ChangeTID(1000);
					worked = true;
				}
				else
				{
					//Console.Printf("Player Use Summon Attempt Fail");
					summon.Destroy();
					worked = false;
				}
			}
			
			if (worked)
			{
				//Console.Printf("Worked?");
				pp.A_StartSound("MysticIncant", CHAN_ITEM);
				pp.A_StartSound("Dinah/There", CHAN_VOICE,CHANF_DEFAULT,frandom(1.125,1.25));
				effective = true;
			}
		}
		
		return effective;
	}
}