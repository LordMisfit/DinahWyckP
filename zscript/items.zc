class ExExInvBarItem : CustomInventoryExt
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
	}
}

class RandomAppleSpawnerAlways : RandomSpawner2
{
	default
	{
		//$Sprite "RNASA0"
		//$Category EE Random Spawners
		DropItem "GoldApple", 256, 56;
		DropItem "PlatinumApple", 256, 7;
		DropItem "PrismaApple", 256, 1;
	}
}

class RandomAppleSpawner : RandomSpawner2
{
	default
	{
		//$Sprite "RNASA0"
		//$Category EE Random Spawners
		DropItem "NoItemSpawn", 256, 448;
		DropItem "GoldApple", 256, 56;
		DropItem "PlatinumApple", 256, 7;
		DropItem "PrismaApple", 256, 1;
	}
}

class GraveItemRandomizer : RandomSpawner2
{
	default
	{
		//$Sprite "RNASA0"
		//$Category EE Random Spawners
		DropItem "NoItemSpawn", 256, 448;
		DropItem "GoldApple", 256, 56;
		DropItem "PlatinumApple", 256, 7;
		DropItem "PrismaApple", 256, 1;
	}
}

class CupOfRageSpawner : RandomSpawner2
{
	default
	{
		DropItem "CupOfRage", 256, 95;
		DropItem "CupOfGoldenRage", 256, 1;
	}
}

class CupOfRage : CustomInventoryExt
{
	default
	{
		Height 16;
		Radius 12;
		Scale 0.625;
		+FLOATBOB
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "\c[brick]A drink of this cup brings you anger... IP levels increased!";
		Inventory.PickupSound "misc/ragecup";
		CustomInventoryExt.PickUpVoice false;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		if (!CheckIPEnabled()) msg = "\c[brick]A drink of this cup brings you anger... healed a small chunk of health!\c-";
		return msg;
	}
	
	states
	{
		Spawn:
			ICUP ABCDEF 4 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = DDGlobalVariables.Get();
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				player.mo.A_StartSound("misc/ding1",301,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				player.mo.A_StartSound("misc/ding1",302,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ding1",303,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StartSound("misc/ragecup",308,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ragecup",309,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
				if (MiscItem)
				{
					if (!invoker.CheckIPEnabled())
					{
						int heal = (((MiscItem.MaxHealthTrue * frandompick(0.125)) * random(4,8)) * randompick(1,1,1,1,1,1,2,2,2,3));
						int basechance = 4;
						if (random(1,basechance) <= 1) heal *= random(2,4);
						int oldhealth = player.mo.health;
						int temphealth = player.mo.health;
						int healcap = MiscItem.MaxHealthTrue;
						if (temphealth > healcap) 
						{
							heal *= 0.25;
							healcap = (MiscItem.MaxHealthTrue * 3);
						}
						temphealth += heal;
						if (temphealth > healcap) temphealth = healcap;
						player.mo.health = player.health = temphealth;
						int healdiff = player.mo.health - oldhealth;
						if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
					}
					else
					{
						double ipgain = ((MiscItem.MaxItemPoints - MiscItem.ItemPoints) * randompick(1,1,1,1,1,1,2,2,2,3));
						ipgain *= frandompick(0.0875,0.1,0.1,0.1,0.1125);
						int basechance = 4;
						if (random(1,basechance) <= 1) 
						{
							ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
							if (random(1,basechance) <= 1)
							{
								ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
								if (random(1,basechance) <= 1)
								{
									ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
									if (random(1,basechance) <= 1)
									{
										ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
										if (random(1,basechance) <= 1)
										{
											ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
											if (random(1,basechance) <= 1)
											{
												ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
												if (random(1,basechance) <= 1)
												{
													ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
													if (random(1,basechance) <= 1)
													{
														ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
													}
												}
											}
										}
									}
								}
							}
						}
						invoker.A_AddIP(ipgain, ipgain, true, true, 1);
						
						int IPTimerBaseInc = random(3,5) * -35;
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer = IPTimerBaseInc;
																					else MiscItem.IPDissipateTimer += IPTimerBaseInc;
					}
				}
			}
			stop;
	}
}

class CupOfRageMax : CustomInventoryExt
{
	default
	{
		Height 16;
		Radius 12;
		Scale 1.5;
		+FLOATBOB
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "\c[brick]A drink of this cup brings you anger... IP levels maxed out!";
		Inventory.PickupSound "misc/ragecup";
		CustomInventoryExt.PickUpVoice false;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		if (!CheckIPEnabled()) msg = "\c[brick]A drink of this cup brings you anger... health overmaxed to 3x!\c-";
		return msg;
	}
	
	states
	{
		Spawn:
			FCUP ABCDEF 2 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = DDGlobalVariables.Get();
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				player.mo.A_StartSound("misc/ding1",301,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				player.mo.A_StartSound("misc/ding1",302,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ding1",303,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StartSound("misc/ding1",304,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.7,1.3));
				player.mo.A_StartSound("misc/ding1",305,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.6,1.4));
				player.mo.A_StartSound("misc/ragecup",308,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ragecup",309,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StartSound("misc/ragecup",310,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.7,1.3));
				player.mo.A_StartSound("misc/ragecup",311,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.6,1.4));
				if (MiscItem)
				{
					if (!invoker.CheckIPEnabled())
					{
						int oldhealth = player.mo.health;
						int temphealth = player.mo.health;
						if (temphealth < (MiscItem.MaxHealthTrue * 3)) player.mo.health = health = (MiscItem.MaxHealthTrue * 3);
					}
					else
					{
						double ipgain = MiscItem.MaxItemPoints;
						invoker.A_AddIP(ipgain, ipgain, true, true, 1);
						
						MiscItem.IPDissipateTimer = -2100;
					}
				}
			}
			stop;
	}
}

class CupOfGoldenRage : CustomInventoryExt
{
	default
	{
		Height 16;
		Radius 12;
		Scale 0.875;
		+FLOATBOB
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "\c[brick]A drink of this golden cup brings you anger... IP levels increased!\c- \c[gold]Maximum IP levels additionally increased!\c-";
		Inventory.PickupSound "misc/ragecup";
		CustomInventoryExt.PickUpVoice false;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		if (!CheckIPEnabled()) msg = "\c[brick]A drink of this golden cup brings you anger... healed a large chunk of health!\c-";
		return msg;
	}
	
	states
	{
		Spawn:
			ICP2 ABCDEF 4 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = DDGlobalVariables.Get();
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				player.mo.A_StartSound("misc/ding1",301,CHANF_DEFAULT,1.25,ATTN_NORM,1.0);
				player.mo.A_StartSound("misc/ding1",302,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ding1",303,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StartSound("misc/ding2",314,CHANF_DEFAULT,1.25,ATTN_NORM,1.0);
				player.mo.A_StartSound("misc/ding2",315,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ding2",316,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StartSound("misc/ragecup",308,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.9,1.1));
				player.mo.A_StartSound("misc/ragecup",309,CHANF_DEFAULT,1.25,ATTN_NORM,frandom(0.8,1.2));
				if (MiscItem)
				{
					if (!invoker.CheckIPEnabled())
					{
						int heal = (((MiscItem.MaxHealthTrue * frandompick(0.125)) * random(4,8)) * randompick(1,1,1,1,1,1,2,2,2,3));
						int basechance = 4;
						if (random(1,basechance) <= 1) heal *= random(2,4);
						int oldhealth = player.mo.health;
						int temphealth = player.mo.health;
						int healcap = MiscItem.MaxHealthTrue;
						if (temphealth > healcap) 
						{
							heal *= 0.5;
							healcap = (MiscItem.MaxHealthTrue * 3); 
						}
						temphealth += heal;
						if (temphealth > healcap) temphealth = healcap;
						player.mo.health = player.health = temphealth;
						int healdiff = player.mo.health - oldhealth;
						if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
					}
					else
					{
						MiscItem.MaxIPExtensions += 1;
						globalvars.MaxIPExtensions += 1;

						double ipgain = ((MiscItem.MaxItemPoints - MiscItem.ItemPoints) * randompick(1,1,1,1,1,1,2,2,2,3));
						ipgain *= frandompick(0.0875,0.1,0.1,0.1,0.1125);
						int basechance = 4;
						if (random(1,basechance) <= 1) 
						{
							ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
							if (random(1,basechance) <= 1)
							{
								ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
								if (random(1,basechance) <= 1)
								{
									ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
									if (random(1,basechance) <= 1)
									{
										ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
										if (random(1,basechance) <= 1)
										{
											ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
											if (random(1,basechance) <= 1)
											{
												ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
												if (random(1,basechance) <= 1)
												{
													ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
													if (random(1,basechance) <= 1)
													{
														ipgain += frandompick(2.5,2.5,2.5,2.5,2.5,5.0,5.0,5.0,5.0,7.5,7.5,7.5,10.0,10.0,12.5);
													}
												}
											}
										}
									}
								}
							}
						}
						ipgain *= 2.5;
						invoker.A_AddIP(ipgain, ipgain, true, true, 1);
						
						int IPTimerBaseInc = ((random(3,5) * -35) * 2.5);
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer = IPTimerBaseInc;
																					else MiscItem.IPDissipateTimer += IPTimerBaseInc;

					}
				}
			}
			stop;
	}
}

// Backpack
class ItemSatchel : CustomInventoryExt
{
	default
	{
		Height 26;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "\c[gold]This cute little \c[sapphire]satchel\c[gold] should let me hold more ammo and other junk...\c-";
		Inventory.PickupSound "misc/i_pkup";
		CustomInventoryExt.PickUpVoice false;
	}
	States
	{
		Spawn:
			DSTC A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				A_GiveInventory("Backpack");
				A_GiveInventory("BackpackTier1");
				if (!CountInv("PlayingHexen")) // You're only given a single pack at the start of Hexen mode and only its extra ammo, nothing else.
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/there",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					if (!CountInv("CandleWhip")) { A_GiveInventory("CandleWhip",1); }
					if (CountInv("CrazyBallDD") && random(1,10) <= 1) { A_GiveInventory("CzBall",1); }
					A_GiveInventory("CherryBombPickup",2);
					if (random(1,3) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,6) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,12) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					
					A_GiveInventory("SpinnerPickup",random(1,2));
					if (random(1,3) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					if (random(1,12) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					
					if (random(1,3) <= 2) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,6) <= 1) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,24) <= 1) { A_GiveInventory("BRocketPickup",1); }
				}
			}
			stop;
	}
}

class MegaSatchel : CustomInventoryExt
{
	default
	{
		Height 26;
		Scale 1.5;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "\c[gold]This massive \c[sapphire]satchel\c[gold] should let me hold a lot more ammo and other junk...\c-";
		Inventory.PickupSound "misc/i_pkup";
		CustomInventoryExt.PickUpVoice false;
	}
	States
	{
		Spawn:
			DSTC A 12;
			DSTC A 12 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				A_GiveInventory("Backpack");
				A_GiveInventory("Backpack");
				if (random(1,8) <= 7)
				{
					A_GiveInventory("Backpack");
					A_GiveInventory("Backpack");
				}
				if (random(1,4) <= 3)
				{
					A_GiveInventory("Backpack");
					A_GiveInventory("Backpack");
				}
				if (random(1,2) <= 1)
				{
					A_GiveInventory("Backpack");
					A_GiveInventory("Backpack");
				}
				A_GiveInventory("BackpackTier1");
				A_GiveInventory("BackPackTier2");
				if (!CountInv("PlayingHexen")) // You're only given a single pack at the start of Hexen mode and only its extra ammo, nothing else.
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/there",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					if (!CountInv("CandleWhip")) { A_GiveInventory("CandleWhip",1); }
					if (CountInv("CrazyBallDD") && random(1,4) <= 1) { A_GiveInventory("CzBall",1); }
					A_GiveInventory("CherryBombPickup",4);
					if (random(1,2) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,3) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,4) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,6) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,8) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					if (random(1,12) <= 1) { A_GiveInventory("CherryBombPickup",1); }
					
					A_GiveInventory("SpinnerPickup",random(1,2));
					if (random(1,3) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					if (random(1,6) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					if (random(1,12) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					if (random(1,18) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					if (random(1,24) <= 1) { A_GiveInventory("SpinnerPickup",1); }
					
					if (random(1,3) <= 2) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,6) <= 1) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,12) <= 2) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,18) <= 2) { A_GiveInventory("BRocketPickup",1); }
					if (random(1,24) <= 1) { A_GiveInventory("BRocketPickup",1); }
				}
			}
			stop;
	}
}

class PortalSatchel : ExExInvBarItem replaces ArtiBoostMana
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+FLOATBOB
		+DONTGIB
		+NOGRAVITY
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.Icon "DLSTI0";
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "(Got a Portal Satchel! Use it to fully replenish \c[gold]ALL\c- ammo when needed!)";
		Inventory.PickupFlash "PickupFlash";
		CustomInventoryExt.PickUpVoice true;
		Tag "Portal Satchel: Fills all ammo types to maximum when used.";
		Scale 1;
	}

	states
	{
		Spawn:
			DLST A -1;
			Stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				int giveamt = 999999;
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/there",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_GiveInventory("MalletAmmo", giveamt);
				A_GiveInventory("BlunderAmmo", giveamt);
				A_GiveInventory("EggAmmo", giveamt);
				A_GiveInventory("JackAmmo", giveamt);
				A_GiveInventory("PikeAmmo", giveamt);
				A_GiveInventory("VacAmmo", giveamt);
				A_GiveInventory("MusicAmmo", giveamt);
				if (!CountInv("CandleWhip")) A_GiveInventory("CandleWhip", 1);
				A_GiveInventory("CandleAmmo", giveamt);
			}
			Stop;
	}
}

//Apple
class GalaApple : CustomInventoryExt
{
	mixin HUDRecovery;
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "APPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Gala Apple";
		+DONTGIB
	}
	States
	{
		Spawn:
			APPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = player.mo.CountInv("PlayerMaxHP");
					if (ddafd_applesskilllevel && (player.mo.CountInv("IsDynDuchess") || player.mo.CountInv("IsAppetite") || player.mo.CountInv("IsCarnOfSouls") || player.mo.CountInv("IsWeddingCake"))) 
					{
						if (skill >= 3) temp3 *= 0.05;
						else if (ddafd_applesskilllevel > 1 && skill <= 1) temp3 *= 0.20;
						else temp3 *= 0.10;
					}
					else temp3 *= 0.10;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);

					A_StartSound("Dinah/eatapple",100);
					A_SetBlend("f1 ff f1",0.1,4);
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

class GalaAppleWeak : GalaApple
{
	States
	{
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = temp2;
					temp3 *= 0.05;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += (randompick(4,4,5,5,5,6,6,7) * 2.5);
					
					A_StartSound("Dinah/eatapple",100);
					A_SetBlend("f1 ff f1",0.1,random(4,6));
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

//Apple
class GalaApple_Flipped : GalaApple
{
	default
	{
		//$Category EE Props (Flipped)
		+NOGRAVITY
		Tag "Gala Apple (Flipped)";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			UPPL A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				if (temp1 < temp2)
				{
					int temp3 = player.mo.CountInv("PlayerMaxHP");
					temp3 *= 0.10;
					
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) MiscItem.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);

					A_StartSound("Dinah/eatapple",100);
					A_SetBlend("f1 ff f1",0.1,4);
					Console.Printf("\c[red]A tasty gala apple! \c[green]+%d HP", temp3);
					invoker.A_FadeOut(1.0,FTF_REMOVE);
				}
			}
			Fail;
	}
}

class GoldApple : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "GAPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Golden Apple: Gives +2 Maximum HP";
		+COUNTITEM
		+DONTGIB
	}
	
	States
	{
		Spawn:
			GAPL AA 5 NoDelay;
			GAPL A 5 bright Light("GOLDAPPLE");
			GAPL A 5;
			GAPL A 5 bright Light("GOLDAPPLE");
			GAPL A 5;
			GAPL AA 5 bright Light("GOLDAPPLE");
			loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 2;
				int inc2 = (inc * frandompick(2,2.5,3));
				inc2 += 10;
				int inc3 = randompick(0,0,1,1,2);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem2) MiscItem2.GoldApples += 1;
				
				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
					player.mo.A_GiveInventory("PlayerLUCK",inc3);
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				if (!exex_expenabled)
				{
					if (A_CheckDDGame())
					{
						if (skill <= 0) inc *= 2.0;
						if (skill == 1) inc *= 1.75;
						if (skill == 2) inc *= 1.5;
						if (skill == 3) inc *= 1.25;
						if (skill >= 4) inc *= 1.0;
						inc *= exex_nrpggeneraleffect;
					}
					else
					{
						if (skill <= 0) inc *= 4.0;
						if (skill == 1) inc *= 3.5;
						if (skill == 2) inc *= 3.0;
						if (skill == 3) inc *= 2.5;
						if (skill >= 4) inc *= 2.0;
					}
				}
				invoker.A_StatIncHud(inc,0);
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				
				int airinc = randompick(1,2,2,3,4);
				int massinc = randompick(0,1,1,2,3);
				if (globalvars) 
				{
					globalvars.AirBonusAdd += airinc;
					globalvars.MassBonusAdd += massinc;
				}
				if (MiscItem2) 
				{
					MiscItem2.AirBonusAdd += airinc;
					MiscItem2.MassBonusAdd += massinc;
				}

				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				int dashinc = randompick(0,1,1);
				if (MiscItem)
				{
					MiscItem.ExtraDashCharge += dashinc;
					if (!exex_expenabled)
					{
						if (A_CheckDDGame())
						{
							if (skill <= 0) dashinc *= 2.0;
							if (skill == 1) dashinc *= 1.75;
							if (skill == 2) dashinc *= 1.5;
							if (skill == 3) dashinc *= 1.25;
							if (skill >= 4) dashinc *= 1.0;
							dashinc *= exex_nrpggeneraleffect;
						}
						else
						{
							if (skill <= 0) dashinc *= 4.0;
							if (skill == 1) dashinc *= 3.5;
							if (skill == 2) dashinc *= 3.0;
							if (skill == 3) dashinc *= 2.5;
							if (skill >= 4) dashinc *= 2.0;
						}
					}
					invoker.A_StatIncHud(dashinc,1);
				}
				if (MiscItem2) MiscItem2.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);

				A_StartSound("player/statsup6",111,CHANF_DEFAULT,frandom(0.335,0.5),ATTN_NORM,frandom(0.8,1.25));
				A_StartSound("Dinah/eatapple",100);
				A_StartSound("Dinah/eatapple",101,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10));
				A_SetBlend("f1 ff f1",0.25,10);
				Console.Printf("\c[red]A Golden gala apple! \c[green]+%d HP! \c[gold]+%d Maximum HP!", inc2, inc);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class MHArtifactApple : GoldApple
{
	States
	{
		Spawn:
			TNT1 A 5 NoDelay;
			stop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 3;
				int inc2 = inc;
				int inc3 = randompick(1,1,2,2,3);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem2) MiscItem2.MHArtifactApples += 1;
				
				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
					player.mo.A_GiveInventory("PlayerLUCK",inc3);
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				if (!exex_expenabled)
				{
					if (A_CheckDDGame())
					{
						if (skill <= 0) inc *= 2.0;
						if (skill == 1) inc *= 1.75;
						if (skill == 2) inc *= 1.5;
						if (skill == 3) inc *= 1.25;
						if (skill >= 4) inc *= 1.0;
						inc *= exex_nrpggeneraleffect;
					}
					else
					{
						if (skill <= 0) inc *= 4.0;
						if (skill == 1) inc *= 3.5;
						if (skill == 2) inc *= 3.0;
						if (skill == 3) inc *= 2.5;
						if (skill >= 4) inc *= 2.0;
					}
				}
				invoker.A_StatIncHud(inc,0);
				player.mo.health = player.health = temp1;
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				
				int airinc = randompick(3,3,4,4,5);
				int massinc = randompick(2,2,3,3,4);
				if (globalvars) 
				{
					globalvars.AirBonusAdd += airinc;
					globalvars.MassBonusAdd += massinc;
				}
				if (MiscItem2) 
				{
					MiscItem2.AirBonusAdd += airinc;
					MiscItem2.MassBonusAdd += massinc;
				}

				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				int dashinc = randompick(1,1,1,2);
				if (MiscItem)
				{
					MiscItem.ExtraDashCharge += dashinc;
					if (!exex_expenabled)
					{
						if (A_CheckDDGame())
						{
							if (skill <= 0) dashinc *= 2.0;
							if (skill == 1) dashinc *= 1.75;
							if (skill == 2) dashinc *= 1.5;
							if (skill == 3) dashinc *= 1.25;
							if (skill >= 4) dashinc *= 1.0;
							dashinc *= exex_nrpggeneraleffect;
						}
						else
						{
							if (skill <= 0) dashinc *= 4.0;
							if (skill == 1) dashinc *= 3.5;
							if (skill == 2) dashinc *= 3.0;
							if (skill == 3) dashinc *= 2.5;
							if (skill >= 4) dashinc *= 2.0;
						}
					}
					invoker.A_StatIncHud(dashinc,1);
				}
			}
			stop;
	}
}

class PlatinumApple : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "PAPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Platinum Apple: Gives +5 Maximum HP";
		+COUNTITEM
		+DONTGIB
	}
	
	States
	{
		Spawn:
			PAPL A 5 NoDelay;
			PAPL A 5 Bright Light("PLATAPPLE");
			PAPL A 5;
			PAPL A 5 Bright Light("PLATAPPLE");
			PAPL A 5;
			PAPL A 5 Bright Light("PLATAPPLE");
			PAPL A 5;
			PAPL AAA 5 Bright Light("PLATAPPLE");
			loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 5;
				int inc2 = (inc * frandompick(2,2.5,3));
				inc2 += 10;
				int inc3 = randompick(1,1,1,1,2,2,3);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem2) MiscItem2.PlatinumApples += 1;

				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
					player.mo.A_GiveInventory("PlayerLUCK",inc3);
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				if (!exex_expenabled)
				{
					if (A_CheckDDGame())
					{
						if (skill <= 0) inc *= 2.0;
						if (skill == 1) inc *= 1.75;
						if (skill == 2) inc *= 1.5;
						if (skill == 3) inc *= 1.25;
						if (skill >= 4) inc *= 1.0;
						inc *= exex_nrpggeneraleffect;
					}
					else
					{
						if (skill <= 0) inc *= 4.0;
						if (skill == 1) inc *= 3.5;
						if (skill == 2) inc *= 3.0;
						if (skill == 3) inc *= 2.5;
						if (skill >= 4) inc *= 2.0;
					}
				}
				invoker.A_StatIncHud(inc,0);
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				
				int airinc = randompick(2,2,3,3,4,4,5);
				int massinc = randompick(1,1,2,2,3,3,4);
				if (globalvars) 
				{
					globalvars.AirBonusAdd += airinc;
					globalvars.MassBonusAdd += massinc;
				}
				if (MiscItem2) 
				{
					MiscItem2.AirBonusAdd += airinc;
					MiscItem2.MassBonusAdd += massinc;
				}

				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				int dashinc = randompick(2,2,2,3,3);
				if (MiscItem)
				{
					if (!exex_expenabled)
					{
						if (A_CheckDDGame())
						{
							if (skill <= 0) dashinc *= 2.0;
							if (skill == 1) dashinc *= 1.75;
							if (skill == 2) dashinc *= 1.5;
							if (skill == 3) dashinc *= 1.25;
							if (skill >= 4) dashinc *= 1.0;
							dashinc *= exex_nrpggeneraleffect;
						}
						else
						{
							if (skill <= 0) dashinc *= 4.0;
							if (skill == 1) dashinc *= 3.5;
							if (skill == 2) dashinc *= 3.0;
							if (skill == 3) dashinc *= 2.5;
							if (skill >= 4) dashinc *= 2.0;
						}
					}
					invoker.A_StatIncHud(dashinc,1);
					MiscItem.ExtraDashCharge += dashinc;
				}
				if (MiscItem2) MiscItem2.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);

				A_StartSound("player/statsup7",111,CHANF_DEFAULT,frandom(0.335,0.5),ATTN_NORM,frandom(0.8,1.25));
				A_StartSound("Dinah/eatapple",100);
				A_StartSound("Dinah/eatapple",101,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10));
				A_StartSound("Dinah/eatapple",102,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.825,1.175));
				A_StartSound("Dinah/eatapple",103,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.75,1.25));
				A_SetBlend("f1 ff f1",0.625,25);
				Console.Printf("\c[red]A Platinum gala apple! \c[green]+%d HP! \c[gold]+%d Maximum HP!", inc2, inc);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class PrismaApple : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "SAPLA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Tag "Prismatic Apple: Gives +20 Maximum HP";
		+COUNTITEM
		+FLOATBOB
		+DONTGIB
	}
	States
	{
		Spawn:
			SAPL A 5 NoDelay Bright Light("PRISMAAPPLE1");
			SAPL A 5 Bright Light("PRISMAAPPLE1");
			SAPL A 5 Bright Light("PRISMAAPPLE2");
			SAPL A 5 Bright Light("PRISMAAPPLE2");
			SAPL A 5 Bright Light("PRISMAAPPLE3");
			SAPL A 5 Bright Light("PRISMAAPPLE3");
			SAPL A 5 Bright Light("PRISMAAPPLE4");
			SAPL A 5 Bright Light("PRISMAAPPLE4");
			SAPL A 5 Bright Light("PRISMAAPPLE5");
			SAPL A 5 Bright Light("PRISMAAPPLE5");
			SAPL A 5 Bright Light("PRISMAAPPLE6");
			SAPL A 5 Bright Light("PRISMAAPPLE6");
			SAPL A 5 Bright Light("PRISMAAPPLE7");
			SAPL A 5 Bright Light("PRISMAAPPLE7");
			SAPL A 5 Bright Light("PRISMAAPPLE6");
			SAPL A 5 Bright Light("PRISMAAPPLE5");
			SAPL A 5 Bright Light("PRISMAAPPLE4");
			SAPL A 5 Bright Light("PRISMAAPPLE3");
			SAPL A 5 Bright Light("PRISMAAPPLE2");
			loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp2 = player.mo.CountInv("PlayerMaxHP");
				int temp3 = temp2 * 3.0;
				int inc = 20;
				int inc2 = (inc * frandompick(2,2.5,3));
				inc2 += 40;
				int inc3 = randompick(4,4,4,4,8,8,12);
				
				let globalvars = DDGlobalVariables.Get();
				let MiscItem2 = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem2) MiscItem2.PrismaticApples += 1;

				temp2 += inc;
				temp1 += inc2;
				temp3 = temp2 * 3.0;
				if (temp1 > temp3) temp1 = temp3;
				if (MiscItem2) 
				{
					MiscItem2.HealthBonusAdd += inc;
					MiscItem2.PlayerLuck += inc3;
					player.mo.A_GiveInventory("PlayerLUCK",inc3);
				}
				if (globalvars) 
				{
					globalvars.HealthBonusAdd += inc;
					globalvars.PlayerLuck += inc3;
				}
				if (!exex_expenabled)
				{
					if (A_CheckDDGame())
					{
						if (skill <= 0) inc *= 2.0;
						if (skill == 1) inc *= 1.75;
						if (skill == 2) inc *= 1.5;
						if (skill == 3) inc *= 1.25;
						if (skill >= 4) inc *= 1.0;
						inc *= exex_nrpggeneraleffect;
					}
					else
					{
						if (skill <= 0) inc *= 4.0;
						if (skill == 1) inc *= 3.5;
						if (skill == 2) inc *= 3.0;
						if (skill == 3) inc *= 2.5;
						if (skill >= 4) inc *= 2.0;
					}
				}
				invoker.A_StatIncHud(inc,0);
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				player.mo.A_SetInventory("PlayerMaxHP",temp2);
				
				int airinc = randompick(5,7,8,9,11,12,14);
				int massinc = randompick(3,3,6,6,9,9,12);
				if (globalvars) 
				{
					globalvars.AirBonusAdd += airinc;
					globalvars.MassBonusAdd += massinc;
				}
				if (MiscItem2) 
				{
					MiscItem2.AirBonusAdd += airinc;
					MiscItem2.MassBonusAdd += massinc;
				}

				let MiscItem = PlayerDashJump(player.mo.FindInventory("PlayerDashJump"));
				int dashinc = randompick(6,6,6,9,9);
				if (MiscItem)
				{
					if (!exex_expenabled)
					{
						if (A_CheckDDGame())
						{
							if (skill <= 0) dashinc *= 2.0;
							if (skill == 1) dashinc *= 1.75;
							if (skill == 2) dashinc *= 1.5;
							if (skill == 3) dashinc *= 1.25;
							if (skill >= 4) dashinc *= 1.0;
							dashinc *= exex_nrpggeneraleffect;
						}
						else
						{
							if (skill <= 0) dashinc *= 4.0;
							if (skill == 1) dashinc *= 3.5;
							if (skill == 2) dashinc *= 3.0;
							if (skill == 3) dashinc *= 2.5;
							if (skill >= 4) dashinc *= 2.0;
						}
					}
					invoker.A_StatIncHud(dashinc,1);
					MiscItem.ExtraDashCharge += dashinc;
				}
				if (MiscItem2) MiscItem2.HPRegenBoostTimer += (randompick(45,50,50,55,55,60,65) * 2.5);

				A_StartSound("player/statsup7",112,CHANF_DEFAULT,frandom(0.558,0.667),ATTN_NORM,frandom(0.9,1.125));
				A_StartSound("player/statsup7",111,CHANF_DEFAULT,frandom(0.335,0.5),ATTN_NORM,frandom(0.8,1.25));
				A_StartSound("Dinah/eatapple",100);
				A_StartSound("Dinah/eatapple",101,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10));
				A_StartSound("Dinah/eatapple",102,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.825,1.175));
				A_StartSound("Dinah/eatapple",103,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.75,1.25));
				A_StartSound("Dinah/eatapple",104,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.625,1.375));
				A_StartSound("Dinah/eatapple",105,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.55,1.45));
				A_SetBlend("f1 ff f1",0.975,92);
				Console.Printf("\c[red]A Prismatic gala apple! \c[green]+%d HP! \c[gold]+%d Maximum HP!", inc2, inc);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class CupOfTea : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "TCUPA0";
		Tag "Cup of Tea";
	}
	states
	{
		Spawn:
			TCUP A 0 NoDelay
			{
			}
		Idle:
			TCUP BC 5 Bright
			{
				A_SetTics(random(3,5));
			}
			loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= frandompick(0.015,0.0175,0.0175,0.02,0.02,0.02,0.02,0.02,0.02,0.0225,0.0225,0.025);
				if (temp3 < 1) temp3 = 1;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += (randompick(1,1,1,2) * 2.5);

				A_StartSound("Tea/Sipping",CHAN_VOICE);
				A_SetBlend("f1 ff f1",0.1,random(3,4));
				Console.Printf("\c[red]A Cup of Tea! \c[green]+%d (Over)HP", temp3);
			}
			stop;
	}
}

class FoodPlateFruit : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODB0";
		Tag "Food Plate (Fruit)";
	}
	States
	{
		Spawn:
			FOOD B -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 0.10;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				if (MiscItem) MiscItem.HPRegenBoostTimer += (randompick(9,10,10,11,11,12,13) * 2.5);
				
				player.mo.A_GiveInventory("PowerFruitBuff");
				player.mo.A_GiveInventory("PowerFruitBuff2");
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/eat",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f1 ff f1",0.1,random(4,6));
				Console.Printf("\c[red]Food Plate (Fruit)! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class PigRoastDish : CustomInventoryExt
{
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODA0";
		Tag "Food Plate (Roasted Pig)";
	}
	States
	{
		Spawn:
			FOOD A 0 NoDelay
			{
				if (random(1,16) == 1) { invoker.A_SpawnItemEx("PigRoastDishExtra",0.0,0.0,0.0,frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),SXF_NOCHECKPOSITION); }
				invoker.A_SpawnItemEx("PigRoastDishExtra",0.0,0.0,0.0,frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),frandompick(-2.5,-1.25,0.25,0.25,1.25,2.5),SXF_NOCHECKPOSITION);
			}
		Idle:
			FOOD A -1 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 0.50;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				if (MiscItem) MiscItem.HPRegenBoostTimer += (random(45,65) * 2.5);

				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/eat",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f1 ff f1",0.1,random(4,6));
				player.mo.A_GiveInventory("PowerRoastBuff");
				Console.Printf("\c[red]Ate a dish of Roasted Pig! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class GourmetMeal : CustomInventoryExt
{
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		//+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.Icon "FOODY0";
		Tag "Food Plate (Gourmet Meal)";
	}
	States
	{
		Spawn:
			FOOD Z 0 NoDelay
			{
			}
		Idle:
			FOOD Y -1 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 2.00;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += (random(225,325) * 2.5);

				double maskpitch = 1.00;
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/eatgourmet",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				else
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/eat",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f1 ff f1",0.1,random(10,15));
				player.mo.A_GiveInventory("PowerMealBuff");
				player.mo.A_GiveInventory("PowerMealBuff2");
				Console.Printf("\c[red]Ate a massive Gourmet Meal! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class SludgieBonus : GourmetMeal
{
	States
	{
		Spawn:
			FOOD Z 0 NoDelay
			{
			}
		Idle:
			FOOD Y -1 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 3.0);

				int temp3 = temp4;
				temp3 *= 3.00;
					
				temp1 += temp3;
				if (temp1 > temp2) temp1 = temp2;
				player.mo.health = player.health = temp1;
				int healdiff = player.mo.health - oldhealth;
				if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MiscItem.HPRegenBoostTimer += (random(225,325) * 3.75);

				double maskpitch = 1.00;
				A_StopSound(CHAN_VOICE);
				A_StartSound("Dinah/eat",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				A_SetBlend("f1 ff f1",0.1,random(10,15));
				player.mo.A_GiveInventory("PowerMealBuff");
				player.mo.A_GiveInventory("PowerMealBuff");
				player.mo.A_GiveInventory("PowerMealBuff2");
				player.mo.A_GiveInventory("PowerMealBuff2");
				Console.Printf("\c[red]Ate from the sludgie machine! \c[green]+%d (Over)HP", temp3);
				//invoker.A_FadeOut(1.0,FTF_REMOVE);
			}
			stop;
	}
}

class PigRoastDishExtra : PigRoastDish
{
	States
	{
		Spawn:
			FOOD A -1 Bright;
			Loop;
	}
}

class MiniBerserk : CustomInventoryExt
{
	default
	{
		//$Sprite "MBSKA0"
		//$Category Powerups
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\c[gold]'W-Woah!! One jab of this thing and my body's gone into hyperdrive and my body's fairly healed!' \c[red]Melee Attacks Deal \c[purple]x10\c[red] Damage!";
		Inventory.PickupSound "";
	}
	
	States
	{
		Spawn:
			MBSK A -1 NoDelay;
		Pickup:
			TNT1 A 0
			{
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 0.25;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				}
				player.mo.A_GiveInventory("AngerLevelEventN",randompick(0,0,0,0,1,1,1,2));
				
				A_StartSound("getberserkpack",CHAN_BODY);
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f0 f0 f0",0.2,random(2,3));
				if (!player.mo.CountInv("PowerStrengthDD"))
				{
					player.mo.SetInventory("PowerStrengthDD",1);
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics = int(37.5 * TICRATE);
				}
				else
				{
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics += int(37.5 * TICRATE);
				}
			}
			Stop;
	}
}

class BerserkNew : CustomInventory replaces Berserk
{
	mixin HUDRecovery;
	default
	{
		+COUNTITEM
		+DONTGIB
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	
	override void Tick()
	{
		super.Tick();
		if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1 &&
				level.mapname == "MAP01" &&
				(cursector.Index() == 25321 ||
				 cursector.Index() == 33226 ||
				 cursector.Index() == 33224 ||
				 cursector.Index() == 33223))
		{
			A_SetSize(10,8,false);
		}
		
	}
	
	States
	{
		Spawn:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 1.00;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				}
				player.mo.A_GiveInventory("AngerLevelEventN",randompick(1,1,1,1,2,2,2,3));
				
				A_StartSound("getberserkpack",CHAN_BODY);
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f0 f0 f0",0.2,random(8,12));
				if (!player.mo.CountInv("PowerStrengthDD"))
				{
					player.mo.SetInventory("PowerStrengthDD",1);
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics = 150 * TICRATE;
				}
				else
				{
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics += 150 * TICRATE;
				}
				if (prevtemp1 < temp2) Console.Printf("\c[gold]'W-Woah!! One jab of this thing and my body's gone into hyperdrive and my body's healed!' \c[red]Melee Attacks Deal \c[purple]x10\c[red] Damage! \c[green]HP restored to %d%% of max!", perc);
													else Console.Printf("\c[gold]'W-Woah!! One jab of this thing and my body's gone into hyperdrive and my body's healed!' \c[red]Melee Attacks Deal \c[purple]x10\c[red] Damage!");
			}
			Stop;
	}
}

// A more "artifact" style version of the Berserk Pack [for Heretic/Hexen mode, etc]
class BerserkSphere : BerserkNew
{
	default
	{
		+FLOATBOB
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			BERS ABCDEFGH 3 Bright;
			loop;
		Pickup:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 1.00;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				}
				player.mo.A_GiveInventory("AngerLevelEventN",randompick(1,1,1,1,2,2,2,3));
				
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_SetBlend("f0 f0 f0",0.2,random(8,12));
				if (!player.mo.CountInv("PowerStrengthDD"))
				{
					player.mo.SetInventory("PowerStrengthDD",1);
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics = 150 * TICRATE;
				}
				else
				{
					let BerserkItem = PowerStrengthDD(player.mo.FindInventory("PowerStrengthDD"));
					if (BerserkItem) BerserkItem.EffectTics += 150 * TICRATE;
				}
				if (prevtemp1 < temp2) Console.Printf("\c[gold]'W-Woah!! One touch of this sphere and my body's gone into hyperdrive and my body's healed!' \c[red]Melee Attacks Deal \c[purple]x10\c[red] Damage! \c[green]HP restored to %d%% of max!", perc);
													else Console.Printf("\c[gold]'W-Woah!! One touch of this sphere and my body's gone into hyperdrive and my body's healed!' \c[red]Melee Attacks Deal \c[purple]x10\c[red] Damage!");
			}
			Stop;
	}
}

// Turkey Dinner [Mystic Urn esque item that heals overhealth as well :P]
class TurkeyDinner : ExExInvBarItem
{
	default
	{
		//$Category EE Inventory Items
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		Inventory.PickupSound "Dinah/giggle";
		Inventory.Amount 1;
		Inventory.MaxAmount 6;
		Inventory.InterHubAmount 6;
		Inventory.PickupMessage "\c[gold]Mmmmm! A delicious Turkey Dinner!\c- \c[green](Eat for Health and a 'well fed' buff)";
		Inventory.Icon "FOODD0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Turkey Dinner: Heals 45-55% Health (up to 300% of Maximum) and a gives a 'well fed' buff.";
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		bool IPReqsMet = false;
		string itemname = GetClassName();
		if (MiscItem && MiscItem.ItemPoints >= A_GetIPCost(10) && MiscItem.IPUseMode) IPReqsMet = true;
		string tagg = "Turkey Dinner";
		if (player.CountInv(itemname) > 0)
		{
			tagg.AppendFormat(": \c[fire][Over]\c[brick]heals");
			if (IPReqsMet) tagg.AppendFormat("\c[brick] \c[fire][\c-96-106\c[fire]]\c-");
								else tagg.AppendFormat("\c[brick] 45-55");
			tagg.AppendFormat("\c[brick]% HP\c- (up to 300%% of Max) and a gives a \c[sapphire]'well fed' buff\c-.");
		}
		else tagg.AppendFormat(" \c[purple][you must have one or more of this item to see its effect(s)]\c-");
		SetTag(tagg);
		super.Tick();
	}

	States
	{
		Spawn:
			FOOD D -1;
			stop;
		Use:
			TNT1 A 0 
			{
				A_UseTurkeyDinner();
			}
			fail;
	}
}

//Goblet
class AppleWine : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.PickupSound "Dinah/giggle";
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 8
		Inventory.InterHubAmount 16; // 8
		Inventory.PickupMessage "\c[gold]'Hehehe... Sweet apple wine!'\c- \c[green](Drink for Health and Brief buff)\c-";
		Inventory.Icon "GOBLI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Apple Wine Goblet: Heals 18-22% Health and Gives Defense Buff up to 4 tiers. Cannot be drank when buff is at max.";
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		bool IPReqsMet = false;
		string itemname = GetClassName();
		if (MiscItem && MiscItem.ItemPoints >= A_GetIPCost(9) && MiscItem.IPUseMode) IPReqsMet = true;
		string tagg = "Apple Wine Goblet";
		if (player.CountInv(itemname) > 0)
		{
			if (player.health >= MiscItem.MaxHealthTrue)
			{
				tagg.AppendFormat(": \c[fire]Over\c[brick]heals");
				if (IPReqsMet) tagg.AppendFormat("\c[brick] \c[fire][\c-6.75-8.25\c[fire]]\c-");
									else tagg.AppendFormat("\c[brick] 4.5-5.5");
			}
			else
			{
				tagg.AppendFormat(": \c[brick]Heals");
				if (IPReqsMet) tagg.AppendFormat("\c[brick] \c[fire][\c-29.25-30.75\c[fire]]\c-");
									else tagg.AppendFormat("\c[brick] 18-22");
			}
			tagg.AppendFormat("\c[brick]% HP\c- and Gives \c[sapphire]Defense Buff\c- up to ");
			if (IPReqsMet) tagg.AppendFormat("\c[fire][\c-5\c[fire]]\c-");
								else tagg.AppendFormat("4");
			tagg.AppendFormat(" tiers.");
			if (IPReqsMet) tagg.AppendFormat(" \c[fire][\c-Also gives \c[green]22-28 Armor Points\c-, and can increase armor tier if armor is raised high enough.\c[fire]]\c-");
			tagg.AppendFormat(" \c[red]Cannot be drank when buff is at max.\c-");
		}
		else tagg.AppendFormat(" \c[purple][you must have one or more of this item to see its effect(s)]\c-");
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			GOBL ABC 6 bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_UseAppleWine();
			}
			fail;
	}
}

class AppleWine_Display : CustomInventoryExt
{
	default
	{
		Height 20;
		Radius 20;
		+DONTGIB
		+NOGRAVITY
		+FLOATBOB
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]'Hehehe... Sweet apple wine!'\c- \c[green](Drink for Health and Brief buff)\c-";
		CustomInventoryExt.PickUpVoice true;
		Tag "Apple Wine Goblet (Display)";
	}
	
	States
	{
		Spawn:
			GOBL ABC 6 bright;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("AppleWine",1);
			Stop;
	}
}

class AppleWine_Flipped : CustomInventoryExt
{
	default
	{
		//$Category EE Props (Flipped)
		Height 20;
		Radius 20;
		+DONTGIB
		+COUNTITEM
		+NOGRAVITY
		+FLOATBOB
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]'Hehehe... Sweet apple wine!'\c- \c[green](Drink for Health and Brief buff)\c-";
		CustomInventoryExt.PickUpVoice true;
		Tag "Apple Wine Goblet (Flipped)";
	}
	States
	{
		Spawn:
			UOBL ABC 6 bright;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("AppleWine",1);
			Stop;
	}
}

//Cherry Bomb
class FireTrail : EEProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			FTRL ABCDE 4 BRIGHT;
			Stop;
	}
}

class IceTrail : EEProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			ITRL ABCDE 4 BRIGHT;
			Stop;
	}
}

class EffigyDinah : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.Icon "EFDII0";
		Inventory.PickupMessage "\c[gold]'This doll... it's an effigy of me... But why though...?'\c-";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.MaxAmount 1;
		Tag "Dinah's Effigy: A momento of the loss of one's life.";
		+FLOATBOB;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			EFDI A 10
			{
				if (!invoker.A_CheckUOHYM()) Destroy();
			}
			Loop;
		Use:
			TNT1 A 0
			{
				if (invoker.A_CheckUOHYM())
				{
					actor player = players[0].mo;
					let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
					DDPlayerPawn playpawn;
					playpawn = DDPlayerPawn(player);
					if (playpawn && playpawn.hasDied)
					{
						if (MiscItem && MiscItem.CanTalkUnderwater)
						{
							double maskpitch = 1.00;
							if (player.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
							player.A_StopSound(CHAN_VOICE);
							player.A_StartSound("Dinah/What",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						}
						playpawn.hasDied = 0;
						playpawn.clinicstart = 0;
						playpawn.deathtimer = 0;
						playpawn.deadtimer = 0;
						playpawn.deathtimer_b = 0;
						playpawn.revivebeattimer = 0;
						A_TakeInventory("EffigyDinah",1);
						if (random(1,256) > 192)
						{
							A_StartSound("misc/ammodrain",CHAN_ITEM,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(0.8,0.9));
							A_SpawnItemEx("EffigyDinah",7802,-9016,16,0.0,0.0,0.0,0.0,SXF_ABSOLUTEPOSITION|SXF_NOCHECKPOSITION,0);
						}
					}
					else A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
			Fail;
	}
}

class CherryBombPickup : ExExInvBarItem
{
	default
	{
		//$Category EE Fireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 24; // 12
		Inventory.InterHubAmount 24; // 12
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]Nice! A Cherry Bomb!\c-";
		Inventory.Icon "CBOMZ0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Cherry Bomb: Thrown at Enemies and explodes. Berserk effects its' arc/distance and impact damage. Can deal self-damage via AOE.";
		Scale 0.8;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		int rand = random(1,6);
		if (rand == 1) msg = "\c[gold]Nice!\c-";
		if (rand == 2) msg = "\c[gold]Yes!\c-";
		if (rand == 3) msg = "\c[gold]Yay!\c-";
		if (rand == 4) msg = "\c[gold]Neat!\c-";
		if (rand == 5) msg = "\c[gold]Awesome!\c-";
		if (rand == 6) msg = "\c[gold]Cool!\c-";
		msg.AppendFormat("\c[gold] A Cherry Bomb!\c-");
		return msg;
	}
	
	override void Tick()
	{
		string ico = "CBOMZ0";
		actor player = players[0].mo;
		if (player.CountInv("CBombUpgrade") == 1) ico = "CBOMY0";
		if (player.CountInv("CBombUpgrade") == 2) ico = "CBOMX0";
		if (player.CountInv("CBombUpgrade") >= 3) ico = "CBOMW0";

		icon = TexMan.CheckForTexture(ico, TexMan.TYPE_MiscPatch);
		
		string tagg = "Cherry Bomb";
		if (player.CountInv("CBombUpgrade") == 1) tagg.AppendFormat(" [L1]");
		if (player.CountInv("CBombUpgrade") == 2) tagg.AppendFormat(" [L2]");
		if (player.CountInv("CBombUpgrade") >= 3) tagg.AppendFormat(" [L3]");
		tagg.AppendFormat(": Thrown at Enemies and explodes. Berserk effects its' arc/distance and impact damage. Can deal self-damage via AOE.");
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			CBOP A 0 NoDelay
			{
				actor player = players[0].mo;
				if (random(1,2048) <= 1 && player.CountInv("CBombUpgrade") < 3)
				{
					A_SpawnItemEx("CherryBombSchematic",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					Thing_Remove(0); 
				}
			}
		Idle:
			CBOP A -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerATK = 0;
				int TruePlayerLevel = A_GetPlayerLvl();
				if (exex_expenabled && MiscItem) TruePlayerATK = MiscItem.TruePlayerATK;
				let globalvars = DDGlobalVariables.Get();
				double throwpowerxy = frandom(14.0,18.0);
				double throwpowerz = frandom(2.75,3.25);
				double throwmulvelext = frandom(1.00,1.125);
				double throwheightz = -2;
				double throwminangle = -3.5;
				double throwmaxangle = 3.5;
				if (player.ReadyWeapon is "HandToHand")
				{
					if (player.mo.CountInv("FistPlayerBlockItem"))
					{
						throwpowerxy *= frandom(0.325,0.55);
						throwpowerz *= frandom(0.375,0.5);
						throwmulvelext = frandom(1.00,1.03125);
						throwminangle *= 0.25;
						throwmaxangle *= 0.25;
					}
					else
					{
						throwpowerxy *= frandom(1.0,1.25);
						throwpowerz *= frandom(0.875,1.125);
						throwmulvelext = frandom(1.00,1.00);
						throwminangle *= 0.1667;
						throwmaxangle *= 0.1667;
					}
				}
				if (player.ReadyWeapon is "CricketBat")
				{
					if (player.mo.CountInv("IsInBatGuardFrame"))
					{
						throwpowerxy *= frandom(0.45,0.725);
						throwpowerz *= frandom(0.525,0.65);
						throwmulvelext = frandom(1.00,1.0625);
						throwminangle *= 0.667;
						throwmaxangle *= 0.667;
					}
					else
					{
						throwpowerxy *= frandom(0.675,0.8625);
						throwpowerz *= frandom(0.7375,0.825);
						throwmulvelext = frandom(1.00,1.03125);
						throwminangle *= 0.334;
						throwmaxangle *= 0.334;
					}
				}
				if (player.ReadyWeapon is "EvilWarriorShield")
				{
					if (player.mo.CountInv("EWShieldDefendMode"))
					{
						throwpowerxy *= frandom(0.75,0.925);
						throwpowerz *= frandom(0.825,0.90);
						throwmulvelext = frandom(1.00,1.09375);
						throwminangle *= 0.875;
						throwmaxangle *= 0.875;
					}
				}
				double throwmulvelxy = throwpowerxy * 0.01;
				double throwmulvelz = throwpowerz * 0.01;
				if (MiscItem)
				{
					if (exex_expenabled)
					{
						throwpowerxy += (((TruePlayerLevel * throwmulvelxy) + (TruePlayerATK * throwmulvelxy)) * throwmulvelext);
						throwpowerz += (((TruePlayerLevel * throwmulvelz) + (TruePlayerATK * throwmulvelz)) * throwmulvelext);
						throwminangle *= (1.0 - (TruePlayerLevel * 0.01875));
						throwmaxangle *= (1.0 - (TruePlayerLevel * 0.01875));
					}
					else
					{
						if ((player.mo.CountInv("IsDynDuchess") || player.mo.CountInv("IsAppetite") || player.mo.CountInv("IsCarnOfSouls") || player.mo.CountInv("IsWeddingCake")))
						{
							double PerkFactor2 = 0.0;
							if (MiscItem.DD_RoseMother) PerkFactor2 += 0.01875;
							if (MiscItem.DD_GameMother) PerkFactor2 += 0.01875;
							if (MiscItem.DD_MossMother) PerkFactor2 += 0.01875;
							if (MiscItem.DD_GlobeMother) PerkFactor2 += 0.01875;
							if (MiscItem.DD_SphinxMother) PerkFactor2 += 0.01875;
							if (MiscItem.DD_HandMother1) PerkFactor2 += 0.01875;
							if (MiscItem.DD_HandMother2) PerkFactor2 += 0.01875;
							if (MiscItem.DD_TrueHandMother) PerkFactor2 += 0.01875;
							if (MiscItem.AFD_Krag) PerkFactor2 += 0.025;
							if (MiscItem.AFD_Quisling) PerkFactor2 += 0.025;
							if (MiscItem.AFD_Lauritz) PerkFactor2 += 0.025;
							if (MiscItem.AFD_Jorgensen1) PerkFactor2 += 0.025;
							if (MiscItem.AFD_Jorgensen2) PerkFactor2 += 0.025;
							if (MiscItem.AFD_JorgCannon) PerkFactor2 += 0.025;
							if (MiscItem.CoS_Fafnir) PerkFactor2 += 0.025;
							if (MiscItem.CoS_FractalHens) PerkFactor2 += 0.025;
							if (MiscItem.CoS_HandMothers) PerkFactor2 += 0.025;
							if (MiscItem.CoS_ForsakenJorg) PerkFactor2 += 0.025;
							if (MiscItem.CoS_EvilDinah) PerkFactor2 += 0.025;
							if (MiscItem.CoS_Tempest) PerkFactor2 += 0.025;
							if (skill <= 0) PerkFactor2 *= 2.5;
							if (skill == 1) PerkFactor2 *= 2.25;
							if (skill == 2) PerkFactor2 *= 2.0;
							if (skill == 3) PerkFactor2 *= 1.75;
							if (skill >= 4) PerkFactor2 *= 1.5;
							PerkFactor2 *= exex_nrpggeneraleffect;
							PerkFactor2 += 1.0;
							if (dydudebug_attackstuff) Console.Printf("PerkFactor2 [throwpower]: %.4f", PerkFactor2);
							throwpowerxy *= PerkFactor2;
							throwpowerz *= PerkFactor2;
							PerkFactor2 -= 1.0;
							PerkFactor2 *= 0.6667;
							if (dydudebug_attackstuff) Console.Printf("PerkFactor2 [throwangle]: %.4f", PerkFactor2);
							throwminangle *= (1.0 - PerkFactor2);
							if (throwminangle > 0.000) throwminangle = 0.000;
							throwmaxangle *= (1.0 - PerkFactor2);
							if (throwmaxangle < 0.000) throwmaxangle = 0.000;
						}
					}
				}
				player.mo.A_StartSound("cbomb/throw",145,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.80,1.20));
				player.mo.A_StartSound("cbomb/throw",146,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.70,1.10));
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					throwpowerxy *= 2.5;
					throwpowerz *= 2.5;
					throwminangle *= 0.4;
					throwmaxangle *= 0.4;
					player.mo.A_StartSound("cbomb/throw",147,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.60,1.00));
					player.mo.A_StartSound("cbomb/throw",148,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.50,0.90));
				}
				if (dydudebug_attackstuff) Console.Printf("throwpowerxy: %.4f, throwpowerz: %.4f, throwangles: %.4f/%.4f", throwpowerxy, throwpowerz, throwminangle, throwmaxangle);
				
				bool wutthis = false;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(1);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(0,4,11);
					}
				}
				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (wutthis) // >.> <.<
				{
					shotangle = -60;
					shotangleend = 60;
					shotangleinc = 10;
					maxshots = 13;
				}
				if (wutthis) A_SetAngle(angle+shotangle);
				bool success;
				actor BombShots;
				EEProjectile IPCompat;
				for (int i = 0; i < maxshots; i++)
				{
					if (i && wutthis) A_SetAngle(angle+shotangleinc);
					
					[success, BombShots] = A_ThrowGrenadeAngle("CherryBombShot",-2,35,throwpowerxy,throwpowerz,throwminangle,throwmaxangle,true,false,false);
					if (dydudebug_attackfuncinfo) Console.Printf("Success [i: %d]: %d", i, success);
					if (BombShots && wutthis)
					{
						if (dydudebug_attackfuncinfo) Console.Printf("BombShots [i: %d]", i);
						IPCompat = EEProjectile(BombShots);
						if (IPCompat) 
						{
							if (dydudebug_attackfuncinfo) Console.Printf("IPCompat [i: %d]", i);
							IPCompat.IPattack = true;
						}
					}
					//Console.Printf("Angle: %.4f", angle);
				}
				if (wutthis) A_SetAngle(origangle);
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Stop;
	} 
}

class CherryBombShot : EEFireworksProj
{
	default
	{
		ProjectileKickback 5;
		Tag "Cherry Bomb";
		Radius 3;
		Height 3;
		Speed 40;
		DamageFunction (finaldamagedealt);
		DamageType "CherryBomb";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "weapons/cherrywick";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (10 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * frandom(1.75,2.25));
		if (player.CountInv("CBombUpgrade") > 0)
		{
			if (player.CountInv("CBombUpgrade") == 1) 
			{
				finaldamagedealt *= 1.3125;
				A_ScaleVelocity(0.9625);
			}
			else
			if (player.CountInv("CBombUpgrade") == 2) 
			{
				finaldamagedealt *= 1.78125;
				A_ScaleVelocity(0.915625);
			}
			else
			if (player.CountInv("CBombUpgrade") >= 3) 
			{
				finaldamagedealt *= 2.484375;
				A_ScaleVelocity(0.8875);
			}
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	int A_RadiusCheck(int baserad)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (player.CountInv("CBombUpgrade") > 0)
		{
			if (player.CountInv("CBombUpgrade") == 1) 
			{
				baserad *= 1.25;
				A_SetScale((default.scale.x*1.25),(default.scale.y*1.25));
			}
			if (player.CountInv("CBombUpgrade") == 2)
			{
				baserad *= 1.5;
				A_SetScale((default.scale.x*1.5),(default.scale.y*1.5));
			}
			if (player.CountInv("CBombUpgrade") >= 3)
			{
				baserad *= 1.75;
				A_SetScale((default.scale.x*1.75),(default.scale.y*1.75));
			}
		}
		if (dydudebug_rangedmg) Console.Printf("scalex: %.8f, scaley: %.8f", scale.x, scale.y);
		return baserad;
	}
	
	int A_RadiusCheck2(int baserad)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (player.CountInv("CBombUpgrade"))
		{
			if (player.CountInv("CBombUpgrade") == 1) baserad *= 1.25;
			if (player.CountInv("CBombUpgrade") == 2) baserad *= 1.5;
			if (player.CountInv("CBombUpgrade") >= 3) baserad *= 1.75;
		}
		return baserad;
	}
	
	States
	{
		Spawn:
			CBOM ABCD 2 Bright 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
				if (player.CountInv("CBombUpgrade"))
				{
					if (player.CountInv("CBombUpgrade") == 1) 
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,3) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,9) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.125),(default.scale.y*1.125));
					}
					if (player.CountInv("CBombUpgrade") == 2)
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,3) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,6) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,9) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.25),(default.scale.y*1.25));
					}
					if (player.CountInv("CBombUpgrade") >= 3)
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,2) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,4) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,6) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.375),(default.scale.y*1.375));
					}
				}
			}
			loop;

		XDeath:
		Death:
		Crash:
			TNT1 A 0 { bNOGRAVITY = true; }
			BMKF A 2 Bright 
			{
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) 
					{
						expflags = 0;
						A_SetTics(1);
					}
					else
					{
						if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(1);
					}
					A_Quake(1, 4, 0, 512, "nosound/silent");
					A_Quake(4, 4, 0, 256, "nosound/silent");
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 12 & random(1,12) <= (1 + ((TruePlayerLevel - 12) * 0.1667))) { bFORCERADIUSDMG = true; }

					int radi = A_RadiusCheck(56);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(16,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF B 2 Bright 
			{
				actor player = players[0].mo;
				A_AlertMonsters();
				TruePlayerLevel = A_GetPlayerLevel();
				
				int expflags = XF_HURTSOURCE|XF_THRUSTZ;
				if (IPAttack) 
				{
					expflags = 0;
					A_SetTics(1);
					if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(0);
				}
				else
				{
					if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(1);
				}
				bFORCERADIUSDMG = false;
				if (TruePlayerLevel > 11 & random(1,11) <= (1 + ((TruePlayerLevel - 11) * 0.1819))) { bFORCERADIUSDMG = true; }
				if (exex_cherrybombexpbehavior > 0)
				{
					int radi = A_RadiusCheck(96);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(24,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
				else // The old single damage splash method from DD/AFD/CoS V:
				{
					int radi = A_RadiusCheck(128);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(128,0.04),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF C 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) expflags = 0;
					if (player.CountInv("CBombUpgrade") >= 3) A_SetTics(0);
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 10 & random(1,10) <= (1 + ((TruePlayerLevel - 10) * 0.20))) { bFORCERADIUSDMG = true; }
					int radi = A_RadiusCheck(128);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(32,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF D 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) 
					{
						expflags = 0;
						A_SetTics(1);
						if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(0);
					}
					else
					{
						if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(1);
					}
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 9 & random(1,9) <= (1 + ((TruePlayerLevel - 9) * 0.2223))) { bFORCERADIUSDMG = true; }
					int radi = A_RadiusCheck(158);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(40,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF E 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) expflags = 0;
					if (player.CountInv("CBombUpgrade") >= 3) A_SetTics(0);
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 8 & random(1,8) <= (1 + ((TruePlayerLevel - 8) * 0.25))) { bFORCERADIUSDMG = true; }
					int radi = A_RadiusCheck(166);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(48,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF F 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) 
					{
						expflags = 0;
						A_SetTics(1);
						if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(0);
					}
					else
					{
						if (player.CountInv("CBombUpgrade") >= 2) A_SetTics(1);
					}
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 7 & random(1,7) <= (1 + ((TruePlayerLevel - 7) * 0.28572))) { bFORCERADIUSDMG = true; }
					int radi = A_RadiusCheck(174);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(56,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			BMKF G 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					actor player = players[0].mo;
					TruePlayerLevel = A_GetPlayerLevel();
					
					int expflags = XF_HURTSOURCE|XF_THRUSTZ;
					if (IPAttack) expflags = 0;
					if (player.CountInv("CBombUpgrade") >= 3) A_SetTics(0);
					bFORCERADIUSDMG = false;
					if (TruePlayerLevel > 6 & random(1,6) <= (1 + ((TruePlayerLevel - 6) * 0.334))) { bFORCERADIUSDMG = true; }
					int radi = A_RadiusCheck(172);
					int radi2 = A_RadiusCheck2(radi*0.25);
					A_Explode(A_CalcTrueExpDmg(64,0.02),radi,expflags,0,radi2);
					A_Quake(1, 4, 0, (radi*4), "nosound/silent");
					A_Quake(4, 4, 0, (radi*2), "nosound/silent");
				}
			}
			stop;
	}
}

class CherryBombShotBerserk : CherryBombShot
{
	default
	{
		ProjectileKickback 25;
		Tag "Cherry Bomb";
		Speed 80;
		DamageFunction (finaldamagedealt);
		DamageType "CherryBomb";
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (50 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * (frandom(1.75,2.25) * 5));
		if (player.CountInv("CBombUpgrade"))
		{
			if (player.CountInv("CBombUpgrade") == 1) finaldamagedealt *= 1.625;
			if (player.CountInv("CBombUpgrade") == 2) finaldamagedealt *= 2.5625;
			if (player.CountInv("CBombUpgrade") >= 3) finaldamagedealt *= 3.96875;
		}
		
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}

	States
	{
		Spawn:
			CBOM ABCD 2 Bright
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
				if (player.CountInv("CBombUpgrade"))
				{
					if (player.CountInv("CBombUpgrade") == 1) 
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,3) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,9) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.125),(default.scale.y*1.125));
					}
					if (player.CountInv("CBombUpgrade") == 2)
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,3) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,6) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,9) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.25),(default.scale.y*1.25));
					}
					if (player.CountInv("CBombUpgrade") >= 3)
					{
						A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,2) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,4) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						if (random(1,6) <= 1) A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
						A_SetScale((default.scale.x*1.375),(default.scale.y*1.375));
					}
				}
			}
			loop;
	}
}

class CherryBombSchematic : CustomInventoryExt
{
	Default
	{
		Height 12;
		Radius 6;
		Scale 0.375;
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]Wait, this book's some kind of document on cherry bomb improvements...? Where the blazes did THIS come from?!";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		string msg = PickupMsg;
		if (player.CountInv("CBombUpgrade") == 1) msg = "\c[gold]Wait, this book's some kind of document on cherry bomb improvements...? Where the blazes did THIS come from?!";
		if (player.CountInv("CBombUpgrade") == 2) msg = "\c[gold]Another Cherry Bomb schematic booklet? This should make them even stronger, but even bulkier than before...";
		if (player.CountInv("CBombUpgrade") >= 3) msg = "\c[gold]Is this another upgrade for the Cherry Bombs?! Urggh... now they're really heavy. I wonder if I can even throw them at this point...";
		return msg;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor player = players[0].mo;
				if (player.CountInv("CBombUpgrade") >= 3)
				{
					A_SpawnItemEx("CBombSchematicReplacer",0.0,0.0,0.0, 0.0,0.0,0.0, 0.0, SXF_NOCHECKPOSITION);
					Destroy();
				}
			}
		Idle:
			CBMU A 6;
			CBMU A 6 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("CBombUpgrade",1);
			}
			stop;
	}
}

//Bottle Rocket
class BRocketPickup : ExExInvBarItem
{
	default
	{
		//$Category EE Fireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 4; // 2
		Inventory.InterHubAmount 4; // 2
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]A Bottle Rocket! One of Daddy's old marvels...\c-";
		Inventory.Icon "BTRKI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Bottle Rocket: Shot forward and creates a row of explosions to the left and right of it's impact site. Can deal self-damage via AOE.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			BTRK P -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				
				bool wutthis = false;
				int buttonspressed = 0;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(2);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(0,5,8);
					}
				}
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (wutthis)
				{
					if (random(1,64) <= 1) [BombShotsB, BombShots] = A_FireProjectile("MultiBRocketShot", 0);
														else [BombShotsB, BombShots] = A_FireProjectile("BigBRocketShot", 0);
				}
				else
				{
					[BombShotsB, BombShots] = A_FireProjectile("BRocketShot", 0);
				}
				if (BombShots && wutthis) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) 
					{
						IPCompat.IPattack = true;
						if (IPCompat is "BigBRocketShot") IPCompat.Speed = random(45,55);
						if (IPCompat is "MultiBRocketShot") IPCompat.Speed = random(36,44);
					}
				}
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Stop;
	} 
}

class BRocketShot : EEFireworksProj
{
	default
	{
		ProjectileKickback 5;
		Tag "Bottle Rocket";
		Radius 8;
		Height 8;
		Speed 60;
		DamageFunction (finaldamagedealt);
		DamageType "BRocket";
		Projectile;
		renderstyle "Normal";
		+RANDOMIZE
		+DEHEXPLOSION
		+ROCKETTRAIL
		//+NOEXTREMEDEATH
		SeeSound "weapons/rocketfire";
		DeathSound "";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (20 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * frandom(3.5,4.5));

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			BTRK A 0 NoDelay;
			BTRK ABCD 2 Bright 
			{
				A_StartSound("weapons/spinnerfire",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 23) A_SeekerMissile(6,11,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
				if (IPAttack && random(1,32) <= 27) bFORCERADIUSDMG = true;
			}
			FSPE A 5 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				int expflags = XF_HURTSOURCE;
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 32;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 96;
				}

				A_Explode(A_CalcTrueExpDmg(128,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			FSPE B 5 Bright;
			FSPE C 8 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
								 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
			}
			FSPE D 8 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
								 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
			}
			FSPE E 8 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
								 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
			}
			TNT1 A 8 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
								 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
			}
			Stop;
	}
}

class BigBRocketShot : BRocketShot
{
	default
	{
		ProjectileKickback 15;
		Tag "Big Bottle Rocket";
		Radius 12;
		Height 12;
		Speed 50;
		DamageFunction (finaldamagedealt);
		DamageType "BRocket";
		Scale 1.5;
		Projectile;
		renderstyle "Normal";
		+RANDOMIZE
		+DEHEXPLOSION
		+ROCKETTRAIL
		//+NOEXTREMEDEATH
		SeeSound "weapons/rocketfire";
	}
	
	override void PostBeginPlay()
	{
		IPAttack = true;
		if (IPAttack && random(1,32) <= 27) bFORCERADIUSDMG = true;
		expflags = 0;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, expflags: %d", GetClassName(), IPAttack, expflags);
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (100 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * frandom(17.5,22.5));

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			BTRK A 0 NoDelay;
			BTRK ABCD 2 Bright 
			{
				A_StartSound("weapons/spinnerfire",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 17) A_SeekerMissile(3,7,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 5 Bright 
			{
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 32;
				if (IPAttack) 
				{
					fulldmgmaxrad = 192;
					fulldmgminrad = 96;
				}
				if (dydudebug_attackfuncinfo) Console.Printf("expflags: %d", expflags);
				A_Explode(A_CalcTrueExpDmg(640,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			FSPE B 5 Bright;
			FSPE CCCCC 2 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			FSPE DDDDD 2 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			FSPE EEEEE 2 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			TNT1 AAAAA 2 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			Stop;
	}
}

class MultiBRocketShot : BigBRocketShot
{
	default
	{
		ProjectileKickback 5;
		Tag "Multi-Bottle Rocket";
		Speed 45;
		Radius 18;
		Height 18;
		Scale 2.25;
		DamageFunction (finaldamagedealt);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (400 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * frandom(70,90));

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}

	States
	{
		Spawn:
			BTRK A 0 NoDelay;
			BTRK ABCD 2 Bright 
			{
				A_StartSound("weapons/spinnerfire",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 12) A_SeekerMissile(1,3,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
				if (IPAttack && random(1,32) <= 27) bFORCERADIUSDMG = true;
			}
			FSPE A 5 Bright 
			{
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 32;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 96;
				}

				A_Explode(A_CalcTrueExpDmg(2560,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			FSPE B 5 Bright;
			FSPE CCCCCCCCCC 1 Bright 
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			FSPE DDDDDDDDDD 1 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			FSPE EEEEEEEEEE 1 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			TNT1 AAAAAAAAAA 1 Bright
			{
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (user_explosion % 2 == 1) 
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom1IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				else
				{
					if (IPAttack) BombShots = A_SpawnProjectile("BRocketBoom2IP",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
									 else BombShots = A_SpawnProjectile("BRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
				}
				if (BombShots && IPAttack) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
				user_explosion++;
			}
			Stop;
	}
}

class BadBrocketShot : BrocketShot
{
	default
	{
		DamageFunction (finaldamagedealt);
		Speed 30;
		DontHurtShooter;
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Death:
			TNT1 A 0 A_StopSound(CHAN_7);
			TNT1 A 0 A_AlertMonsters;
			FSPE A 5 Bright 
			{
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 32;
				
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,fulldmgmaxrad,false,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE B 5 Bright;
			FSPE C 8 Bright A_SpawnProjectile("BadBRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);
			FSPE D 8 Bright A_SpawnProjectile("BadBRocketBoom2",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER); 
			FSPE E 8 Bright A_SpawnProjectile("BadBRocketBoom1",random(20,64),random(-64,64),random(-64,64),CMF_TRACKOWNER);  
			Stop;
	}
}

class BRocketBoom1 : EEFireworksProj
{
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			CBAL C 6 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				expflags = XF_HURTSOURCE;
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}

				A_Explode(A_CalcTrueExpDmg(128,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			CBAL DEF 6 Bright;
			stop;
	}
}

class BadBRocketBoom1 : EEProjectile
{
	int expflags;
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			CBAL C 6 Bright 
			{
				expflags = XF_HURTSOURCE;
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			CBAL DEF 6 Bright;
			stop;
	}
}

class BRocketBoom1IP : BRocketBoom1
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		expflags = 0;
		if (IPAttack && random(1,32) <= 27) bFORCERADIUSDMG = true;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, expflags: %d", GetClassName(), IPAttack, expflags);
		super.PostBeginPlay();
	}

	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			CBAL C 6 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}

				A_Explode(A_CalcTrueExpDmg(128,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			CBAL DEF 6 Bright;
			stop;
	}
}

class BRocketBoom2 : EEFireworksProj
{
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			BROX A 6 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				int expflags = XF_HURTSOURCE;
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}

				A_Explode(A_CalcTrueExpDmg(128,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			BROX BCD 6 Bright;
			stop;
	}
}

class BadBRocketBoom2 : EEProjectile
{
	int expflags;
	default
	{
		ProjectileKickback 5;
		radius 10;
		height 12;
		DamageType "BRocket";
		speed 0;
		Scale 2;
		renderstyle "Add";
		Alpha 0.80;
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			BROX A 6 Bright 
			{
				int expflags = XF_HURTSOURCE;
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}

				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			BROX BCD 6 Bright;
			stop;
	}
}

class BRocketBoom2IP : BRocketBoom2
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		expflags = 0;
		if (IPAttack && random(1,32) <= 27) bFORCERADIUSDMG = true;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, expflags: %d", GetClassName(), IPAttack, expflags);
		super.PostBeginPlay();
	}
	
	states
	{
		Spawn:
			TNT1 A 0 
			{
				A_Die();
				if (IPAttack)
				{
					ProjectileKickback = 1;
					bDONTTHRUST = 0;
					if (random(1,32) <= 27) bFORCERADIUSDMG = true;
				}
			}
		Death:
			BROX A 6 Bright 
			{
				int fulldmgmaxrad = 128;
				int fulldmgminrad = 128;
				if (IPAttack) 
				{
					expflags = 0;
					fulldmgmaxrad = 192;
					fulldmgminrad = 192;
				}

				A_Explode(A_CalcTrueExpDmg(128,0.02),fulldmgmaxrad,expflags,true,fulldmgminrad);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, (fulldmgmaxrad*4), "nosound/silent");
				A_Quake(4, 4, 0, (fulldmgmaxrad*2), "nosound/silent");
			}
			BROX BCD 6 Bright;
			stop;
	}
}

// Popper
//Party Popper
class PopperPickup : ExExInvBarItem
{
	int debris1amt, debris2amt, debris3amt, debris4amt;
	int basedmg, baseradi, basefradi;
	double basevol;

	default
	{
		//$Category EE Fireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]A Scatter-Popper! This should knock down a house or two!\c-";
		Inventory.Icon "POPRI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Scatter-Popper: Emits a powerful soundwave and scatters ripping debris in an somewhat upward-forward momentum. Aim carefully when using it!";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}

	States
	{
		Spawn:
			POPR P -1;
			Stop;
		Use:
			TNT1 A 0 Bright 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				int TruePlayerLevel = A_GetPlayerLvl();
				
				if (player.mo.waterlevel <= 2)
				{
					bool wutthis = false;
					if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
					{
						double cost = invoker.A_GetIPCost(6);
						if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
						If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
						{
							if (!MiscItem.HasHarmonicAnger)
							{
								MiscItem.ItemPoints -= cost;
								globalvars.ItemPoints -= cost;
								invoker.A_IPUseHUD(cost);
								if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
							}
							wutthis = true;
							if (wutthis) invoker.A_IPDinahVoiceSelect(0,4,11);
						}
					}
					double shotangle = 0;
					double shotangleend = 0;
					double shotangleinc = 0;
					double origangle = angle;
					int maxshots = 1;
					if (wutthis) // >.> <.<
					{
						shotangle = 0;
						shotangleend = 0;
						shotangleinc = 30;
						maxshots = 12;
					}
					if (wutthis) A_SetAngle(angle+shotangle);
					bool success;
					actor BombShotsB, BombShots;
					EEProjectile IPCompat;

					for (int j = 0; j < maxshots; j++)
					{
						if (j && wutthis) A_SetAngle(angle+shotangleinc);
						for (int i = 0; i < 8; i++) { A_FireProjectile("PopperPuff1Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
						for (int i = 0; i < 4; i++) { A_FireProjectile("PopperPuff2Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
						if (wutthis)
						{
							for (int i = 0; i < 8; i++) { A_FireProjectile("PopperPuff1Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
							for (int i = 0; i < 4; i++) { A_FireProjectile("PopperPuff2Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
							for (int i = 0; i < 8; i++) { A_FireProjectile("PopperPuff1Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
							for (int i = 0; i < 4; i++) { A_FireProjectile("PopperPuff2Tracer",frandom(-15,15),false,0,0,0,frandom(-2,2)); }
						}

						invoker.basedmg = randompick(32,48,64);
						invoker.baseradi = randompick(192,256,320);
						invoker.basevol = 1.0;
						if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
						{
							invoker.basedmg *= frandom(9,11);
							invoker.baseradi = frandom(4.5,5.5);
							invoker.basevol = 1.2;
						}
						if (wutthis)
						{
							invoker.basedmg *= frandompick(1.25,1.375,1.375,1.5,1.625,1.75);
							invoker.baseradi *= frandompick(1.00,1.125,1.125,1.125,1.25,1.25,1.375);
							invoker.basevol *= frandompick(0.125,0.1667,0.1667,0.1667,0.2,0.2,0.2,0.25);
						}
						invoker.basefradi = (invoker.baseradi * frandompick(0.375,0.5,0.625));
						bFORCERADIUSDMG = true; // Forces the Popper's soundwave(s) to damage AOE immune enemies/bosses
						A_StartSound("popper/toot",70,CHANF_DEFAULT,(frandom(0.95,1.1)*invoker.basevol),ATTN_NORM,frandom(0.8,1.2));
						A_Explode(invoker.basedmg,invoker.baseradi,0,0,invoker.basefradi,0,0,"","Beats");
						int debrisbase1 = 25;
						int debrisbase2 = 16;
						if (wutthis)
						{
							debrisbase1 = 15;
							debrisbase2 = randompick(9,9,10,10,10);
						}
						invoker.debris1amt = random(0,(TruePlayerLevel / debrisbase1));
						invoker.debris2amt = random(0,(TruePlayerLevel / debrisbase2));
						invoker.debris3amt = random(0,(TruePlayerLevel / debrisbase2));
						invoker.debris4amt = random(0,(TruePlayerLevel / debrisbase2));
						if (random(1,4) <= 3) 
						{
							A_StartSound("popper/toot",71,CHANF_DEFAULT,(frandom(0.85,1.0)*invoker.basevol),ATTN_NORM,frandom(0.85,1.15));
							A_Explode(invoker.basedmg,invoker.baseradi,0,0,invoker.basefradi,0,0,"","Beats");
							invoker.debris1amt += random(0,(TruePlayerLevel / debrisbase1));
							invoker.debris2amt += random(0,(TruePlayerLevel / debrisbase2));
							invoker.debris3amt += random(0,(TruePlayerLevel / debrisbase2));
							invoker.debris4amt += random(0,(TruePlayerLevel / debrisbase2));
							if (random(1,12) <= 3) 
							{
								A_StartSound("popper/toot",72,CHANF_DEFAULT,(frandom(0.75,0.9)*invoker.basevol),ATTN_NORM,frandom(0.9,1.1));
								A_Explode(invoker.basedmg,invoker.baseradi,0,0,invoker.basefradi,0,0,"","Beats");
								invoker.debris1amt += random(0,(TruePlayerLevel / debrisbase1));
								invoker.debris2amt += random(0,(TruePlayerLevel / debrisbase2));
								invoker.debris3amt += random(0,(TruePlayerLevel / debrisbase2));
								invoker.debris4amt += random(0,(TruePlayerLevel / debrisbase2));
								if (random(1,36) <= 3) 
								{
									A_StartSound("popper/toot",73,CHANF_DEFAULT,(frandom(0.65,0.8)*invoker.basevol),ATTN_NORM,frandom(0.95,1.05));
									A_Explode(invoker.basedmg,invoker.baseradi,0,0,invoker.basefradi,0,0,"","Beats");
									invoker.debris1amt += random(0,(TruePlayerLevel / debrisbase1));
									invoker.debris2amt += random(0,(TruePlayerLevel / debrisbase2));
									invoker.debris3amt += random(0,(TruePlayerLevel / debrisbase2));
									invoker.debris4amt += random(0,(TruePlayerLevel / debrisbase2));
								}
							}
						}
						bFORCERADIUSDMG = false; // now turn of forced AOE damage, just in case :V
						//Console.Printf("D1Amt: %d, D2Amt: %d, D3Amt: %d, D4Amt: %d", invoker.debris1amt, invoker.debris2amt, invoker.debris3amt, invoker.debris4amt);
						int confbase1 = 5;
						int confbase2 = 8;
						if (wutthis)
						{
							confbase1 = 3;
							confbase2 = randompick(5,5,6,6,6);
						}
						for (int i; i < (confbase1 + invoker.debris1amt); i++) { A_ThrowGrenade("StreamerShot",4,random(8,16),random(1,5),0); }
						for (int i; i < (confbase2 + invoker.debris2amt); i++) { A_ThrowGrenade("Confetti_Y",4,random(2,8),random(1,3),0); }
						for (int i; i < (confbase2 + invoker.debris3amt); i++) { A_ThrowGrenade("Confetti_B",4,random(2,8),random(1,3),0); }
						for (int i; i < (confbase2 + invoker.debris4amt); i++) { A_ThrowGrenade("Confetti_P",4,random(2,8),random(1,3),0); }
						
						double brecoil; 
						brecoil = frandom(4.8,7.2);
						if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) brecoil *= 0.2;
						if (wutthis) brecoil *= frandompick(0.1112,0.125,0.125,0.125,0.1667);
						if (waterlevel >= 3) brecoil *= 0.25;
						A_Recoil(brecoil); 
					}
					if (wutthis) A_SetAngle(origangle);
					if (wutthis) invoker.A_CheckIPModeOnUse();
					A_TakeInventory("PopperPickup",1);
				}
				else
				{
					if (player.mo.waterlevel >= 3)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3) maskpitch *= 1.259921885;
						A_StartSound("inv_fail",73,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						Console.Printf("\c[gold]Nope, the popper doesn't work in the water... Shame.");
					}
					/*
					if (player.mo.CountInv("IsInBatGuardFrame"))
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3) maskpitch *= 1.259921885;
						A_StartSound("inv_fail",73,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						Console.Printf("\c[gold]Can't use this while guarding with the Cricket Bat!");
					}
					*/
				}
			}
			Fail;
	} 
}

class DDFeather : EEProjectile
{
	default
	{
		Radius 2;
		Height 4;
		+MISSILE
		+DROPOFF
		+NOTELEPORT
		+CANNOTPUSH
		+WINDTHRUST
		+DONTSPLASH
		Gravity 0.125;
	}
	
	States
	{
		Spawn:
			CHKN MNOPQPON 3;
			Loop;
		Death:
			CHKN N 6;
			Stop;
	}
}

class Confetti_B : DDFeather
{
	default
	{
		ProjectileKickback 5;
		Scale 0.5;
	}
	
	States
	{
		Spawn:
			CON1 ABCDEDCB 3;
			Loop;
		Death:
			CON1 B 6;
			Stop;
	}
}

class Confetti_P : DDFeather
{
	default
	{
		ProjectileKickback 5;
		Scale 0.5;
	}
	
	States
	{
		Spawn:
			CON2 ABCDEDCB 3;
			Loop;
		Death:
			CON2 B 6;
			Stop;
	}
}

class Confetti_Y : DDFeather
{
	default
	{
		Scale 0.5;
	}
}

class StreamerShot : SingleDamageRipper
{
	default
	{
		ProjectileKickback 5;
		Radius 3;
		Height 3;
		Speed 20;
		Damage 25; // From 10 now that it only rips each thing it hits ONCE
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+RIPPER
		+LOWGRAVITY
		renderstyle "Normal";
	}
	
	States
	{
		Spawn:
			STRM A 1 Bright A_SpawnItemEx("StreamerTrail",0,0,0);
			loop;
		Death:
			STRM A 1;
			stop;
	}
}

class StreamerTrail : EEProjectile
{
	default
	{
		ProjectileKickback 5;
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.5;
		renderstyle "Add";
		Alpha 0.6;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			STRM AAAAAA 4 BRIGHT;
			Stop;
	}
}

class PopperPuff1 : EEFireworksPuff
{
	default
	{
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
		Species "Players";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (ShieldPart(other) && PlayerPawn(target)) return false;
		
		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			CBAL C 0 A_AlertMonsters();
			CBAL CD 4 Bright;
			CBAL EF 3 bright;
			Stop;
	}
}

class PopperPuff1Tracer : EEFireworksFastProj
{
	default
	{
		Height 4;
		Radius 2;
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		DamageFunction (10);
		Speed 200;
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
		Species "Players";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (ShieldPart(other) && PlayerPawn(target)) return false;
		
		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			loop;
		Death:
			SPNR C 0 A_AlertMonsters();
			SPNR CD 4 Bright;
			SPNR EF 3 Bright;
			Stop;
	}
}

class PopperPuff2 : EEFireworksPuff
{
	default
	{
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
		Species "Players";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (ShieldPart(other) && PlayerPawn(target))
		{
			return false;
		}
		
		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			SPNR C 0 A_AlertMonsters;
			SPNR C 4 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,false,0,32,0,0,"","Popper");
			}
			SPNR DEFG 4 Bright;
			Stop;
	}
}

class PopperPuff2Tracer : EEFireworksFastProj
{
	default
	{
		Height 4;
		Radius 2;
		ProjectileKickback 5;
		Tag "Popper Confetti (2)";
		DamageFunction (15);
		Speed 200;
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		DamageType "Popper";
		Species "Players";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (ShieldPart(other) && PlayerPawn(target))
		{
			return false;
		}
		
		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			loop;
		Death:
			SPNR C 0 A_AlertMonsters;
			SPNR C 4 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,false,0,32,0,0,"","Popper");
			}
			SPNR DEFG 4 Bright;
			Stop;
	}
} 

//Snake Grenade
class SnakePickup : ExExInvBarItem
{
	default
	{
		//$Category EE Fireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]A King Sugar Snake! They make good summon allies in a pinch, though they can't take a lot of punishment...\c-";
		Inventory.Icon "FSNKI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Sugar Snake: Summons a King Sugar Snake ally when used.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			FSNK P -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				
				bool wutthis = false;
				int buttonspressed = 0;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(3);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(0,4,11);
					}
				}
				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (wutthis) // >.> <.<
				{
					shotangle = -180;
					shotangleend = 180;
					shotangleinc = 36;
					maxshots = 10;
				}
				if (wutthis) A_SetAngle(angle+shotangle);
				bool success;
				actor BombShots;
				EEProjectile IPCompat;
				for (int i = 0; i < maxshots; i++)
				{
					if (i && wutthis) A_SetAngle(angle+shotangleinc);
					[success, BombShots] = A_ThrowGrenade("SnakeGrenade",4,16,3,0);
					
					if (BombShots && wutthis) 
					{
						IPCompat = EEProjectile(BombShots);
						if (IPCompat) IPCompat.IPattack = true;
					}
					//Console.Printf("Angle: %.4f", angle);
				}
				if (wutthis) A_SetAngle(origangle);
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Stop;
	} 
}

// Invuln Sphere
class InvulnerabilitySphere2 : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[gold]W-what?! Why do I feel so... invincible suddenly?!";
		Inventory.PickupSound "powerups/invuln";
	}
	
	States
	{
		Spawn:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/What",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_GiveInventory("PowerInvulnDD");
			}
			Stop;
	}
}

class BlurSphere2 : BlurSphere
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+VISIBILITYPULSE
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.MaxAmount 0;
		Powerup.Type "PowerInvisibility2";
		RenderStyle "Translucent";
		Inventory.PickupMessage "\c[gold]Woah! I can barely see my body anymore! Is this some kinda invisibility magic?!"; // "Partial Invisibility"
		Inventory.PickupSound "powerups/invis";
	}
	
	States
	{
		Spawn:
			PINS ABCD 6 Bright;
			Loop;
	}
}

//Spinner
class SpinnerPickup : ExExInvBarItem
{
	default
	{
		//$Category EE Fireworks
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 8
		Inventory.InterHubAmount 16; // 8
		Inventory.PickupSound "Dinah/giggle";
		Inventory.PickupMessage "\c[gold]A Spinner-Chaser! One of a few fireworks Mother and Daddy created through magic and explosives!\c-";
		Inventory.Icon "SPINI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Spinner-Chaser: Shot forward and will seek a close target and explode on impact. Can deal self-damage via AOE. Hold down <ZOOM> when using to fire an Icy Spinner instead of tne standard type.";
		Scale 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+FLOATBOB
		+DONTGIB
	}
	
	override void Tick()
	{
		string ico = "SPINI0";
		actor player = players[0].mo;
		if (player && player.player.buttons & BT_ZOOM) ico = "SPINJ0";
		
		icon = TexMan.CheckForTexture(ico, TexMan.TYPE_MiscPatch);
		super.Tick();
	}
	
	States
	{
		Spawn:
			SPNR P -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				
				bool wutthis = false;
				int buttonspressed = 0;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(4);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(0,7,11);
					}
				}
				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (wutthis) // >.> <.<
				{
					shotangle = -180;
					shotangleend = 180;
					shotangleinc = 20;
					maxshots = 18;
				}
				actor BombShotsB, BombShots;
				EEProjectile IPCompat;
				if (wutthis) A_SetAngle(angle+shotangle);
				for (int i = 0; i < maxshots; i++)
				{
					if (i && wutthis) A_SetAngle(angle+shotangleinc);
					let player1 = DDPlayerPawn(player.mo);
					if (player1 && player1.buttons & BT_ZOOM)
					{
						if (wutthis) [BombShotsB, BombShots] = A_FireProjectile("SpinnerShotIcyIP", 0); 
										else [BombShotsB, BombShots] = A_FireProjectile("SpinnerShotIcy", 0); 
					}
					else 
					{
						if (wutthis) [BombShotsB, BombShots] = A_FireProjectile("SpinnerShotIP", 0); 
										else [BombShotsB, BombShots] = A_FireProjectile("SpinnerShot", 0); 
					}
					
					if (BombShots && wutthis) 
					{
						IPCompat = EEProjectile(BombShots);
						if (IPCompat) IPCompat.IPattack = true;
					}
					//Console.Printf("Angle: %.4f", angle);
				}
				if (wutthis) A_SetAngle(origangle);
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Stop;
	} 
}

class SpinnerShot : EEFireworksProj
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt);
		DamageType "Spinner";
		+SEEKERMISSILE
		//+NOEXTREMEDEATH
		Projectile;
		renderstyle "Add";
		SeeSound "weapons/spinnerfire";
		DeathSound "";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvlProj();
		finaldamagedealt = (5 * random(1,8));
		finaldamagedealt += (TruePlayerLevel * frandom(2.625,3.375));

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}

	States
	{
		Spawn:
			SPNR A 0 Bright NoDelay
			{
				A_SpawnItemEx("Firetrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 19) bFORCERADIUSDMG = true;
			}
			SPNR AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNR C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 2 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				expflags = XF_HURTSOURCE;
				if (IPAttack) expflags = 0;
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,expflags,true,32);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE BCDE 2 Bright;
			Stop;
	}
}

class SpinnerShotIP : SpinnerShot
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		if (IPAttack && random(1,32) <= 19) bFORCERADIUSDMG = true;
		expflags = 0;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, expflags: %d", GetClassName(), IPAttack, expflags);
		super.PostBeginPlay();
	}
	
	States
	{
		Death:
			SPNR C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 2 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				if (IPAttack) expflags = 0;
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,expflags,true,32);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE BCDE 2 Bright;
			Stop;
	}
}

class SpinnerShotIcy : SpinnerShot
{
	default
	{
		DamageType "Ice";
		+SEEKERMISSILE
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		DDPlayerPawn playpawn;
		DDPlayerPawn playpawn2;
		Actor DDActor;
		Actor DDActor2;
		playpawn = DDPlayerPawn(target);
		playpawn2 = DDPlayerPawn(other);
		DDActor = Actor(target);
		DDActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					if (A_CheckFriendCollisionProjTypePlayer(self) > 0) return false;
					if (A_CheckFriendCollisionProjTypePlayer2(self) > 0) return false;
				}
			}
			else
			if (DDActor && DDActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			
			let checkedenemy = Actor(other);
			if (!checkedenemy.bICECORPSE == 0) return false; else return true; // Makes the ice projectiles move PAST the frozen monster to hit other monsters.
		}
		// We don't really care about others making the check.

		return true;
	}
	
	States
	{
		Spawn:
			SPNI A 0 Bright NoDelay
			{
				A_SpawnItemEx("IceTrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 19) bFORCERADIUSDMG = true;
			}
			SPNI AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNI C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			ISPE A 2 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				expflags = XF_HURTSOURCE;
				if (IPAttack) 
				{
					expflags = 0;
					A_SetTics(1);
				}
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,expflags,true,32);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			ISPE BCDE 2 Bright
			{
				if (IPAttack) 
				{
					A_SetTics(1);
				}
			}
			Stop;
	}
}

class SpinnerShotIcyIP : SpinnerShotIcy
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		if (IPAttack && random(1,32) <= 19) bFORCERADIUSDMG = true;
		expflags = 0;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, expflags: %d", GetClassName(), IPAttack, expflags);
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			SPNI A 0 Bright NoDelay
			{
				A_SpawnItemEx("IceTrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
				if (IPAttack && random(1,32) <= 19) bFORCERADIUSDMG = true;
			}
			SPNI AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNI C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 2 Bright 
			{
				TruePlayerLevel = A_GetPlayerLevel();
				if (IPAttack) 
				{
					expflags = 0;
					A_SetTics(1);
				}
				A_Explode(A_CalcTrueExpDmg(128,0.02),128,expflags,true,32);
				A_StartSound("weapons/cherryboom",1001,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE BCDE 2 Bright
			{
				if (IPAttack) 
				{
					A_SetTics(1);
				}
			}
			Stop;
	}
}

class RadSuit2 : RadSuit replaces RadSuit
{
	default
	{
		Height 46;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]This bulky suit looks like it could give me some protection from heated surfaces..."; // "Radiation Shielding Suit"
		Inventory.PickupSound "powerups/suit";
		Powerup.Type "PowerIronFeet2";
	}

	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
	}
}

class BirdPotion : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Scale 1;
		Tag "Nevermore Potion: Gives 8-10 seconds of flight and invisibility (with a +~66.7% evasion chance). Lets you deal 2.5x damage to grounded foes, but you deal -60% damage to floating/flying foes.";
		Inventory.PickupSound "Misc/p_pkup";
		Inventory.PickupMessage "\c[gold]The label simply says, 'Nevermore'.";
		Inventory.Icon "RAVNI0";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
	}
	States
	{
		Spawn:
			RAVN A 6 Bright;
			Loop;
		Use:
			TNT1 A 0
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				bool wutthis = false;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(12);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(1,3,7);
					}
				}
				int timetics = randompick(280,315,350);
				if (wutthis) 
				{
					timetics *= frandompick(4.5,5,5,5,5,5,5.5);
				}
				
				player.mo.A_StartSound("CastFlight",216);
				if (!player.mo.CountInv("PowerRavenFlight"))
				{
					player.mo.SetInventory("PowerRavenFlight",1);
					let FlightItem = PowerRavenFlight(player.mo.FindInventory("PowerRavenFlight"));
					if (FlightItem) FlightItem.EffectTics = timetics;
				}
				else
				{
					let FlightItem = PowerRavenFlight(player.mo.FindInventory("PowerRavenFlight"));
					if (FlightItem) FlightItem.EffectTics += timetics;
				}
				player.mo.A_StartSound("CastInvisiblity",217);
				if (!player.mo.CountInv("PowerRavenInvisibility"))
				{
					player.mo.SetInventory("PowerRavenInvisibility",1);
					let InvisItem = PowerRavenInvisibility(player.mo.FindInventory("PowerRavenInvisibility"));
					if (InvisItem) InvisItem.EffectTics = timetics;
				}
				else
				{
					let InvisItem = PowerRavenInvisibility(player.mo.FindInventory("PowerRavenInvisibility"));
					if (InvisItem) InvisItem.EffectTics += timetics;
				}
				if (player.mo.CountInv("PowerRatMorph")) player.mo.A_SetInventory("PowerRatMorph",0);
				
				actor player = players[0].mo;
				player.A_TakeInventory("BirdPotion",1);
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Fail;
	}
}

class TimePotion : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupSound "Dinah/Gotcha";
		Inventory.PickupMessage "\c[gold]'Essence of Time?' Hmm...";
		Inventory.Icon "TIMPI0";
		CustomInventoryExt.PickUpVoice true;
		Tag "Essence of Time: Freezes time for 8-10 seconds per use. Stackable.";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		if (player)
		{
			if (player.CountInv("MysteryItem") || player.CountInv("MysteryItem2")) SetTag("Essence of Time: Freezes time for 24-30 seconds per use. Stackable.");
																																				else SetTag("Essence of Time: Freezes time for 8-10 seconds per use. Stackable.");
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			TIMP AB 6;
			Loop;
		Use:
			TNT1 A 0
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				bool wutthis = false;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(8);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
						if (wutthis) invoker.A_IPDinahVoiceSelect(1,3,7);
					}
				}
				int timetics = randompick(280,315,350);
				if (player.mo.CountInv("MysteryItem")) timetics *= 3;
				if (player.mo.CountInv("MysteryItem2")) timetics *= 3;
				if (wutthis) 
				{
					timetics *= frandompick(4.5,5,5,5,5,5,5.5);
					if (player.mo.CountInv("MysteryItem")) timetics *= 1.5;
					if (player.mo.CountInv("MysteryItem2")) timetics *= 1.5;
					MiscItem.TimeFreezeIPBuff = true;
				}

				A_SetInventory("TimePotionTimeFreezer",1,AAPTR_PLAYER1);
				A_GiveInventory("TimeFreezeTimer",timetics,AAPTR_PLAYER1);
				A_TakeInventory("TimePotion",1);
				if (wutthis) invoker.A_CheckIPModeOnUse();
			}
			Fail;
	}
}

class FuryPotion : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
		Inventory.PickupFlash "PickupFlash";
		Inventory.PickupSound "Dinah/Gotcha";
		Inventory.PickupMessage "\c[gold]'Essence of Fury?' Sounds useful...! >:)";
		CustomInventoryExt.PickUpVoice true;
		Tag "Essence of Fury: Berserks you for 12-18 seconds. Stackable.";
		Inventory.Icon "FRPTI0";
		+FLOATBOB
		+DONTGIB
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
	}
	
	States
	{
		Spawn:
			FRPT A -1;
			Loop;
		Use:
			TNT1 A 0
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				bool wutthis = false;
				if (invoker.CheckIPEnabled() && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
				{
					double cost = invoker.A_GetIPCost(7);
					if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						if (!MiscItem.HasHarmonicAnger)
						{
							MiscItem.ItemPoints -= cost;
							globalvars.ItemPoints -= cost;
							invoker.A_IPUseHUD(cost);
							if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						}
						wutthis = true;
					}
				}
				
				A_StartSound("CastBerserk",122,CHANF_DEFAULT);
				if (wutthis)
				{
					A_StartSound("CastBerserk",123,CHANF_DEFAULT);
					A_StartSound("CastBerserk",124,CHANF_DEFAULT);
					A_StartSound("CastBerserk",125,CHANF_DEFAULT);
					A_StartSound("CastBerserk",126,CHANF_DEFAULT);
					player.mo.A_GiveInventory("AngerLevelEventN",(randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3) * randompick(9,10,10,10,10,10,11)));
				}
				else
				{
					player.mo.A_GiveInventory("AngerLevelEventN",randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3));
				}
				A_TakeInventory("FuryPotion",1);
				
				if (wutthis) A_GiveInventory("FuryBuffIP",1,AAPTR_PLAYER1);
								else A_GiveInventory("FuryBuff",1,AAPTR_PLAYER1);
				if (wutthis) invoker.A_CheckIPModeOnUse();
				if (wutthis) invoker.A_IPDinahVoiceSelect(1,3,7);
			}
			Fail;
	}
}


class DivingHelm : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "\c[gold]'Oooh... a Chic Diving Helmet... I guess if I have to go underwater this could help...'";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.InterHubAmount 2;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
		Inventory.Icon "DIVRI0";
		Tag "Chic Diving Helmet: Gives at least 3 minutes of underwater air. Depletes MUCH slower out of water.";
	}
	
	states
	{
		Spawn:
			DIVR A -1;
			Stop;
		Use:
			TNT1 A 0
			{
				A_StartSound("misc/p_pkup",85,CHANF_DEFAULT,1.0,ATTN_NORM);
				if (!player.mo.CountInv("PowerNoDrown"))
				{
					player.mo.SetInventory("PowerNoDrown",1);
					let DiveHelmItem = PowerNoDrown(player.mo.FindInventory("PowerNoDrown"));
					if (DiveHelmItem) DiveHelmItem.EffectTics = 180 * TICRATE;
				}
				else
				{
					let DiveHelmItem = PowerNoDrown(player.mo.FindInventory("PowerNoDrown"));
					if (DiveHelmItem) DiveHelmItem.EffectTics += 180 * TICRATE;
				}
			}
			stop;
	}
}

class DivingHelm_Display : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "\c[gold]'Oooh... a Chic Diving Helmet... I guess if I have to go underwater this could help...'";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
		-COUNTITEM;
	}

	states
	{
		Spawn:
			DIVR A -1;
			Stop;
		Pickup:
			TNT1 A 1 A_GiveInventory("DivingHelm",1);
			Stop;
	}
}

//Palace Key [Mod-Specific Version]
class PalaceKeyNew : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "GKEYI0";
		Inventory.PickupMessage "\c[gold]A fancy palace k... wait, why are one of THESE here?!";
		Inventory.PickupSound "Dinah/allowme";
		CustomInventoryExt.PickUpVoice true;
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		Tag "Palace Key";
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			GKEY AB 6 Bright;
			Loop;
		Use:
			TNT1 A 0
			{
			}
			fail;
	}
}

class PalaceKey_Flipped : CustomInventoryExt
{
	default
	{
		//$Category EE Props (Flipped)
		Height 20;
		Radius 20;
		Tag "Palace Key (Flipped)";
		Inventory.PickupMessage "\c[gold]A fancy palace k... wait, why are one of THESE here?!";
		Inventory.PickupSound "Dinah/allowme";
		CustomInventoryExt.PickUpVoice true;
		+NOGRAVITY
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			UKEY AB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("PalaceKey",1);
			Stop;
	}
}

class DoorBellDingALing : EEBaseZSC
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NORM,frandom(1.25,1.5));
			}
			TNT1 A 35 A_SetTics(random(35,51));
			TNT1 A 0 Exit_Normal(0);
			Stop;
	}
}

//Exit Bell
class DoorBell : ExExInvBarItem 
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
		Inventory.PickupMessage "\c[gold]G..gah... wha-what?! Why is THIS here all of a sudden?! What's this even able to DO at this point? I'm not at Castle Quarantine anymore!";
		Inventory.Icon "BELLI0";
		Tag "Door Bell: Use to exit the current level immediately.";
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+FLOATBOB
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		string msg = PickupMsg;
		if (player.CountInv("IsDynDuchess")) msg = "\c[gold]The Door Bell... My way out of here...\c- (use to end the game)";
		return msg;
	}
	
	override void Tick()
	{
		super.Tick();
		actor player = players[0].mo;
		if (Amount < 1 && (player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))) Destroy();
	}

	States
	{
		Spawn:
			GBEL AABB 5
			{
				if (invoker.A_CheckUOHYM()) Destroy();
			}
			Loop;
		Use:
			TNT1 A 0
			{
				if (CountInv("IsDynDuchess"))
				{
					A_StartSound("misc/bellring",CHAN_BODY);
					ACS_Execute(1,0,0,0,0);
				}
				else
				{
					A_SpawnItemEx("DoorBellDingALing",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				}
			}
			Stop;
	} 
}

// ?????
class MysteryItem : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupSound "Dinah/OhMy";
		CustomInventoryExt.PickupSound2 "Mystery/OneOfAKind";
		CustomInventoryExt.PickUpVoice true;
		Inventory.PickupMessage "\c[gold]'What in the world...' D:";
		Inventory.Icon "MTBKI0";
		Tag "???? ?? ????: Unknown Effect";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.667;
	}
	
	States
	{
		Spawn:
			MTBK A -1;
			Loop;
		Use:
			TNT1 A 0
			{
			}
			Fail;
	}
}

class MysteryItem2 : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupSound "Dinah/OhMy";
		CustomInventoryExt.PickupSound2 "Mystery/OneOfAKind";
		CustomInventoryExt.PickUpVoice true;
		Inventory.PickupMessage "\c[gold]'What in the world...' D:";
		Inventory.Icon "TSCNA0";
		Tag "???? ??????'? ?????: Unknown Effect";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.334;
	}
	
	States
	{
		Spawn:
			TSCN A -1;
			Loop;
		Use:
			TNT1 A 0
			{
			}
			Fail;
	}
}

class RatPotion : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupSound "Misc/p_pkup";
		Inventory.PickupMessage "\c[gold]'Rodentum?' Hmm...";
		Tag "Rodentum Potion: Transforms you into a rat for 14 seconds. Armor is removed fully & Max Health is diminished to 30% of your normal maximum, but your dodge rate goes through the roof, and IP is generated at a high rate while morphed.";
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
		Inventory.Icon "RBOTI0";
		//Powerup.Type "RatMorph";
		+Inventory.InvBar
		+FloatBob
		Inventory.PickupFlash "PickupFlash";
	}
		
	States
	{
		Spawn:
			RBOT AB 6;
			Loop;
		Use:
			TNT1 A 0
			{
				A_TakeInventory("RatPotion",1);
				A_GiveInventory("PowerRatMorph",1);
				actor player = players[0].mo;
				if (player.CountInv("PowerRavenFlight")) player.A_SetInventory("PowerRavenFlight",0);
				if (player.CountInv("PowerRavenInvisibility")) player.A_SetInventory("PowerRavenInvisibility",0);
			}
			Fail;
	}
}

class RavenPowerups : CustomInventoryExt
{
	default
	{
		Inventory.MaxAmount 0;
		+Inventory.AutoActivate
	}
	States
	{
		Use:
			TNT1 A 0
			{
				A_GiveInventory("PowerRavenFlight", 1);
				//A_GiveInventory("PowerRavenInvisibility", 1);
			}
			Stop;
	}
}

class Infrared2 : PowerupGiver replaces Infrared
{
	Default
	{
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Powerup.Type "PowerLightAmp2";
		Inventory.PickupMessage "\c[gold]Oooh! These goggles actually let me see in the dark. Neat... :D";
		Inventory.PickupSound "powerups/light";
	}
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
	}
}

class BlunderAxeSchematic : CustomInventoryExt
{
	Default
	{
		Height 12;
		Radius 6;
		Scale 0.375;
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]Heeeey... this looks like an upgrade document for the Blunderaxe? More shots? Stronger shots? Yes, please!";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		string msg = PickupMsg;
		if (!player.CountInv("BlunderAxe")) msg = "\c[gold]Heeeey... this looks like an upgrade document for the Blunderaxe? If only I had one, I could upgrade it with this...\c-";
		else
		{
			if (player.CountInv("BlunderShotUpgrade") == 1) msg = "\c[gold]Heeeey... this looks like an upgrade document for the Blunderaxe? More shots? Stronger shots? Yes, please!";
			if (player.CountInv("BlunderShotUpgrade") == 2) msg = "\c[gold]Another Blunderaxe Schematic!? Yeeees, pleeease! I'm loving this!";
			if (player.CountInv("BlunderShotUpgrade") >= 3) msg = "\c[gold]Seriously, I can still upgrade my Blunderaxe one more time?! Sweeeeeet!!";
		}
		return msg;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor player = players[0].mo;
				if (player.CountInv("BlunderShotUpgrade") >= 3)
				{
					A_SpawnItemEx("BSchematicReplacer",0.0,0.0,0.0, 0.0,0.0,0.0, 0.0, SXF_NOCHECKPOSITION);
					Destroy();
				}
			}
		Idle:
			BSHM A 6;
			BSHM A 6 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("BlunderShotUpgrade",1);
			}
			stop;
	}
}

class SuperVacSchematic : CustomInventoryExt
{
	Default
	{
		Height 12;
		Radius 6;
		Scale 0.375;
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]Oooh... This schematics booklet is about the SuperVac. Time for an upgrade! >:3";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		string msg = PickupMsg;
		if (!player.CountInv("SuperVac")) msg = "\c[gold]Ah, this is an upgrade document for the SuperVac? If I had one, I'll be able to upgrade it with this...\c-";
		else
		{
			if (player.CountInv("SuperVacUpgrade") == 1) msg = "\c[gold]Oooh... This schematics booklet is about the SuperVac. Time for an upgrade! >:3";
			if (player.CountInv("SuperVacUpgrade") == 2) msg = "\c[gold]Neat, another upgrade document on the SuperVac...";
			if (player.CountInv("SuperVacUpgrade") >= 3) msg = "\c[gold]Ohohohoho... I can still upgrade the Vac one more time it seems! >:D";
		}
		return msg;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor player = players[0].mo;
				if (player.CountInv("SuperVacUpgrade") >= 3)
				{
					A_SpawnItemEx("VSchematicReplacer",0.0,0.0,0.0, 0.0,0.0,0.0, 0.0, SXF_NOCHECKPOSITION);
					Destroy();
				}
			}
		Idle:
			SVUG A 6;
			SVUG A 6 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("SuperVacUpgrade",1);
			}
			stop;
	}
}

class GrimophoneMicrochip : CustomInventoryExt
{
	Default
	{
		Height 12;
		Radius 6;
		Scale 0.375;
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]What...? This weird thing has the Grimophone's symbol on it. Should I install it?";
		Inventory.PickupSound "Dinah/Ooh1";
		CustomInventoryExt.PickUpVoice true;
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		string msg = PickupMsg;
		if (!player.CountInv("Grimophone")) msg = "\c[gold]What...? This weird thing has the Grimophone's symbol on it. If only I had one, it seems I could upgrade it with this...\c-";
		else
		{
			if (player.CountInv("GrimophoneUpgrade") == 1) msg = "\c[gold]What...? This weird thing has the Grimophone's symbol on it. Should I install it?";
			if (player.CountInv("GrimophoneUpgrade") == 2) msg = "\c[gold]Another one of these weird 'microchips' for the Grimophone. I wonder how much stronger it'll be now?";
			if (player.CountInv("GrimophoneUpgrade") >= 3) msg = "\c[gold]Oh geez, as if the Grimophone's power wasn't already overwhelming... another microchip, eh? Here goes nothing!";
		}
		return msg;
	}
	
	States
	{
		Spawn:
			GMCP A 0 NoDelay
			{
				actor player = players[0].mo;
				if (player.CountInv("GrimophoneUpgrade") >= 3) 
				{
					A_SpawnItemEx("GPChipReplacer",0.0,0.0,0.0, 0.0,0.0,0.0, 0.0, SXF_NOCHECKPOSITION);
					Destroy();
				}
				if (player.CountInv("GrimophoneUpgrade") == 2) return resolvestate("Level3");
				if (player.CountInv("GrimophoneUpgrade") == 1) return resolvestate("Level2");
				return resolvestate("Level1");
			}
		Level1:
			GMCP A 6;
			GMCP B 6 bright;
			goto Spawn;
		Level2:
			GMCP C 6;
			GMCP D 6 bright;
			goto Spawn;
		Level3:
			GMCP E 6;
			GMCP F 6 bright;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("GrimophoneUpgrade",1);
			}
			stop;
	}
}

// Raven Specific Artifact Recreations :V
class ArtiFlyNew : ArtiFly replaces ArtiFly
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 16;
		Inventory.InterHubAmount 16;
		Tag "$TAG_ARTIFLY";
		Powerup.Type "PowerFlight";
	}
	
	States
	{
		Spawn:
			SOAR ABCB 5;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerFlight"))
				{
					player.mo.SetInventory("PowerFlight",1);
					let FlightItem = PowerFlight(player.mo.FindInventory("PowerFlight"));
					if (FlightItem) FlightItem.EffectTics = 60 * TICRATE;
				}
				else
				{
					let FlightItem = PowerFlight(player.mo.FindInventory("PowerFlight"));
					if (FlightItem) FlightItem.EffectTics += 60 * TICRATE;
				}
			}
			stop;
	}
}

class ArtiEggNew : RandomSpawner2 replaces ArtiEgg
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category EE Random Spawners
		DropItem "CupOfRageSpawner", 256, 56;
		DropItem "BlurSphereSpawner", 256, 7;
		DropItem "RandomAppleSpawnerAlways", 256, 1;
	}
}

class ArtiInvisibilityNew : CustomInventoryExt replaces ArtiInvisibility
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 16;
		Inventory.InterHubAmount 16;
		Inventory.PickupFlash "PickupFlash";
		RenderStyle "Translucent";
		Alpha 0.4;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTISHDS";
		Inventory.PickupMessage "$TXT_ARTIINVISIBILITY";
		Tag "$TAG_ARTIINVISIBILITY";
	}
	States
	{
		Spawn:
			INVS A 350 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerGhost2"))
				{
					player.mo.SetInventory("PowerGhost2",1);
					let GhostItem = PowerGhost2(player.mo.FindInventory("PowerGhost2"));
					if (GhostItem) GhostItem.EffectTics = 60 * TICRATE;
				}
				else
				{
					let GhostItem = PowerGhost2(player.mo.FindInventory("PowerGhost2"));
					if (GhostItem) GhostItem.EffectTics += 60 * TICRATE;
				}
				//PowerGhost2
			}
			stop;
	}
}

class ArtiInvulnerabilityNew : CustomInventoryExt replaces ArtiInvulnerability
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 16;
		Inventory.InterHubAmount 16;
		Inventory.PickupFlash "PickupFlash";
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIIRIN";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY";
		Tag "$TAG_ARTIINVULNERABILITY";
	}
	States
	{
		Spawn:
			INVU ABCD 3 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerInvulnDD"))
				{
					player.mo.SetInventory("PowerInvulnDD",1);
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics = 30 * TICRATE;
				}
				else
				{
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics += 30 * TICRATE;
				}
			}
			stop;
	}
}

class ArtiInvulnerability2New : CustomInventoryExt replaces ArtiInvulnerability2
{
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 25;
		Inventory.InterHubAmount 25;
		Inventory.PickupFlash "PickupFlash";
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIDEFN";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY2";
		Tag "$TAG_ARTIDEFENDER";
	}
	States
	{
		Spawn:
			DEFN ABCD 3 Bright;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_StartSound("misc/invuse",CHAN_ITEM);
				if (!player.mo.CountInv("PowerInvulnDD"))
				{
					player.mo.SetInventory("PowerInvulnDD",1);
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics = 30 * TICRATE;
				}
				else
				{
					let InvulnItem = PowerInvulnDD(player.mo.FindInventory("PowerInvulnDD"));
					if (InvulnItem) InvulnItem.EffectTics += 30 * TICRATE;
				}
			}
			stop;
	}
}

class AfasDrop : ExExInvBarItem
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		//+INVENTORY.KEEPDEPLETED
		+INVENTORY.NOATTENPICKUPSOUND
		+INVENTORY.UNCLEARABLE
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 4;
		Inventory.InterHubAmount 4;
		Inventory.PickupSound "Dinah/OhMy";
		CustomInventoryExt.PickUpVoice true;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "AFASZ0";
		Inventory.PickupMessage "\c[gold]W-woah! What in the devil is this blue vial?";
		Tag "Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 5 minutes when used however... Cannot be used again until said five minutes are up.";
	}
	
	States
	{
		Spawn:
			AFAS A -1 Bright;
			stop;
		Use:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem && !MiscItem.afasdroptimer)
				{
					A_TakeInventory("AfasDrop",1);
					A_StartSound("player/statsup8",CHAN_BODY,CHANF_DEFAULT,frandom(0.335,0.5),ATTN_NORM,frandom(0.8,1.25));
					A_StartSound("player/statsup",CHAN_ITEM,CHANF_DEFAULT,frandom(0.90,1.10),ATTN_NORM,frandom(0.9,1.125));
					A_SetBlend("42 72 bc",(random(34,67) * 0.01),(random(4,5) * 12));
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/What",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					if (skill <= 0) MiscItem.afasdroptimer = (TICRATE * 30);
					if (skill == 1) MiscItem.afasdroptimer = (TICRATE * 90);
					if (skill == 2) MiscItem.afasdroptimer = (TICRATE * 150);
					if (skill == 3) MiscItem.afasdroptimer = (TICRATE * 210);
					if (skill >= 4) MiscItem.afasdroptimer = (TICRATE * 270);
					MiscItem.NumOfAfasDrops++;
				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
			fail;
	}
	
	override void Tick()
	{
		if (Amount < 1) Destroy();
		super.Tick();
		if (skill <= 0) SetTag("Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 1 minutes when used however... Cannot be used again until said minute is up.");
		if (skill == 1) SetTag("Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 3 minutes when used however... Cannot be used again until said three minutes are up.");
		if (skill == 2) SetTag("Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 5 minutes when used however... Cannot be used again until said five minutes are up.");
		if (skill == 3) SetTag("Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 7 minutes when used however... Cannot be used again until said seven minutes are up.");
		if (skill >= 4) SetTag("Afa's Drop: Increases the chance of stat boosts at a level up by 5% per type. Will reduce Health Regeneration by half for 9 minutes when used however... Cannot be used again until said nine minutes are up.");
	}
}

class LegendaryMedicine : ExExInvBarItem
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		//+INVENTORY.KEEPDEPLETED
		+INVENTORY.NOATTENPICKUPSOUND
		+INVENTORY.UNCLEARABLE
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		+Inventory.BIGPOWERUP
		Inventory.Amount 1;
		Inventory.MaxAmount 4;
		Inventory.InterHubAmount 4;
		Inventory.PickupSound "Dinah/OhMy";
		CustomInventoryExt.PickUpVoice true;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "LGMDZ0";
		Inventory.PickupMessage "\c[gold]W-woah! What in the devil are these weird pills?";
		Tag "Potentylene: Gives an artificial 'level up'. At least halves current health when used, if not more, depending on its potency, and also induces a non-lethal poison for a few seconds depending on potency.";
	}
	
	override String PickupMessage()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		string msg = PickupMsg;
		if (MiscItem && MiscItem.NumOfLegendMeds > 0)
		{
			msg = "\c[gold]Oh gods, not these toxic-tasting power-boosting pill-thingies again!";
		}
		return msg;
	}
	//
	override void Tick()
	{
		if (Amount < 1) Destroy();
		super.Tick();
	}
	
	States
	{
		Spawn:
			LGMD A -1 Bright;
			stop;
		Use:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					A_SetBlend("88 88 7a",(random(34,67) * 0.01),(random(4,5) * 12));
					A_StartSound("player/statsup5",CHAN_BODY,CHANF_DEFAULT,frandom(0.446,0.525),ATTN_NORM,frandom(0.8,1.25));
					A_TakeInventory("LegendaryMedicine",1);
					MiscItem.NumOfLegendMeds += 2;
					MiscItem.MedStrength += 1;
					if (random(1,4) <= 1) 
					{
						MiscItem.NumOfLegendMeds += 2;
						MiscItem.MedStrength += 1;
						if (random(1,16) <= 1)
						{
							MiscItem.NumOfLegendMeds += 2;
							MiscItem.MedStrength += 1;
							if (random(1,64) <= 1)
							{
								MiscItem.NumOfLegendMeds += 2;
								MiscItem.MedStrength += 1;
							}
						}
					}
				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
			fail;
	}
}

class KilletanteEffigy : Inventory
{
	mixin IPCostCheck;
	bool PickupUseVoice;
	property PickUpVoice: PickupUseVoice;
	Default
	{
		+INVENTORY.INVBAR
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+DONTGIB
		+COUNTITEM
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		Inventory.DefMaxAmount;
		Inventory.PickupFlash "PickupFlash";
		Inventory.Icon "DAKEZ0";
		Inventory.PickupSound "Dinah/MyWord";
		KilletanteEffigy.PickUpVoice true;
		Inventory.PickupMessage "\c[gold]A Killetante... effigy? What.";
		Tag "Killetante Effigy: Summons a Killetante Soloist to fight for you for up to 45 seconds, with a buffed status.";
	}
	
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (toucher != NULL && toucher.CheckLocalView())
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
		}
		else
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_MAYBE_LOCAL;
		}
		//Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				toucher.A_StopSound(chan);
				toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
			}
		}
		else
		{
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		}
	}
	
	States
	{
		Spawn:
			DAKE ABCDE 4 Bright;
			Loop;
	}
	
	bool CheckIPEnabled()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();

		if (exex_ikaripointsenabled) return true;
		else
		{
			if (player.CountInv("IsDynDuchess") || 
					player.CountInv("IsAppetite") || 
					player.CountInv("IsCarnOfSouls") || 
					player.CountInv("IsWeddingCake"))
			{
				if (MiscItem && MiscItem.TotalNRPGLvlPts >= exex_nrpglevelipgained) return true;
				else return false;
			}
		}
		return false;
	}
	
	override bool Use (bool pickup)
	{
		int buttons = GetPlayerInput(INPUT_BUTTONS,AAPTR_PLAYER1);
		let MiscItem = PlayerStatItem(owner.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
				
		bool wutthis = false;
		if (CheckIPEnabled() && MiscItem && globalvars && (owner && owner.CountInv("IPUseMode")))
		{
			double cost = A_GetIPCost(5);
			if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
			If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
			{
				MiscItem.ItemPoints -= cost;
				globalvars.ItemPoints -= cost;
				MiscItem.IPLossHUDAmt += cost;
				
				if (MiscItem.IPLossHUDTimer <= 0) MiscItem.IPLossHUDTimer = 105;
				else
				{
					MiscItem.IPLossHUDTimer += 35;
					if (MiscItem.IPLossHUDTimer < 105 && cost > (MiscItem.MaxItemPoints * 0.01)) MiscItem.IPLossHUDTimer = 105;
					if (MiscItem.IPLossHUDTimer > 175) MiscItem.IPLossHUDTimer = 175;
				}
				
				if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
				wutthis = true;
				if (wutthis) A_IPDinahVoiceSelect(0,9,10);
			}
		}
		double shotangle = 0;
		double shotangleend = 0;
		double shotangleinc = 90;
		double origangle = owner.angle;
		int maxshots = 1;
		if (wutthis) // >.> <.<
		{
			shotangle = 0;
			shotangleend = 0;
			if (random(1,8) <= 1)
			{
				shotangleinc = 72;
				maxshots = 5;
			}
			else
			{
				shotangleinc = 90;
				maxshots = 4;
			}
		}
		bool effective = false;
		bool worked = false;
		bool success;
		actor summon;
		EECreature IPSummon;
		KilletanteSoloist summon2;
		//Console.Printf("Used Incant?");
		double dist = 0;
		dist = random(4,6) * random(2,3);
		
		actor pp = actor(Owner);
		if (pp != null && pp.health > 0)
		{
			if (wutthis) pp.A_SetAngle(angle+shotangle);
			for (int i = 0; i < maxshots; i++)
			{
				if (i && wutthis) pp.A_SetAngle(pp.angle+shotangleinc);
				//Console.Printf("Player Use Attempt [Incant]?");
				[success, summon] = pp.A_SpawnItemEx("KilletanteSoloist",dist,0,0,0.0,0.0,0.0,0,SXF_SETMASTER|SXF_SETTRACER|SXF_NOCHECKPOSITION);
				if (summon && success)
				{
					//Console.Printf("Player Use Summon Attempt Phase 2 [Incant]?");
					summon2 = KilletanteSoloist(summon);
					if (summon2)
					{
						//Console.Printf("Player Use Summon Attempt Phase 3 [Incant]?");
						if (i == 0) pp.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						pp.A_SpawnItemEx("MinotaurSmoke",dist,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						pp.A_StartSound("monstersummon", 161, CHANF_DEFAULT);
						summon2.bFRIENDLY = true;
						summon2.bNOBLOCKMONST = true;
						summon2.bJUMPDOWN = true;
						summon2.bCOUNTKILL = false;
						level.total_monsters -= 1;
						summon2.ChangeTID(1000);
						summon2.IncantSummon = true;
						if (wutthis)
						{
							summon2.health *= frandompick(0.875,1.0,1.125);
							summon2.Speed *= frandompick(1.0,1.125,1.25);
							summon2.Mass *= frandompick(1.25,1.5,1.75);
							summon2.DamageFactor *= frandompick(0.50,0.625,0.75);
							summon2.IncantSummonTimer = 15750;
							summon2.reactive1 = 13125;
							IPSummon = EECreature(summon2);
							if (IPSummon) IPSummon.IPAttackSummon = true;
						}
						else
						{
							summon2.IncantSummonTimer = 1575; // summons her with FORTYFIVE seconds of time to exist
							summon2.reactive1 = random(1312,1313); // summons her with FORTYFIVE seconds of buff to use against enemies
						}
	
						worked = true;
					}
					else
					{
						//Console.Printf("Player Use Summon Attempt Fail");
						summon.Destroy();
						worked = false;
					}
				}
			}
			if (wutthis) pp.A_SetAngle(origangle);

			if (worked)
			{
				//Console.Printf("Worked?");
				if (!wutthis) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (pp.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						pp.A_StopSound(CHAN_VOICE);
						pp.A_StartSound("Dinah/There",CHAN_VOICE,CHANF_DEFAULT,frandom(1.125,1.25),ATTN_NORM,maskpitch);
					}
				}
				effective = true;
			}
			if (wutthis) A_CheckIPModeOnUse();
		}
		
		return effective;
	}
}

class AllmapNew : MapRevealer replaces AllMap
{
	Default
	{
		+COUNTITEM
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "\c[gold]So this doohickey is a computerized mapping system? Might come in handy.\c-";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		GoAwayAndDie();
		if (toucher) toucher.A_SetInventory("PowerScannerDD",1);
		return true;
	}

	States
	{
		Spawn:
			PMAP ABCDCB 6 Bright;
			Loop;
	}
}

class SuperMapNew : MapRevealer replaces SuperMap
{
	Default
	{
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		+FLOATBOB
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]A map scroll with some magical incantation...\c-";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		GoAwayAndDie();
		if (toucher) toucher.A_SetInventory("PowerScannerDD",1);
		return true;
	}

	States
	{
		Spawn:
			SPMP A -1;
			stop;
	}
}

class DoubleSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Damage!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			DDMG ABCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("PowerDouble");
				A_StartSound("buff/atkup",205);
			}
			Stop;
	}
}

class GuardSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Defense!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			GUAD ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("PowerGuard");
				A_StartSound("buff/defup",205);
			}
			Stop;
	}
}

class HasteSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Speed Up!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			HAST ABC 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("PowerHaste");
				A_StartSound("buff/spdup",205);
			}
			Stop;
	}
}

class TerrorSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "The Terrorsphere!";
		Inventory.PickupSound "powerup/fear";
	}
	
	States
	{
		Spawn:
			TERR ABCDE 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/What",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_GiveInventory("PowerTerror");
			}
			Stop;
	}
}

class InvulnSphereSpawner : RandomSpawner2 replaces InvulnerabilitySphere
{
	default
	{
		DropItem "InvulnerabilitySphere2", 256, 119;
		DropItem "BlurSphere2", 256, 2;
		DropItem "DoubleSphere", 256, 2;
		DropItem "GuardSphere", 256, 2;
		DropItem "HasteSphere", 256, 1;
		DropItem "TerrorSphere", 256, 1;
		DropItem "HarmonySphere", 256, 1;
	}
}

class BlurSphereSpawner : RandomSpawner2 replaces BlurSphere
{
	default
	{
		DropItem "BlurSphere2", 256, 226;
		DropItem "InvulnerabilitySphere2", 256, 5;
		DropItem "DoubleSphere", 256, 5;
		DropItem "GuardSphere", 256, 5;
		DropItem "HasteSphere", 256, 5;
		DropItem "TerrorSphere", 256, 5;
		DropItem "HarmonySphere", 256, 5;
	}
}

class BowlingBallPickup : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupSound "Dinah/giggle";
		CustomInventoryExt.PickUpVoice true;
		Inventory.PickupMessage "\c[gold] A standard issue, regular Bowling Ball...\c-";
		Inventory.Icon "BWBLI0";
		Tag "Bowling Ball";
		Scale 0.8;
		+INVENTORY.INVBAR;
		+FLOATBOB;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();
		string tagg = default.GetTag();
		if (player.CountInv(itemname) > 0 && !A_CheckDDGame())
		{
			tagg.AppendFormat(": \c[fire]Throw at an enemy to effectively \c[sapphire]insta-kill\c[fire] them.");
		}
		else tagg.AppendFormat(" \c[purple][you must have one or more of this item to see its effect(s)]\c-");
		SetTag(tagg);
		super.Tick();
	}

	override String PickupMessage()
	{
		string msg = "\c[gold] A standard issue, regular Bowling Ball...\c-";
		if (!A_CheckDDGame()) msg.AppendFormat(" \c[sapphire][Throw this to instant kill any enemy it hits! :V]\c-");
		return msg;
	}
	
	States
	{
		Spawn:
			BWBL P -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				double angmin = 4.0;
				double angmax = -3.0;
				double zadd = 35;
				zadd -= (random(1,4) * 3);
				double xyvel = ((frandom(3,5) + frandom(-1,1)) * 2.5);
				double zvel = 0.0;
				if (player.ReadyWeapon is "HandToHand")
				{
					angmin *= frandom(0,0.1);
					angmax *= frandom(0,0.1);
					xyvel += frandom(((20.0 - xyvel)*0.5),(20.0 - xyvel));
					zadd -= (frandom(4,8) * 3);
					if (zadd < 6) zadd = 6;
				}
				if (player.mo.CountInv("PowerStrengthDD") || player.mo.CountInv("PowerStrength"))
				{
					xyvel *= 5;
				}
				A_ThrowGrenadeAngle("BowlingBallShot",4,zadd,xyvel,zvel,angmin,angmax);
			}
			Stop;
	} 
}

class BowlingBallShot : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 7;
		Damage 18;
		Gravity 0.25;
		Projectile;
		BounceType "Grenade";
		DamageType "LOLEBowling";
		BounceFactor 0.5;
		BounceCount 10;
		-NOGRAVITY;
		+TELESTOMP;
		-NOTELEPORT;
		+DONTREFLECT;
		+NOEXTREMEDEATH;
		+RIPPER;
	}
	
	override void OnDestroy()
	{
		if (ddafddebug_ACS) Console.Printf("BowlingBall go poof!");
		actor player = players[0].mo;
		if (player)
		{
			if (player.CountInv("IsDynDuchess"))
			{
				ACS_Execute(728,8,0,0,0);
				if (ddafddebug_ACS) Console.Printf("Script 728 should have activated on MAP08");
			}
			if (player.CountInv("IsCarnOfSouls"))
			{
				ACS_Execute(728,42,0,0,0);
				if (ddafddebug_ACS) Console.Printf("Script 728 should have activated on MAP42");
			}
		}
		super.OnDestroy();
	}
	
	States
	{
		Spawn:
			BWBL A 50;
			Loop;
		Death:
			BWBL A 1;
			Stop;
	}
}

//Ducat
class Money_Ducat : PuzzleItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 9999;
		Inventory.InterHubAmount 9999;
		Inventory.Icon "DUCTI0";
		Inventory.PickupMessage "\c[gold]A pretty Heavenly ducat!\c- [+1 Ducat]";
		Inventory.PickupSound "misc/i_pkup";
		PuzzleItem.Number 5;
		Tag "Heavenly Ducat";
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		+FLOATBOB;
		-NOGRAVITY;
	}
	
	override void Tick()
	{
		super.Tick();
		actor player = players[0].mo;
		if (Amount < 1 && !player.CountInv("IsCarnOfSouls")) 
		{
			bKEEPDEPLETED = false;
			Destroy();
		}
	}
	
	States
	{
		Spawn:
			DUCT A 0 NoDelay
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.IsDDTrilogy)
				{
					if (player.CountInv("IsDynDuchess"))
					{
						A_SpawnItemEx("ArcadeChip",flags:SXF_NOCHECKPOSITION);
						self.Destroy();
					}
				}
			}
			DUCT A 2 bright;
			DUCT BCD 2;
			Loop;
	}
}

class Money_Sequin : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "\c[gold]A pretty Heavenly Sequin!\c- [+5 Ducats]";
		Inventory.PickupSound "misc/i_pkup";
		Tag "Heavenly Sequin [worth 5 Ducats]";
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			SEQN A 2 bright;
			SEQN BCD 2;
			Loop;
		Pickup:
			CHST A 1 A_GiveInventory("Money_Ducat",5);
			stop;
	}
}

class GreedChest : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "\c[gold]I found a heavenly chest full of loot!\c- [+25 Heavenly Ducats]";
		Inventory.PickupSound "dinah/giggle";
		CustomInventoryExt.PickupVoice true;
		Tag "Chest (Greed)";
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			CHSG A 20 bright;
			Loop;
		Pickup:
			CHSG A 1 A_GiveInventory("Money_Ducat",25);
			stop;
	}
}

class WrathChest : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "\c[gold]I found a devilish chest full of weapons!\c- [+4 Cherry Bombs, +1 Bottle Rocket, +2 Spinners, +10 Blundershot, +10 Aggro-Apples, +3 Pints of Devil's Food, +5 Fractal Eggs]";
		Inventory.PickupSound "dinah/marvelous";
		CustomInventoryExt.PickupVoice true;
		Tag "Chest (Wrath)";
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			CHSF A 20 bright; 
			Loop;
		Pickup:
			CHSF A 1 
			{
				A_GiveInventory("CherryBombPickup",4);
				A_GiveInventory("BRocketPickup",1);
				A_GiveInventory("SpinnerPickup",2);
				A_GiveInventory("BlunderAmmo",10);
				A_GiveInventory("JackAmmo",10);
				A_GiveInventory("PikeAmmo",3);
				A_GiveInventory("EggAmmo",5);
			}
			stop;
	}
}

class AmmoSphere : PowerupGiver
{
	default
	{
		//$Category Powerups
		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		
		Inventory.PickupMessage "\c[gold]What the blazes?! Why is my ammo suddenly glowing with this weird light?!\c- [Infinite Ammo]";
		Inventory.PickupSound "misc/p_pkup";
		Powerup.Duration -30;
		Powerup.Type "PowerInfiniteAmmo2";
		Powerup.Color "80 80 0", 0.4;
		FloatBobStrength 0.5;
	}
	
	States
	{
		Spawn:
			AMSP ABCD 6 bright;
			loop;
	}
}

class RageSphere : PowerupGiver
{
	default
	{
		//$Title Rage Sphere
		//$Category PowerUps

		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;

		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[gold]W-woah! Suddenly it feels like I got some kind of boon to my weapon proficiency!";
		Powerup.Type "PowerDoubleFiringSpeed2";
		Powerup.Color "FF 10 10", 0.25;
		Powerup.Duration -60;
		RenderStyle "Translucent";
		Alpha 0.8;
		FloatBobStrength 0.5;
	}
	
	States
	{
		Spawn:
			RAGS ABCDCB 5 Bright;
			Loop;
	}
}

class ExpeditionHat : CustomInventoryExt
{
	default
	{
		inventory.icon "HATAA0";
		+FLOATBOB;
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNCLEARABLE;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "\c[gold]This is a really snazzy hat! My head could use some shade from the hea... wait, what in the world is this hat?! It feels like my body's at ease, maybe a bit too much at ease...";
		Inventory.PickupSound "Dinah/giggle";
		CustomInventoryExt.PickupSound2 "";
		CustomInventoryExt.PickUpVoice true;
		RenderStyle "Translucent";
		Scale 0.875;
		Alpha 1.0;
		FloatBobStrength 2;
	}
	
	states
	{
		Spawn:
			HATA A -1;
			loop;
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ClassyRibbon : CustomInventoryExt
{
	default
	{
		inventory.icon "RIBBA0";
		+FLOATBOB;
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNCLEARABLE;

		Inventory.MaxAmount 1;
		Inventory.PickupMessage "\c[gold]Ooooohh.... this is quite the cute ribbon. Should fit right in my hair here and... woah!! Woah woah woah... what in blazes is this thing really?!";
		Inventory.PickupSound "Dinah/giggle";
		CustomInventoryExt.PickupSound2 "";
		CustomInventoryExt.PickUpVoice true;
		RenderStyle "Translucent";
		Scale 0.875;
		Alpha 1.0;
		FloatBobStrength 2;
	}
	
	states
	{
		Spawn:
			RIBB A -1;
			loop;
		Use:
			TNT1 A 0;
			Stop;
	}
}

class HarmonySphere : PowerupGiver
{
	default
	{
		//$Category PowerUps

		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;

		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[yellow]Harmonic Anger:\c- IP cannot be gained, but also cannot be spent from using abilities!";
		Powerup.Type "HarmonicAnger";
		Powerup.Color "FF 10 10", 0.00;
		Scale 0.75;
		Powerup.Duration -30;
		RenderStyle "Translucent";
		Alpha 0.8;
		FloatBobStrength 1.125;
	}
	
	States
	{
		Spawn:
			HRMS ABCCBAABBCBBA 4 Bright;
			Loop;
	}
}

class MAManual : CustomInventoryExt
{
	default
	{
		//$Category EE Artifacts
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNCLEARABLE;
		Inventory.MaxAmount 1;
		Inventory.Icon "MAMNI0";
		Inventory.PickupMessage "\c[gold]A manual of martial arts?! Is this one of Lady Hasselstrand's books?!\c-";
		Inventory.PickupSound "Dinah/what";
		CustomInventoryExt.PickUpVoice true;
		Inventory.MaxAmount 1;
		Tag "Manual of Martial Arts";
	}
	
	States
	{
		Spawn:
			MAMN A -1;
			Stop;
		Use:
			TNT1 A 0;
			Stop;
	}
}

// Crystal Ball Item for Summoning the real Delila as a friendly ally >:3
class StrangeCrystalBall : ExExInvBarItem
{
	default
	{
		//$Category EE Artifacts
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.Icon "MEM5I0";
		Inventory.PickupMessage "\c[gold]Hey wait, this is Delila's Crystal Ball, Isn't It?\c-";
		Inventory.PickupSound "Dinah/what";
		Inventory.MaxAmount 1;
		Tag "Delila Dorsey's Crystal Ball";
		+FLOATBOB;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			MEM5 A -1;
			Stop;
		Use:
			TNT1 A 0 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				int PlayerLevel = 0;
				if (MiscItem) PlayerLevel = MiscItem.TruePlayerLevel;
				
				ThinkerIterator DelilaFinder = ThinkerIterator.Create("DelilaDorsey_HelperFriend");
				Actor mo;
				DelilaDorsey_HelperFriend mo2;
				int numfound = 0;
				while (mo = Actor(DelilaFinder.Next()))
				{
					mo2 = DelilaDorsey_HelperFriend(mo);
					if (mo2 && mo2.health > 0)
					{
						numfound++;
						//Console.Printf("Found a DinahPlayer! - health: %d, [%s]", mo2.health, mo2.GetClassName());
					}
				}
				
				if (!numfound)
				{
					bool success;
					actor summon;
					[success, summon] = A_SpawnItemEx("DelilaDorsey_HelperFriend",32,0,0,0.0,0.0,0.0,0,SXF_SETMASTER|SXF_SETTRACER|SXF_NOCHECKPOSITION);
					if (success && summon)
					{
						DelilaDorsey_HelperFriend summon2;
						summon2 = DelilaDorsey_HelperFriend(summon);
						if (summon2)
						{
							//Console.Printf("Player Use Summon Attempt Phase 3 [Incant]?");
							A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
							A_SpawnItemEx("MinotaurSmoke",32,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
							A_StartSound("monstersummon", 161, CHANF_DEFAULT);
							summon2.bFRIENDLY = true;
							summon2.bNOBLOCKMONST = true;
							summon2.bJUMPDOWN = true;
							if (summon2.bCOUNTKILL)
							{
								summon2.bCOUNTKILL = false;
								level.total_monsters -= 1;
							}
							summon2.ChangeTID(1000);
							summon2.user_levelpreset = PlayerLevel;
							player.A_TakeInventory("StrangeCrystalBall",1);
						}
					}
				}
				else
				{
					double maskpitch = 1.00;
					if (player.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StartSound("inv_fail",73,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
			}
			Fail;
	}
}
