// A specialized armor class for KnightGowns to allow future extra functions/features, maybe? V:
class KGArmor : BasicArmor
{
	Default
	{
		Inventory.Amount 0;
		+Inventory.KEEPDEPLETED
	}
	
	override void Tick()
	{
		Armor.Tick();
		AbsorbCount = 0;
		if (!Icon.isValid())
		{
			String icontex = gameinfo.ArmorIcon1;

			if (SavePercent >= gameinfo.Armor2Percent && gameinfo.ArmorIcon2.Length() != 0)
				icontex = gameinfo.ArmorIcon2;

			if (icontex.Length() != 0)
				Icon = TexMan.CheckForTexture (icontex, TexMan.TYPE_Any);
		}
	}
	
	override Inventory CreateCopy (Actor other)
	{
		// BasicArmor that is in use is stored in the inventory as BasicArmor.
		// BasicArmor that is in reserve is not.
		let copy = KGArmor(Spawn("KGArmor"));
		copy.SavePercent = SavePercent != 0 ? SavePercent : 0.33335;	// slightly more than 1/3 to avoid roundoff errors.
		copy.Amount = Amount;
		copy.MaxAmount = MaxAmount;
		copy.Icon = Icon;
		copy.BonusCount = BonusCount;
		copy.ArmorType = ArmorType;
		copy.ActualSaveAmount = ActualSaveAmount;
		GoAwayAndDie ();
		return copy;
	}
	
	bool CheckMeleeDamageTypes(Name damageType)
	{
		bool check = false;
		if (damageType == 'Melee' || 
				damageType == 'Trample' || 
				damageType == 'Stomp' || 
				damageType == 'Fist' || 
				damageType == 'Kick' || 
				damageType == 'Knife' || 
				damageType == 'Chainsaw' ||
				damageType == 'Bonk' || 
				damageType == 'Bap' || 
				damageType == 'Chop') check = true;
		return check;
	}
	
	override bool HandlePickup(Inventory item)
	{
		return item.GetClass() == 'KGArmor';
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		string infl, sour, vict;
		if (owner == null) vict = "NONE"; else vict = owner.GetClassName();
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE"; else sour = source.GetClassName();
		int saved;
		double initSavePercent = SavePercent;
		
		DDPlayerPawn PlayPawn;
		PlayPawn = DDPlayerPawn(owner);
		if (PlayPawn)
		{
			SavePercent *= (1.0 - PlayPawn.PlayerArmorIgnoreFactor);
			if (dydudebug_playerdamagemobj) Console.Printf("\c[darkgreen]SavePercent:\c- \c[brick]%.4f\c- \c[gold][%.4f]\c", SavePercent, initSavePercent);
		}
		
		if (!DamageTypeDefinition.IgnoreArmor(damageType))
		{
			int full = MAX(0, MaxFullAbsorb - AbsorbCount);
			
			if (damage < full)
			{
				saved = damage;
			}
			else
			{
				saved = full + int((damage - full) * SavePercent);
				if (MaxAbsorb > 0 && saved + AbsorbCount > MaxAbsorb) 
				{
					saved = MAX(0,  MaxAbsorb - AbsorbCount);
				}
			}
			
			int firstsaved = saved;
			
			int oldsaved = saved;
			double savebase;
			// IP Buffs for Armor also reduce the amount of armor actually LOST :V
			if (PlayPawn.CountInv("KnightGownIP1Buff")) savebase = 0.25;
			if (PlayPawn.CountInv("KnightGownIP2Buff")) savebase = 0.375;
			if (PlayPawn.CountInv("KnightGownIP3Buff")) savebase = 0.4375;
			if (PlayPawn.CountInv("KnightGownIP4Buff")) savebase = 0.46875;
			if (MiscItem)
			{
				if (MiscItem.armoritemdifficulty == 1) savebase *= 1.5;
				if (MiscItem.armoritemdifficulty == 2) savebase *= 1.75;
				if (MiscItem.armoritemdifficulty >= 3) savebase *= 3.0;
			}
			if (savebase >= 0.75) savebase = 0.75;
			saved *= (1.0 - savebase);
			if (dydudebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post IP]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);

			if (random(1,16) <= (random(7,9) + (8 - (skill * 2)))) 
			{
				oldsaved = saved;
				savebase = 0.0;
				if (PlayPawn.CountInv("ClassyRibbon")) savebase += 0.025;
				if (PlayPawn.CountInv("ExpeditionHat")) savebase += 0.10;
				savebase *= frandompick(0.5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				if (savebase >= 0.25) savebase = 0.25;
				saved *= (1.0 - savebase);
				if (dydudebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Special]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}
			
			if (MiscItem)
			{
				oldsaved = saved;
				savebase = 0.00;
				if (MiscItem.WineDefTier == 1) savebase = 0.0025;
				else if (MiscItem.WineDefTier == 2) savebase = 0.0075;
				else if (MiscItem.WineDefTier == 3) savebase = 0.015;
				else if (MiscItem.WineDefTier == 4) savebase = 0.025;
				else if (MiscItem.WineDefTier == 5) savebase = 0.0375;
				else if (MiscItem.WineDefTier == -1) savebase = 0.0075;
				else if (MiscItem.WineDefTier == -2) savebase = 0.0225;
				else if (MiscItem.WineDefTier == -3) savebase = 0.075;
				else if (MiscItem.WineDefTier == -4) savebase = 0.125;
				else if (MiscItem.WineDefTier == -5) savebase = 0.175;
				if (MiscItem)
				{
					if (MiscItem.armoritemdifficulty == 1) savebase *= 1.5;
					if (MiscItem.armoritemdifficulty == 2) savebase *= 1.75;
					if (MiscItem.armoritemdifficulty >= 3) savebase *= 3.0;
					if (savebase >= 0.75) savebase = 0.75;
				}
				saved *= (1.0 - savebase);
				if (dydudebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Wine]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}
			
			if (PlayPawn)
			{
				oldsaved = saved;
				if (CheckMeleeDamageTypes(damageType))
				{
					if (PlayPawn.armortier <= 1) savebase = 0.2;
					if (PlayPawn.armortier == 2) savebase = 0.4;
					if (PlayPawn.armortier == 3) savebase = 0.6;
					if (PlayPawn.armortier >= 4) savebase = 0.8;
				}
				if (damageType == 'Zap' ||
						damageType == 'Magic')
				{
					if (PlayPawn.armortier <= 1) savebase = 0.1;
					if (PlayPawn.armortier == 2) savebase = 0.2;
					if (PlayPawn.armortier == 3) savebase = 0.3;
					if (PlayPawn.armortier >= 4) savebase = 0.4;
				}
				saved *= (1.0 - savebase);
				if (dydudebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post DmgType]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}

			if (Amount < saved)
			{
				saved = Amount;
			}
			newdamage -= firstsaved;
			Amount -= saved;
			AbsorbCount += saved;
			if (Amount == 0)
			{
				// The armor has become useless
				SavePercent = 0;
				ArmorType = 'None'; // Not NAME_BasicArmor.
				// Now see if the player has some more armor in their inventory
				// and use it if so. As in Strife, the best armor is used up first.
				KGArmorPickup best = null;
				Inventory probe = Owner.Inv;
				while (probe != null)
				{
					let inInv = KGArmorPickup(probe);
					if (inInv != null)
					{
						if (best == null || best.SavePercent < inInv.SavePercent)
						{
							best = inInv;
						}
					}
					probe = probe.Inv;
				}
				if (best != null)
				{
					Owner.UseInventory(best);
				}
			}
			damage = newdamage;
		}
		if (amount > 0) SavePercent = initSavePercent;

		// Once the armor has absorbed its part of the damage, then apply its damage factor, if any, to the player
		if ((damage > 0) && (ArmorType != 'None')) // KGArmor is not going to have any damage factor, so skip it.
		{
			newdamage = ApplyDamageFactors(ArmorType, damageType, damage, damage);
		}
	}
}

class KGArmorBonus : BasicArmorBonus
{
	mixin ItemFallSpotCheck;
	override Inventory CreateCopy (Actor other)
	{
		let copy = KGArmorBonus(Super.CreateCopy(other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxSaveAmount = MaxSaveAmount;
		copy.BonusCount = BonusCount;
		copy.BonusMax = BonusMax;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}
	
	override bool Use (bool pickup)
	{
		let armor = KGArmor(Owner.FindInventory("KGArmor"));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn("KGArmor"));
			armor.BecomeItem ();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}

		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
	
	override void Tick()
	{
		super.Tick();
		ItemFallCheck();
	}
	
	Default
	{
		+Inventory.AUTOACTIVATE
		+Inventory.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Armor.SavePercent 33.335;
	}
}

class KGArmorPickup : BasicArmorPickup
{
	override Inventory CreateCopy (Actor other)
	{
		let copy = KGArmorPickup(Super.CreateCopy (other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}

	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";

		int SaveAmount = GetSaveAmount();
		let armor = KGArmor(Owner.FindInventory(armorclasstype));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
}

//***********************
//** Armor Bonus Types **
//***********************
class ArmorScrap : KGArmorBonus
{
	mixin HUDRecovery;
	int user_type;
	int basespawnchance;
	int spawntype, user_armorscraptype;
	default
	{
		Inventory.Icon "DACLB0";
		Inventory.Pickupmessage "\c[gold]A Knight-Gown Scrap! Every piece helps I guess...\c-";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 50;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 2000;
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		if (spawntype == 1) 
		{
			msg = "\c[gold]A Knight-Gown Scrap! ";
			int roll = random(1,42);
			if (roll >= 1 && roll <= 16) msg.AppendFormat("\c[gold]Every piece helps I guess...\c-");
			if (roll >= 17 && roll <= 32) msg.AppendFormat("\c[gold]I hope picking up all of these are worth it...\c-");
			if (roll >= 33 && roll <= 36) msg.AppendFormat("\c[gold]Hopefully I don't become a living ball of scrap cotton...\c-");
			if (roll >= 37 && roll <= 40) msg.AppendFormat("\c[gold]What, am I supposed to just glue these onto my body...?\c-");
			if (roll == 41) msg.AppendFormat("\c[gold]I didn't know so many scraps could even form into a full dress like this...\c-");
			if (roll == 42) msg.AppendFormat("\c[gold]Sometimes I wish now that I had taken up sewing like Frieda...\c-");
		}
		if (spawntype == 2) msg = "\c[gold]A Large Knight-Gown Scrap...\c-";
		if (spawntype == 3) msg = "\c[gold]A Huge Knight-Gown Scrap!\c-";
		if (spawntype == 4) msg = "\c[gold]A Kit of Knight-Gown Scraps and some tools for scavenging more from large armor!\c-";
		msg.AppendFormat(" \c[green]+%d Armor", SaveAmount);
		return msg;
	}

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		spawntype = 1;
		if (skill <= 0) basespawnchance = 9;
		if (skill == 1) basespawnchance = 12;
		if (skill == 2) basespawnchance = 15;
		if (skill == 3) basespawnchance = 18;
		if (skill >= 4) basespawnchance = 21;
		if (bDROPPED) 
		{
			if (skill <= 0) basespawnchance *= 1.25;
			if (skill == 1) basespawnchance *= 2.0;
			if (skill == 2) basespawnchance *= 2.5;
			if (skill == 3) basespawnchance *= 3;
			if (skill >= 4) basespawnchance *= 4;
		}
		actor player = players[0].mo;
		let globalvars = DDGlobalVariables.Get();
		int mapsbeat = 0;
		if (globalvars) 
		{
			if (player.CountInv("IsDynDuchess") || 
					player.CountInv("IsAppetite") || 
					player.CountInv("IsCarnOfSouls") || 
					player.CountInv("IsWeddingCake"))
			{
				mapsbeat = 0;
			}
			else
			{
				mapsbeat = (globalvars.MapsFinished + 1);
			}
		}
		double base = 0.025;
		if (bDROPPED) base *= 0.25;
		if (random(1,basespawnchance) <= (1 + (mapsbeat * base)))
		{
			SaveAmount = 5;
			Scale = (1.125, 1.125);
			spawntype = 2;
			
			base = 0.0125;
			if (bDROPPED) base *= 0.25;
			if (random(1,basespawnchance) <= (1 + (mapsbeat * base)))
			{
				SaveAmount = 10;
				Scale = (1.3125, 1.3125);
				spawntype = 3;
				
				base = 0.00625;
				if (bDROPPED) base *= 0.25;
				if (random(1,basespawnchance) <= (1 + (mapsbeat * base))) 
				{
					SaveAmount = 25;
					Scale = (1.5, 1.5);
					spawntype = 4;
					bFLOATBOB = false;
				}
			}
		}
		if (user_armorscraptype > 0) 
		{
			if (user_armorscraptype > 4) user_armorscraptype = 4;
			spawntype = user_armorscraptype;
		}
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem) MaxSaveAmount = MiscItem.ArmorItemMax4;
						 else MaxSaveAmount = 2000;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		if (spawntype >= 4) owner.A_GiveInventory("ArmorScavengerKit",randompick(3,4,4,5,5,5,6,6,7));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			if (dydudebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			if (PrevArmorType == 0)
			{
				armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (dydudebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		return true;
	}
	
	States
	{
		Spawn:
			DACL B 0 NoDelay BRIGHT
			{
				int basechance = 32;
				if (bDROPPED) basechance * 4;
				if (random(1,basechance) <= 1)
				{
					user_type = random(1,36);
					if (user_type >= 1 && user_type <= 14) { A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 15 && user_type <= 23) { A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 24 && user_type <= 29) { A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 30 && user_type <= 34) { A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 35) { A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }

					Thing_Remove(0); 
				}
			}
		Idle:
			DACL B 0 BRIGHT
			{
				if (spawntype == 4) return resolvestate("Idle4");
				if (spawntype == 3) return resolvestate("Idle3");
				if (spawntype == 2) return resolvestate("Idle2");
				return resolvestate("Idle1");
			}
		Idle1:
			DACL B -1 BRIGHT;
			stop;
		Idle2:
			DACL C -1 BRIGHT;
			stop;
		Idle3:
			DACL D -1 BRIGHT;
			stop;
		Idle4:
			DACL E -1 BRIGHT;
			stop;
	}
}

class ArmorScrapSilent : ArmorScrap
{
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem) MaxSaveAmount = MiscItem.ArmorItemMax4;
						 else MaxSaveAmount = 2000;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		if (spawntype >= 4) owner.A_GiveInventory("ArmorScavengerKit",randompick(3,4,4,5,5,5,6,6,7));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			if (dydudebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			if (PrevArmorType == 0)
			{
				armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (dydudebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		
		return true;
	}
}

class ArmorScrapKit : ArmorScrap
{
	default
	{
		Inventory.Icon "DACLE0";
		Inventory.Pickupmessage "\c[gold]A Kit of Knight-Gown Scraps and some tools for scavenging more from large armor!\c-";
		Inventory.PickupSound "Scrap/Find";
		Armor.SavePercent 50;
		Armor.SaveAmount 25;
		Armor.MaxSaveAmount 2000;
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
		-FLOATBOB
		+DONTGIB
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		msg.AppendFormat(" \c[green]+%d Armor", SaveAmount);
		return msg;
	}
	
	override void PostBeginPlay()
	{
		//super.PostBeginPlay();
		KGArmorBonus.PostBeginPlay();
	}
	
	override bool Use (bool pickup)
	{
		int armorgive = 25;
		for (int i; i < armorgive; i++) owner.A_GiveInventory("ArmorScrap",1);
		owner.A_GiveInventory("ArmorScavengerKit",randompick(3,4,4,5,5,5,6,6,7));
		/*
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem) MaxSaveAmount = MiscItem.ArmorItemMax4;
						 else MaxSaveAmount = 2000;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			if (dydudebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			if (PrevArmorType == 0)
			{
				armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (dydudebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		*/

		return true;
	}
	
	States
	{
		Spawn:
			DACL E -1 BRIGHT;
			stop;
	}
}

class WineArmor : KGArmorBonus
{
	mixin HUDRecovery;
	int user_type;
	int basespawnchance;
	int spawntype;
	default
	{
		+DONTGIB
		+FLOATBOB
		Inventory.PickupMessage "\c[gold]Eh... One little sip won't hurt... right?";
		Inventory.Icon "WINEI0";
		Armor.SavePercent 50;
		Armor.SaveAmount 50;
		Armor.MaxSaveAmount 2000;
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
	}
	
	override void PostBeginPlay()
	{
		KGArmorBonus.PostBeginPlay();
	}
	
	override bool Use (bool pickup)
	{
		int armorgive = 50;
		for (int i; i < armorgive; i++) owner.A_GiveInventory("ArmorScrap",1);
		/*
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax0;
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem) MaxSaveAmount = MiscItem.ArmorItemMax4;
						 else MaxSaveAmount = 2000;
		if (MiscItem)
		{
			ArmorItemMax0 = MiscItem.ArmorItemMax0;
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			if (dydudebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			if (PrevArmorType == 0)
			{
				armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (dydudebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (dydudebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		*/
		
		return true;
	}
	
	States
	{
		Spawn:
			WINE A -1;
			Stop;
	}
}

//************************
//** Armor Pickup Types **
//************************
class KnightGown : KGArmorPickup
{
	mixin HUDRecovery;
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "KGWNI0";
		Inventory.Pickupmessage "";
		Inventory.PickupSound "";
		Armor.SavePercent 50;
		Armor.SaveAmount 125;
		DamageFactor "Melee", 0.8;
		DamageFactor "Zap", 0.9;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);

		int SaveAmount;
		if (MiscItem) SaveAmount = MiscItem.ArmorItemGive1;
		//SaveAmount = GetSaveAmount();
		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		if (dydudebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			int maxa = ArmorItemMax1;
			if (PrevArmorType == 1) maxa = ArmorItemMax1;
			if (PrevArmorType == 2) maxa = ArmorItemMax2;
			if (PrevArmorType == 3) maxa = ArmorItemMax3;
			if (PrevArmorType == 4) maxa = ArmorItemMax4;
			if (dydudebug_armordisplays) Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		int actualapadd;
		double skillapaddfactor = 0.8;
		if (skill <= 0) skillapaddfactor = 0.8;
		if (skill == 1) skillapaddfactor = 0.75;
		if (skill == 2) skillapaddfactor = 0.667;
		if (skill == 3) skillapaddfactor = 0.625;
		if (skill >= 4) skillapaddfactor = 0.53125;
		double remainfactor = ((1.0 - skillapaddfactor) * 0.01);
		skillapaddfactor += (owner.CountInv("ArmorScavengerKit") * remainfactor);
		if (PrevArmorType <= 0)
		{
			if (exex_armorpkupnoise) A_StartSound("armor/vest",233,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		}
		if (exex_armorpkupnoise) A_StartSound("armor/pickup1",234,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		if (PrevArmorType <= 1)
		{
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			actualapadd = (SaveAmount + armor.BonusCount);
		}
		if (PrevArmorType == 2)
		{
			actualapadd = ((SaveAmount + armor.BonusCount) * skillapaddfactor);
		}
		if (PrevArmorType == 3)
		{
			actualapadd = (((SaveAmount + armor.BonusCount) * skillapaddfactor) * skillapaddfactor);
		}
		if (PrevArmorType >= 4)
		{
			actualapadd = ((((SaveAmount + armor.BonusCount) * skillapaddfactor) * skillapaddfactor) * skillapaddfactor);
		}
		if (armor.Amount <= 0) armor.Amount = actualapadd;
											else armor.Amount += actualapadd;
		
		if (PrevArmorType <= 1)
		{
			if (armor.Amount > ArmorItemMax1) armor.Amount = ArmorItemMax1;
		}
		if (PrevArmorType == 2)
		{
			if (armor.Amount > ArmorItemMax2) armor.Amount = ArmorItemMax2;
		}
		if (PrevArmorType == 3)
		{
			if (armor.Amount > ArmorItemMax3) armor.Amount = ArmorItemMax3;
		}
		if (PrevArmorType == 4)
		{
			if (armor.Amount > ArmorItemMax4) armor.Amount = ArmorItemMax4;
		}

		if (PrevArmorType <= 1)
		{
			armor.Icon = Icon;
			armor.MaxAbsorb = MaxAbsorb;
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ArmorType = GetClassName();
			armor.ActualSaveAmount = SaveAmount;
		}
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		if (MiscItem && MiscItem.CanTalkUnderwater)
		{
			double maskpitch = 1.00;
			if (owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			owner.A_StopSound(CHAN_VOICE);
			owner.A_StartSound("Dinah/marvelous",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
		}
		if (PrevArmorType <= 0) Console.Printf("\c[purple]Knight-Gown (50% Protection)\c- \c[green][+%d Armor]\c-", actualapadd);
											 else Console.Printf("Assimilated a \c[purple]Knight-Gown\c- into your current armor! \c[green][+%d Armor]\c-", actualapadd);
		return true;
	}
	
	States
	{
		Spawn:
			KGWN A -1 BRIGHT;
			Stop;
	}
}

class KnightGown_Flipped : KnightGown
{
	default
	{
		//$Category EE Props (Flipped)
		+NOGRAVITY
		Tag "Knight-Gown (Flipped)";
	}
	
	States
	{
		Spawn:
			UGWN A -1 BRIGHT;
			Stop;
	}
}

class KnightGown2 : KGArmorPickup
{
	mixin HUDRecovery;
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "KGWNJ0";
		Inventory.Pickupmessage "";
		Inventory.PickupSound "";
		Armor.SavePercent 75;
		Armor.SaveAmount 250;
		DamageFactor "Melee", 0.6;
		DamageFactor "Zap", 0.8;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Expert's Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);

		int SaveAmount;
		if (MiscItem) SaveAmount = MiscItem.ArmorItemGive2;
		//SaveAmount = GetSaveAmount();
		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		if (dydudebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			int maxa = ArmorItemMax2;
			if (PrevArmorType <= 2) maxa = ArmorItemMax2;
			if (PrevArmorType == 3) maxa = ArmorItemMax3;
			if (PrevArmorType == 4) maxa = ArmorItemMax4;
			if (dydudebug_armordisplays) Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		int actualapadd;
		double skillapaddfactor = 0.8;
		if (skill <= 0) skillapaddfactor = 0.8;
		if (skill == 1) skillapaddfactor = 0.75;
		if (skill == 2) skillapaddfactor = 0.667;
		if (skill == 3) skillapaddfactor = 0.625;
		if (skill >= 4) skillapaddfactor = 0.53125;
		double remainfactor = ((1.0 - skillapaddfactor) * 0.01);
		skillapaddfactor += (owner.CountInv("ArmorScavengerKit") * remainfactor);
		if (PrevArmorType <= 1)
		{
			if (exex_armorpkupnoise) A_StartSound("armor/vest",233,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		}
		if (exex_armorpkupnoise) A_StartSound("armor/pickup3",234,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		if (PrevArmorType <= 2)
		{
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			actualapadd = (SaveAmount + armor.BonusCount);
		}
		if (PrevArmorType == 3)
		{
			actualapadd = ((SaveAmount + armor.BonusCount) * skillapaddfactor);
		}
		if (PrevArmorType == 4)
		{
			actualapadd = (((SaveAmount + armor.BonusCount) * skillapaddfactor) * skillapaddfactor);
		}
		if (armor.Amount <= 0) armor.Amount = actualapadd;
											else armor.Amount += actualapadd;

		if (PrevArmorType <= 2)
		{
			if (armor.Amount > ArmorItemMax2) armor.Amount = ArmorItemMax2;
		}
		if (PrevArmorType == 3)
		{
			if (armor.Amount > ArmorItemMax3) armor.Amount = ArmorItemMax3;
		}
		if (PrevArmorType == 4)
		{
			if (armor.Amount > ArmorItemMax4) armor.Amount = ArmorItemMax4;
		}
		
		if (PrevArmorType <= 2)
		{
			armor.Icon = Icon;
			armor.MaxAbsorb = MaxAbsorb;
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ArmorType = GetClassName();
			armor.ActualSaveAmount = SaveAmount;
		}
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		if (MiscItem && MiscItem.CanTalkUnderwater)
		{
			double maskpitch = 1.00;
			if (owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			owner.A_StopSound(CHAN_VOICE);
			owner.A_StartSound("Dinah/marvelous",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
		}
		if (PrevArmorType <= 1) Console.Printf("\c[cyan]Expert's Knight-Gown (75% Protection)\c- \c[green][+%d Armor]\c-", actualapadd);
											 else Console.Printf("Assimilated a \c[cyan]Expert's Knight-Gown\c- into your current armor! \c[green][+%d Armor]\c-", actualapadd);
		return true;
	}
	
	States
	{
		Spawn:
			KGWN B -1 BRIGHT;
			Stop;
	}
}

class KnightGown3 : KGArmorPickup
{
	mixin HUDRecovery;
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "KGWNK0";
		Inventory.Pickupmessage "";
		Inventory.PickupSound "";
		Armor.SavePercent 87.5;
		Armor.SaveAmount 500;
		DamageFactor "Melee", 0.4;
		DamageFactor "Zap", 0.7;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Master's Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);

		int SaveAmount;
		if (MiscItem) SaveAmount = MiscItem.ArmorItemGive3;
		//SaveAmount = GetSaveAmount();
		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		if (dydudebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			int maxa = ArmorItemMax3;
			if (PrevArmorType <= 3) maxa = ArmorItemMax3;
			if (PrevArmorType == 4) maxa = ArmorItemMax4;
			if (dydudebug_armordisplays) Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		int actualapadd;
		double skillapaddfactor = 0.8;
		if (skill <= 0) skillapaddfactor = 0.8;
		if (skill == 1) skillapaddfactor = 0.75;
		if (skill == 2) skillapaddfactor = 0.667;
		if (skill == 3) skillapaddfactor = 0.625;
		if (skill >= 4) skillapaddfactor = 0.53125;
		double remainfactor = ((1.0 - skillapaddfactor) * 0.01);
		skillapaddfactor += (owner.CountInv("ArmorScavengerKit") * remainfactor);
		if (PrevArmorType <= 2)
		{
			if (exex_armorpkupnoise) A_StartSound("armor/vest",233,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		}
		if (exex_armorpkupnoise) A_StartSound("armor/pickup4",234,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		if (PrevArmorType <= 3)
		{
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			actualapadd = (SaveAmount + armor.BonusCount);
		}
		if (PrevArmorType == 4)
		{
			actualapadd = ((SaveAmount + armor.BonusCount) * skillapaddfactor);
		}
		if (armor.Amount <= 0) armor.Amount = actualapadd;
											else armor.Amount += actualapadd;
		
		if (PrevArmorType <= 3)
		{
			if (armor.Amount > ArmorItemMax3) armor.Amount = ArmorItemMax3;
		}
		if (PrevArmorType == 4)
		{
			if (armor.Amount > ArmorItemMax4) armor.Amount = ArmorItemMax4;
		}

		if (PrevArmorType <= 3)
		{
			armor.Icon = Icon;
			armor.MaxAbsorb = MaxAbsorb;
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ArmorType = GetClassName();
			armor.ActualSaveAmount = SaveAmount;
		}
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		if (MiscItem && MiscItem.CanTalkUnderwater)
		{
			double maskpitch = 1.00;
			if (owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			owner.A_StopSound(CHAN_VOICE);
			owner.A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
		}
		if (PrevArmorType <= 2) Console.Printf("\c[gold]Master's Knight-Gown (87.5% Protection)\c- \c[green][+%d Armor]\c-", actualapadd);
											 else Console.Printf("Assimilated a \c[gold]Master's Knight-Gown\c- into your current armor! \c[green][+%d Armor]\c-", actualapadd);
		return true;
	}

	States
	{
		Spawn:
			KGWN C -1 BRIGHT;
			Stop;
	}
}

class KnightGown4 : KGArmorPickup
{
	mixin HUDRecovery;
	default
	{
		//$Category EE Artifacts
		Inventory.Icon "KGWNL0";
		Inventory.Pickupmessage "";
		Inventory.PickupSound "";
		Armor.SavePercent 93.75;
		Armor.SaveAmount 1000;
		DamageFactor "Melee", 0.2;
		DamageFactor "Zap", 0.6;
		Scale 0.5;
		+DONTGIB
		+FLOATBOB
		Tag "Ultimate Knight-Gown";
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KGArmor";
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int ArmorItemMax1;
		int ArmorItemMax2;
		int ArmorItemMax3;
		int ArmorItemMax4;
		if (MiscItem)
		{
			ArmorItemMax1 = MiscItem.ArmorItemMax1;
			ArmorItemMax2 = MiscItem.ArmorItemMax2;
			ArmorItemMax3 = MiscItem.ArmorItemMax3;
			ArmorItemMax4 = MiscItem.ArmorItemMax4;
		}
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (owner.CountInv("KnightGownItem")) PrevArmorType = 1;
		if (owner.CountInv("KnightGownItem2")) PrevArmorType = 2;
		if (owner.CountInv("KnightGownItem3")) PrevArmorType = 3;
		if (owner.CountInv("KnightGownItem4")) PrevArmorType = 4;
		if (dydudebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);

		int SaveAmount;
		if (MiscItem) SaveAmount = MiscItem.ArmorItemGive4;
		//SaveAmount = GetSaveAmount();
		let armor = KGArmor(Owner.FindInventory(armorclasstype));
		if (dydudebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KGArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory(armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			int maxa = ArmorItemMax4;
			if (PrevArmorType <= 4) maxa = ArmorItemMax4;
			if (dydudebug_armordisplays) Console.Printf("Amt: %d, Max: %d", armor.Amount, maxa);
			if (armor.Amount >= maxa)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > maxa)
			{
				return false;
			}
		}
		
		int actualapadd;
		if (PrevArmorType <= 3)
		{
			if (exex_armorpkupnoise) A_StartSound("armor/vest",233,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		}
		if (exex_armorpkupnoise) A_StartSound("armor/pickup5",234,CHANF_DEFAULT,frandom(0.75,1.25),ATTN_NORM,frandom(0.75,1.25));
		if (PrevArmorType <= 4)
		{
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			actualapadd = (SaveAmount + armor.BonusCount);
		}
		if (armor.Amount <= 0) armor.Amount = actualapadd;
											else armor.Amount += actualapadd;
		
		if (PrevArmorType <= 4)
		{
			if (armor.Amount > ArmorItemMax4) armor.Amount = ArmorItemMax4;
		}

		if (PrevArmorType <= 4)
		{
			armor.Icon = Icon;
			armor.MaxAbsorb = MaxAbsorb;
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ArmorType = GetClassName();
			armor.ActualSaveAmount = SaveAmount;
		}
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		if (MiscItem && MiscItem.CanTalkUnderwater)
		{
			double maskpitch = 1.00;
			if (owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			owner.A_StopSound(CHAN_VOICE);
			owner.A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
		}
		if (PrevArmorType <= 3) Console.Printf("\c[green]Ultimate Knight-Gown (93.75% Protection)\c- \c[green][+%d Armor]\c-", actualapadd);
											 else Console.Printf("Assimilated a \c[green]Ultimate Knight-Gown\c- into your current armor! \c[green][+%d Armor]\c-", actualapadd);
		return true;
	}

	States
	{
		Spawn:
			KGWN D -1 BRIGHT;
			Stop;
	}
}