//************************
//* ORIGINAL DD MONSTERS *
//************************
//HAMMERDUCK
class Hammerduck : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 30;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Cricket", 3;
		DamageFactor "Lead", 2;
		DamageFactor "Bap", 1;
		PainChance "Bap", 256;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOBLOOD
		MissileType "CroquetBall";
		SeeSound "hduck/sight";
		PainSound "hduck/pain";
		DeathSound "hduck/death";
		ActiveSound "hduck/active";
		Obituary "%o was picked off by a hammerduck.";
		DropItem "MalletAmmo", 96;
		DropItem "EggAmmo", 16;
		Tag "Hammerduck";
	}
	
	States
	{
		Spawn:
			HDUK PPPPPP 10;
			HDUK QQQQ 10 A_Look;
			HDUK R 5;
			HDUK Q 10 A_Look;
			HDUK R 5;
			HDUK QQQ 10 A_Look;
			Loop;
		See:
			HDUK AABBCCDD 3 A_Chase;
			Loop;
		Missile:
			HDUK F 5; //ACS_Execute(102,0,0,0,0)
			HDUK GHI 8 A_FaceTarget;
			HDUK JK 4;
			HDUK L 4 A_StartSound("croquet/ballfire");
			HDUK M 4 A_SpawnProjectile("CroquetBall",40);
			HDUK N 3;
			HDUK O 8;
			Goto See;
		Pain:
			HDUK E 6 A_Pain;
			HDUK E 3; //ACS_Execute(102,0,0,0,0);
			Goto See;
			/*
		Death.Suck:
			HDUK E 5 A_StartSound("VacDed",CHAN_BODY);
			HDUK E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,3);
			Stop;
			*/
		Death:
			HDUK E 5 bright A_Scream;
			HDUK STUV 5 bright;
			HDUK W 5 A_NoBlocking;
			HDUK X 35;
			Stop;
	}
}

class CroquetBall : DDProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		Damage 3;
		DamageType "Cricket";
		Projectile;
		+RANDOMIZE
		//+NOEXTREMEDEATH
		renderstyle "Normal";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			CBAL AB 3;
			Loop;
		Death:
			CBAL CDEF 4 Bright;
			Stop;
		Crash:
			CBAL CDEF 4 Bright;
			Stop;
		XDeath:
			TNT1 A 1;
			Stop;
	}
}

//PLANTER
class Planter : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 80;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Fire", 5;
		DamageFactor "Chop", 5;
		DamageFactor "Cricket", 2;
		DamageFactor "Lead", 0.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		SeeSound "gard/sight";
		PainSound "gard/pain";
		DeathSound "gard/death";
		ActiveSound "gard/active";
		MeleeSound "gard/swing";
		Obituary "%o was clipped by a planter.";
		Tag "Planter";
	}
	
	States
	{
		Spawn:
			GARD P 10 A_Look();
			Loop;
		See:
			GARD AABBCCDD 3 A_Chase;
			Loop;
		Melee:
			GARD E 0 A_StartSound("gard/sight",CHAN_VOICE);
			GARD E 0; //ACS_Execute(102,0,0,0,0)
			GARD E 6 A_FaceTarget;
			GARD F 6 A_CustomMeleeAttack (random(15,35), "gard/swing", "gard/swing", "", 1);
			GARD G 6;
			GARD F 6;
			Goto See;
		Pain:
			GARD H 6 A_Pain;
			GARD H 3; //ACS_Execute(102,0,0,0,0);
			Goto See;
		/*
		Death.Suck:
			GARD H 5 A_StartSound("VacDed",CHAN_BODY);
			GARD H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			GARD I 5 Bright A_Scream();
			GARD JKLMN 4 Bright;
			GARD O 5 Bright A_NoBlocking;
			Stop;
	}
}

class PlanterBird : Planter
{
	default
	{
		Tag "Planter (bird)";
	}
	States
	{
		Missile:
			GARD P 0; //ACS_Execute(102,0,0,0,0);
			GARD PQRS 4 A_FaceTarget;
			GARD Q 6 A_SpawnProjectile("BirdBall",48,random(-5,5));
			GARD QP 6 A_Feathers();
			Goto See;
	}
}

class BirdBall : DDProjectile
{
	default
	{
		Radius 10;
		Height 12;
		Speed 9;
		Health 5;
		Damage 2;
		+SEEKERMISSILE
		+SHOOTABLE
		+NOBLOOD
		+NOEXTREMEDEATH
		Projectile;
		renderstyle "Normal";
		SeeSound "birdy/sight";
		DeathSound "birdy/death";
	}
	
	States
	{
		Spawn:
			FFLY AB 2 A_SeekerMissile (10,10);
			Loop;
		Death:
			JSPL AAAA 1 A_Feathers();
			Stop;
	}
}

//MAN-CHINEEL
class Manchineel : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 100;
		Radius 20;
		Height 56;
		Mass 100000;
		Speed 0;
		PainChance 256;
		DamageFactor "Fire", 5;
		DamageFactor "Chop", 5;
		DamageFactor "Cricket", 2;
		DamageFactor "Lead", 0.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+CANNOTPUSH
		+MISSILEMORE
		PainSound "gard/pain";
		DeathSound "gard/death";
		MeleeSound "gard/swing";
		Obituary "%o was clipped by a man-chineel.";
		MeleeDamage 3;
		MissileType "SeedBall";
		Tag "Man-Chineel";
	}
	States
	{
		Spawn:
			TRNT A 10 A_Look();
			Loop;
		See:
			TRNT AA 3 A_Chase();
			Loop;
		Melee:
		Missile:
			TRNT BCD 6;
			TRNT E 0 A_StartSound("gard/sight",CHAN_VOICE);
			TRNT E 0; //ACS_Execute(102,0,0,0,0);
			TRNT E 6 A_FaceTarget();
			TRNT F 6 A_BasicAttack(3, "gard/swing", "SeedBall", 32);
			TRNT G 6;
			TRNT DCB 4;
			Goto See;
		Pain:
			TRNT H 6 A_Pain();
			TRNT DCB 2;
			Goto See;
		/*
		Death.Suck:
			TRNT H 5 A_StartSound("VacDed",CHAN_BODY);
			TRNT H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			TRNT I 5 Bright A_Scream();
			TRNT JK 5 Bright;
			GARD LMN 4 Bright;
			GARD O 5 Bright A_NoBlocking();
			Stop;
	}
}

class SeedBall : DDProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		Damage 3;
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		renderstyle "Normal";
		SeeSound "MalletSwing";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			ORNJ ABCD 2;
			Loop;
		Death:
			ORNJ E 12 Bright;
			Stop;
	}
}

//CENTAURION
class Centaurion : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 100;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Lead", 2;
		DamageFactor "Zap", 4;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Mass 300;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NEVERFAST
		SeeSound "cent/sight";
		PainSound "cent/active";
		DeathSound "cent/pain";
		ActiveSound "cent/active";
		MeleeSound "gard/swing";
		Obituary "%o was clobbered by a centaurion.";
		MeleeDamage 3;
		Tag "Centaurion";
	}
	States
	{
		Spawn:
			C2NT Z 10 A_Look();
			Loop;
		See:
			C2NT A 0 A_UnSetReflectiveInvulnerable();
			C2NT AABBCCDD 2 A_Chase();
			Loop;
		ShieldUp:
			C2NT A 0 A_SetReflectiveInvulnerable();
			C2NB AABBCCDD 3 A_Chase();
			Goto See;
		Melee:
			C2NT A 0 A_UnSetReflectiveInvulnerable();
			C2NT E 4 A_StartSound("cent/sight",CHAN_VOICE);
			C2NT F 4 A_FaceTarget();
			C2NT G 6 A_CustomMeleeAttack (random(15,35), "gard/swing", "gard/swing", "", 1);
			C2NT H 4; //ACS_Execute(102,0,0,0,0);
			C2NT I 4;
			Goto See;
		Missile:
			C2NT A 5 A_Jump(256,"Shieldup");
			Goto See;
    Pain:
			C2NT J 6 A_Pain();
			C2NT J 3; //ACS_Execute(102,0,0,0,0)
			C2NT K 0 A_Jump(192,"See");
			C2NT K 6 A_SetReflectiveInvulnerable();
			C2NT K 12;
			Goto ShieldUp;
		/*
		Death.Suck:
			C2NT J 5 A_StartSound("VacDed",CHAN_BODY);
			C2NT J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			C2NT L 6 Bright A_Scream;
			C2NT MNO 6 Bright;
			C2NT P 10 A_NoBlocking;
			C2NT QRST 7;
			Stop;
	}
}

class CentaurionSgt : Centaurion
{
	default
	{
		//$Category RPMonsters
		DamageFactor "Zap", 1;
		Tag "Centaurion Sergeant";
		Dropitem "PikeAmmo", 64;
	}
	
	States
	{
		ShieldUp:
			C2NT A 0 A_SetReflectiveInvulnerable();
			C2NB AABBCCDD 3 A_Chase("Melee","SwordZap",0);
			C2NB D 0 A_Jump(108,"see");
			C2NB D 0 A_Jump(108,"swordzap");
			Loop;
		SwordZap:
			C2NT A 0 A_UnSetReflectiveInvulnerable();
			C2NZ A 6 bright;
			C2NZ B 6 bright A_FaceTarget();
			C2NZ C 0 bright A_StartSound("zappo",CHAN_BODY);
			C2NZ C 6 bright A_SpawnProjectile("BadZapshot",48,0);
			C2NZ D 6 bright; //ACS_Execute(102,0,0,0,0);
			C2NZ E 6 bright;
			Goto See;
	}
}

//PUDDING DOG
class PuddingDog : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 250;
		PainChance 256;
		Painchance "Suck", 64;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Speed 14;
		Radius 20;
		Height 56;
		Mass 150;
		Scale 0.75;
		DamageFactor "chop", 0.5;
		Damagefactor "breakfast", 2;
		DamageFactor "Zap", 2;
		Meleedamage 3;
		Meleerange 56;
		Maxtargetrange 192;
		Meleethreshold 96;
		Monster;
		+FLOORCLIP
		+NOINFIGHTING
		+NOBLOOD
		SeeSound "pdog/active";
		PainSound "misc/splat";
		DeathSound "misc/splat";
		ActiveSound "pdog/active";
		Obituary "%o was dipped by a pudding dog.";
		Tag "Pudding Dog";
	}
	
	States
	{
		Spawn:
			CDOG B 10 A_Look();
			Loop;
		See:
			CDOG AABB 2 A_Chase();
			Loop;
		Missile:
			CDOG C 4 A_FaceTarget();
			CDOG C 0 A_CheckProximity("MissilePounce","PlayerPawn",640,1,CPXF_CHECKSIGHT|CPXF_ANCESTOR);
			CDOG C 0;
			Goto See;
		MissilePounce:
			CDOG C 0; //ACS_Execute(102,0,0,0,0)
			CDOG C 4 A_FaceTarget();
			CDOG C 0 A_StartSound("pdog/attack",CHAN_VOICE);
			CDOG C 0 ThrustThingZ (0, 27, 0, 0);
			CDOG C 0 ThrustThing (angle*256/360, 24, 0, 0);
		JumpUp:
			CDOG D 3 A_CustomMeleeAttack(random[MummyAttack](2,6)*2, "misc/splat", " ");
			CDOG D 1 A_CustomMeleeAttack(random[MummyAttack](2,6)*2, "misc/splat", " ");
			CDOG D 1 A_CustomMeleeAttack(random[MummyAttack](2,6)*2, "misc/splat", " ");
		JumpDown:
			CDOG D 1 A_CheckFloor ("Land");
			CDOG D 1;
			CDOG D 1;
			loop;
		Land:
			CDOG E 0 A_FaceTarget();
			CDOG E 0 A_CustomMeleeAttack(random[MummyAttack](2,6)*2, "misc/splat", " ");
			CDOG E 4 A_Stop();
			CDOG F 4;
			CDOG E 4;
			goto See;
		Pain:
			CDOG F 5 A_Pain();
			CDOG E 0 A_Jump(127,1);
			CDOG E 0 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG E 3;
			CDOG C 3;
			Goto See;
		Pain.Chop:
			CDOG F 5 A_Pain();
			CDOG E 0 A_Jump(127,1);
			CDOG E 0 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG E 3 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG C 3;
			Goto See;
		/*
		Death.Suck:
			CDOG F 5 A_StartSound("VacDed",CHAN_BODY);
			CDOG F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			CDOG F 6 A_Scream();
			CDOG G 6 A_NoBlocking();
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			Stop;
	}
}

class PupGrenade : DDProjectile
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		Damage 1;
		Scale 0.25;
		Projectile;
		-NOGRAVITY
		renderstyle "Normal";
		SeeSound "pdog/sight";
	}
	
	States
	{
		Spawn:
			CDOG D 3;
			loop;
		Death:
			CDOG EFE 2;
			CDOG E 0 A_SpawnItemEx("PuddingPup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class PuddingPup : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 5;
		PainChance 256;
		Speed 18;
		Radius 20;
		Height 32;
		Mass 150;
		Scale 0.25;
		Meleedamage 1;
		Meleerange 40;
		Maxtargetrange 192;
		Meleethreshold 96;
		Monster;
		+FLOORCLIP
		+NOINFIGHTING
		+MISSILEMORE
		+NOBLOOD
		SeeSound "pdog/sight";
		PainSound "misc/splat";
		DeathSound "misc/splat";
		ActiveSound "pdog/sight";
		Obituary "%o was swarmed by a pudding pup.";
		Tag "Pudding Pup";
	}
	States
	{
		Spawn:
			CDOG B 10 A_Look;
			Loop;
		See:
			CDOG AABB 2 A_Chase;
			Loop;
		Missile:
			CDOG C 3 A_FaceTarget();
			CDOG C 0 A_CheckProximity("MissilePounce","PlayerPawn",480,1,CPXF_CHECKSIGHT|CPXF_ANCESTOR);
			CDOG C 0;
			Goto See;
		MissilePounce:
			CDOG C 0; //ACS_Execute(102,0,0,0,0);
			CDOG C 3 A_FaceTarget;
			CDOG C 0 A_StartSound("pdog/attack",CHAN_VOICE);
			CDOG C 0 ThrustThingZ(0, 20, 0, 0);
			CDOG C 0 ThrustThing(angle*256/360, 24, 0, 0);
		JumpUp:
			CDOG D 3 A_CustomMeleeAttack(random[MummyAttack](1,2)*2, "misc/splat", " ");
			CDOG D 1 A_CustomMeleeAttack(random[MummyAttack](1,2)*2, "misc/splat", " ");
			CDOG D 1 A_CustomMeleeAttack(random[MummyAttack](1,2)*2, "misc/splat", " ");
		JumpDown:
			CDOG D 1 A_CheckFloor ("Land");
			CDOG D 1;
			CDOG D 1;
			loop;
		Land:
			CDOG F 0 A_FaceTarget();
			CDOG F 0 A_CustomMeleeAttack(random[MummyAttack](1,2)*2, "misc/splat", " ");
			CDOG E 4 A_Stop();
			CDOG F 4;
			CDOG E 4;
			goto See;
		Pain:
			CDOG F 4 A_Pain();
			CDOG E 2; //ACS_Execute(102,0,0,0,0);
			CDOG C 2;
			Goto See;
		/*
		Death.Suck:
			CDOG F 5 A_StartSound("VacDed",CHAN_BODY)
			CDOG F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,1)
			Stop;
		*/
		Death:
			CDOG F 5 A_Scream();
			CDOG G 5 A_NoBlocking();
			CDOG H 5;
			Stop;
	}
}

class JellyBall : DDProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 15;
		Health 5;
		Damage 2;
		Projectile;
		renderstyle "Add";
		Alpha 0.9;
		DeathSound "misc/splat";
		+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			JBAL ABC 2 A_SeekerMissile(10,10);
			Loop;
		Death:
			JSPL ABC 4;
			Stop;
	}
}

//KILLETANTE
class Killetante : DDCreature
{
	default
	{
		//$Category RPMonsters
		Health 160;
		Radius 20;
		Height 64;
		Speed 10;
		PainChance 256;
		MeleeRange 64;
		Mass 100;
		DamageFactor "Fire", 3;
		PainChance "Fire", 256;
		DamageFactor "Chop", 3;
		PainChance "Chop", 256;
		DamageFactor "Suck", 1.875;
		PainChance "Suck", 256;
		DamageFactor "Beats", 3;
		PainChance "Beats", 256;
		DamageFactor "Bap", 1;
		PainChance "Bap", 256;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOBLOOD
		SeeSound "dancer/sight";
		PainSound "dancer/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dancer/active";
		Obituary "%o was out-danced by a Killetante.";
		HitObituary "%o was roundhouse-kicked by a Killetante.";
		Tag "Killetante";
		Species "Killetante";
		+DONTHARMCLASS
		+AVOIDHAZARDS
		+JUMPDOWN
	}
	States
	{
		Spawn:
			DANI A 7 A_Look;
			DANI B 5 A_Look;
			DANI C 7 A_Look;
			DANI D 5 A_Look;
			Loop;
		See:
			DANS BBCCDDEE 3 A_Chase;
			DANS B 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS B 0 A_Jump(192,"dodge");
			Loop;
		Dodge:
			DANS F 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS FGH 2 A_FastChase;
			DANS I 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS IJ 2 A_FastChase;
			Goto See;
		Missile:
			DANS F 0 A_Jump(96,"MusicAttk");
			DANS F 0; //ACS_Execute(102,0,0,0,0)
			DANS F 4 A_Facetarget;
			DANS GHI 4 A_Recoil(-2);
			DANS J 0 ThrustThingz (0, 27, 0, 0);
			DANS J 4 ThrustThing (angle*256/360, 18, 0, 0);
			DANS GHIJ 2;
			DANS D 5 A_CustomMeleeAttack (random(10,15), "mallethit", "malletswing", "", 1);
			Goto See;
		MusicAttk:
			DANS F 0; //ACS_Execute(102,0,0,0,0)
			DANS F 4 A_StartSound("dancer/danceattk",CHAN_BODY);
			DANS GHIFGHI 4 A_Recoil(2);
			DANS J 0 ThrustThingz (0, 27, 0, 0);
			DANS J 4 ThrustThing (angle*256/360, 18, 0, 0);
			DANS D 0 A_StartSound("virtuoso/musicfire",CHAN_VOICE);
			DANS D 4 A_SpawnProjectile("MusicBall",40);
			DANS E 4;
			Goto See;
		Melee:
			DANS F 0; //ACS_Execute(102,0,0,0,0)
			DANS FGHIJ 2 A_Facetarget;
			DANS D 5 A_CustomMeleeAttack (random(10,15), "mallethit", "malletswing", "", 1); 
			Goto See;
		Pain.Suck:
			DANS K 4 
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				A_FaceTarget();
			}
			DANS L 0 
			{
				if (random(1,16) == 1)
				{
					ThrustThingZ (0, 6, 0, 0);
					ThrustThing (angle*256/360+180, random(1,2), 0, 0);
				}
			}
			DANS L 12 
			{
				A_Pain();
				A_SetTics(randompick(8,9,9,10,11,11,12));
			}
			DANS K 12 //ACS_Execute(102,0,0,0,0)
			{
				A_SetTics(randompick(8,9,9,10,11,11,12));
			}
			DANS K 0
			{
				if (random(1,8) <= 3) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Pain:
			DANS K 2 A_FaceTarget;
			DANS L 0 ThrustThingZ (0, 24, 0, 0);
			DANS L 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DANS L 6 A_Pain;
			DANS K 6; //ACS_Execute(102,0,0,0,0)
			DANS K 0
			{
				if (random(1,16) == 1) 
				{ 
					if (random(1,8) <= 5) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		/*
		Death.Suck:
			DANS K 5 A_StartSound("VacDed",CHAN_BODY);
			DANS K 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			DANS K 3 A_FaceTarget;
			DANS L 0 ThrustThingZ (0, 24, 0, 0);
			DANS L 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DANS L 5 A_Scream;
			DANS MNOP 3 bright;
			DANS Q 2 bright A_NoBlocking();
			DANS RSTUVWXYZ 2 bright;
			Stop;
	}
}

class KilletanteBuffDEF : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.4;
		DamageFactor "Melee", 0.025;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS1 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.925;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS2 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.85;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS3 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.775;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS4 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.7;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS5 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.625;
		Powerup.Duration 2147483646;
	}
}

class KilletanteBuffATK : PowerDamage
{
	default
	{
		DamageFactor "Normal", 2.5;
		DamageFactor "Melee", 25;
		Powerup.Duration 2147483646;
	}
}

class KilletanteSoloistAImage : DDVisualAImage
{
	default
	{
		Radius 16;
		Height 8;
		Scale 0.8;
		Alpha 0.85;
		+NOGRAVITY
		+THRUACTORS
		RenderStyle "AddStencil";
		StencilColor "Red";
		-VISIBILITYPULSE
		+NOTIMEFREEZE
	}
	States
	{
		Spawn:
			"####" "#" 0 Bright;
			"####" "#" 0 Bright A_FadeTo (alpha * 0.5, 1, 0);
			"####" "#" 0 Bright ThrustThingZ (0, 1, 0, 0);
			"####" "#" 0 A_Jump (256, "SpawnLoop");
			Goto SpawnLoop;
		SpawnLoop:
			"####" "#" 0 Bright A_FadeTo (0, 0.16, 1);
			"####" "#" 1 Bright A_SetScale (scale.x*frandom(1.005,1.01), scale.y*frandom(1.01,1.02));
			Goto SpawnLoop;
	}
}

class KilletanteSoloistAImage2 : KilletanteSoloistAImage
{
	default
	{
		RenderStyle "AddStencil";
		StencilColor "Green";
	}
}

class KilletanteSoloistAImage3 : KilletanteSoloistAImage
{
	default
	{
		RenderStyle "AddStencil";
		StencilColor "Blue";
	}
}

class KilletanteSoloist : Killetante
{
	int reactive1;
	int regentimer, regentimermax;
	int mldmg;
	int mass1;
	int intspd;

	int timeresist, trestimer, timereschance;

	default
	{
		Health 240;
		Scale 0.9325;
		Radius 18; // 20
		Height 60; // 64
		Speed 12;
		Mass 250;
		MeleeRange 68;
		PainChance 64;
		DamageFactor 0.4375;
		DamageFactor "Dashing", 2.0;
		PainChance "Dashing", 248;
		DamageFactor "Fire", 2;
		PainChance "Fire", 128;
		DamageFactor "Chop", 2;
		PainChance "Chop", 128;
		DamageFactor "Suck", 1.75;
		PainChance "Suck", 224; //x2 the usual
		DamageFactor "Beats", 1.5;
		PainChance "Beats", 96;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOBLOOD
		SeeSound "dancer/sight";
		PainSound "dancer/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dancer/active";
		Obituary "%o was out-tango'd by a Killetante Soloist.";
		HitObituary "%o was roundhouse-kicked over the horizon by a Killetante Soloist.";
		Tag "Killetante Soloist";
		Species "Killetante";
		+DONTHARMCLASS
		+AVOIDHAZARDS
		+JUMPDOWN
	}
	
	override void PostBeginPlay()
	{
		mldmg = random(10,15);
		mass1 = mass;
		intspd = Speed;
		
		Super.PostBeginPlay();
	}
	
	override void Tick() 
	{
		mass1 = mass;
		mldmg = random(10,15);
		int spdc = intspd;
		int lowHPbuffchance;
		timeresist = random(3,5) * (Skill * frandom(0.75,1.25));
		timereschance = 16 + (Skill * 8);

		if (health > 0)
		{
			if (!bNOTIMEFREEZE)
			{
				mass *= random(4,5);
				if (random(1,1024) <= 16)
				{
					bNOTIMEFREEZE = true;
					trestimer = timeresist;
				}
			}
			else
			{
				trestimer--;
				if (trestimer <= 0) bNOTIMEFREEZE = false;
			}
		}
		else
		{
			if (!isfrozen() && bNOTIMEFREEZE) bNOTIMEFREEZE = true;
		}

		int inc = 1;
		int maxhealth = Spawnhealth();
		regentimermax = (65 - (Skill * 0.667));
		if (health <= 0) reactive1 = 0;
		if (!isFrozen())
		{
			bBUDDHA = false;
			if (health < maxhealth)
			{
				if (health <= (maxhealth*(frandom(0.675,0.825))))
				{
					mldmg *= frandom(1.05,1.1);
					inc *= frandom(1.565,2.1);
					
					lowHPbuffchance = 5;
					if (random(1,88) == 1) bBUDDHA = true;
				}
				if (health <= (maxhealth*(frandom(0.45,0.55))))
				{
					mldmg *= frandom(1.05,1.1);
					inc *= frandom(1.565,2.1);
					lowHPbuffchance = 40;
					if (random(1,56) == 1) bBUDDHA = true;
				}
				if (health <= (maxhealth*(frandom(0.225,0.275)))) 
				{
					mldmg *= frandom(1.05,1.1);
					inc *= frandom(1.565,2.1);
					lowHPbuffchance = 80;
					if (random(1,32) == 1) bBUDDHA = true;
				}
				if (health <= (maxhealth*(frandom(0.1125,0.1375)))) 
				{
					mldmg *= frandom(1.05,1.1);
					inc *= frandom(1.565,2.1);
					lowHPbuffchance = 100;
					if (random(1,16) == 1) bBUDDHA = true;
				}
				if (reactive1) 
				{
					mass1 *= frandom(3.3,3.6);
					mldmg *= frandom(1.1,1.2);
					if (random(1,4) == 1) bBUDDHA = true;
				}

				if (skill == SKILL_VERY_EASY && !bFRIENDLY) inc *= frandom(0.25,0.50);
				if (skill == SKILL_VERY_EASY && bFRIENDLY) inc *= frandom(1.50,1.75);
				if (skill == SKILL_EASY && !bFRIENDLY) inc *= frandom(0.5,0.75);
				if (skill == SKILL_EASY && bFRIENDLY) inc *= frandom(1.25,1.5);
				if (skill == SKILL_HARD && !bFRIENDLY) inc *= frandom(1.25,1.5);
				if (skill == SKILL_HARD && bFRIENDLY) inc *= frandom(0.5,0.75);
				if (skill == SKILL_VERY_HARD && !bFRIENDLY) inc *= frandom(1.50,1.75);
				if (skill == SKILL_VERY_HARD && bFRIENDLY) inc *= frandom(0.25,0.50);
				if (inc < 1) inc = 1;
				
				if (random(1,100) <= lowHPbuffchance)
				{
					if (!bFRIENDLY)
					{
						if (skill == SKILL_VERY_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS1",1);
						if (skill == SKILL_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS2",1);
						if (skill == SKILL_NORMAL) A_SetInventory("KilletanteLowHealthBuffDEFS3",1);
						if (skill == SKILL_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS4",1);
						if (skill == SKILL_VERY_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS5",1);
					}
					else
					{
						if (skill == SKILL_VERY_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS5",1);
						if (skill == SKILL_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS4",1);
						if (skill == SKILL_NORMAL) A_SetInventory("KilletanteLowHealthBuffDEFS3",1);
						if (skill == SKILL_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS2",1);
						if (skill == SKILL_VERY_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS1",1);
					}
				}
				else
				{
					A_SetInventory("KilletanteLowHealthBuffDEFS1",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS2",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS3",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS4",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS5",0);
				}

				if (reactive1)
				{
					regentimermax *= frandompick(0.5,0.667,0.667,0.833,0.833);
					inc *= randompick(7,7,8,8,9);
				}
				regentimer += inc;
				if (regentimer > regentimermax)
				{
					regentimer -= regentimermax;
					health += randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2);
					A_SpawnItemEx("Micronote2", frandom(6,7), frandom(6,7), (frandom(24,28)*2), 0, frandom(-1.5, 1.5), frandom(-1.5, 1.5));
					if (health > maxhealth) health = maxhealth;
				}
			}
			else
			{
				regentimer = random(-5,5);
			}

			if (reactive1)
			{
				bool debugbufftime = false;
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage2", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage3", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				A_SetInventory("KilletanteBuffATK",1);
				A_SetInventory("KilletanteBuffDEF",1);
				spdc *= 1.625;
				Speed = spdc;
				
				if (
					InStateSequence(curstate,ResolveState("Pain")) || 
					InStateSequence(curstate,ResolveState("Pain.Bonk")) || 
					InStateSequence(curstate,ResolveState("Pain.Breakfast")) || 
					InStateSequence(curstate,ResolveState("Pain.Zap")) || 
					InStateSequence(curstate,ResolveState("Pain.Chop")) || 
					InStateSequence(curstate,ResolveState("Pain.Cricket")) || 
					InStateSequence(curstate,ResolveState("Pain.Lead")) || 
					InStateSequence(curstate,ResolveState("Pain.Bop")) || 
					InStateSequence(curstate,ResolveState("Pain.Beats")) || 
					InStateSequence(curstate,ResolveState("Pain.Dust")) || 
					InStateSequence(curstate,ResolveState("Pain.CherryBomb")) || 
					InStateSequence(curstate,ResolveState("Pain.BRocket")) || 
					InStateSequence(curstate,ResolveState("Pain.Spinner")) || 
					InStateSequence(curstate,ResolveState("Pain.Popper")) || 
					InStateSequence(curstate,ResolveState("Pain.Dashing")) || 
					InStateSequence(curstate,ResolveState("Pain.Boiling")) || 
					InStateSequence(curstate,ResolveState("Pain.Tank")) || 
					InStateSequence(curstate,ResolveState("Pain.Suck")) || 
					InStateSequence(curstate,ResolveState("Pain.Musak")) || 
					InStateSequence(curstate,ResolveState("Pain.DoomSpell")) || 
					InStateSequence(curstate,ResolveState("Pain.Magic")) || 
					InStateSequence(curstate,ResolveState("Pain.Holy")) || 
					InStateSequence(curstate,ResolveState("Pain.Dark")) ||
					InStateSequence(curstate,ResolveState("Pain.Eldritch")) ||
					InStateSequence(curstate,ResolveState("Pain.Fire")) || 
					InStateSequence(curstate,ResolveState("Pain.Ice")) || 
					InStateSequence(curstate,ResolveState("Pain.Plasma")) || 
					InStateSequence(curstate,ResolveState("Pain.Thunder")) || 
					InStateSequence(curstate,ResolveState("Pain.Electric")) || 
					InStateSequence(curstate,ResolveState("Pain.Lightning")) || 
					InStateSequence(curstate,ResolveState("Pain.Shock")) || 
					InStateSequence(curstate,ResolveState("Pain.Sceptre")) || 
					InStateSequence(curstate,ResolveState("Pain.Fist")) || 
					InStateSequence(curstate,ResolveState("Pain.Kick")) ||
					InStateSequence(curstate,ResolveState("Pain.PoisonNeedle")) ||
					InStateSequence(curstate,ResolveState("Pain.Deadlight")) ||
					InStateSequence(curstate,ResolveState("Pain.Chainsaw")) ||
					InStateSequence(curstate,ResolveState("Pain.Gauntlets")) ||
					InStateSequence(curstate,ResolveState("PainShield")) ||
					InStateSequence(curstate,ResolveState("PainShieldEnd")) ||
					InStateSequence(curstate,ResolveState("PainReact")) ||
					InStateSequence(curstate,ResolveState("PainEnd"))
					) 
				{
					if (random(1,32) >= (20 + (skill*4))) reactive1--;
					if (debugbufftime) Console.Printf("PainState Detected"); 
				}
				else
				{
					if (random(1,8) <= (7 - (skill/3))) reactive1--;
					if (debugbufftime) Console.Printf("PainState Not Detected"); 
				}
				if (debugbufftime) Console.Printf("Killetante Soloist Buff Timer: %d (tic: %d)", reactive1, level.time);
			}
			else
			{
				A_SetInventory("KilletanteBuffATK",0);
				A_SetInventory("KilletanteBuffDEF",0);
				Speed = intspd;
			}
		}
		mass = mass1;
		
		Super.Tick();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (IsFrozen())
		{
			damage *= frandompick(0.20,0.25);
			Console.Printf("%s resists your damage due to being frozen in time!", GetTag());
			A_StartSound("misc/ResistanceHit",21,CHANF_DEFAULT,frandom(1.25,1.334),ATTN_NORM,frandom(0.875,1.125));
		}
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle); 
	}
	
	
	States
	{
		Spawn:
			DAKI A 7 
			{
				A_SetTics(random(5,7));
				A_Look();
			}
			DAKI B 5
			{
				A_SetTics(random(3,5));
				A_Look();
			}
			DAKI C 7
			{
				A_SetTics(random(5,7));
				A_Look();
			}
			DAKI D 5
			{
				A_SetTics(random(3,5));
				A_Look();
			}
			Loop;
		See:
			DAKS BBCC 3 
			{
				A_Chase();
				A_SetTics(randompick(2,3,3,3,3,3,4));
				if (random(1,4) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS B 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
				if (random(1,16) <= random(5,7)) { return resolvestate("Dodge"); }

				return resolvestate(null);
			}
			DAKS DDEE 3 
			{
				A_Chase();
				A_SetTics(randompick(2,3,3,3,3,3,4));
				if (random(1,4) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS B 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
				if (random(1,16) <= random(5,7)) { return resolvestate("Dodge"); }

				return resolvestate(null);
			}
			Loop;
		Dodge:
			DAKS F 0
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DAKS FFGGH 1
			{
				A_FastChase();
				A_SetTics(randompick(0,1,1,1,1,1,1,2));
				if (random(1,10) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS I 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DAKS HIIJJ 1 
			{
				A_FastChase();
				A_SetTics(randompick(0,1,1,1,1,1,1,2));
				if (random(1,10) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Missile:
			DAKS F 0 A_Jump(96,"MusicAttk");
		Missile2:
			DAKS F 0; //ACS_Execute(102,0,0,0,0)
			DAKS F 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Facetarget();
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
			}
			DAKS J 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				ThrustThingz (0, randompick(18,27,36), 0, 0);
				ThrustThing (((angle*256/360*frandom(0.75,1.25))), randompick(18,27,36), 0, 0);
			}
			DAKS J 0
			{
				if (random(1,3) <= 2) { A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); }
			}
			DAKS GH 2
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS H 0
			{
				if (random(1,3) <= 2) { A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); }
			}
			DAKS IJ 2
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS D 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		MusicAttk:
			DAKS F 0; //ACS_Execute(102,0,0,0,0)
			DAKS F 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_StartSound("dancer/danceattk",CHAN_BODY);
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
				if (random(1,24) <= 1)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS F 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				if (random(1,6) <= 1)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
				if (random(1,24) <= 1)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS J 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				ThrustThingz (0, randompick(18,27,36), 0, 0);
				ThrustThing (((angle*256/360*frandom(0.75,1.25))), randompick(18,27,36), 0, 0);
				if (random(1,6) <= 1)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS D 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_StartSound("virtuoso/musicfire",CHAN_VOICE);
				A_SpawnProjectile("MusicBall2",40);
			}
			DAKS E 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				if (random(1,6) <= 1)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		Melee:
			DAKS F 0; //ACS_Execute(102,0,0,0,0)
			DAKS FG 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS G 0
			{
				if (random(1,3) <= 2) { A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); }
			}
			DAKS HI 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS J 0
			{
				if (random(1,3) <= 2) { A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); }
			}
			DAKS J 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS D 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_CustomMeleeAttack((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
			}
			Goto See;
		Pain.Beats:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				if (random(1,32) <= 3)
				{
					ThrustThingZ (0, randompick(2,3,4), 0, 0);
					ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), frandompick(0.5,0.75,1), 0, 0);
				}
			}
			DAKS L 3 
			{
				A_Pain();
				int f = randompick(0,0,0,1,1,2) * randompick(1,1,1,1,1,1,2,2,2,3);
				A_SetTics(randompick(1,2,2,3));
				if (health < (spawnhealth()*0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < (spawnhealth()*0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < (spawnhealth()*0.25)) 
				{
					A_SetTics(randompick(0,1,1,2));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 3 
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0; //ACS_Execute(102,0,0,0,0)
			DAKS KK 3
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0
			{
				if (random(1,32) == 1) 
				{ 
					if (random(1,32) <= 3) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.Suck:
			DAKS K 2 A_FaceTarget;
			DAKS L 0
			{
				if (random(1,16) == 1)
				{
					ThrustThingZ (0, randompick(4,6,8), 0, 0);
					ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), frandompick(1,1.5,2), 0, 0);
				}
			}
			DAKS L 6
			{
				A_Pain();
				A_SetTics(randompick(4,4,5,6));
				if (random(1,16) == 1)
				{
					int f = random(8,9) * randompick(1,1,1,1,1,1,2,2,2,3);
					if (health < (spawnhealth()*0.75)) 
					{
						f *= frandom(1.05,1.0833);
					}
					if (health < (spawnhealth()*0.5)) 
					{
						f *= frandom(1.0834,1.15);
					}
					if (health < (spawnhealth()*0.25)) 
					{
						A_SetTics(randompick(0,1,1,2));
						f *= frandom(1.1167,1.2167);
					}
					reactive1 += f;
				}
			}
			DAKS K 6 //ACS_Execute(102,0,0,0,0)
			{
				A_SetTics(randompick(4,4,5,6));
			}
			DAKS K 0
			{
				if (random(1,8) <= 7) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Pain.Dashing:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.975,1.025))), (randompick(4,6,8)*frandompick(3,3.5,4)), 0, 0);
			}
			DAKS L 15 
			{
				A_SetTics(randompick(5,10,10,15));

				A_Pain();
				int f = randompick(8,8,9) * randompick(1,1,1,1,1,2,2,3);
				if (health < (spawnhealth()*0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < (spawnhealth()*0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < (spawnhealth()*0.25)) 
				{
					A_SetTics(randompick(0,5,5,10));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 15 
			{
				A_SetTics(randompick(5,10,10,15));
			}
			DAKS K 0; //ACS_Execute(102,0,0,0,0)
			DAKS KK 15
			{
				A_SetTics(randompick(5,10,10,15));
			}
			DAKS K 0
			{
				if (random(1,32) <= 5) 
				{
					return resolvestate("Dodge"); 
				}
				else
				{
					return resolvestate("Melee"); 
				}
				return resolvestate(null);
			}
			Goto See;
		Pain:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), randompick(4,6,8), 0, 0);
			}
			DAKS L 3 
			{
				A_Pain();
				int f = random(32,38) * randompick(1,1,1,1,1,1,2,2,2,3);
				A_SetTics(randompick(1,2,2,3));
				if (health < (spawnhealth()*0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < (spawnhealth()*0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < (spawnhealth()*0.25)) 
				{
					A_SetTics(randompick(0,1,1,2));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 3 
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0; //ACS_Execute(102,0,0,0,0)
			DAKS KK 3
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0
			{
				if (random(1,8) == 1) 
				{ 
					if (random(1,8) <= 3) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Death:
			DAKS K 3 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), randompick(4,6,8), 0, 0);
			}
			DAKS L 5 A_Scream;
			DAKS MNOP 3 bright;
			DAKS Q 2 bright A_NoBlocking();
			DAKS RSTUVWXYZ 2 bright;
			Stop;
	}
}
