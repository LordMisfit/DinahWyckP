//************************
//* ORIGINAL DD MONSTERS *
//************************
//HAMMERDUCK
class Hammerduck : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 30;
		Radius 20;
		Height 48;
		ProjectilePassHeight 48;
		Speed 10;
		PainChance 256;
		DamageFactor "Cricket", 3;
		DamageFactor "Lead", 2;
		DamageFactor "Bap", 1;
		PainChance "Bap", 256;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		MissileType "CroquetBall";
		SeeSound "hduck/sight";
		PainSound "hduck/pain";
		DeathSound "hduck/death";
		ActiveSound "hduck/active";
		Obituary "%o was picked off by a hammerduck.";
		Tag "Hammerduck";
		//DropItem "MalletAmmo", 96;
		//DropItem "EggAmmo", 16;
		//DropItem "MalletAmmo", 8;
		//DropItem "EggAmmo", 1;
	}
	
	void A_CheckLaidBallDrop()
	{
		if (CountInv("HammerDuckLaidBall"))
		{
			A_SetInventory("HammerDuckLaidBall",0);
			actor player = players[0].mo;
			int rolls = 1;
			if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) rolls += 2;
			if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) rolls += 2;
			if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) rolls += 2;
			for (int i; i < rolls; i++)
			{
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (!exex_expenabled) A_DropItem("MalletAmmo",1,248); else A_DropItem("MalletAmmo",1,200);
				}
				else
				{
					if (!exex_expenabled) A_DropItem("MalletAmmo",1,192); else A_DropItem("MalletAmmo",1,96);
				}
			}
		}
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("MalletAmmo",1,96);
			A_DropItem("EggAmmo",1,16);
			A_DropItem("MalletAmmo",1,8);
			A_DropItem("EggAmmo",1,1);
			
			A_DropItem("CricketBat",1,1);
		}
		else
		{
			A_DropItem("MalletAmmo",1,144,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("MalletAmmo",1,8,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,1,ADI_FULLAMMO);
			A_DropItem("CricketBat",1,16,ADI_FULLAMMO);
			A_DropItem("CricketBat",1,4,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			HDUK E 0 NoDelay A_CheckLaidBallDrop();
			HDUK PPPPPP 10 
			{
				ProjectilePassHeight = 24;
				A_Look();
			}
			HDUK QQQQ 10 
			{
				ProjectilePassHeight = 48;
				A_Look();
			}
			HDUK R 5 
			{
				ProjectilePassHeight = 48;
				A_Look();
			}
			HDUK Q 10 
			{
				ProjectilePassHeight = 48;
				A_Look();
			}
			HDUK R 5 
			{
				ProjectilePassHeight = 48;
				A_Look();
			}
			HDUK QQQ 10 
			{
				ProjectilePassHeight = 48;
				A_Look();
			}
			Loop;
		See:
			HDUK A 0 A_CheckLaidBallDrop();
			HDUK AABBCCDD 3 
			{
				ProjectilePassHeight = 48;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 25) A_SetTics(randompick(2,3,3));
					if (CountInv("MonsterLevel") >= 50) A_SetTics(randompick(2,2,3));
					if (CountInv("MonsterLevel") >= 75) A_SetTics(randompick(2,2,2));
					if (CountInv("MonsterLevel") >= 100) A_SetTics(randompick(1,2,2));
				}
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 50)
					{
						if (random(1,16) <= 3) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
						else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
					else A_EEChase();
				}
				else
				A_EEChase();
			}
			Loop;
		Missile:
			HDUK F 5
			{
				ProjectilePassHeight = 44;
				A_DynamicMusic();
				A_SetInventory("HammerDuckLaidBall",0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(4);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
			}
			HDUK G 8
			{
				ProjectilePassHeight = 24;
				A_SetInventory("HammerDuckLaidBall",0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 20) A_SetTics(7);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(6);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(5);
				A_FaceTarget();
			}
			HDUK H 8
			{
				ProjectilePassHeight = 28;
				A_SetInventory("HammerDuckLaidBall",1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 20) A_SetTics(7);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(6);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(5);
				A_FaceTarget();
			}
			HDUK I 8
			{
				ProjectilePassHeight = 56;
				A_SetInventory("HammerDuckLaidBall",1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 20) A_SetTics(7);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(6);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(5);
				A_FaceTarget();
			}
			HDUK J 4
			{
				ProjectilePassHeight = 48;
				A_SetInventory("HammerDuckLaidBall",1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 80) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30 && random(1,3) <= 1) A_FaceTarget();
			}
			HDUK K 4
			{
				ProjectilePassHeight = 40;
				A_SetInventory("HammerDuckLaidBall",1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 80) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30 && random(1,3) <= 1) A_FaceTarget();
			}
			HDUK L 4 
			{
				ProjectilePassHeight = 32;
				A_SetInventory("HammerDuckLaidBall",0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 80) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30 && random(1,3) <= 1) A_FaceTarget();
				A_StartSound("croquet/ballfire");
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_StartSound("croquet/ballfire",8);
					A_StartSound("croquet/ballfire",9);
				}
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
				{
					A_StartSound("croquet/ballfire",6);
					A_StartSound("croquet/ballfire",7);
				}
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_StartSound("croquet/ballfire",11);
					A_StartSound("croquet/ballfire",12);
				}
			}
			HDUK M 4 
			{
				ProjectilePassHeight = 32;
				A_SetInventory("HammerDuckLaidBall",0);
				
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 80) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30 && random(1,3) <= 1) A_FaceTarget();
				A_SpawnProjectile("CroquetBall",40);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_SpawnProjectile("CroquetBall",40,-2,-3);
					A_SpawnProjectile("CroquetBall",40,2,3);
				}
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
				{
					A_SpawnProjectile("CroquetBall",40,-4,-6);
					A_SpawnProjectile("CroquetBall",40,4,6);
				}
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("CroquetBall",40,-6,-9);
					A_SpawnProjectile("CroquetBall",40,6,9);
				}
			}
			HDUK N 3
			{
				ProjectilePassHeight = 48;
				A_SetInventory("HammerDuckLaidBall",0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 50) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 100) A_SetTics(1);
			}
			HDUK O 8
			{
				ProjectilePassHeight = 48;
				A_SetInventory("HammerDuckLaidBall",0);
				
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 20) A_SetTics(7);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 40) A_SetTics(6);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(5);
			}
			Goto See;
		Pain:
			HDUK E 0 A_CheckLaidBallDrop();
			HDUK E 6 A_EEPain;
			HDUK E 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			HDUK E 0 A_CheckLaidBallDrop();
			HDUK E 5 A_StartSound("VacDed",CHAN_BODY);
			HDUK E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,3);
			Stop;
		*/
		Death:
			HDUK E 0 
			{
				A_CheckLaidBallDrop();
				A_Drop();
			}
			HDUK E 5 bright A_Scream();
			HDUK STUV 5 bright;
			HDUK W 5 A_NoBlocking();
			HDUK X 35;
			Stop;
		Raise:
			HDUK XWVUTSE 5;
			Goto See;
	}
}

class CroquetBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		DamageType "Cricket";
		Projectile;
		+RANDOMIZE
		//+NOEXTREMEDEATH
		renderstyle "Normal";
		DeathSound "croquet/ballhit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			CBAL AB 3;
			Loop;
		Death:
			CBAL CDEF 4 Bright;
			Stop;
		Crash:
			CBAL CDEF 4 Bright;
			Stop;
		XDeath:
			TNT1 A 1;
			Stop;
	}
}

//PLANTER
class Planter : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 80;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Fire", 5;
		DamageFactor "CherryBomb", 5;
		DamageFactor "Spinner", 5;
		DamageFactor "Popper", 5;
		DamageFactor "BRocket", 5;
		DamageFactor "Chop", 5;
		DamageFactor "Cricket", 2;
		DamageFactor "Lead", 0.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		SeeSound "gard/sight";
		PainSound "gard/pain";
		DeathSound "gard/death";
		ActiveSound "gard/active";
		MeleeSound "gard/swing";
		Obituary "%o was clipped by a planter.";
		Tag "Planter";
	}
	
	States
	{
		Spawn:
			GARD P 10 A_Look();
			Loop;
		See:
			GARD AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			GARD E 0 
			{
				A_StartSound("gard/sight",CHAN_VOICE);
				A_DynamicMusic();
			}
			GARD E 6 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			GARD F 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);

				int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				A_CustomMeleeAttack (dmg, "gard/swing", "gard/swing", "", 1);
			}
			GARD G 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			GARD F 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				
				int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				if (random(1,60) <= CountInv("MonsterLevel")) A_CustomMeleeAttack(dmg, "gard/swing", "gard/swing", "", 1);
			}
			Goto See;
		Pain:
			GARD H 6 A_EEPain;
			GARD H 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			GARD H 5 A_StartSound("VacDed",CHAN_BODY);
			GARD H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			GARD I 5 Bright A_Scream();
			GARD JKLMN 4 Bright;
			GARD O 5 Bright A_NoBlocking();
			Stop;
		Raise:
			GARD ONMLKJI 5;
			Goto See;
	}
}

class PlanterBird : Planter
{
	default
	{
		Tag "Planter (bird)";
	}
	States
	{
		Missile:
			GARD P 0 A_DynamicMusic();
			GARD PQ 4 A_FaceTarget;
			GARD Q 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					if (random(1,2) <=1) return resolvestate("MissileBomb");
				}
				return resolvestate(null);
			}
			goto MissileNormal;
		MissileNormal:
			GARD RS 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				A_FaceTarget();
			}
			GARD Q 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int rndoffz = random(-5,5);
				int rndoffxy;
				double rndang = frandompick(3.75,7.5,11.25);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 15) rndoffxy = random(-5,5);
				A_SpawnProjectile("BirdBall",48,rndoffz,rndoffxy,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_SpawnProjectile("BirdBall",48,(-rndoffz*2),(-rndoffxy*2),-rndang);
					A_SpawnProjectile("BirdBall",48,(rndoffz*2),(rndoffxy*2),rndang);
				}
			}
			GARD QP 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_Feathers("BirdBallFeather");
			}
			Goto See;
		MissileBomb:
			GARD TU 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				A_FaceTarget();
			}
			GARD Q 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int rndoffz = random(-5,5);
				int rndoffxy;
				double rndang = frandompick(3.75,7.5,11.25);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) rndoffxy = random(-5,5);
				A_SpawnProjectile("BirdBombBall",48,rndoffz,rndoffxy,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
				{
					A_SpawnProjectile("BirdBombBall",48,(-rndoffz*2),(-rndoffxy*2),-rndang);
					A_SpawnProjectile("BirdBombBall",48,(rndoffz*2),(rndoffxy*2),rndang);
				}
			}
			GARD QP 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_Feathers("BombBirdBallFeather");
			}
			Goto See;
	}
}

class BirdBallFeather : Feather
{
	Default
	{
		Radius 2;
		Height 4;
		+MISSILE +DROPOFF
		+NOTELEPORT +CANNOTPUSH
		+WINDTHRUST +DONTSPLASH
		Gravity 0.125;
	}

	States
	{
		Spawn:
			BDF1 ABCDEDCB 3;
			Loop;
		Death:
			BDF1 B 6;
			Stop;
	}
}

class BombBirdBallFeather : Feather
{
	Default
	{
		Radius 2;
		Height 4;
		+MISSILE +DROPOFF
		+NOTELEPORT +CANNOTPUSH
		+WINDTHRUST +DONTSPLASH
		Gravity 0.125;
	}

	States
	{
		Spawn:
			BDF2 ABCDEDCB 3;
			Loop;
		Death:
			BDF2 B 6;
			Stop;
	}
}

class BirdBall : EEProjectile
{
	default
	{
		Radius 10;
		Height 12;
		Speed 9;
		Health 5;
		DamageFunction (finaldamagedealt);
		+SEEKERMISSILE
		+SHOOTABLE
		+NOBLOOD
		+NOEXTREMEDEATH
		Projectile;
		renderstyle "Normal";
		SeeSound "birdy/sight";
		DeathSound "birdy/death";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			FFLY AB 2 
			{
				double s1 = 10.0;
				double s2 = 10.0;
				if (target && exex_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					if (target.CountInv("MonsterLevel") > 30)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
					}
					if (target.CountInv("MonsterLevel") > 60)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
					}
				}
				A_SeekerMissile(s1,s2);
			}
			Loop;
		Death:
			JSPL AAAA 1 A_Feathers("BirdBallFeather");
			Stop;
	}
}

class BirdBombBall : EEProjectile
{
	default
	{
		Radius 10;
		Height 12;
		Speed 7;
		Health 5;
		DamageFunction (finaldamagedealt);
		+SEEKERMISSILE
		+SHOOTABLE
		+NOBLOOD
		+NOEXTREMEDEATH
		Projectile;
		renderstyle "Normal";
		SeeSound "birdy/sight";
		DeathSound "birdy/death";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			FFLY CD 2 
			{
				double s1 = 8.0;
				double s2 = 8.0;
				if (target && exex_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					if (target.CountInv("MonsterLevel") > 30)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
					}
					if (target.CountInv("MonsterLevel") > 60)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
					}
				}
				A_SeekerMissile(s1,s2);
			}
			Loop;
		Death:
			JSPL A 0
			{
				A_StartSound("weapons/cherryboom",8);
				
				int raddmg = A_CalcDamageFormula2(64,0.005,randompick(21,21,22),0.3334,randompick(10,11,11),0.1667,0.01);
				A_Explode(raddmg,64,0,true);
			}
			JSPL A 1 
			{
				A_SetScale((scale.x*1.125),(scale.y*1.125));
				A_Feathers("BombBirdBallFeather");
			}
			JSPL AAA 1 
			{
				A_SetScale((scale.x*1.125),(scale.y*1.125));
			}
			Stop;
	}
}

//MAN-CHINEEL
class Manchineel : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 100;
		Radius 20;
		Height 56;
		ProjectilePassHeight 76;
		Mass 100000;
		Speed 0;
		PainChance 256;
		DamageFactor "Fire", 5;
		DamageFactor "CherryBomb", 5;
		DamageFactor "Spinner", 5;
		DamageFactor "Popper", 5;
		DamageFactor "BRocket", 5;
		DamageFactor "Chop", 5;
		DamageFactor "Cricket", 2;
		DamageFactor "Lead", 0.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+CANNOTPUSH
		+DONTTHRUST
		+MISSILEMORE
		PainSound "gard/pain";
		DeathSound "gard/death";
		MeleeSound "gard/swing";
		Obituary "%o was clipped by a man-chineel.";
		MeleeDamage 3;
		MissileType "SeedBall";
		Tag "Man-Chineel";
		//DropItem "GalaApple", 32;
		//DropItem "GalaApple", 8;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("GalaApple",1,16);
			A_DropItem("GalaApple",1,4);
		}
		else
		{
			A_DropItem("GalaApple",1,48);
			A_DropItem("GalaApple",1,12);
		}
	}
	
	void A_ManchineelAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(15,25),0.06667,random(5,10),0.0334,random(0,5),0.01667,0.0025);
		if (type == 0) A_CustomComboAttack("SeedBall", 32, (dmg), "gard/swing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "gard/swing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("SeedBall",32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			TRNT A 10 A_Look();
			Loop;
		See:
			TRNT AA 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			TRNT BCD 6;
			TRNT E 0 
			{
				A_DynamicMusic();
				A_StartSound("gard/sight",CHAN_VOICE);
			}
			TRNT E 6 A_FaceTarget();
			TRNT F 6
			{
				A_ManchineelAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 25)
					{
						angle -= 15;
						A_ManchineelAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_ManchineelAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 50)
					{
						angle -= 22.5;
						A_ManchineelAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_ManchineelAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						angle -= 7.5;
						A_ManchineelAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_ManchineelAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			TRNT G 6;
			TRNT DCB 4;
			Goto See;
		Pain:
			TRNT H 6 A_EEPain();
			TRNT DCB 2;
			Goto See;
		/*
		Death.Suck:
			TRNT H 5 A_StartSound("VacDed",CHAN_BODY);
			TRNT H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			TRNT I 5 Bright A_Scream();
			TRNT JK 5 Bright;
			GARD LMN 4 Bright;
			GARD O 5 Bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			Stop;
		Raise:
			GARD ONML 5;
			TRNT KJI 5;
			Goto See;
	}
}

// EE Manchineel - turret type
class ManchineelEE : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 100;
		Radius 20;
		Height 56;
		ProjectilePassHeight 76;
		Mass 100000;
		Speed 0;
		PainChance 256;
		DamageFactor "Fire", 2.5;
		DamageFactor "CherryBomb", 2.5;
		DamageFactor "Spinner", 2.5;
		DamageFactor "Popper", 2.5;
		DamageFactor "BRocket", 2.5;
		DamageFactor "Chop", 2.5;
		DamageFactor "Cricket", 1.5;
		DamageFactor "Lead", 0.75;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		DamageFactor 0.5;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+CANNOTPUSH;
		+DONTTHRUST;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		PainSound "gard/pain";
		DeathSound "gard/death";
		MeleeSound "gard/swing";
		Obituary "%o was clipped by a man-chineel.";
		MeleeDamage 3;
		MissileType "SeedBall";
		Tag "Man-Chineel";
		//DropItem "GalaApple", 32;
		//DropItem "GalaApple", 8;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("GalaApple",1,16);
			A_DropItem("GalaApple",1,4);
		}
		else
		{
			A_DropItem("GalaApple",1,48);
			A_DropItem("GalaApple",1,12);
		}
	}
	
	void A_ManchineelAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(15,25),0.06667,random(5,10),0.0334,random(0,5),0.01667,0.0025);
		if (type == 0) A_CustomComboAttack("SeedBall", 32, (dmg), "gard/swing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "gard/swing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("SeedBall",32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			TRNT A 10 A_Look();
			Loop;
		See:
			TRNT AA 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			TRNT BCD 3;
			TRNT E 0 
			{
				A_DynamicMusic();
				A_StartSound("gard/sight",CHAN_VOICE);
			}
			TRNT E 3 A_FaceTarget();
			TRNT F 3
			{
				A_ManchineelAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 25)
					{
						angle -= 15;
						A_ManchineelAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_ManchineelAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 50)
					{
						angle -= 22.5;
						A_ManchineelAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_ManchineelAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						angle -= 7.5;
						A_ManchineelAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_ManchineelAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			TRNT G 3;
			TRNT DCB 2;
			Goto See;
		Pain:
			TRNT H 3 A_EEPain();
			TRNT DCB 1;
			Goto See;
		/*
		Death.Suck:
			TRNT H 5 A_StartSound("VacDed",CHAN_BODY);
			TRNT H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			TRNT I 5 Bright A_Scream();
			TRNT JK 5 Bright;
			GARD LMN 4 Bright;
			GARD O 5 Bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			Stop;
		Raise:
			GARD ONML 5;
			TRNT KJI 5;
			Goto See;
	}
}

class SeedBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		renderstyle "Normal";
		SeeSound "MalletSwing";
		DeathSound "croquet/ballhit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			ORNJ ABCD 2;
			Loop;
		Death:
			ORNJ E 12 Bright;
			Stop;
	}
}

//CENTAURION
class Centaurion : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 100;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Lead", 2;
		DamageFactor "Zap", 4;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Mass 300;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+NEVERFAST
		SeeSound "cent/sight";
		PainSound "cent/active";
		DeathSound "cent/pain";
		ActiveSound "cent/active";
		MeleeSound "gard/swing";
		Obituary "%o was clobbered by a Centaurion.";
		MeleeDamage 3;
		Tag "Centaurion";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
	}
	
	action void A_CentaurionShieldOff()
	{
		A_SetInventory("CentaurionShieldMode",0);
		A_UnSetReflectiveInvulnerable();
	}
	
	action void A_CentaurionShieldOn()
	{
		A_SetInventory("CentaurionShieldMode",1);
		A_SetReflectiveInvulnerable();
	}
	
	States
	{
		Spawn:
			C2NT Z 10 A_Look();
			Loop;
		See:
			C2NT AABBCCDD 2 fast 
			{
				A_CentaurionShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		ShieldUp:
			C2NB AABBCCDD 3 fast 
			{
				A_CentaurionShieldOn();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Goto See;
		Melee:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NT E 4 fast A_StartSound("cent/sight",CHAN_VOICE);
			C2NT F 4 fast A_FaceTarget();
			C2NT G 6 fast 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5); 
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				A_CustomMeleeAttack (dmg, "gard/swing", "gard/swing", "", 1);
			}
			C2NT H 4 fast A_DynamicMusic();
			C2NT I 4 fast;
			Goto See;
		Missile:
			C2NT A 5 fast 
			{
				int shldchance = 256;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) return resolvestate("Shieldup");
				return resolvestate(null);
			}
			Goto See;
		Pain:
			C2NT J 6 fast A_EEPain();
			C2NT J 3 fast A_DynamicMusic();
			C2NT K 0 fast A_Jump(192,"See");
			C2NT K 6 fast A_CentaurionShieldOn();
			C2NT K 12 fast;
			Goto ShieldUp;
		/*
		Death.Suck:
			C2NT J 5 A_StartSound("VacDed",CHAN_BODY);
			C2NT J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			C2NT L 6 Bright A_Scream();
			C2NT MNO 6 Bright;
			C2NT P 10 
			{
				A_NoBlocking();
				A_Drop();
			}
			C2NT QRST 7;
			Stop;
		Raise:
			C2NT TSRQPONML 5;
			Goto See;
	}
}

class CentaurionFuzzy : Centaurion
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
	}
}

class NightmareCentaurion : Centaurion
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 200;
		Radius 20;
		Height 56;
		Speed 12;
		PainChance 256;
		DamageFactor "Lead", 1.5;
		DamageFactor "Zap", 2.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Mass 450;
		RenderStyle "Subtract";
		Alpha 0.7;
		MeleeDamage 4;
		Tag "Centaurion (Nightmare)";
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
	}

	States
	{
		Spawn:
			C2NT Z 10 A_Look();
			Loop;
		See:
			C2NT AABBCCDD 2 fast 
			{
				A_CentaurionShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		ShieldUp:
			C2NB AABBCCDD 3 fast 
			{
				A_CentaurionShieldOn();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Goto See;
		Melee:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NT E 3 fast A_StartSound("cent/sight",CHAN_VOICE);
			C2NT F 3 fast A_FaceTarget();
			C2NT G 5 fast 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5); 
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(25,45),0.1,random(15,35),0.0667,random(10,20),0.05,0.005);
				
				A_CustomMeleeAttack (dmg, "gard/swing", "gard/swing", "", 1);
			}
			C2NT H 3 fast A_DynamicMusic();
			C2NT I 3 fast;
			Goto See;
		Missile:
			C2NT A 4 fast
			{
				int shldchance = 256;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) return resolvestate("Shieldup");
				return resolvestate(null);
			}
			Goto See;
		Pain:
			C2NT J 6 fast A_EEPain();
			C2NT J 3 fast A_DynamicMusic();
			C2NT K 0 fast A_Jump(192,"See");
			C2NT K 6 fast A_CentaurionShieldOn();
			C2NT K 12 fast;
			Goto ShieldUp;
		/*
		Death.Suck:
			C2NT J 5 A_StartSound("VacDed",CHAN_BODY);
			C2NT J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			C2NT L 6 Bright A_Scream();
			C2NT MNO 6 Bright;
			C2NT P 10 
			{
				A_NoBlocking();
				A_Drop();
			}
			C2NT QRST 7;
			Stop;
		Raise:
			C2NT TSRQPONML 5;
			Goto See;
	}
}

class CentaurionSgt : Centaurion
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		DamageFactor "Zap", 1;
		Tag "Centaurion Sergeant";
		Obituary "%o was clobbered by a Centaurion Sergeant.";
		//Dropitem "PikeAmmo", 64;
		//Dropitem "PikeAmmo", 4;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("PikeAmmo",1,64);
			A_DropItem("PikeAmmo",1,4);
		}
		else
		{
			A_DropItem("PikeAmmo",1,64,ADI_FULLAMMO);
			A_DropItem("PikeAmmo",1,16,ADI_FULLAMMO);
		}
	}
	
	States
	{
		ShieldUp:
			C2NB AABBCCDD 3 fast 
			{
				A_CentaurionShieldOn();
				int shldchance = 256;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) A_EEChase("Melee","SwordZap",0,1,3,1,1);
																		else A_EEChase("Melee",null,0,1,3,1,1);
			}
			C2NB D 0 fast 
			{
				int shldchance = 108;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(3,4);
				if (random(1,256) <= shldchance) return resolvestate("See");
				return resolvestate(null);
			}
			C2NB D 0 fast 
			{
				int shldchance = 108;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) return resolvestate("SwordZap");
				return resolvestate(null);
			}
			Loop;
		SwordZap:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NZ A 6 fast bright;
			C2NZ B 6 fast bright A_FaceTarget();
			C2NZ C 6 fast bright 
			{
				A_StartSound("zappo",CHAN_BODY);
				A_SpawnProjectile("BadZapshot",48,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 25)
				{
					double randang = frandompick(2.0625,3.09875,4.125);
					double randpitch = (frandompick(2.0625,3.09875,4.125) * 0.0125);
					A_StartSound("zappo",110);
					A_StartSound("zappo",111);
					A_SpawnProjectile("BadZapshot",48,-8,-randang,CMF_TRACKOWNER,frandompick(-randpitch,randpitch));
					A_SpawnProjectile("BadZapshot",48,8,randang,CMF_TRACKOWNER,frandompick(-randpitch,randpitch));
					if (CountInv("MonsterLevel") >= 50)
					{
						A_StartSound("zappo",112);
						A_StartSound("zappo",113);
						A_SpawnProjectile("BadZapshot",48,-16.32,(-randang*2.1),CMF_TRACKOWNER,(frandompick(-randpitch,randpitch)*1.55));
						A_SpawnProjectile("BadZapshot",48,16.32,(randang*2.1),CMF_TRACKOWNER,(frandompick(-randpitch,randpitch)*1.55));
					}
				}
			}
			C2NZ D 6 fast bright A_DynamicMusic();
			C2NZ E 6 fast bright;
			Goto See;
		Melee:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NT E 4 fast A_StartSound("cent/sight",CHAN_VOICE);
			C2NT F 4 fast A_FaceTarget();
			C2NT G 6 fast 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5); 
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(15,35),0.07,random(10,20),0.06,random(5,15),0.05,0.005);
				
				A_CustomMeleeAttack (dmg, "gard/swing", "gard/swing", "", 1);
			}
			C2NT H 4 fast A_DynamicMusic();
			C2NT I 4 fast;
			Goto See;
		Death:
			C2NT L 6 Bright 
			{
				A_Scream();
				A_StartSound("cent/pain",233,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
				A_StartSound("cent/pain",234,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				A_StartSound("cent/pain",235,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			}
			C2NT MNO 6 Bright;
			C2NT P 10 
			{
				A_NoBlocking();
				A_Drop();
			}
			C2NT QRST 7;
			Stop;
		Raise:
			C2NT TSRQPONML 5;
			Goto See;
	}
}

class CentaurionSgtFuzzy : CentaurionSgt
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
	}
}

class NightmareCentaurionSgt : CentaurionSgt
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 200;
		Radius 20;
		Height 56;
		Speed 12;
		PainChance 256;
		DamageFactor "Lead", 1.5;
		DamageFactor "Zap", 0.67;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Mass 450;
		RenderStyle "Subtract";
		Alpha 0.7;
		Tag "Centaurion Sergeant";
		Obituary "%o was clobbered by a Centaurion Sergeant.";
		//Dropitem "PikeAmmo", 64;
		//Dropitem "PikeAmmo", 4;
		MeleeDamage 5;
		Tag "Centaurion Sergeant (Nightmare)";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("PikeAmmo",1,64);
			A_DropItem("PikeAmmo",1,4);
		}
		else
		{
			A_DropItem("PikeAmmo",1,64,ADI_FULLAMMO);
			A_DropItem("PikeAmmo",1,16,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		ShieldUp:
			C2NB AABBCCDD 3 fast
			{
				A_CentaurionShieldOn();
				int shldchance = 256;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) A_EEChase("Melee","SwordZap",0,1,3,1,1);
																		else A_EEChase("Melee",null,0,1,3,1,1);
			}
			C2NB D 0 fast 
			{
				int shldchance = 108;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(3,4);
				if (random(1,256) <= shldchance) return resolvestate("See");
				return resolvestate(null);
			}
			C2NB D 0 fast 
			{
				int shldchance = 108;
				if (CountInv("ScramblerConfusion")) shldchance *= frandom(0.25,0.334);
				if (random(1,256) <= shldchance) return resolvestate("SwordZap");
				return resolvestate(null);
			}
			Loop;
		SwordZap:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NZ A 5 fast bright;
			C2NZ B 5 fast bright A_FaceTarget();
			C2NZ C 5 fast bright 
			{
				A_StartSound("zappo",CHAN_BODY);
				A_SpawnProjectile("BadZapshot",48,0);
				if (random(1,3) <= 1)
				{
					double randang = frandompick(2.0625,3.09875,4.125);
					double randpitch = (frandompick(2.0625,3.09875,4.125) * 0.0125);
					A_StartSound("zappo",110);
					A_StartSound("zappo",111);
					A_SpawnProjectile("BadZapshot",48,-8,-randang,CMF_TRACKOWNER,frandompick(-randpitch,randpitch));
					A_SpawnProjectile("BadZapshot",48,8,randang,CMF_TRACKOWNER,frandompick(-randpitch,randpitch));
					if (random(1,3) <= 1)
					{
						A_StartSound("zappo",112);
						A_StartSound("zappo",113);
						A_SpawnProjectile("BadZapshot",48,-16.32,(-randang*2.1),CMF_TRACKOWNER,(frandompick(-randpitch,randpitch)*1.55));
						A_SpawnProjectile("BadZapshot",48,16.32,(randang*2.1),CMF_TRACKOWNER,(frandompick(-randpitch,randpitch)*1.55));
					}
				}
			}
			C2NZ D 5 fast bright A_DynamicMusic();
			C2NZ E 5 fast bright;
			Goto See;
		Melee:
			C2NT A 0 fast A_CentaurionShieldOff();
			C2NT E 3 fast A_StartSound("cent/sight",CHAN_VOICE);
			C2NT F 3 fast A_FaceTarget();
			C2NT G 5 fast 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(4); 
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
				int dmg = A_CalcDamageFormula2(random(25,45),0.125,random(15,35),0.09,random(10,20),0.0667,0.005);
				A_CustomMeleeAttack (dmg, "gard/swing", "gard/swing", "", 1);
			}
			C2NT H 3 fast A_DynamicMusic();
			C2NT I 3 fast;
			Goto See;
		Death:
			C2NT L 6 Bright 
			{
				A_Scream();
				A_StartSound("cent/pain",233,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
				A_StartSound("cent/pain",234,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
				A_StartSound("cent/pain",235,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			}
			C2NT MNO 6 Bright;
			C2NT P 10 
			{
				A_NoBlocking();
				A_Drop();
			}
			C2NT QRST 7;
			Stop;
		Raise:
			C2NT TSRQPONML 5;
			Goto See;
	}
}

//PUDDING DOG
class PuddingDog : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 250;
		PainChance 256;
		Painchance "Suck", 64;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		Speed 14;
		Radius 20;
		Height 56;
		Mass 150;
		Scale 0.75;
		DamageFactor "Chop", 0.5;
		Damagefactor "breakfast", 2;
		DamageFactor "Zap", 2;
		DamageFactor "Fist", 0.25;
		DamageFactor "Kick", 0.25;
		Meleedamage 3;
		Meleerange 56;
		Maxtargetrange 192;
		Meleethreshold 96;
		Monster;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		SeeSound "pdog/active";
		PainSound "misc/splat";
		DeathSound "misc/splat";
		ActiveSound "pdog/active";
		Obituary "%o was dipped by a pudding dog.";
		Tag "Pudding Dog";
		Species "PuddingDog";
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
	}
	
	void A_PuddingDogNom(int type = 0)
	{
		int dmgbase = random(2,6);
		if (exex_monsterlevelenabledflags)
		{
			dmgbase += (CountInv("MonsterLevel") * frandompick(0.25,0.25,0.334,0.334,0.334,0.5,0.5));
			if (CountInv("MonsterLevel") > 30) 
			{
				dmgbase += random(1,4);
				dmgbase += (CountInv("MonsterLevel") * frandompick(0.125,0.125,0.125,0.1667,0.1667,0.25,0.25));
			}
			if (CountInv("MonsterLevel") > 60)
			{
				dmgbase += random(2,4);
				dmgbase += (CountInv("MonsterLevel") * frandompick(0.125,0.125,0.125,0.1667,0.1667,0.25,0.25));
			}

			dmgbase *= 1.0 + (CountInv("MonsterLevel") * 0.0625);
			if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0625)))
			{
				dmgbase *= 2;
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.03125))) 
				{
					dmgbase *= 2;
					if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.016125))) 
					{
						dmgbase *= 2;
						if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0080625))) dmgbase *= 2;
					}
				}
			}
		}
		if (type == 1) 
		{
			dmgbase *= frandom(0.2375,0.2625);
			if (dmgbase < 1) dmgbase = 1;
		}
		dmgbase *= randompick(1,1,1,2,2,2,2,2);
		A_CustomMeleeAttack(dmgbase, "misc/splat", " ");
	}
	
	States
	{
		Spawn:
			CDOG B 10 A_Look();
			Loop;
		See:
			CDOG AABB 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CDOG C 4 A_FaceTarget();
			CDOG C 0 A_CheckProximity("MissilePounce","PlayerPawn",640,1,CPXF_CHECKSIGHT|CPXF_ANCESTOR);
			CDOG C 0;
			Goto See;
		MissilePounce:
			CDOG C 0 A_DynamicMusic();
			CDOG C 4 A_FaceTarget();
			CDOG C 0 A_StartSound("pdog/attack",CHAN_VOICE);
			CDOG C 0 ThrustThingZ(0, 27, 0, 0);
			CDOG C 0 ThrustThing(angle*256/360, 24, 0, 0);
		JumpUp:
			CDOG D 3 A_PuddingDogNom(0);
			CDOG D 1 A_PuddingDogNom(1);
			CDOG D 1 A_PuddingDogNom(1);
		JumpDown:
			CDOG D 1 A_CheckFloor ("Land");
			CDOG D 1;
			CDOG D 1;
			loop;
		Land:
			CDOG E 0 A_FaceTarget();
			CDOG E 0 A_PuddingDogNom(0);
			CDOG E 4 A_Stop();
			CDOG F 4;
			CDOG E 4;
			goto See;
		Pain:
			CDOG F 5
			{
				if (random(1,2) <= 1) A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
				A_EEPain();
			}
			CDOG E 3;
			CDOG C 3;
			Goto See;
		Pain.Beats:
			CDOG F 5 
			{
				if (random(1,5) <= 1) A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
				A_EEPain();
			}
			CDOG E 3;
			CDOG C 3;
			Goto See;
		Pain.Chop:
			CDOG F 5 
			{
				if (random(1,2) <= 1)
				{
					A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
					A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
					if (random(1,2) <= 1)
					{
						A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
						A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
					}
				}
				A_EEPain();
			}
			CDOG E 3;
			CDOG C 3;
			Goto See;
		Pain.Fist:
		Pain.Kick:
			CDOG F 5 
			{
				if (random(1,16) <= 1) A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
				A_EEPain();
			}
			CDOG E 3;
			CDOG C 3;
			Goto See;
		/*
		Death.Suck:
			CDOG F 5 A_StartSound("VacDed",CHAN_BODY);
			CDOG F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			CDOG F 6 A_Scream();
			CDOG G 6 A_NoBlocking();
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			CDOG H 1 A_ThrowGrenade("PupGrenade",2,random(2,6),random(6,10),0);
			Stop;
	}
}

class PupGrenade : EEProjectile
{
	default
	{
		Radius 8;
		Height 16;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Scale 0.25;
		Projectile;
		-NOGRAVITY
		renderstyle "Normal";
		SeeSound "pdog/sight";
		Species "PuddingDog";
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			CDOG D 3;
			loop;
		Death:
			CDOG EFE 2;
			CDOG E 0 A_SpawnItemEx("PuddingPup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class PuddingPup : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 5;
		PainChance 256;
		Speed 18;
		Radius 8; // 10
		Height 16; // 56
		Mass 75; // 50
		Scale 0.25; // 0.75;
		Meleedamage 1;
		Meleerange 40;
		Maxtargetrange 192;
		Meleethreshold 96;
		Monster;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+MISSILEMORE
		+NOBLOOD
		SeeSound "pdog/sight";
		PainSound "misc/splat";
		DeathSound "misc/splat";
		ActiveSound "pdog/sight";
		Obituary "%o was swarmed by a pudding pup.";
		Tag "Pudding Pup";
		Species "PuddingDog";
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
	}
	
	void A_PuddingPupNom(int type = 0)
	{
		int dmgbase = random(1,2);
		if (exex_monsterlevelenabledflags)
		{
			dmgbase += (CountInv("MonsterLevel") * frandompick(0.125,0.125,0.125,0.1667,0.1667,0.25,0.25));
			if (CountInv("MonsterLevel") > 30) 
			{
				dmgbase += random(0,3);
				dmgbase += (CountInv("MonsterLevel") * frandompick(0.0625,0.0625,0.0625,0.125,0.125,0.1667,0.1667));
			}
			if (CountInv("MonsterLevel") > 60)
			{
				dmgbase += random(1,2);
				dmgbase += (CountInv("MonsterLevel") * frandompick(0.0625,0.0625,0.0625,0.125,0.125,0.1667,0.1667));
			}
			dmgbase *= 1.0 + (CountInv("MonsterLevel") * 0.04375);
			if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.03125)))
			{
				dmgbase *= 2;
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.016125))) 
				{
					dmgbase *= 2;
					if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0080625)))
					{
						dmgbase *= 2;
						if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.00403125))) dmgbase *= 2;
					}
				}
			}
		}
		if (type == 1) 
		{
			dmgbase *= frandom(0.2375,0.2625);
			if (dmgbase < 1) dmgbase = 1;
		}
		dmgbase *= randompick(1,1,1,1,1,2,2,2);
		A_CustomMeleeAttack(dmgbase, "misc/splat", " ");
	}
	
	States
	{
		Spawn:
			CDOG B 10 A_Look;
			Loop;
		See:
			CDOG AABB 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CDOG C 3 A_FaceTarget();
			CDOG C 0 A_CheckProximity("MissilePounce","PlayerPawn",480,1,CPXF_CHECKSIGHT|CPXF_ANCESTOR);
			CDOG C 0;
			Goto See;
		MissilePounce:
			CDOG C 0 A_DynamicMusic();
			CDOG C 3 A_FaceTarget;
			CDOG C 0 A_StartSound("pdog/attack",CHAN_VOICE);
			CDOG C 0 ThrustThingZ(0, 20, 0, 0);
			CDOG C 0 ThrustThing(angle*256/360, 24, 0, 0);
		JumpUp:
			CDOG D 3 A_PuddingPupNom(0);
			CDOG D 1 A_PuddingPupNom(1);
			CDOG D 1 A_PuddingPupNom(1);
		JumpDown:
			CDOG D 1 A_CheckFloor("Land");
			CDOG D 1;
			CDOG D 1;
			loop;
		Land:
			CDOG F 0 A_FaceTarget();
			CDOG F 0 A_PuddingPupNom(0);
			CDOG E 4 A_Stop();
			CDOG F 4;
			CDOG E 4;
			goto See;
		Pain:
			CDOG F 4 A_EEPain();
			CDOG E 2 A_DynamicMusic();
			CDOG C 2;
			Goto See;
		/*
		Death.Suck:
			CDOG F 5 A_StartSound("VacDed",CHAN_BODY)
			CDOG F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,1)
			Stop;
		*/
		Death:
			CDOG F 5 A_Scream();
			CDOG G 5 A_NoBlocking();
			CDOG H 5;
			Stop;
	}
}

class JellyBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 15;
		Health 5;
		DamageFunction (finaldamagedealt);
		Projectile;
		renderstyle "Add";
		Alpha 0.9;
		DeathSound "misc/splat";
		+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			JBAL ABC 2 A_SeekerMissile(10,10);
			Loop;
		Death:
			JSPL ABC 4;
			Stop;
	}
}

//VITRIOLA
class Vitriola : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 250;
		Radius 20;
		Height 64;
		Speed 10;
		PainChance 256;
		DamageFactor "Fire", 3;
		DamageFactor "CherryBomb", 3;
		DamageFactor "Spinner", 3;
		DamageFactor "Popper", 3;
		DamageFactor "BRocket", 3;
		DamageFactor "Chop", 5;
		DamageFactor "Cricket", 2;
		DamageFactor "Lead", 2;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+FLOAT
		+NOGRAVITY
		+FLOATBOB
		SeeSound "virtuoso/active";
		PainSound "virtuoso/pain";
		DeathSound "virtuoso/death";
		ActiveSound "virtuoso/active";
		Obituary "%o was seranaded by a Vitriola.";
		Tag "Vitriola";
		//DropItem "MusicAmmo", 96;
		//DropItem "MusicAmmo", 12;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("MusicAmmo",1,96);
			A_DropItem("MusicAmmo",1,12);
		}
		else
		{
			A_DropItem("MusicAmmo",1,96,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,24,ADI_FULLAMMO);
		}
	}
	
	void A_VirtNoteSpawnFacing(string notetype = "Mininote")
	{
		A_FaceTarget();
		A_SpawnItemEx(notetype, 0, 0, 25, 0, random(-1, 1), random(-1, 1));
	}
	
	States
	{
		Spawn:
			VIRT C 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			VIRT CC 10 A_FloatLook(16);
			VIRT D 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			VIRT DD 10 A_FloatLook(16);
			Loop;
		See:
			VIRT AABB 3 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				

				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags)
				{
				}
				int fcchance = 32;
				int fcchance2 = 1;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 220)
					{
						A_SetTics(randompick(1,1,1));
						fcchance = 6;
						fcchance2 = 6;
					}
					else
					if (CountInv("MonsterLevel") >= 200)
					{
						A_SetTics(randompick(1,1,1));
						fcchance = 7;
						fcchance2 = 5;
					}
					else
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SetTics(randompick(1,1,1));
						fcchance = 8;
						fcchance2 = 4;
					}
					else
					if (CountInv("MonsterLevel") >= 160)
					{
						A_SetTics(randompick(1,1,1));
						fcchance = 9;
						fcchance2 = 4;
					}
					else
					if (CountInv("MonsterLevel") >= 140)
					{
						A_SetTics(randompick(1,1,1));
						fcchance = 10;
						fcchance2 = 4;
					}
					else
					if (CountInv("MonsterLevel") >= 120)
					{
						A_SetTics(randompick(1,1,2));
						fcchance = 11;
						fcchance2 = 3;
					}
					else
					if (CountInv("MonsterLevel") >= 100)
					{
						A_SetTics(randompick(1,1,2));
						fcchance = 12;
						fcchance2 = 3;
					}
					else
					if (CountInv("MonsterLevel") >= 80)
					{
						A_SetTics(randompick(1,2,2));
						fcchance = 13;
						fcchance2 = 2;
					}
					else
					if (CountInv("MonsterLevel") >= 60)
					{
						A_SetTics(randompick(2,2,2));
						fcchance = 14;
						fcchance2 = 2;
					}
					else
					if (CountInv("MonsterLevel") >= 40)
					{
						A_SetTics(randompick(2,2,3));
						fcchance = 15;
						fcchance2 = 1;
					}
					else
					if (CountInv("MonsterLevel") >= 20) 
					{
						A_SetTics(randompick(2,3,3));
						fcchance = 16;
						fcchance2 = 1;
					}
					else
					{
						fcchance = 32;
						fcchance2 = 1;
					}
				}
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) fcchance *= 4;
				if (random(1,fcchance) <= fcchance2) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																				else A_EEChase("Melee","Missile",0,1,3,1,1);
				user_painfastchase = 0;
			}
			VIRT B 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			Loop;
		Missile:
			VIRT C 0 { user_painfastchase = 0; } 
			VIRT C 2 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(1,2,2));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(1,1,2));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(1,1,1));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(0,1,1));
					if (CountInv("MonsterLevel") >= 100) A_SetTics(randompick(0,0,1));
				}
				A_StartSound("virtuoso/virtfire");
			}
			VIRT DCDCDCDCDCDCD 2 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(1,2,2));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(1,1,2));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(1,1,1));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(0,1,1));
					if (CountInv("MonsterLevel") >= 100) A_SetTics(randompick(0,0,1));
				}
				A_VirtNoteSpawnFacing("Mininote");
			}
			VIRT C 4 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 15) A_SetTics(randompick(3,4,4,4));
					if (CountInv("MonsterLevel") >= 30) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 45) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(1,2,2,3));
					if (CountInv("MonsterLevel") >= 75) A_SetTics(randompick(1,1,2,2));
					if (CountInv("MonsterLevel") >= 90) A_SetTics(randompick(0,1,1,2));
					if (CountInv("MonsterLevel") >= 105) A_SetTics(randompick(0,0,1,2));
				}
				A_StartSound("virtuoso/musicfire");
			}
			VIRT D 4 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 15) A_SetTics(randompick(3,4,4,4));
					if (CountInv("MonsterLevel") >= 30) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 45) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(1,2,2,3));
					if (CountInv("MonsterLevel") >= 75) A_SetTics(randompick(1,1,2,2));
					if (CountInv("MonsterLevel") >= 90) A_SetTics(randompick(0,1,1,2));
					if (CountInv("MonsterLevel") >= 105) A_SetTics(randompick(0,0,1,2));
				}
				A_SpawnProjectile("MusicBall",40);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						if (CountInv("MonsterLevel") >= 45)
						{
							A_SpawnProjectile("MusicBall",40,20);
							A_SpawnProjectile("MusicBall",40,-20);
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall",40,10);
								A_SpawnProjectile("MusicBall",40,-10);
							}
						}
						else
						{
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall",40,20);
								A_SpawnProjectile("MusicBall",40,-20);
								if (random(1,16) <= random(1,3))
								{
									A_SpawnProjectile("MusicBall",40,10);
									A_SpawnProjectile("MusicBall",40,-10);
								}
							}
						}
					}
					else
					{
						if (random(1,16) <= random(1,3))
						{
							A_SpawnProjectile("MusicBall",40,20);
							A_SpawnProjectile("MusicBall",40,-20);
						}
					}
				}
			}
			Goto See;
		Pain:
			VIRT E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			VIRT FE 3;
			Goto See;
		/*
		Death.Suck:
			VIRT E 5 A_StartSound("VacDed",CHAN_BODY);
			VIRT E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			VIRT E 6 bright A_Scream();
			VIRT F 6 bright 
			{
				bFLOATBOB = false;
			}
			VIRT GHI 6 bright;
			VIRT J 6 
			{
				A_NoBlocking();
				A_Drop();
			}
			Stop;
	}
}

class VitriolaFuzzy : Vitriola
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Vitriola (Spectre)";
		Obituary "%o was seranaded by a Spectral Vitriola.";
	}
}

class notetrail : EEProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		RenderStyle "Add";
		Alpha 0.4;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			HRT2 ABCBADED 4 BRIGHT;
			Stop;
	}
}

class NoteTrail2 : EEProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		renderstyle "Add";
		Alpha 0.4;
		Projectile;
		+CLIENTSIDEONLY
		+NOINTERACTION
	}

	States
	{
		Spawn:
			HRT4 ABCBADED 4 BRIGHT;
			Stop;
	}
}

class NoteCloud : EEProjectile
{
	default
	{
		Radius 24;
		Height 6;
		Speed 5;
		Projectile;
		RenderStyle "Translucent";
		ALPHA 0.67;
	}
	
	States 
	{
		Spawn: 
			HRT1 ABABABAB 4;
			Stop;
		Death:
			HRT1 ABAB 4;
			Stop;
	} 
} 

class NoteCloud2 : EEProjectile
{ 
	default
	{
		Radius 24;
		Height 6;
		Speed 5;
		Projectile;
		RenderStyle "Translucent";
		ALPHA 0.67;
	}
	
	States 
	{ 
		Spawn: 
			HRT3 ABABABAB 4;
			Stop;
		Death:
			HRT3 ABAB 4;
			Stop;
	} 
} 

class MiniNote : NoteCloud
{ 
	default
	{
		Radius 18;
		Height 5;
		Speed 0;
		Scale 0.75;
	}
} 

class MiniNote2 : NoteCloud2
{ 
	default
	{
		Radius 18;
		Height 5;
		Speed 0;
		Scale 0.75;
	}
} 

class MicroNote1 : NoteCloud
{ 
	default
	{
		Radius 12;
		Height 3;
		Speed 0;
		Scale 0.5;
	}
} 

class MicroNote2 : NoteCloud2
{
	default
	{
		Radius 12;
		Height 3;
		Speed 0;
		Scale 0.5;
	}
} 

//KILLETANTE
class Killetante : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 160;
		Radius 20;
		Height 64;
		Speed 10;
		PainChance 256;
		MeleeRange 64;
		Mass 100;
		DamageFactor "Fire", 3;
		DamageFactor "CherryBomb", 3;
		DamageFactor "Spinner", 3;
		DamageFactor "Popper", 3;
		DamageFactor "BRocket", 3;
		DamageFactor "Chop", 3;
		DamageFactor "Suck", 1.875;
		DamageFactor "Beats", 3;
		DamageFactor "Bap", 1;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		SeeSound "dancer/sight";
		PainSound "dancer/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dancer/active";
		Obituary "%o was out-danced by a Killetante.";
		HitObituary "%o was roundhouse-kicked by a Killetante.";
		Tag "Killetante";
		Species "Killetante";
		+DONTHARMCLASS
		+AVOIDHAZARDS
		+JUMPDOWN
	}
	
	void A_KilletanteDanceKick(int type = 0)
	{
		int basedmg = A_CalcDamageFormula2(random(10,15),frandom(0.25,0.30),random(0,10),frandom(0.025,0.03),random(5,25),frandom(0.020,0.04),0.0075);
		
		if (type == 1) basedmg *= frandom(0.2375,0.2625);
		if (basedmg < 1) basedmg = 1;
		A_CustomMeleeAttack(basedmg, "mallethit", "malletswing", "", 1); 
	}
	
	States
	{
		Spawn:
			DANI A 7 A_Look;
			DANI B 5 A_Look;
			DANI C 7 A_Look;
			DANI D 5 A_Look;
			Loop;
		See:
			DANS BBCCDDEE 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			DANS B 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS B 0 A_Jump((192+(CountInv("MonsterLevel") * frandom(0.334,0.5))),"Dodge");
			Loop;
		Dodge:
			DANS F 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS FGH 2 A_FastChase;
			DANS I 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DANS IJ 2 A_FastChase;
			Goto See;
		Missile:
			DANS F 0 A_Jump(96,"MusicAttk");
			DANS F 0 A_DynamicMusic();
			DANS F 4 A_FaceTarget();
			DANS GHI 4 A_Recoil(-2);
			DANS J 4 
			{
				ThrustThingZ(0, 27, 0, 0);
				ThrustThing(angle*256/360, 18, 0, 0);
			}
			DANS GHIJ 2;
			DANS D 5 A_KilletanteDanceKick(0);
			Goto See;
		MusicAttk:
			DANS F 0 A_DynamicMusic();
			DANS F 4 A_StartSound("dancer/danceattk",CHAN_BODY);
			DANS GHI 4 
			{
				A_Recoil(2);
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.025);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.025);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.025);
				}
				if (random(1,24) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall",40);
				}
			}
			DANS F 4 
			{
				A_Recoil(2);
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall",40);
				}
			}
			DANS GHI 4 
			{
				A_Recoil(2);
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.025);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.025);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.025);
				}
				if (random(1,24) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall",40);
				}
			}
			DANS J 4 
			{
				ThrustThingz (0, 27, 0, 0);
				ThrustThing (angle*256/360, 18, 0, 0);
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall",40);
				}
			}
			DANS D 4 
			{
				A_StartSound("virtuoso/musicfire",CHAN_VOICE);
				A_SpawnProjectile("MusicBall",40);
			}
			DANS E 4
			{
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall",40);
				}
			}
			DANS J 0;
			Goto See;
		Melee:
			DANS F 0 A_DynamicMusic();
			DANS FG 2 A_Facetarget;
			DANS D 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 15) 
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_KilletanteDanceKick(1);
					else if (random(1,4) <= 1) A_KilletanteDanceKick(1);
				}
			}
			DANS HI 2 A_Facetarget;
			DANS D 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 15) 
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_KilletanteDanceKick(1);
					else if (random(1,4) <= 1) A_KilletanteDanceKick(1);
				}
			}
			DANS J 2 A_Facetarget;
			DANS D 5 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_KilletanteDanceKick(0);
					if (random(1,4) <= 1) A_KilletanteDanceKick(0);
				}
				A_KilletanteDanceKick(0);
			}
			Goto See;
		Pain.Suck:
			DANS K 4 
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				A_FaceTarget();
			}
			DANS L 0 
			{
				if (random(1,16) == 1)
				{
					ThrustThingZ (0, 6, 0, 0);
					ThrustThing (angle*256/360+180, random(1,2), 0, 0);
				}
			}
			DANS L 12 
			{
				A_EEPain();
				A_SetTics(randompick(8,9,9,10,11,11,12));
			}
			DANS K 12
			{
				//A_DynamicMusic();
				A_SetTics(randompick(8,9,9,10,11,11,12));
			}
			DANS K 0
			{
				if (random(1,8) <= 3) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Pain:
			DANS K 2 A_FaceTarget;
			DANS L 0 ThrustThingZ (0, 24, 0, 0);
			DANS L 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DANS L 6 A_EEPain;
			DANS K 6; //A_DynamicMusic();
			DANS K 0
			{
				if (random(1,16) == 1) 
				{ 
					if (random(1,8) <= 5) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		/*
		Death.Suck:
			DANS K 5 A_StartSound("VacDed",CHAN_BODY);
			DANS K 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			DANS K 3 A_FaceTarget;
			DANS L 0 ThrustThingZ (0, 24, 0, 0);
			DANS L 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DANS L 5 A_Scream();
			DANS MNOP 3 bright;
			DANS Q 2 bright A_NoBlocking();
			DANS RSTUVWXYZ 2 bright;
			Stop;
	}
}

//MUDDERNAUT
class Muddernaut : DDOrigCreature
{
	int spreadtype;
	int painreact;
	double angdiff, angdiff2;
	double pitchdiff, pitchdiff2;
	double heightoffset;
	int walkcyc;
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 300;
		Radius 32;
		Height 80;
		ProjectilePassHeight 96;
		Speed 18;
		PainChance 256;
		DamageFactor "Fire", 0.25;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "BRocket", 0.25;
		DamageFactor "Cricket", 1;
		DamageFactor "Lead", 0.25;
		DamageFactor "Zap", 2;
		MeleeThreshold 208;
		MeleeRange 80;
		MaxTargetRange 512;
		Mass 5000;
		Scale 1.5;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+MISSILEMORE
		SeeSound "muddy/sight";
		PainSound "muddy/pain";
		DeathSound "muddy/death";
		ActiveSound "muddy/active";
		MeleeSound "mallethit";
		Obituary "%o was flattened by a muddernaut.";
		Tag "Muddernaut";
		//DropItem "CherryBombPickup", 256;
		//DropItem "CherryBombPickup", 128;
		//DropItem "CherryBombPickup", 64;
		//DropItem "CherryBombPickup", 32;
		//DropItem "CherryBombPickup", 16;
		//DropItem "CherryBombPickup", 8;
		//DropItem "CherryBombPickup", 4;
		//DropItem "CherryBombPickup", 2;
		//DropItem "CherryBombPickup", 1;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("CherryBombPickup",1,64);
			A_DropItem("CherryBombPickup",1,8);
			A_DropItem("CherryBombPickup",1,1);
		}
		else
		{
			A_DropItem("CherryBombPickup",1,256,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,128,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,64,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,32,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,16,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,8,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,4,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,2,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,1,ADI_FULLAMMO);
		}
	}
	
	void A_MudderSetBombProp(actor BadCBomb, int level)
	{
		//Console.Printf("angdiff: %.8f, angdiff2: %.8f, pitchdiff: %.8f, pitchdiff2: %.8f", angdiff, angdiff2, pitchdiff, pitchdiff2);
		BadCherryBomb FndBomb;
		if (BadCBomb) 
		{
			FndBomb = BadCherryBomb(BadCBomb);
			if (FndBomb) FndBomb.MudBomb = level;
		}
	}
	
	States
	{
		Spawn:
			CLOP Z 10 A_Look();
			Loop;
		See:
			CLOP AABBCCDD 3 
			{
				int tic = 3;
				if (painreact > 0 && random(1,5) >= 3) tic -= 1;
				A_SetTics(tic);
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			CLOP A 0
			{
				walkcyc++;
				if (walkcyc >= 3)
				{
					if (painreact > 0 && random(1,8) <= 1) painreact--;
					walkcyc = 0;
				}
				
				bMISSILEEVENMORE = false;
				if (random(1,16) >= 1) bMISSILEEVENMORE = true; 
				else
				{
					bMISSILEEVENMORE = false;
					if (painreact > 0 && random(1,4) >= 1) bMISSILEEVENMORE = true;
				}
			}
			Loop;
		Melee:
			CLOP E 0 A_DynamicMusic();
			CLOP EF 3 
			{
				if (painreact > 0) A_SetTics(2);
				A_FaceTarget();
			}
			CLOP G 6 
			{
				if (painreact > 0)
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(4);
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
				}
				else
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				}
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.005);

				int basesechit = 1;
				if (painreact > 0) basesechit = (randompick(1,2,2,2,3,3,3,4) * (1.0 + (painreact * 0.75)));
				if (random(1,6) >= basesechit) dmg += A_CalcDamageFormula2(random(12,18),0.08,random(3,7),0.05,random(0,10),0.035,0.005);
				if (random(1,36) >= basesechit) dmg += A_CalcDamageFormula2(random(12,18),0.08,random(3,7),0.05,random(0,10),0.035,0.005);
				if (random(1,216) >= basesechit) dmg += A_CalcDamageFormula2(random(12,18),0.08,random(3,7),0.05,random(0,10),0.035,0.005);
				if (painreact > 0) dmg *= frandom(1.25,2.5);
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			CLOP H 6
			{
				if (painreact > 0) A_SetTics(4);
			}
			CLOP E 0
			{
				if (painreact > 0)
				{
					painreact--;
					if (random(1,3) <= 1) painreact--;
					if (random(1,9) <= 1) painreact--;
					if (painreact < 0) painreact = 0;
					if (random(1,4) >= 3) return resolvestate("Melee");
				}
				return resolvestate(null);
			}
			Goto See;
		Missile:
			CLOP E 0 
			{
				A_StartSound("muddy/sight",CHAN_BODY);
				spreadtype = random(1,4);
			}
			CLOP S 0 A_DynamicMusic();
			CLOP STU 3 
			{
				if (painreact > 0) A_SetTics(2);
				A_FaceTarget();
			}
			CLOP H 6 
			{
				if (painreact > 0) 
				{
					A_SetTics(4);
					pitchdiff = frandom(-3.0,3.0);
					pitchdiff2 = frandom(-4.5,4.5);
					heightoffset = 12;
				}
				else
				{
					pitchdiff = frandom(-2.5,2.5);
					pitchdiff2 = 0;
				}
				A_FaceTarget();
				angdiff = abs(frandom(4.5,9.0));
				angdiff2 = 0;
				if (spreadtype <= 1) angdiff2 = 0.0;
				if (spreadtype == 2) angdiff2 = frandom(4.5,9.0);
				if (spreadtype == 3) angdiff2 = frandom(-4.5,-9.0);
				if (spreadtype >= 4) angdiff2 = frandom(-9.0,9.0);
				actor BadCBomb;
				BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(-angdiff+angdiff2),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,(pitchdiff+pitchdiff2));
				A_MudderSetBombProp(BadCBomb,2);
				BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(angdiff+angdiff2),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,(pitchdiff+pitchdiff2));
				A_MudderSetBombProp(BadCBomb,2);
			}
			CLOP H 6
			{
				actor BadCBomb;
				if (painreact > 0) A_SetTics(4);
				if (painreact > 0)
				{
					BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0+(angdiff2*0.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*2));
					A_MudderSetBombProp(BadCBomb,1);
					BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0-(angdiff2*0.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*2));
					A_MudderSetBombProp(BadCBomb,1);
					if (random(1,3) <= 1) 
					{
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0+(angdiff2*1.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*4));
						A_MudderSetBombProp(BadCBomb,1);
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0-(angdiff2*1.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*4));
						A_MudderSetBombProp(BadCBomb,1);
					}
				}
				else
				{
					if (random(1,3) <= 1) 
					{
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0+(angdiff2*0.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*2));
						A_MudderSetBombProp(BadCBomb,1);
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0-(angdiff2*0.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*2));
						A_MudderSetBombProp(BadCBomb,1);
					}
					if (random(1,9) <= 1) 
					{
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0+(angdiff2*1.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*4));
						A_MudderSetBombProp(BadCBomb,1);
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(0-(angdiff2*1.5)),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,((pitchdiff+pitchdiff2)*4));
						A_MudderSetBombProp(BadCBomb,1);
					}
				}
			}
			CLOP E 0
			{
				if (painreact > 0)
				{
					painreact--;
					if (random(1,3) <= 1) painreact--;
					if (random(1,9) <= 1) painreact--;
					if (painreact < 0) painreact = 0;
					if (random(1,4) >= 3) return resolvestate("Missile");
				}
				return resolvestate(null);
			}
			Goto See;
		Pain:
			CLOP I 6 
			{
				A_EEPain();
				if (painreact < 10)
				{
					painreact++;
					if (random(1,3) <= 1) painreact++;
					if (random(1,9) <= 1) painreact++;
					if (painreact > 10) painreact = 10;
				}
			}
			CLOP I 3; //A_DynamicMusic();
			Goto See;
		Pain.CherryBomb:
			CLOP I 6 
			{
				A_EEPain();
				if (painreact < 30)
				{
					if (random(1,10) <= 1)
					{
						painreact++;
						painreact++;
						painreact++;
						if (random(1,3) <= 1)
						{
							painreact++;
							painreact++;
							painreact++;
						}
						if (random(1,9) <= 1)
						{
							painreact++;
							painreact++;
							painreact++;
						}
						if (painreact > 30) painreact = 30;
					}
				}
			}
			CLOP I 3
			{
				A_SetTics(random(3,6));
				//A_DynamicMusic();
			}
			Goto See;
		/*
		Death.Suck:
			CLOP I 5 A_StartSound("VacDed",CHAN_BODY);
			CLOP I 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			CLOP I 5 A_Scream();
			CLOP JKLMNOPQ 4;
			CLOP R 5
			{
				A_NoBlocking();
				A_Drop();
			}
			CLOP R -1;
			Stop;
		Raise:
			CLOP QPONMLKJI 5;
			Goto See;
	}
}

// Muddernaut Cherry Bomb
class BadCherryBomb : EEProjectile
{
	int MudBomb;
	default
	{
		ProjectileKickback 5;
		Tag "Cherry Bomb";
		Radius 3;
		Height 3;
		Speed 15;
		Gravity 0.05;
		DamageFunction (finaldamagedealt);
		DamageType "CherryBomb";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "weapons/cherrywick";
		DeathSound "weapons/cherrywick";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.01);
		if (Muddernaut(target))
		{
			if (MudBomb > 0)
			{
				gravity *= 1.025;
				if (MudBomb == 1 && (GetAge() >= random(52,53) && GetAge() <= random(60,61))) gravity *= frandom(2,3);
				if (MudBomb == 2 && (GetAge() >= 105 && GetAge() <= 113)) gravity *= frandom(2,3);
				if (gravity >= 1.5) gravity = 1.5;
			}
		}
	}
	
	States
	{
		Spawn:
			CBOM ABCD 2 Bright A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
			loop;

		XDeath:
			TNT1 A 1 { bNOGRAVITY = true; }
		Death:
		Crash:
			BMX2 A 2 Bright 
			{
				A_StartSound("weapons/cherryboom");
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(16,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,32,XF_HURTSOURCE|XF_THRUSTZ,0,4);
					A_Quake(1, 4, 0, 128, "nosound/silent");
					A_Quake(4, 4, 0, 64, "nosound/silent");
				}
			}
			BMX2 B 2 Bright 
			{
				A_AlertMonsters();
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(24,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,48,XF_HURTSOURCE|XF_THRUSTZ,0,6);
					A_Quake(1, 4, 0, 192, "nosound/silent");
					A_Quake(4, 4, 0, 96, "nosound/silent");
				}
				else
				{
					int dmg = A_CalcDamageFormula(128,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,128,XF_HURTSOURCE|XF_THRUSTZ,0,16);
					A_Quake(1, 4, 0, 512, "nosound/silent");
					A_Quake(4, 4, 0, 256, "nosound/silent");
				}
			}
			BMX2 C 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(32,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,64,XF_HURTSOURCE|XF_THRUSTZ,0,8);
					A_Quake(1, 4, 0, 256, "nosound/silent");
					A_Quake(4, 4, 0, 128, "nosound/silent");
				}
			}
			BMX2 D 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(40,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,80,XF_HURTSOURCE|XF_THRUSTZ,0,10);
					A_Quake(1, 4, 0, 320, "nosound/silent");
					A_Quake(4, 4, 0, 160, "nosound/silent");
				}
			}
			BMX2 E 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(48,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,96,XF_HURTSOURCE|XF_THRUSTZ,0,12);
					A_Quake(1, 4, 0, 384, "nosound/silent");
					A_Quake(4, 4, 0, 192, "nosound/silent");
				}
			}
			BMX2 F 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(56,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,112,XF_HURTSOURCE|XF_THRUSTZ,0,14);
					A_Quake(1, 4, 0, 448, "nosound/silent");
					A_Quake(4, 4, 0, 224, "nosound/silent");
				}
			}
			BMX2 G 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(64,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,128,XF_HURTSOURCE|XF_THRUSTZ,0,16);
					A_Quake(1, 4, 0, 512, "nosound/silent");
					A_Quake(4, 4, 0, 256, "nosound/silent");
				}
			}
			stop;
	}
}

class BadCherryBomb2 : EEProjectile
{
	default
	{
		ProjectileKickback 5;
		Tag "Cherry Bomb";
		Radius 3;
		Height 3;
		Speed 30;
		Gravity 0.05;
		DamageFunction (finaldamagedealt);
		DamageType "CherryBomb";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "weapons/cherrywick";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.01);
	}

	States
	{
		Spawn:
			CBOM ABCD 2 Bright A_SpawnItemEx("firetrail",random(-4,4),random(-3,3),random(-3,3));
			loop;

		XDeath:
			TNT1 A 1 { bNOGRAVITY = true; }
		Death:
		Crash:
			BMX2 A 2 Bright 
			{
				A_StartSound("weapons/cherryboom",CHAN_7);
				
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(16,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,32,XF_HURTSOURCE|XF_THRUSTZ,0,4);
					A_Quake(1, 4, 0, 128, "nosound/silent");
					A_Quake(4, 4, 0, 64, "nosound/silent");
				}
			}
			BMX2 B 2 Bright 
			{
				A_AlertMonsters();
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(24,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,48,XF_HURTSOURCE|XF_THRUSTZ,0,6);
					A_Quake(1, 4, 0, 192, "nosound/silent");
					A_Quake(4, 4, 0, 96, "nosound/silent");
				}
				else
				{
					int dmg = A_CalcDamageFormula(128,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,128,XF_HURTSOURCE|XF_THRUSTZ,0,16);
					A_Quake(1, 4, 0, 512, "nosound/silent");
					A_Quake(4, 4, 0, 256, "nosound/silent");
				}
			}
			BMX2 C 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(32,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,64,XF_HURTSOURCE|XF_THRUSTZ,0,8);
					A_Quake(1, 4, 0, 256, "nosound/silent");
					A_Quake(4, 4, 0, 128, "nosound/silent");
				}
			}
			BMX2 D 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(40,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,80,XF_HURTSOURCE|XF_THRUSTZ,0,10);
					A_Quake(1, 4, 0, 320, "nosound/silent");
					A_Quake(4, 4, 0, 160, "nosound/silent");
				}
			}
			BMX2 E 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(48,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,96,XF_HURTSOURCE|XF_THRUSTZ,0,12);
					A_Quake(1, 4, 0, 384, "nosound/silent");
					A_Quake(4, 4, 0, 192, "nosound/silent");
				}
			}
			BMX2 F 2 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(56,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,112,XF_HURTSOURCE|XF_THRUSTZ,0,14);
					A_Quake(1, 4, 0, 448, "nosound/silent");
					A_Quake(4, 4, 0, 224, "nosound/silent");
				}
			}
			BMX2 G 1 Bright 
			{
				if (exex_cherrybombexpbehavior > 0)
				{
					int dmg = A_CalcDamageFormula(64,1,0.005,0.3334,0.1667,0.001);
					A_Explode(dmg,128,XF_HURTSOURCE|XF_THRUSTZ,0,16);
					A_Quake(1, 4, 0, 512, "nosound/silent");
					A_Quake(4, 4, 0, 256, "nosound/silent");
				}
			}
			stop;
	}
}

//JUGGER
class Jugger : DDOrigCreature
{
	int basedmg;
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 300;
		Radius 32; // 32
		Height 80; // 80
		ProjectilePassHeight 96;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Zap", 2;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MeleeThreshold 208;
		MeleeRange 80;
		MaxTargetRange 512;
		Mass 5000;
		Scale 1.5;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "muddy/sight";
		PainSound "muddy/pain";
		DeathSound "muddy/death";
		ActiveSound "muddy/active";
		MeleeSound "mallethit";
		Obituary "%o was flattened by a jugger.";
		Tag "Jugger";
		MissileType "JuggerAxe";
	}
	
	void A_JuggerAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(25,35),0.08334,random(0,5),0.0334,random(0,10),0.01667,0.0025);
		if (type == 0) A_CustomComboAttack("JuggerAxe", 32, (dmg), "gard/swing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "gard/swing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("JuggerAxe",32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			BEEF B 10 A_Look();
			Loop;
		See:
			BEEF AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(2,3,3));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(2,2,3));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(2,2,2));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(1,2,2));
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BEEF E 0 A_StartSound("muddy/sight",CHAN_BODY);
		Melee:
			BEEF E 0 A_DynamicMusic();
			BEEF EF 4 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(3,4,4,4));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(3,3,3,4));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(2,2,2,3));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(1,1,2,2));
				}
				A_FaceTarget();
			}
			BEEF G 6 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 15) A_SetTics(randompick(5,5,6,6));
					if (CountInv("MonsterLevel") >= 30) A_SetTics(randompick(5,5,5,5));
					if (CountInv("MonsterLevel") >= 45) A_SetTics(randompick(4,4,5,5));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(4,4,4,4));
					if (CountInv("MonsterLevel") >= 75) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 90) A_SetTics(randompick(3,3,3,3));
					if (CountInv("MonsterLevel") >= 105) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 120) A_SetTics(randompick(2,2,2,2));
				}
				
				A_JuggerAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						A_SetAngle(angle-15);
						A_JuggerAtk(1,-22.5);
						A_SetAngle(angle+15);

						A_SetAngle(angle+15);
						A_JuggerAtk(1,22.5);
						A_SetAngle(angle-15);
					}
					if (CountInv("MonsterLevel") >= 50)
					{
						A_SetAngle(angle-22.5);
						A_JuggerAtk(1,-33.75);
						A_SetAngle(angle+22.5);

						A_SetAngle(angle+22.5);
						A_JuggerAtk(1,33.75);
						A_SetAngle(angle-22.5);
					}
					if (CountInv("MonsterLevel") >= 70)
					{
						A_SetAngle(angle-7.5);
						A_JuggerAtk(1,-11.25);
						A_SetAngle(angle+7.5);

						A_SetAngle(angle+7.5);
						A_JuggerAtk(1,11.25);
						A_SetAngle(angle-7.5);
					}
				}
			}
			BEEF H 6
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 15) A_SetTics(randompick(5,5,6,6));
					if (CountInv("MonsterLevel") >= 30) A_SetTics(randompick(5,5,5,5));
					if (CountInv("MonsterLevel") >= 45) A_SetTics(randompick(4,4,5,5));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(4,4,4,4));
					if (CountInv("MonsterLevel") >= 75) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 90) A_SetTics(randompick(3,3,3,3));
					if (CountInv("MonsterLevel") >= 105) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 120) A_SetTics(randompick(2,2,2,2));
				}
			}
			Goto See;
		Pain:
			BEEF I 6 A_EEPain();
			BEEF I 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			BEEF I 5 A_StartSound("VacDed",CHAN_BODY);
			BEEF I 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			BEEF J 5 A_Scream();
			BEEF KLMNOPQR 4;
			BEEF S 5 A_NoBlocking();
			BEEF S -1;
			Stop;
		Raise:
			BEEF RQPONMLKJ 5;
			Goto See;
	}
}

class JuggerAxe : EEProjectile
{
	default
	{
		Radius 10;
		Height 16;
		Speed 25;
		Scale 2;
		DamageFunction (finaldamagedealt);
		DamageType "Chop";
		Projectile;
		renderstyle "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
		+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			JUAX ABC 2 bright;
			JUAX A 0 A_StartSound("axe/wooga",CHAN_BODY);
			Loop;
		Death:
			JUAX DEF 4 bright;
			Stop;
	}
}

//JUGGETTE
class Juggette : DDOrigCreature
{
	int basedmg;
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 200;
		Radius 20; // 24
		Height 64; // 80
		ProjectilePassHeight 76;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Zap", 2;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MeleeThreshold 128;
		MeleeRange 80;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "jugette/active";
		PainSound "jugette/pain";
		DeathSound "jugette/death";
		ActiveSound "jugette/active";
		MeleeSound "mallethit";
		Obituary "%o was flattened by a juggette.";
		Tag "Juggette";
		MissileType "BadJackshot";
		//Dropitem "JackAmmo", 256;
		//Dropitem "JackAmmo", 32;
		//Dropitem "JackAmmoBig", 32;
		//Dropitem "JackAmmoBig", 4;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("JackAmmo",1,256);
			A_DropItem("JackAmmo",1,32);
			A_DropItem("AppleJack",1,1);
		}
		else
		{
			A_DropItem("JackAmmo",1,256,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,32,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,32,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,4,ADI_FULLAMMO);
			
			A_DropItem("AppleJack",1,16,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,4,ADI_FULLAMMO);
		}
	}
	
	void A_JuggetteAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(25,35),0.041667,random(0,5),0.01667,random(0,10),0.008334,0.00375);
		if (type == 0) A_CustomComboAttack("BadJackshot", 32, (dmg), "malletswing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "malletswing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("BadJackshot",32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			JGET B 10 A_Look();
			Loop;
		See:
			JGET AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 16) A_SetTics(randompick(2,3,3));
					if (CountInv("MonsterLevel") >= 32) A_SetTics(randompick(2,2,3));
					if (CountInv("MonsterLevel") >= 48) A_SetTics(randompick(2,2,2));
					if (CountInv("MonsterLevel") >= 64) A_SetTics(randompick(1,2,2));
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			JGET E 0 A_StartSound("jugette/active",CHAN_VOICE);
		Melee:
			JGET E 0 A_DynamicMusic();
			JGET E 0 A_StartSound("juggette/swing",CHAN_VOICE);
			JGET EF 4 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 27) A_SetTics(randompick(3,4,4,4));
					if (CountInv("MonsterLevel") >= 54) A_SetTics(randompick(3,3,3,4));
					if (CountInv("MonsterLevel") >= 81) A_SetTics(randompick(2,2,2,3));
					if (CountInv("MonsterLevel") >= 108) A_SetTics(randompick(1,1,2,2));
				}
				A_FaceTarget();
			}
			JGET G 6 
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(5,5,6,6));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(5,5,5,5));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(4,4,5,5));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(4,4,4,4));
					if (CountInv("MonsterLevel") >= 100) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 120) A_SetTics(randompick(3,3,3,3));
					if (CountInv("MonsterLevel") >= 140) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 160) A_SetTics(randompick(2,2,2,2));
				}
				
				A_JuggetteAtk(0,0.0);
				double defspread = frandompick(0.5,0.667,0.667,0.75,0.75,0.75,1.0,1.0,1.0,1.0,1.0,1.0,1.25,1.25,1.25,1.334,1.334,1.5);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 35)
					{
						A_SetAngle(angle-10);
						A_JuggetteAtk(1,(-10.0*defspread));
						A_SetAngle(angle+10);
						
						A_SetAngle(angle+10);
						A_JuggetteAtk(1,(10.0*defspread));
						A_SetAngle(angle-10);
					}
					if (CountInv("MonsterLevel") >= random(52,53))
					{
						A_SetAngle(angle+15);
						A_JuggetteAtk(1,(15*defspread));
						A_SetAngle(angle-15);

						A_SetAngle(angle-15);
						A_JuggetteAtk(1,(-15*defspread));
						A_SetAngle(angle+15);
					}
					if (CountInv("MonsterLevel") >= 70)
					{
						A_SetAngle(angle+5);
						A_JuggetteAtk(1,(5*defspread));
						A_SetAngle(angle-5);

						A_SetAngle(angle-5);
						A_JuggetteAtk(1,(-5*defspread));
						A_SetAngle(angle+5);
					}
				}
			}
			JGET H 6
			{
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 20) A_SetTics(randompick(5,5,6,6));
					if (CountInv("MonsterLevel") >= 40) A_SetTics(randompick(5,5,5,5));
					if (CountInv("MonsterLevel") >= 60) A_SetTics(randompick(4,4,5,5));
					if (CountInv("MonsterLevel") >= 80) A_SetTics(randompick(4,4,4,4));
					if (CountInv("MonsterLevel") >= 100) A_SetTics(randompick(3,3,4,4));
					if (CountInv("MonsterLevel") >= 120) A_SetTics(randompick(3,3,3,3));
					if (CountInv("MonsterLevel") >= 140) A_SetTics(randompick(2,2,3,3));
					if (CountInv("MonsterLevel") >= 160) A_SetTics(randompick(2,2,2,2));
				}
			}
			Goto See;
		Pain:
			JGET I 6 A_EEPain();
			JGET I 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			JGET I 5 A_StartSound("VacDed",CHAN_BODY);
			JGET I 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			JGET I 9 A_Scream();
			JGET JKL 6;
			BEEF R 5;
			BEEF S 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			BEEF S 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) { }
				else
				{
					A_DropItem("AppleJack",1,32);
					A_DropItem("AppleJack",1,4);
				}
			}
			BEEF S -1;
			Stop;
		Raise:
			BEEF R 5;
			JGET LKJI 5;
			Goto See;
	}
}

class BadJackShot : EEProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 20; // 50
		DamageFunction (finaldamagedealt);
		DamageType "Bonk";
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
		ProjectileKickback 30; // 60
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	void A_JackShotIPPattern()
	{
		double ca = cos((angle-90)); // X
		double sa = sin((angle-90)); // Y

		double basemove = basespreadspeed;
		if (IPAttack)
		{
			if (zspreadtime != 0)
			{
				if (zspreadtime > 0) // Goes Up
				{
					zspreadtime -= 1;
					AddZ(basemove,true);
				}
				else
				if (zspreadtime < 0) // Goes Down
				{
					zspreadtime += 1; 
					AddZ(-basemove,true);
				}
			}
			Vector2 dpos = (pos.x, pos.y);
			if (xyspreadtime != 0)
			{
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[sapphire](pre) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[sapphire](pre) projid: %d\c-, xpos: %.8f, ypos: %.8f [tic: %d]", ipprojid, pos.x, pos.y, pos.z, gametic);
				}
				if (xyspreadtime > 0) // Goes Left
				{ 
					xyspreadtime -= 1;
					dpos = ((pos.x + (basemove * ca)), (pos.y + (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				else
				if (xyspreadtime < 0) // Goes Right
				{
					xyspreadtime += 1;
					dpos = ((pos.x - (basemove * ca)), (pos.y - (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[fire](post) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[fire](post) projid: %d\c-, xpos: %.8f, ypos: %.8f, zpos: %.8f, xyspreadtime: %d [tic: %d]", ipprojid, dpos.x, dpos.y, pos.z, xyspreadtime, gametic);
				}
			}
		}
	}

	void A_JackShotShieldSetupEnemy(actor BombShots, double scaling = 0.0125)
	{
		if (BombShots)
		{
			int oldrad = BombShots.radius;
			int oldhei = BombShots.height;
			double scalebase = 1.0;
			BombShots.A_SetSize((BombShots.radius * scalebase),(BombShots.height * scalebase));
			//Console.Printf("rad: %d [%d], hei: %d [%d]", BombShots.radius, oldrad, BombShots.height, oldhei);
		}
	}

	States
	{
		Spawn:
			ABAL AABB 1
			{
				A_JackShotIPPattern();
				
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (!(ddafd_disableaggroappleblock && (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))))
				{
					actor BombShots;
					bool success;
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
				}
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

//REEL HEEL
class ReelHeel : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 150;
		Radius 20;
		Height 56;
		Mass 1000;
		Speed 20;
		PainChance 256;
		DamageFactor "Lead", 2;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		SeeSound "slots/sight";
		PainSound "slots/pain";
		DeathSound "slots/death";
		ActiveSound "slots/sight";
		Obituary "%o was busted by a reel heel.";
		Explosiondamage 96;
		Tag "Reel Heel";
		+DONTHARMSPECIES;
		Species "T1";
	}
	
	States
	{
		Spawn:
			SLOT AB 3 A_Look();
			Loop;
		See:
			SLOT C 5;
			SLOT C 0 A_StartSound("slots/boing",CHAN_BODY);
			SLOT DDDD 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT C 5;
			SLOT R 5;
			SLOT R 0 A_StartSound("slots/boing",CHAN_BODY);
			SLOT SSSS 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT R 5;
			Loop;
		Missile:
			SLOT A 0 A_DynamicMusic();
			SLOT A 0 A_StartSound("slots/jackpot");
			SLOT EGIEGIEGI 2 Bright;
			SLOT A 0 A_Jump(112,"slotapple");
			SLOT A 0 A_Jump(96,"slotbomb");
			SLOT A 0 A_Jump(256,"slotcherry");
			Goto See;
		SlotApple:
			SLOT GHGHGHGH 2 Bright A_FaceTarget();
			SLOT K 6;
			SLOT L 0 A_StartSound("slots/burp");
			SLOT L 0 A_SpawnProjectile("SeedBall",40,0,random(-9,9));
			SLOT L 0 A_SpawnProjectile("SeedBall",40,0,random(-9,9));
			SLOT L 12 A_SpawnProjectile("SeedBall",40,0,random(-6,6));
			SLOT A 3;
			Goto See;
		SlotBomb:
			SLOT IJIJIJIJ 2 Bright A_FaceTarget();
			SLOT K 6;
			SLOT L 0 A_StartSound("slots/burp");
			SLOT L 12 A_SpawnProjectile("BadCherryBomb",40,0,random(-6,6));
			SLOT A 3;
			Goto See;
		SlotCherry:
			SLOT EFEFEFEF 2 Bright A_FaceTarget();
			SLOT K 6;
			SLOT L 0 A_StartSound("slots/burp");
			SLOT LLLLLLL 4 A_SpawnProjectile("CoinShotS",40,0,random(-6,6));
			SLOT A 3;
			Goto See;
		Pain:
			SLOT M 3 A_EEPain();
			SLOT M 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			SLOT M 5 A_StartSound("VacDed",CHAN_BODY);
			SLOT M 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			SLOT M 4 A_Scream();
			SLOT CM 6;
			SLOT N 0 A_StartSound("weapons/cherryboom",CHAN_BODY);
			SLOT N 8 A_Explode(damagetype:"HeelExplosion");
			SLOT O 8 A_NoBlocking();
			SLOT P 8;
			SLOT Q 8
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess"))
				{
					A_Dropitem("ArcadeChip",1,64);
					A_Dropitem("ArcadeChip",1,8);
					A_Dropitem("ArcadeChip",1,1);
				}
				else
				if (player.CountInv("IsCarnOfSouls"))
				{
					A_Dropitem("Money_Ducat",1,64);
					A_Dropitem("Money_Ducat",1,8);
					A_Dropitem("Money_Ducat",1,1);
				}
			}
			Stop;
	}
}

class ReelHeelNew : ReelHeel
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 150;
		Radius 20;
		Height 56;
		Mass 1000;
		Speed 20;
		PainChance 256;
		DamageFactor "Lead", 2;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		SeeSound "slots/sight";
		PainSound "slots/pain";
		DeathSound "slots/death";
		ActiveSound "slots/sight";
		Obituary "%o was busted by a reel heel.";
		Explosiondamage 96;
		Tag "Reel Heel";
		Species "T1";
	}
	
	States
	{
		Spawn:
			SLOT AB 3 fast A_Look();
			Loop;
		See:
			SLOT C 5 fast;
			SLOT C 0 fast A_StartSound("slots/boing",CHAN_BODY);
			SLOT DDDD 2 fast A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT C 5 fast;
			SLOT R 5 fast;
			SLOT R 0 fast A_StartSound("slots/boing",CHAN_BODY);
			SLOT SSSS 2 fast A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT R 5 fast;
			Loop;
		Missile:
			SLOT A 0 fast A_DynamicMusic();
			SLOT A 0 fast A_StartSound("slots/jackpot");
			SLOT EGIEGIEGI 2 fast Bright;
			SLOT A 0 fast A_Jump(112,"slotapple");
			SLOT A 0 fast A_Jump(96,"slotbomb");
			SLOT A 0 fast A_Jump(256,"slotcherry");
			Goto See;
		SlotApple:
			SLOT GHGHGHGH 2 fast Bright A_FaceTarget();
			SLOT K 6 fast;
			SLOT L 12 fast
			{
				A_StartSound("slots/burp");
				A_SpawnProjectile("SeedBall",40,0,random(-9,9));
				A_SpawnProjectile("SeedBall",40,0,random(-9,9));
				A_SpawnProjectile("SeedBall",40,0,random(-6,6));
			}
			SLOT A 3 fast;
			Goto See;
		SlotBomb:
			SLOT IJIJIJIJ 2 fast Bright A_FaceTarget();
			SLOT K 6 fast;
			SLOT L 12 fast
			{
				A_StartSound("slots/burp");
				A_SpawnProjectile("BadCherryBomb",40,0,random(-6,6));
			}
			SLOT A 3 fast;
			Goto See;
		SlotCherry:
			SLOT EFEFEFEF 2 fast Bright A_FaceTarget();
			SLOT K 6 fast;
			SLOT L 0 fast A_StartSound("slots/burp");
			SLOT LLLLLLL 4 fast A_SpawnProjectile("CoinShot",40,0,random(-6,6));
			SLOT A 3 fast;
			Goto See;
		Pain:
			SLOT M 3 fast A_EEPain();
			SLOT M 3 fast; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			SLOT M 5 A_StartSound("VacDed",CHAN_BODY);
			SLOT M 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			SLOT M 4 A_Scream();
			SLOT CM 6;
			SLOT N 0 A_StartSound("weapons/cherryboom",CHAN_BODY);
			SLOT N 8 A_Explode(damagetype:"HeelExplosion");
			SLOT O 8 A_NoBlocking();
			SLOT PQ 8;
			Stop;
	}
}

class ReelHeelFuzzy : ReelHeelNew
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Reel Heel (Spectre)";
		Obituary "%o was busted by a Spectral Reel Heel.";
	}
}

class NightmareReelHeel : ReelHeelNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 300;
		Radius 20;
		Height 56;
		Mass 1500;
		Speed 24;
		PainChance 192;
		DamageFactor "Lead", 1.5;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+DONTHARMCLASS
		SeeSound "slots/sight";
		PainSound "slots/pain";
		DeathSound "slots/death";
		ActiveSound "slots/sight";
		Obituary "%o was busted by a Nightmare Reel Heel.";
		Explosiondamage 144;
		RenderStyle "Subtract";
		Alpha 0.7;
		Tag "Reel Heel (Nightmare)";
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SLOT AB 3 fast A_Look();
			Loop;
		See:
			SLOT C 3 fast
			{
				A_SetTics(random(2,3));
			}
			SLOT C 0 fast A_StartSound("slots/boing",CHAN_BODY);
			SLOT DDDD 2 fast A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT CR 3 fast
			{
				A_SetTics(random(2,3));
			}
			SLOT R 0 fast A_StartSound("slots/boing",CHAN_BODY);
			SLOT SSSS 2 fast A_EEChase("Melee","Missile",0,1,3,1,1);
			SLOT R 3 fast
			{
				A_SetTics(random(2,3));
			}
			Loop;
		Missile:
			SLOT A 0 fast A_DynamicMusic();
			SLOT A 0 fast A_StartSound("slots/jackpot");
			SLOT EGIEGIEGIEGIEGIEGI 1 fast Bright;
			SLOT A 0 fast A_Jump(112,"slotapple");
			SLOT A 0 fast A_Jump(96,"slotbomb");
			SLOT A 0 fast A_Jump(256,"slotcherry");
			Goto See;
		SlotApple:
			SLOT GHGHGHGHGHGHGHGH 1 fast Bright A_FaceTarget();
			SLOT K 3 fast;
			SLOT L 3 fast
			{
				A_StartSound("slots/burp");
				A_SpawnProjectile("SeedBall",40,0,random(-12,12));
				A_SpawnProjectile("SeedBall",40,0,random(-12,12));
				A_SpawnProjectile("SeedBall",40,0,random(-9,9));
				A_SpawnProjectile("SeedBall",40,0,random(-9,9));
				A_SpawnProjectile("SeedBall",40,0,random(-6,6));
			}
			SLOT A 3 fast
			{
				A_SetTics(random(1,2));
			}
			Goto See;
		SlotBomb:
			SLOT IJIJIJIJIJIJIJIJ 1 fast Bright A_FaceTarget();
			SLOT K 3 fast;
			SLOT L 6 fast 
			{
				A_StartSound("slots/burp");
				A_SpawnProjectile("BadCherryBomb",40,0,random(-9,9));
				A_SpawnProjectile("BadCherryBomb",40,0,random(-9,9));
				A_SpawnProjectile("BadCherryBomb",40,0,random(-6,6));
			}
			SLOT A 3 fast
			{
				A_SetTics(random(1,2));
			}
			Goto See;
		SlotCherry:
			SLOT EFEFEFEFEFEFEFEF 1 fast Bright A_FaceTarget();
			SLOT K 3 fast;
			SLOT LLLLLLL 2 fast
			{
				A_StartSound("slots/burp");
				A_SpawnProjectile("CoinShot",40,0,random(-9,9));
				A_SpawnProjectile("CoinShot",40,0,random(-9,9));
				A_SpawnProjectile("CoinShot",40,0,random(-6,6));
			}
			SLOT A 3 fast
			{
				A_SetTics(random(1,2));
			}
			Goto See;
		Pain:
			SLOT M 2 fast A_EEPain();
			SLOT M 2 fast; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			SLOT M 5 A_StartSound("VacDed",CHAN_BODY);
			SLOT M 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			SLOT M 4 A_Scream();
			SLOT CM 6;
			SLOT N 0 A_StartSound("weapons/cherryboom",CHAN_BODY);
			SLOT N 8 A_Explode(damagetype:"HeelExplosion");
			SLOT O 8 A_NoBlocking();
			SLOT PQ 8;
			Stop;
	}
}

class CoinShot : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 20;
		Health 5;
		DamageFunction (finaldamagedealt);
		Projectile;
		RenderStyle "Normal";
		DeathSound "mallethit";
		+NOEXTREMEDEATH;
		+DONTHARMSPECIES;
		Species "T1";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			CBUL ABCB 2 bright;
			Loop;
		Death:
			BASH ABCDE 4;
			Stop;
	}
}

// DD/AFD ComPack specific coin-shot that can rarely leave behind an arcade token on impact :V
class CoinShotS : CoinShot
{
	States
	{
		Death:
			BASH A 0
			{
				if (random(1,16) <= 1) return resolvestate("DeathOther");
				return resolvestate(null);
			}
			BASH ABCDE 4;
			Stop;
		DeathOther:
			BASH A 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsCarnOfSouls")) A_SpawnItemEx("Money_Ducat", flags:SXF_NOCHECKPOSITION);
																				 else A_SpawnItemEx("ArcadeChip", flags:SXF_NOCHECKPOSITION);
			}
			Stop;
	}
}

//SPIDER-CENSER
class SpiderCenser : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 150;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Bonk", 4;
		DamageFactor "Chop", 0.5;
		DamageFactor "Zap", 4;
		DamageFactor "Bap", 0;
		PainChance "Bap", 32;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		MissileType "CroquetBall";
		SeeSound "spidercen/sight";
		PainSound "birdy/sight";
		DeathSound "spidercen/death2";
		ActiveSound "spidercen/sight";
		Obituary "%o was smothered by a spider-censer.";
		Tag "Spider-Censer";
	}
	
	States
	{
		Spawn:
			SPHR A 10 A_Look();
			Loop;
		See:
			SPRS AABB 3;
			Goto Patrol;
		Patrol:
			SPCN AABBCCDD 1 
			{
				int flag2 = 0;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 45) { bAVOIDMELEE == true; bAVOIDHAZARDS == true; }
					if (random(1,64) <= (1 + (CountInv("MonsterLevel") * 0.064))) flag2 |= CHF_FASTCHASE;
				}
				A_EEChase("Melee","Missile",flag2,1,3,1,1);
			}
			Loop;
		Melee:
		Missile:
			SPCN E 3 A_DynamicMusic();
			SPCN FG 3 bright A_FaceTarget();
			SPCN H 5 bright 
			{
				if (CountInv("MonsterLevel") >= 75) { A_SetTics(3); }
				else if (CountInv("MonsterLevel") >= 30) { A_SetTics(4); }
				
				A_StartSound("Weapons/SpinnerFire",CHAN_BODY);
				A_SpawnProjectile("IncenseBall",48,24);
				A_SpawnProjectile("IncenseBall",48,-24);
			}
			SPCN I 5 bright
			{
				if (CountInv("MonsterLevel") >= 75) { A_SetTics(3); }
				else if (CountInv("MonsterLevel") >= 30) { A_SetTics(4); }
			}
			SPCN J 5 bright 
			{
				if (CountInv("MonsterLevel") >= 75) { A_SetTics(3); }
				else if (CountInv("MonsterLevel") >= 30) { A_SetTics(4); }
				
				A_SpawnProjectile("IncenseBall",48,0);
			}
			SPCN KLM 5 bright
			{
				if (CountInv("MonsterLevel") >= 75) { A_SetTics(3); }
				else if (CountInv("MonsterLevel") >= 30) { A_SetTics(4); }
			}
			SPCN G 3 bright;
			SPCN FE 3;
			Goto Patrol;
		Pain:
			SPCN N 6 A_EEPain();
			SPCN N 3; //A_DynamicMusic();
			Goto Patrol;
		/*
		Death.Suck:
			SPCN N 5 A_StarSound("VacDed",CHAN_BODY);
			SPCN N 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			SPCN N 7 bright 
			{
				int type = random(-1,1);
				double pit1 = 1.0 + (0.05 * type);
				double pit2 = 1.0 + (0.10 * type);
				double pit3 = 1.0 + (0.15 * type);
				A_Scream();
				A_StopSound(65);
				A_StopSound(66);
				A_StopSound(67);
				A_StartSound("spidercen/death2",65,CHANF_DEFAULT,1.0,ATTN_NORM,pit1);
				A_StartSound("spidercen/death2",66,CHANF_DEFAULT,1.0,ATTN_NORM,pit2);
				A_StartSound("spidercen/death2",67,CHANF_DEFAULT,1.0,ATTN_NORM,pit3);
			}
			SPCN OPQR 3 bright;
			SPCN S 3 bright A_NoBlocking();
			Stop;
	}
}

class IncenseBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		Scale 0.35;
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		PoisonDamage 15;
		renderstyle "Add";
		Alpha 0.7;
		DeathSound "croquet/ballhit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage =  A_CalcDamageFormula2(15,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage =  A_CalcDamageFormula2(15,0.005,5,0.334,2,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			SPBL ABCDE 3 bright;
			Loop;
		Death:
			SPBX ABCDE 4 Bright;
			Stop;
	}
}

//GALGOYLE
class Galgoyle : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 150;
		Radius 20;
		Height 40;
		Speed 10;
		Mass 500;
		DamageFunction (finaldamagedealt);
		PainChance 256;
		DamageFactor "Lead", 2;
		DamageFactor "Zap", 2;
		DamageFactor "Dust", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 200;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		SeeSound "galgoyle/swoop";
		PainSound "hduck/pain";
		DeathSound "virtuoso/death";
		ActiveSound "galgoyle/swoop";
		Obituary "%o was prey for a galgoyle.";
		//DropItem "JackAmmo", 96;
		//DropItem "MalletAmmo", 24;
		//DropItem "JackAmmo", 12;
		//DropItem "MalletAmmo", 3;
		Tag "Galgoyle";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("JackAmmo",1,96);
			A_DropItem("MalletAmmo",1,24);
			A_DropItem("JackAmmo",1,12);
			A_DropItem("MalletAmmo",1,3);
		}
		else
		{
			A_DropItem("JackAmmo",1,96,ADI_FULLAMMO);
			A_DropItem("MalletAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,12,ADI_FULLAMMO);
			A_DropItem("MalletAmmo",1,3,ADI_FULLAMMO);

			A_DropItem("CricketBat",1,4,ADI_FULLAMMO);
			A_DropItem("CricketBat",1,1,ADI_FULLAMMO);

			A_DropItem("AppleJack",1,4,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,1,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		if (!bDORMANT)
		{
			int damage = A_CalcDamageFormula(3,random(1,8),0.05,0.3334,0.1667,0.005);
			finaldamagedealt = damage;
		}
		super.Tick();
	}

	States
	{
		Spawn:
			GGRL A 10 A_Look();
			Loop;
		See:
			TNT1 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			GGRL AABBCCDD 3 
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 
			{
				state JumpState;
				if (random(1,256) <= (48 + (CountInv("MonsterLevel") * frandom(0.9375,1.0625)))) 
				{
					A_CheckSight("Takeoff");
				}
				else
				{
					if (target && (target.pos.z >= pos.z + (random(1,4) * 8.0)) && (target.pos.z >= pos.z - (random(1,4) * 8.0)))
					{
						if (random(1,12) <= random(1,3)) JumpState = FindState("TakeOff");
					}
					else
					{
						if (random(1,random(18,24)) <= random(1,random(2,4))) JumpState = FindState("TakeOff");
					}
					if (JumpState != null) 
					{
						A_FaceTarget();
						SetState(JumpState);
					}
				}
			}
			loop;
		Missile:
			GGRF A 0 A_Jump(96,"Takeoff");
			GGRF A 4 A_DynamicMusic();
			GGRF BC 5 A_FaceTarget();
			GGRF D 0 A_StartSound("galgoyle/fire",CHAN_BODY);
			GGRF D 4 A_SpawnProjectile("Jellyball",48,0);
			GGRF E 3;
			Goto See;
		Takeoff: 
			TNT1 A 0 A_JumpIf(pos.Z + height + (random(1,8) * 5) >= CeilingZ, "See");
			TNT1 A 0 
			{
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
			}
			Goto Fly;
		Fly:
			GGRL E 0 ThrustThingZ(0,15,0,0);
			GGRL EEFFGGHH 2 
			{
				A_EEChase(null,"MissileF",0,1,3,1,1);
			}
			Goto Hover;
		MissileF:
			GGRL E 0 A_Jump(64,"Land");
			GGRL E 0 
			{
				A_DynamicMusic();
				A_FaceTarget();
				A_StartSound("galgoyle/swoop",CHAN_VOICE);
				A_SkullAttack();
			}
			GGRL EFGH 4;
			goto MissileF+2;
		Land:
			GGRL EE 4 ThrustThingZ(0,-20,0,0);
			GGRL E 1 A_CheckFloor("See");
			GGRL EEFFGGHH 2;
			GGRL E 1 A_CheckFloor("See");
			Goto Hover;
		Hover:
			GGRL EEFFGGHH 2 A_EEChase(null,"MissileF",0,1,3,1,1);
			GGRL E 0 A_Jump(64,"Fly");
			GGRL E 0 A_Jump(32,"Land");
			Loop;
		Pain:
			GGRX B 6 A_EEPain();
			GGRX A 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			GGRX B 5 A_StartSound("VacDed",CHAN_BODY);
			GGRX B 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			GGRX A 5 bright A_Scream();
			GGRX BCDEF 3 bright;
			GGRX G 3 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			GGRX HIJKLMNOP 2 bright;
			Stop;
	}
}

class GalgoyleFuzzy : Galgoyle
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Galgoyle (Spectral)";
		Obituary "%o was prey for a spectral Galgoyle.";
	}
}

class Galgoyle_Hide : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Height 56;
		Radius 24;
		Mass 500;
		Health 200;
		PainChance 256;
		MONSTER;
		+NOBLOOD;
		Tag "Galgoyle (Hiding)";
	}
	
	States
	{
		Spawn:
			STGR A 10 A_Look();
			Loop;
		See:
			STGR A 1 A_Die();
			Goto Death;
		Pain:
			STGR A 1 A_Die();
			Goto Death;
		Death:
			TNT1 A 1 A_SpawnItemEX("Galgoyle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			TNT1 A 0 A_NoBlocking();
			Stop;
	}
}

//KNUCKLEHEAD
class Knucklehead : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 300;
		Radius 32;
		Height 80;
		ProjectilePassHeight 84;
		Speed 18;
		PainChance 256;
		Painchance "Suck", 64;
		DamageFactor "Cricket", 0.25;
		DamageFactor "Lead", 0.25;
		DamageFactor "Cherrybomb", 0.5;
		DamageFactor "Zap", 2;
		DamageFactor "Fist", 4;
		Painchance "Fist", 256;
		DamageFactor "Kick", 4;
		Painchance "Kick", 256;
		DamageFactor "Bap", 0;
		PainChance "Bap", 200;
		BloodType "BatPuff";
		BloodColor "black";
		MeleeThreshold 208;
		MeleeRange 96;
		MaxTargetRange 512;
		Mass 5000;
		Scale 1.5;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+NORADIUSDMG
		SeeSound "muddy/sight";
		PainSound "muddy/pain";
		DeathSound "muddy/death";
		ActiveSound "muddy/active";
		MeleeSound "mallethit";
		HitObituary "%o shook hands with knucklehead.";
		Obituary "%o lost a tennis match with knucklehead.";
		Tag "Knucklehead";
	}
	
	States
	{
		Spawn:
			KHED A 10 A_Look();
			Loop;
		See:
			KHED AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			KHED E 0 A_DynamicMusic();
			KHED E 4 A_FaceTarget();
			KHED F 0 A_StartSound("muddy/sight",CHAN_VOICE);
			KHED F 4;
			KHED G 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.005);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			Goto See;
		ThrowbackCricket:
			KHEY B 0 A_StartSound("muddy/sight",CHAN_BODY);
			KHEY B 0 A_DynamicMusic();
			KHEY B 8;
			KHED F 6 A_SpawnProjectile("croquetball",48,0,0,0,90);
			KHED F 6;
			Goto See;
		ThrowbackLead:
			KHEY C 0 A_StartSound("muddy/sight",CHAN_BODY);
			KHEY C 0 A_DynamicMusic();
			KHEY C 8;
			KHED F 0 A_SpawnProjectile("badblundershot",48,0,random(-3,3),0,0);
			KHED F 0 A_SpawnProjectile("badblundershot",48,0,random(-5,5),0,0);
			KHED F 6 A_SpawnProjectile("badblundershot",48,0,random(-7,7),0,0);
			KHED F 6;
			Goto See;
		ThrowbackCherry:
			KHEY D 0 A_StartSound("muddy/sight",CHAN_BODY);
			KHEY D 0 A_DynamicMusic();
			KHEY DEDE 2 Bright A_FaceTarget();
			KHED F 6 A_SpawnProjectile("BadCherryBomb",48,0,random(-3,3),0,90);
			KHED F 6;
			Goto See;
		Pain:
			KHEX A 6 A_EEPain();
			KHEX A 3; //A_DynamicMusic();
			Goto See;
		Pain.Cricket:
			KHEX B 2 A_EEPain();
			KHEX B 2; //A_DynamicMusic();
			Goto ThrowbackCricket;
		Pain.Lead:
			KHEX B 2 A_EEPain();
			KHEX B 2; //A_DynamicMusic();
			Goto ThrowbackLead;
		Pain.CherryBomb:
			KHEX B 2 A_EEPain();
			KHEX B 2; //A_DynamicMusic();
			Goto ThrowbackCherry;
		/*
		Death.Suck:
			KHEX A 5 A_StartSound("VacDed",CHAN_BODY);
			KHEX A 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			KHED H 5 A_Scream();
			KHED IJK 2;
			KHED L 8;
			KHED MNOP 5;
			KHED Q 5 A_NoBlocking();
			KHED Q -1;
			Stop;
		Death.Cricket:
			KHEX B 6;
			KHED H 5 A_Scream();
			KHED IJK 2;
			KHED L 8;
			KHED MNOP 5;
			KHED Q 5 A_NoBlocking();
			KHED Q -1;
			Stop;
		Death.Lead:
			KHEX C 6;
			KHED H 5 A_Scream();
			KHED IJK 2;
			KHED L 8;
			KHED MNOP 5;
			KHED Q 5 A_NoBlocking();
			KHED Q -1;
			Stop;
		Death.CherryBomb:
			KHEY DEDEDEDE 2 Bright;
			KHEX A 0 Bright A_SpawnProjectile("BossBoom",48,0,0,0);
			KHEX A 7 A_Explode();
			KHED H 5 A_Scream();
			KHED IJK 2;
			KHED L 8;
			KHED MNOP 5;
			KHED Q 5 A_NoBlocking();
			KHED Q -1;
			Stop;
		Raise:
			KHED PONMLKJIH 5;
			Goto See;
	}
}

//SHILLFISH
class Shillfish : DDOrigCreature
{
	int surpriselol;
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 80;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 0.25;
		DamageFactor "Bonk", 0.25;
		DamageFactor "Boiling", 0;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+DONTHARMSPECIES
		Obituary "%o was sunk by a shillfish.";
		Painsound "aqua/kill2";
		Deathsound "aqua/kill2";
		Tag "Shillfish";
		Species "Shillfish";
	}
	
	States
	{
		Spawn:
			SHEL AABB 10;
			SHEL E 10 A_Look();
			Loop;
		See:
			SHEL AA 5 
			{
				if (surpriselol > 0) 
				{
					A_SetTics(random(2,3));
					if (random(1,4) <= 3) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
													 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else 
				{
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			SHEL BB 5
			{
				if (surpriselol > 0) 
				{
					A_SetTics(random(2,3));
					if (random(1,8) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
													 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			SHEL B 0
			{
				double chancebase = (128.0 - (CountInv("MonsterLevel") * 1.03125));
				if (chancebase < 25.0) chancebase = 25.0;
				double chancebase2 = (1.0 + (CountInv("MonsterLevel") * 0.02));
				if (chancebase2 > 5.0) chancebase2 = 5.0;

				if (target && HellClericDVDS(target))
				{
					surpriselol = 1;
				}
				else
				{
					if (frandom(0.1,chancebase) <= chancebase2)
					{
						if (surpriselol <= 0) surpriselol = (randompick(4,5,5) * randompick(1,1,1,1,1,1,2,2,3));
					}
					else
					{
						surpriselol--;
					}
				}
				if (surpriselol < 0) surpriselol = 0;
				if (dydudebug_monsterspecialai) Console.Printf("chancebase: %d (%d), surpriselol: %d", chancebase, chancebase2, surpriselol);
			}
			Loop;
		Melee:
			SHEL C 0 A_DynamicMusic();
			SHEL C 6 
			{
				if (target && HellClericDVDS(target)) A_SetTics(random(2,3));
				A_FaceTarget();
			}
			SHEL D 6
			{
				if (target && HellClericDVDS(target)) A_SetTics(random(2,3));
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				
				A_CustomMeleeAttack(dmg, "gard/swing", "gard/swing", "", 1);
			}
			SHEL E 6
			{
				if (target && HellClericDVDS(target)) A_SetTics(random(2,3));
			}
			Goto See;
		Pain:
			SHEL E 6 A_EEPain();
			SHEL E 3; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			SHEL E 5 A_StartSound("VacDed",CHAN_BODY);
			SHEL E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			SHEL J 0 A_StartSound("aqua/kill1");
			SHEL F 7 Bright A_Scream();
			SHEL GH 7 Bright;
			SHEL I 7 Bright A_NoBlocking();
			Stop;
	}
}

class ShillfishFuzzy : Shillfish
{
	default
	{
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+SHADOW
		RenderStyle "OptFuzzy";
		Species "Shillfish";
		Tag "Shillfish (Spectral)";
	}
}

//SHILLFISH
class Shillfish_Fly : Shillfish
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 80;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 0.25;
		DamageFactor "Bonk", 0.25;
		DamageFactor "Boiling", 0;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		MONSTER;
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		Obituary "%o was sunk by a flying shillfish.";
		Painsound "aqua/kill2";
		Deathsound "aqua/kill2";
		Tag "Shillfish";
		Species "Shillfish";
	}
	
	States
	{
		Spawn:
			SHEL AABB 10;
			SHEL E 10 A_Look();
			Loop;
		See:
			SHEL AA 5 
			{
				if (surpriselol) 
				{
					A_SetTics(random(2,3));
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else 
				{
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			SHEL BB 5
			{
				if (surpriselol) 
				{
					A_SetTics(random(2,3));
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
			}
			SHEL B 0
			{
				if (random(1,128) <= 1)
				{
					if (!surpriselol) surpriselol = 10;
				}
				else
				{
					surpriselol--;
				}
			}
			Loop;
		Melee:
			SHEL C 6 A_FaceTarget();
			SHEL D 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				int dmg = A_CalcDamageFormula2(random(15,35),0.1334,random(10,20),0.1,random(5,15),0.07,0.01);
				
				A_CustomMeleeAttack(dmg, "gard/swing", "gard/swing", "", 1);
			}
			SHEL E 6;
			Goto See;
		Pain:
			SHEL E 6 A_EEPain();
			SHEL E 3;
			Goto See;
		/*
		Death.Suck:
			SHEL E 5 A_StartSound("VacDed",CHAN_BODY);
			SHEL E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			SHEL J 0 A_StartSound("aqua/kill1");
			SHEL F 7 Bright A_Scream();
			SHEL GH 7 Bright;
			SHEL I 7 Bright A_NoBlocking();
			Stop;
	}
}

class Shillfish_FlyFuzzy : Shillfish_Fly
{
	default
	{
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Shillfish (Spectral)";
		Species "Shillfish";
	}
}


//BELLEFISH
class Chase_Water : CustomInventoryExt
{
	default
	{
		Inventory.MaxAmount 0;
		+Inventory.AutoActivate
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Fail;
		Use:
			TNT1 A 0 A_jumpif(waterlevel < 3, "Waterlimit");
			TNT1 A 0 A_Chase();
			Stop;
		Waterlimit:
			TNT1 A 0 ThrustThingZ(0, 4, 1, 1);
			TNT1 A 0 A_Chase();
			Stop;
	}
}

class Bellefish : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 150;
		Radius 20;
		Height 56;
		Speed 10;
		Mass 500;
		MeleeRange 128;
		PainChance 256;
		DamageFactor "Fire", 0.25;
		DamageFactor "CherryBomb", 0.25;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "BRocket", 0.25;
		DamageFactor "Boiling", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 200;
		MONSTER;
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+NOGRAVITY
		Obituary "%o was zapped by a bellefish.";
		PainSound "aqua/kill2";
		Deathsound "aqua/kill2";
		Tag "Bellefish";
		Species "Bellefish";
	}
	
	void A_BelleFishZap()
	{
		int dmgbase = A_CalcDamageFormula2(random(1,5),frandompick(0.08334,0.10,0.125,0.16667),random(0,2),frandompick(0.08334,0.10,0.125,0.16667),random(0,5),frandompick(0.08334,0.10,0.125,0.16667),0.0025);

		if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 2.5)))
		{
			dmgbase *= 2;
			if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 1.25))) 
			{
				dmgbase *= 2;
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0625)))
				{
					dmgbase *= 2;
					if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.01625))) dmgbase *= 2;
				}
			}
		}
		int rangebase = random(72,88);
		if (exex_monsterlevelenabledflags) rangebase += (CountInv("MonsterLevel") * frandom(1.44,1.76));
		
		A_StartSound("bellefish/charge",CHAN_WEAPON);
		A_StartSound("bellefish/zap",CHAN_ITEM);
		A_Explode(dmgbase,128,XF_NOTMISSILE|XF_NOSPLASH,0,rangebase,0,0,"","Melee");
	}
	
	States
	{
		Spawn:
			SHLF ABCB 10 bright A_Look();
			Loop;
		See:
			SHLF ABCB 5 bright A_GiveInventory("Chase_Water",1);
			SHLF A 0 { bFLOAT = true; }
			Loop;
		Melee:
			SHLF D 0 A_DynamicMusic();
			SHLF E 0 A_StartSound("bellefish/charge",CHAN_BODY);
			SHLF EFG 3 bright A_FaceTarget();
			SHLF HIHI 3 bright A_BelleFishZap();
			SHLF G 8 bright;
			Goto See;
		Pain:
			SHLF J 9 bright A_EEPain();
			SHLF D 3 bright;
			Goto See;
		/*
		Death.Suck:
			SHLF J 5 A_StartSound("VacDed",CHAN_BODY);
			SHLF J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,2);
			Stop;
		*/
		Death:
			SHLF J 0 A_StartSound("aqua/kill1");
			SHLF J 7 Bright A_Scream();
			SHLF KLM 7 Bright;
			SHLF N 7 Bright A_NoBlocking();
			Stop;
	}
}

//********************
// * NEW DD MONSTERS *
//********************
//KILLETANE SOLOIST - UNIQUE LEADER VARIANT OF THE KILLETANTE MADE FOR THE MOD :V
//WHEN FLINCHED SHE INCURS A BUFF TO ATTACK, DEFENSE AND SPEED FOR A SHORT TIME (WHICH IS 10X MORE POWERFUL FOR HER MELEE DAMAGE), INDICATED BY THE GLOWING "IMAGES" SHE LEAVES BEHIND.
class KilletanteBuffATK : PowerDamage
{
	default
	{
		DamageFactor "Normal", 2.5;
		DamageFactor "Melee", 25;
		Powerup.Duration 2147483646;
	}
}

class KilletanteBuffDEF : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.4;
		DamageFactor "Beats", 0.4;
		DamageFactor "Melee", 0.025;
		DamageFactor "BFGSplash", 0.4;
		DamageFactor "Bonk", 0.4;
		DamageFactor "Cricket", 0.4;
		DamageFactor "Chop", 0.4;
		DamageFactor "Lead", 0.4;
		DamageFactor "Breakfast", 0.4;
		DamageFactor "Zap", 0.4;
		DamageFactor "Suck", 0.4;
		DamageFactor "Dust", 0.4;
		DamageFactor "Cherrybomb", 0.4;
		DamageFactor "BRocket", 0.4;
		DamageFactor "Spinner", 0.4;
		DamageFactor "Popper", 0.4;
		DamageFactor "Dashing", 0.4;
		DamageFactor "DashingBG", 0.4;
		DamageFactor "DashingSD", 0.4;
		DamageFactor "Bap", 0.4;
		DamageFactor "Fire", 0.4;
		DamageFactor "Boiling", 0.4;
		Powerup.Duration 2147483646;
	}
}

class KilletanteSoloistAImage : EEVisualAImage
{
	default
	{
		Radius 16;
		Height 8;
		Scale 0.8;
		Alpha 0.85;
		+NOGRAVITY
		+THRUACTORS
		RenderStyle "AddStencil";
		StencilColor "Red";
		-VISIBILITYPULSE
		+NOTIMEFREEZE
	}
	
	States
	{
		Spawn:
			"####" "#" 0 Bright;
			"####" "#" 0 Bright A_FadeTo (alpha * 0.5, 1, 0);
			"####" "#" 0 Bright ThrustThingZ (0, 1, 0, 0);
			"####" "#" 0 A_Jump (256, "SpawnLoop");
			Goto SpawnLoop;
		SpawnLoop:
			"####" "#" 0 Bright A_FadeTo (0, 0.16, 1);
			"####" "#" 1 Bright Light("KTAIMAGE1")
			{
				A_SetScale (scale.x*frandom(1.005,1.01), scale.y*frandom(1.01,1.02));
			}
			Goto SpawnLoop;
	}
}

class KilletanteSoloistAImage2 : KilletanteSoloistAImage
{
	default
	{
		RenderStyle "AddStencil";
		StencilColor "Green";
	}
	
	States
	{
		Spawn:
			"####" "#" 0 Bright;
			"####" "#" 0 Bright A_FadeTo (alpha * 0.5, 1, 0);
			"####" "#" 0 Bright ThrustThingZ (0, 1, 0, 0);
			"####" "#" 0 A_Jump (256, "SpawnLoop");
			Goto SpawnLoop;
		SpawnLoop:
			"####" "#" 0 Bright A_FadeTo (0, 0.16, 1);
			"####" "#" 1 Bright Light("KTAIMAGE2")
			{
				A_SetScale (scale.x*frandom(1.005,1.01), scale.y*frandom(1.01,1.02));
			}
			Goto SpawnLoop;
	}
}

class KilletanteSoloistAImage3 : KilletanteSoloistAImage
{
	default
	{
		RenderStyle "AddStencil";
		StencilColor "Blue";
	}
	
	States
	{
		Spawn:
			"####" "#" 0 Bright;
			"####" "#" 0 Bright A_FadeTo (alpha * 0.5, 1, 0);
			"####" "#" 0 Bright ThrustThingZ (0, 1, 0, 0);
			"####" "#" 0 A_Jump (256, "SpawnLoop");
			Goto SpawnLoop;
		SpawnLoop:
			"####" "#" 0 Bright A_FadeTo (0, 0.16, 1);
			"####" "#" 1 Bright Light("KTAIMAGE3")
			{
				A_SetScale (scale.x*frandom(1.005,1.01), scale.y*frandom(1.01,1.02));
			}
			Goto SpawnLoop;
	}
}

//ADDITIONALLY SHE SLOWLY GETS BUFFED AS HER HEALTH GOES DOWN, GRADUALLY BECOMING MORE RESISTANT TO GENERAL DAMAGE, UP TO FIVE TIERS
class KilletanteLowHealthBuffDEFS1 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.925;
		DamageFactor "Beats", 0.925;
		DamageFactor "Melee", 0.925;
		DamageFactor "BFGSplash", 0.925;
		DamageFactor "Bonk", 0.925;
		DamageFactor "Cricket", 0.925;
		DamageFactor "Chop", 0.925;
		DamageFactor "Lead", 0.925;
		DamageFactor "Breakfast", 0.925;
		DamageFactor "Zap", 0.925;
		DamageFactor "Suck", 0.925;
		DamageFactor "Dust", 0.925;
		DamageFactor "Cherrybomb", 0.925;
		DamageFactor "BRocket", 0.925;
		DamageFactor "Spinner", 0.925;
		DamageFactor "Popper", 0.925;
		DamageFactor "Dashing", 0.925;
		DamageFactor "DashingBG", 0.925;
		DamageFactor "DashingSD", 0.925;
		DamageFactor "Bap", 0.925;
		DamageFactor "Fire", 0.925;
		DamageFactor "Boiling", 0.925;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS2 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.85;
		DamageFactor "Beats", 0.85;
		DamageFactor "Melee", 0.85;
		DamageFactor "BFGSplash", 0.85;
		DamageFactor "Bonk", 0.85;
		DamageFactor "Cricket", 0.85;
		DamageFactor "Chop", 0.85;
		DamageFactor "Lead", 0.85;
		DamageFactor "Breakfast", 0.85;
		DamageFactor "Zap", 0.85;
		DamageFactor "Suck", 0.85;
		DamageFactor "Dust", 0.85;
		DamageFactor "Cherrybomb", 0.85;
		DamageFactor "BRocket", 0.85;
		DamageFactor "Spinner", 0.85;
		DamageFactor "Popper", 0.85;
		DamageFactor "Dashing", 0.85;
		DamageFactor "DashingBG", 0.85;
		DamageFactor "DashingSD", 0.85;
		DamageFactor "Bap", 0.85;
		DamageFactor "Fire", 0.85;
		DamageFactor "Boiling", 0.85;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS3 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.775;
		DamageFactor "Beats", 0.775;
		DamageFactor "Melee", 0.775;
		DamageFactor "BFGSplash", 0.775;
		DamageFactor "Bonk", 0.775;
		DamageFactor "Cricket", 0.775;
		DamageFactor "Chop", 0.775;
		DamageFactor "Lead", 0.775;
		DamageFactor "Breakfast", 0.775;
		DamageFactor "Zap", 0.775;
		DamageFactor "Suck", 0.775;
		DamageFactor "Dust", 0.775;
		DamageFactor "Cherrybomb", 0.775;
		DamageFactor "BRocket", 0.775;
		DamageFactor "Spinner", 0.775;
		DamageFactor "Popper", 0.775;
		DamageFactor "Dashing", 0.775;
		DamageFactor "DashingBG", 0.775;
		DamageFactor "DashingSD", 0.775;
		DamageFactor "Bap", 0.775;
		DamageFactor "Fire", 0.775;
		DamageFactor "Boiling", 0.775;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS4 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.7;
		DamageFactor "Beats", 0.7;
		DamageFactor "Melee", 0.7;
		DamageFactor "BFGSplash", 0.7;
		DamageFactor "Bonk", 0.7;
		DamageFactor "Cricket", 0.7;
		DamageFactor "Chop", 0.7;
		DamageFactor "Lead", 0.7;
		DamageFactor "Breakfast", 0.7;
		DamageFactor "Zap", 0.7;
		DamageFactor "Suck", 0.7;
		DamageFactor "Dust", 0.7;
		DamageFactor "Cherrybomb", 0.7;
		DamageFactor "BRocket", 0.7;
		DamageFactor "Spinner", 0.7;
		DamageFactor "Popper", 0.7;
		DamageFactor "Dashing", 0.7;
		DamageFactor "DashingBG", 0.7;
		DamageFactor "DashingSD", 0.7;
		DamageFactor "Bap", 0.7;
		DamageFactor "Fire", 0.7;
		DamageFactor "Boiling", 0.7;
		Powerup.Duration 2147483646;
	}
}

class KilletanteLowHealthBuffDEFS5 : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.625;
		DamageFactor "Beats", 0.625;
		DamageFactor "Melee", 0.625;
		DamageFactor "BFGSplash", 0.625;
		DamageFactor "Bonk", 0.625;
		DamageFactor "Cricket", 0.625;
		DamageFactor "Chop", 0.625;
		DamageFactor "Lead", 0.625;
		DamageFactor "Breakfast", 0.625;
		DamageFactor "Zap", 0.625;
		DamageFactor "Suck", 0.625;
		DamageFactor "Dust", 0.625;
		DamageFactor "Cherrybomb", 0.625;
		DamageFactor "BRocket", 0.625;
		DamageFactor "Spinner", 0.625;
		DamageFactor "Popper", 0.625;
		DamageFactor "Dashing", 0.625;
		DamageFactor "DashingBG", 0.625;
		DamageFactor "DashingSD", 0.625;
		DamageFactor "Bap", 0.625;
		DamageFactor "Fire", 0.625;
		DamageFactor "Boiling", 0.625;
		Powerup.Duration 2147483646;
	}
}

class KilletanteSoloist : Killetante
{
	int reactive1;
	int regentimer, regentimermax;
	int mldmg;
	int mass1;
	int intspd;
	int noblockmonsttimer;
	int noblockmonstchance;
	int noblockmonstresist;
	
	bool IncantSummon;
	int IncantSummonTimer;

	int timeresist, trestimer, timereschance;
	actor prevtarget;

	default
	{
		Health 240;
		Scale 0.9325;
		Radius 18; // 20
		Height 60; // 64
		Speed 12;
		Mass 250;
		MeleeRange 68;
		PainChance 64;
		DamageFactor 0.4375;
		DamageFactor "Dashing", 2.0;
		PainChance "Dashing", 248;
		DamageFactor "DashingBG", 2.5;
		PainChance "DashingBG", 256;
		DamageFactor "DashingSD", 2.5;
		PainChance "DashingSD", 256;
		DamageFactor "Fire", 2;
		PainChance "Fire", 128;
		DamageFactor "CherryBomb", 2;
		PainChance "CherryBomb", 128;
		DamageFactor "Spinner", 0.5;
		PainChance "Spinner", 128;
		DamageFactor "Popper", 0.5;
		PainChance "Popper", 128;
		DamageFactor "BRocket", 0.5;
		PainChance "BRocket", 128;
		DamageFactor "Chop", 2;
		PainChance "Chop", 128;
		DamageFactor "Suck", 1.75;
		PainChance "Suck", 224; //x2 the usual
		DamageFactor "Beats", 1.5;
		PainChance "Beats", 96;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		SeeSound "dancer/sight";
		PainSound "dancer/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dancer/active";
		Obituary "%o was out-tango'd by a Killetante Soloist.";
		HitObituary "%o was roundhouse-kicked over the horizon by a Killetante Soloist.";
		Tag "Killetante Soloist";
		Species "Killetante";
		+DONTHARMCLASS
		+AVOIDHAZARDS
		+JUMPDOWN
	}
	
	override void PostBeginPlay()
	{
		mldmg = random(10,15);
		mass1 = mass;
		intspd = Speed;
		
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		mass1 = mass;

		int mldmg = A_CalcDamageFormula2(random(10,15),frandom(0.334,0.4),random(5,15),frandom(0.030,0.0334),random(15,35),frandom(0.025,0.045),0.0075);

		int spdc = intspd;
		int lowHPbuffchance;
		timeresist = random(3,5) * (Skill * frandom(0.75,1.25));
		if (IPAttackSummon) timeresist *= 1.5;
		timereschance = 16 + (Skill * 8);
		if (IPAttackSummon) timereschance *= 1.5;
		noblockmonstresist = random(3,5) * (Skill * frandom(0.75,1.25));
		noblockmonstresist *= random(1,3);
		noblockmonstresist *= (1.0 + (CountInv("MonsterLevel") * 0.05));
		if (IPAttackSummon) noblockmonstresist *= 1.5;
		noblockmonstchance = 16 + (Skill * 8);
		noblockmonstchance *= random(1,3);
		noblockmonstchance *= (1.0 + (CountInv("MonsterLevel") * 0.025));
		if (IPAttackSummon) noblockmonstchance *= 1.5;

		if (health > 0)
		{
			if (isfrozen()) mass *= random(4,5); // She has a random 4-5x Mass Multiplier when frozen [she also takes 4-5x times LESS damage when hit while frozen]
			if (!bNOTIMEFREEZE)
			{
				if (random(1,1024) <= timereschance)
				{
					// OCCASIONALLY SHE CAN "BREAK FREE" FROM TIME FREEZES FOR A MOMENT OR TWO [THIS DOES TEMPORARILY REMOVE HER MASS/DEFENSE BUFF WHILE FROZEN THOUGH]
					bNOTIMEFREEZE = true;
					trestimer = timeresist;
				}
			}
			else
			{
				trestimer--;
				if (trestimer <= 0) bNOTIMEFREEZE = false;
				//Console.Printf("trestimer: %d", trestimer);
			}
			
			// If not summoned, will occasionally gain the ability to avert Monster-Blocking Lines for a few seconds
			if (!bNOBLOCKMONST)
			{
				if (!IncantSummon)
				{
					if (random(1,1024) <= noblockmonstchance)
					{
						bNOBLOCKMONST = true;
						bJUMPDOWN = true;
						noblockmonsttimer = noblockmonstresist;
					}
				}
			}
			else
			{
				if (!IncantSummon)
				{
					noblockmonsttimer--;
					if (noblockmonsttimer <= 0) 
					{
						bJUMPDOWN = false;
						bNOBLOCKMONST = false;
					}
					//Console.Printf("noblockmonsttimer: %d", noblockmonsttimer);
				}
			}
		}
		else
		{
			if (!isfrozen() && bNOTIMEFREEZE) bNOTIMEFREEZE = true;
		}

		// AND THE CHERRY ON TOP: SOLOISTS HAVE LOW-LEVEL HP REGENERATION, THOUGH IT GETS STRONGER IF SHE INCURS HER BUFF FROM BEING FLINCHED, AND NATURALLY INCREASES AS SHE GETS LOWER ON HEALTH.
		// ADDITIONALLY, THEY HAVE AN EXTREMELY LOW CHANCE TO "SURVIVE MORTAL BLOWS" [I.E. GET A TIC OF BUDDHA MODE TO SAVE THEM FROM DESTRUCTION] :V
		int inc = 1;
		int maxhealth = (SpawnHealth() + Stamina);
		regentimermax = (65 - (Skill * 0.667));
		if (IPAttackSummon) regentimermax *= 0.8;
		if (health <= 0) reactive1 = 0;
		if (!bFRIENDLY)
		{
			if (target && Teacher_JorgClone(target))
			{
				bNOINFIGHTING = false;
				bNOTARGET = false;
				bQUICKTORETALIATE = true;
				prevtarget = target;
			}
			else
			{
				if (prevtarget && prevtarget.health > 0) 
				{
					target = prevtarget;
				}
				else
				{
					if (prevtarget) prevtarget = null;
					
					bNOINFIGHTING = false;
					bNOTARGET = false;
					bQUICKTORETALIATE = true;
					if (random(1,32) <= 1) 
					{
						bNOINFIGHTING = true;
						bNOTARGET = true;
						bQUICKTORETALIATE = false;
					}
				}
			}
		}
		else
		{
			bNOINFIGHTING = true;
			bNOTARGET = true;
			bQUICKTORETALIATE = false;
			if (random(1,32) <= 1) 
			{
				bNOINFIGHTING = false;
				bNOTARGET = false;
				bQUICKTORETALIATE = true;
			}
		}
		
		if (!isFrozen())
		{
			double dmgmult = frandom(1.125,1.25);
			double incmult = frandom(1.2825,1.565);
			bBUDDHA = false;
			if (health < maxhealth)
			{
				int gutsbasechance = 128;
				lowHPbuffchance = 0;
				if (health <= (maxhealth*(frandom(0.675,0.825))))
				{
					mldmg *= dmgmult;
					inc *= incmult;
					lowHPbuffchance = 10;
					gutsbasechance = random(40,44) * 2;
				}
				if (health <= (maxhealth*(frandom(0.45,0.55))))
				{
					mldmg *= dmgmult;
					inc *= incmult;
					lowHPbuffchance = 40;
					gutsbasechance = random(25,28) * 2;
				}
				if (health <= (maxhealth*(frandom(0.225,0.275)))) 
				{
					mldmg *= dmgmult;
					inc *= incmult;
					lowHPbuffchance = 80;
					gutsbasechance = random(14,16) * 2;
				}
				if (health <= (maxhealth*(frandom(0.1125,0.1375)))) 
				{
					mldmg *= dmgmult;
					inc *= incmult;
					lowHPbuffchance = 100;
					gutsbasechance = random(7,8) * 2;
				}
				if (reactive1) 
				{
					mass1 *= frandom(3.3,3.6);
					mldmg *= frandom(1.1,1.2);
					gutsbasechance *= frandompick(0.25,0.334,0.334,0.334,0.4);
				}
				if (random(1,gutsbasechance) == 1) bBUDDHA = true;

				if (skill == SKILL_VERY_EASY && !bFRIENDLY) inc *= frandom(0.25,0.50);
				if (skill == SKILL_VERY_EASY && bFRIENDLY) inc *= frandom(1.50,1.75);
				if (skill == SKILL_EASY && !bFRIENDLY) inc *= frandom(0.5,0.75);
				if (skill == SKILL_EASY && bFRIENDLY) inc *= frandom(1.25,1.5);
				if (skill == SKILL_HARD && !bFRIENDLY) inc *= frandom(1.25,1.5);
				if (skill == SKILL_HARD && bFRIENDLY) inc *= frandom(0.5,0.75);
				if (skill == SKILL_VERY_HARD && !bFRIENDLY) inc *= frandom(1.50,1.75);
				if (skill == SKILL_VERY_HARD && bFRIENDLY) inc *= frandom(0.25,0.50);
				if (inc < 1) inc = 1;
				
				if (random(1,100) <= lowHPbuffchance)
				{
					if (!bFRIENDLY)
					{
						if (skill == SKILL_VERY_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS1",1);
						if (skill == SKILL_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS2",1);
						if (skill == SKILL_NORMAL) A_SetInventory("KilletanteLowHealthBuffDEFS3",1);
						if (skill == SKILL_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS4",1);
						if (skill == SKILL_VERY_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS5",1);
					}
					else
					{
						if (skill == SKILL_VERY_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS5",1);
						if (skill == SKILL_EASY) A_SetInventory("KilletanteLowHealthBuffDEFS4",1);
						if (skill == SKILL_NORMAL) A_SetInventory("KilletanteLowHealthBuffDEFS3",1);
						if (skill == SKILL_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS2",1);
						if (skill == SKILL_VERY_HARD) A_SetInventory("KilletanteLowHealthBuffDEFS1",1);
					}
				}
				else
				{
					A_SetInventory("KilletanteLowHealthBuffDEFS1",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS2",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS3",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS4",0);
					A_SetInventory("KilletanteLowHealthBuffDEFS5",0);
				}

				if (reactive1)
				{
					regentimermax *= frandompick(0.5,0.667,0.667,0.833,0.833);
					inc *= randompick(7,7,8,8,9);
				}
				regentimer += inc;
				if (regentimer > regentimermax)
				{
					regentimer -= regentimermax;
					health += randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2);
					A_SpawnItemEx("Micronote2", frandom(6,7), frandom(6,7), (frandom(24,28)*2), 0, frandom(-1.5, 1.5), frandom(-1.5, 1.5));
					if (health > maxhealth) health = maxhealth;
					// The Soloist will emit a micro-sized music note whenever she incurs a regen interval
				}
			}
			else
			{
				regentimer = random(-5,5);
			}

			if (reactive1)
			{
				bool debugbufftime = false;
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage2", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (level.time % randompick(2,3,3,4) == 0) A_SpawnItemEx ("KilletanteSoloistAImage3", frandom(-1,1),frandom(-1,1),frandom(-1,1), 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				A_SetInventory("KilletanteBuffATK",1);
				A_SetInventory("KilletanteBuffDEF",1);
				spdc *= 1.625;
				Speed = spdc;
				
				if (
					InStateSequence(curstate,ResolveState("Pain")) || 
					InStateSequence(curstate,ResolveState("Pain.Bonk")) || 
					InStateSequence(curstate,ResolveState("Pain.Breakfast")) || 
					InStateSequence(curstate,ResolveState("Pain.Zap")) || 
					InStateSequence(curstate,ResolveState("Pain.Chop")) || 
					InStateSequence(curstate,ResolveState("Pain.Cricket")) || 
					InStateSequence(curstate,ResolveState("Pain.Lead")) || 
					InStateSequence(curstate,ResolveState("Pain.Bop")) || 
					InStateSequence(curstate,ResolveState("Pain.Beats")) || 
					InStateSequence(curstate,ResolveState("Pain.Dust")) || 
					InStateSequence(curstate,ResolveState("Pain.CherryBomb")) || 
					InStateSequence(curstate,ResolveState("Pain.BRocket")) || 
					InStateSequence(curstate,ResolveState("Pain.Spinner")) || 
					InStateSequence(curstate,ResolveState("Pain.Popper")) || 
					InStateSequence(curstate,ResolveState("Pain.Dashing")) || 
					InStateSequence(curstate,ResolveState("Pain.Boiling")) || 
					InStateSequence(curstate,ResolveState("Pain.Tank")) || 
					InStateSequence(curstate,ResolveState("Pain.Suck")) || 
					InStateSequence(curstate,ResolveState("Pain.Musak")) || 
					InStateSequence(curstate,ResolveState("Pain.DoomSpell")) || 
					InStateSequence(curstate,ResolveState("Pain.Magic")) || 
					InStateSequence(curstate,ResolveState("Pain.Holy")) || 
					InStateSequence(curstate,ResolveState("Pain.Dark")) ||
					InStateSequence(curstate,ResolveState("Pain.Eldritch")) ||
					InStateSequence(curstate,ResolveState("Pain.Fire")) || 
					InStateSequence(curstate,ResolveState("Pain.Ice")) || 
					InStateSequence(curstate,ResolveState("Pain.Plasma")) || 
					InStateSequence(curstate,ResolveState("Pain.Thunder")) || 
					InStateSequence(curstate,ResolveState("Pain.Electric")) || 
					InStateSequence(curstate,ResolveState("Pain.Lightning")) || 
					InStateSequence(curstate,ResolveState("Pain.Shock")) || 
					InStateSequence(curstate,ResolveState("Pain.Sceptre")) || 
					InStateSequence(curstate,ResolveState("Pain.Fist")) || 
					InStateSequence(curstate,ResolveState("Pain.Kick")) ||
					InStateSequence(curstate,ResolveState("Pain.PoisonNeedle")) ||
					InStateSequence(curstate,ResolveState("Pain.Deadlight")) ||
					InStateSequence(curstate,ResolveState("Pain.Chainsaw")) ||
					InStateSequence(curstate,ResolveState("Pain.Gauntlets")) ||
					InStateSequence(curstate,ResolveState("PainShield")) ||
					InStateSequence(curstate,ResolveState("PainShieldEnd")) ||
					InStateSequence(curstate,ResolveState("PainReact")) ||
					InStateSequence(curstate,ResolveState("PainEnd"))
					) 
				{
					if (random(1,32) >= (20 + (skill*4))) 
					{
						reactive1--;
						if (IncantSummon) IncantSummonTimer--;
					}
					if (debugbufftime) Console.Printf("PainState Detected"); 
				}
				else
				{
					if (random(1,8) <= (7 - (skill/3))) 
					{
						reactive1--;
						if (IncantSummon) IncantSummonTimer--;
					}
					if (debugbufftime) Console.Printf("PainState Not Detected"); 
				}
				if (debugbufftime) Console.Printf("Killetante Soloist Buff Timer: %d (tic: %d)", reactive1, level.time);
			}
			else
			{
				A_SetInventory("KilletanteBuffATK",0);
				A_SetInventory("KilletanteBuffDEF",0);
				Speed = intspd;
				if (IncantSummon) IncantSummonTimer--;
			}
		}
		
		if (IncantSummon)
		{
			if (IncantSummonTimer == 0)
			{
				health = 0;
				A_Die("Unsummon");
				A_Stop();
				SetStateLabel("Death.Unsummon");
			}
			else
			{
				bJUMPDOWN = true;
				bNOBLOCKMONST = true;
				bFRIENDLY = true;
			}
			//Console.Printf("IncantSummonTimer: %d", IncantSummonTimer);
		}
		else
		{
		}
		mass = mass1;
		
		Super.Tick();
	}
	
	States
	{
		Spawn:
			DAKI A 7 
			{
				A_SetTics(random(5,7));
				A_Look();
			}
			DAKI B 5
			{
				A_SetTics(random(3,5));
				A_Look();
			}
			DAKI C 7
			{
				A_SetTics(random(5,7));
				A_Look();
			}
			DAKI D 5
			{
				A_SetTics(random(3,5));
				A_Look();
			}
			Loop;
		See:
			DAKS BBCC 3 
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
				A_SetTics(randompick(2,3,3,3,3,3,4));
				if (random(1,4) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS B 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
				if (random(1,16) <= random(5,7)) { return resolvestate("Dodge"); }

				return resolvestate(null);
			}
			DAKS DDEE 3 
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
				A_SetTics(randompick(2,3,3,3,3,3,4));
				if (random(1,4) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS B 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
				if (random(1,16) <= random(5,7)) { return resolvestate("Dodge"); }

				return resolvestate(null);
			}
			Loop;
		Dodge:
			DAKS F 0
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DAKS FFGGH 1
			{
				A_FastChase();
				A_SetTics(randompick(0,1,1,1,1,1,1,2));
				if (random(1,10) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS I 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DAKS HIIJJ 1 
			{
				A_FastChase();
				A_SetTics(randompick(0,1,1,1,1,1,1,2));
				if (random(1,10) == 1) { A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1)); }
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Missile:
			DAKS F 0 A_Jump(96,"MusicAttk");
		Missile2:
			DAKS F 0 A_DynamicMusic();
			DAKS F 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Facetarget();
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
			}
			DAKS J 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				ThrustThingz (0, randompick(18,27,36), 0, 0);
				ThrustThing (((angle*256/360*frandom(0.75,1.25))), randompick(18,27,36), 0, 0);
			}
			DAKS J 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,3) <= 2)
						{
							A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
						}
					}
				}
				else
				if (random(1,3) <= 2) 
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
				}
			}
			DAKS GH 2
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS H 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,3) <= 2)
						{
							A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
						}
					}
				}
				else
				if (random(1,3) <= 2) 
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
				}
			}
			DAKS IJ 2
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS D 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 75)
					{
						A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,5) <= 1)
						{
							A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
						}
					}
				}
				else
				if (random(1,5) <= 1) 
				{
					A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
				}
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		MusicAttk:
			DAKS F 0 A_DynamicMusic();
			DAKS F 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_StartSound("dancer/danceattk",CHAN_BODY);
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.025);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.025);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.025);
				}
				if (random(1,24) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS F 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS GHI 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_Recoil(frandompick(-1,1.5,-2,-2.5,-3));
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.025);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.025);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.025);
				}
				if (random(1,24) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS J 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				ThrustThingz (0, randompick(18,27,36), 0, 0);
				ThrustThing (((angle*256/360*frandom(0.75,1.25))), randompick(18,27,36), 0, 0);
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS D 4 
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_StartSound("virtuoso/musicfire",CHAN_VOICE);
				A_SpawnProjectile("MusicBall2",40);
			}
			DAKS E 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				int chance = 1;
				if (exex_monsterlevelenabledflags)
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01);
					if (CountInv("MonsterLevel") > 30) chance += ((CountInv("MonsterLevel") - 30) * 0.01);
					if (CountInv("MonsterLevel") > 60) chance += ((CountInv("MonsterLevel") - 60) * 0.01);
				}
				if (random(1,6) <= chance)
				{
					A_StartSound("virtuoso/musicfire",CHAN_VOICE);
					A_SpawnProjectile("MusicBall2",40);
				}
			}
			DAKS J 0
			{
				if (random(1,8) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		Melee:
			DAKS F 0 A_DynamicMusic();
			DAKS FG 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS G 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,3) <= 2)
						{
							A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
						}
					}
				}
				else
				if (random(1,3) <= 2) 
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
				}
			}
			DAKS HI 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS J 0
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,3) <= 2)
						{
							A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
						}
					}
				}
				else
				if (random(1,3) <= 2) 
				{
					A_CustomMeleeAttack((mldmg*frandom(0.2375,0.2625)), "mallethit", "malletswing", "", 1); 
				}
			}
			DAKS J 2 
			{
				A_SetTics(randompick(1,1,1,2,2,3,3,3));
				A_Facetarget();
			}
			DAKS D 4
			{
				A_SetTics(randompick(2,2,3,3,3,3,4,4));
				A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 75)
					{
						A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
					}
					else
					{
						if (random(1,5) <= 1)
						{
							A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
						}
					}
				}
				else
				if (random(1,5) <= 1) 
				{
					A_CustomMeleeAttack ((mldmg*frandom(0.95,1.05)), "mallethit", "malletswing", "", 1);
				}
			}
			Goto See;
		Pain.Beats:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				if (random(1,32) <= 3)
				{
					ThrustThingZ (0, randompick(2,3,4), 0, 0);
					ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), frandompick(0.5,0.75,1), 0, 0);
				}
			}
			DAKS L 3 
			{
				A_EEPain();
				int f = randompick(0,0,0,1,1,2) * randompick(1,1,1,1,1,1,2,2,2,3);
				A_SetTics(randompick(1,2,2,3));
				if (health < ((SpawnHealth() + Stamina) * 0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.25)) 
				{
					A_SetTics(randompick(0,1,1,2));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 3 
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0 
			{
				//A_DynamicMusic();
			}
			DAKS KK 3
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0
			{
				if (random(1,32) == 1) 
				{ 
					if (random(1,32) <= 3) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.Suck:
			DAKS K 2 A_FaceTarget;
			DAKS L 0
			{
				if (random(1,16) == 1)
				{
					ThrustThingZ (0, randompick(4,6,8), 0, 0);
					ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), frandompick(1,1.5,2), 0, 0);
				}
			}
			DAKS L 6
			{
				A_EEPain();
				A_SetTics(randompick(4,4,5,6));
				if (random(1,16) == 1)
				{
					int f = random(8,9) * randompick(1,1,1,1,1,1,2,2,2,3);
					if (health < ((SpawnHealth() + Stamina) * 0.75)) 
					{
						f *= frandom(1.05,1.0833);
					}
					if (health < ((SpawnHealth() + Stamina) * 0.5)) 
					{
						f *= frandom(1.0834,1.15);
					}
					if (health < ((SpawnHealth() + Stamina) * 0.25)) 
					{
						A_SetTics(randompick(0,1,1,2));
						f *= frandom(1.1167,1.2167);
					}
					reactive1 += f;
				}
			}
			DAKS K 6
			{
				//A_DynamicMusic();
				A_SetTics(randompick(4,4,5,6));
			}
			DAKS K 0
			{
				if (random(1,8) <= 7) { return resolvestate("Dodge"); }
				return resolvestate(null);
			}
			Goto See;
		Pain.Dashing:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.975,1.025))), (randompick(4,6,8)*frandompick(3,3.5,4)), 0, 0);
			}
			DAKS L 15 
			{
				A_SetTics(randompick(5,10,10,15));

				A_EEPain();
				int f = randompick(8,8,9) * randompick(1,1,1,1,1,2,2,3);
				if (health < ((SpawnHealth() + Stamina) * 0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.25)) 
				{
					A_SetTics(randompick(0,5,5,10));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 15 
			{
				A_SetTics(randompick(5,10,10,15));
			}
			DAKS K 0
			{
				//A_DynamicMusic();
			}
			DAKS KK 15
			{
				A_SetTics(randompick(5,10,10,15));
			}
			DAKS K 0
			{
				if (random(1,32) <= 5) 
				{
					return resolvestate("Dodge"); 
				}
				else
				{
					return resolvestate("Melee"); 
				}
				return resolvestate(null);
			}
			Goto See;
		Pain:
			DAKS K 1 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), randompick(4,6,8), 0, 0);
			}
			DAKS L 3 
			{
				A_EEPain();
				int f = random(32,38) * randompick(1,1,1,1,1,1,2,2,2,3);
				A_SetTics(randompick(1,2,2,3));
				if (health < ((SpawnHealth() + Stamina) * 0.75)) 
				{
					f *= frandom(1.15,1.25);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.5)) 
				{
					f *= frandom(1.25,1.45);
				}
				if (health < ((SpawnHealth() + Stamina) * 0.25)) 
				{
					A_SetTics(randompick(0,1,1,2));
					f *= frandom(1.35,1.65);
				}
				reactive1 += f;
			}
			DAKS L 3 
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0
			{
				//A_DynamicMusic();
			}
			DAKS KK 3
			{
				A_SetTics(randompick(1,2,2,3));
			}
			DAKS K 0
			{
				if (random(1,8) == 1) 
				{ 
					if (random(1,8) <= 3) 
					{
						return resolvestate("Dodge"); 
					}
					else
					{
						return resolvestate("Melee"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Death:
			DAKS K 3 A_FaceTarget;
			DAKS L 0 
			{
				ThrustThingZ (0, randompick(16,24,32), 0, 0);
				ThrustThing (((angle*256/360)+(180*frandom(0.75,1.25))), randompick(4,6,8), 0, 0);
			}
			DAKS L 5 A_Scream();
			DAKS MNOP 3 bright;
			DAKS Q 2 bright A_NoBlocking();
			DAKS RSTUVWXYZ 2 bright;
			Stop;
		Death.Unsummon:
			DAKS L 0
			{
				if (exex_combatlog) 
				{
					Console.Printf("\c[red]*\c- \c[purple]%s's\c- summoning period has expired and they have vanished! [%d]", GetTag(), gametic);
				}
			}
			DAKS L 3 A_StartSound("dancer/squee",CHAN_VOICE);
			DAKS L 3 A_Scream();
			DAKS L 3 
			{
				A_SetTranslucent(0.9, 0);
				A_SpawnItemEx("MinotaurSmokeExit");
			}
			DAKS L 3 A_SetTranslucent(0.8, 0);
			DAKS L 3 
			{
				A_SetTranslucent(0.7, 0);
				A_NoBlocking();
			}
			DAKS L 3 A_SetTranslucent(0.6, 0);
			DAKS L 3 A_SetTranslucent(0.5, 0);
			DAKS L 3 A_SetTranslucent(0.4, 0);
			DAKS L 3
			{
				A_SetTranslucent(0.3, 0);
				A_BossDeath();
			}
			DAKS L 3 A_SetTranslucent(0.2, 0);
			DAKS L 3 A_SetTranslucent(0.1, 0);
			Stop;
	}
}

//*************
//* DD BOSSES *
//*************
//ROSE MOTHER
class RoseMother : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 1000;
		Radius 20;
		Height 80;
		Mass 900000;
		Scale 2;
		Speed 0;
		PainChance 200;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 3;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 128;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+CANNOTPUSH
		+MISSILEMORE
		+MISSILEEVENMORE
		+LOOKALLAROUND
		Obituary "%o was planted by Rose Mother.";
		MeleeDamage 3;
		Tag "Rose Mother";
		painsound "mother/pain";
	}
	States
	{
		Spawn:
			RMOT A 10 A_Look();
			Loop;
		See:
			RMOT ABCDEF 6;
			Goto Preparing;
		Preparing:
			RMOT EEEEFFFF 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			RMOT A 0 A_DynamicMusic();
			Loop;
		Missile:
			RMOT A 0 A_DynamicMusic();
			RMOT C 0 A_Jump(208,"Spreadshot");
			RMOT CDA 4 A_FaceTarget();
			RMOT B 6 A_SpawnProjectile("BadCherryBomb",48,0,random(-3,3),0,90);
			RMOT CD 4;
			RMOT F 4;
			Goto Preparing;
		SpreadShot:
			RMOT E 0 A_DynamicMusic();
			RMOT E 4 A_FaceTarget();
			RMOT G 4;
			RMOT H 4 A_SpawnProjectile("SeedBall",48,0,-15);
			RMOT H 4 A_SpawnProjectile("SeedBall",48,0,-11);
			RMOT I 4 A_SpawnProjectile("SeedBall",48,0,-7);
			RMOT I 4 A_SpawnProjectile("SeedBall",48,0,-3);
			RMOT J 4 A_SpawnProjectile("SeedBall",48,0,3);
			RMOT J 4 A_SpawnProjectile("SeedBall",48,0,7);
			RMOT K 4 A_SpawnProjectile("SeedBall",48,0,11);
			RMOT K 4 A_SpawnProjectile("SeedBall",48,0,15);
			RMOT L 4;
			RMOT F 4;
			Goto Preparing;
		Pain:
			RMOT X 0 A_DynamicMusic();
			RMOT X 8 A_EEPain();
			RMOT E 4 A_Jump(128,"Missile");
			Goto Preparing;
		Death:
			RMOT X 0 A_DynamicMusic();
			RMOT X 0 A_Scream();
			RMOT X 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_RoseMother)
					{
						MiscItem.DD_RoseMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			RMOT XXXXXXXXXXXX 7 bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			RMOT Y 10 A_NoBlocking();
			RMOT Z 10;
			RMOT Z 0 
			{
				A_DDAFDOrigBossDie();
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) A_DropItem("PortraitRose",1,256);
			}
			RMOT Z -1;
			Stop;
	}
}

class RoseMotherClone : RoseMother
{
	double seedangleerror;
	default
	{
		//$Category EE Bosses
		Health 1000;
		Radius 20;
		Height 80;
		ProjectilePassHeight 152;
		Mass 900000;
		Scale 2;
		Speed 0;
		PainChance 10; // 200
		DamageFactor 0.334;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 3;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 10;
		PainChance "Chop", 30;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+CANNOTPUSH
		+MISSILEMORE
		+MISSILEEVENMORE
		+LOOKALLAROUND
		Obituary "%o was planted by a clone of Rose Mother.";
		Tag "Rose Mother (Clone)";
		MeleeDamage 3;
		painsound "mother/pain";
	}
	
	void A_RoseMotherResetSpreadErrorMid()
	{
		if (skill == 0 && random(1,1024) <= 1) seedangleerror = frandom(-3.5,3.5);
		if (skill == 1 && random(1,256) <= 1) seedangleerror = frandom(-3.5,3.5);
		if (skill == 2 && random(1,64) <= 1) seedangleerror = frandom(-3.5,3.5);
		if (skill == 3 && random(1,16) <= 1) seedangleerror = frandom(-3.5,3.5);
		if (skill == 4 && random(1,4) <= 1) seedangleerror = frandom(-3.5,3.5);
	}
	
	States
	{
		Spawn:
			RMOT A 10 A_Look();
			Loop;
		See:
			RMOT ABCDEF 6;
			Goto Preparing;
		Preparing:
			RMOT EEEEFFFF 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			RMOT C 0 A_Jump(208,"Spreadshot");
		CherryShot:
			RMOT C 0
			{
				seedangleerror = frandom(-14,14);
			}
			RMOT CDA 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_FaceTarget();
			}
			RMOT B 6 
			{
				A_SpawnProjectile("BadCherryBomb2",48,0,(random(-3,3)-seedangleerror),0,90);
			}
			RMOT B 6 
			{
				if (skill == 0) A_SetTics(randompick(8,9,10));
				if (skill == 1) A_SetTics(randompick(7,7,8));
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(randompick(5,5,4));
				if (skill == 4) A_SetTics(randompick(4,3,2));
				A_SpawnProjectile("BadCherryBomb2",48,0,(random(-3,3)-seedangleerror),0,90);
			}
			RMOT B 0
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.5))
				{
					if (skill == 0) A_SetTics(6);
					if (skill == 1) A_SetTics(5);
					if (skill == 2) A_SetTics(4);
					if (skill == 3) A_SetTics(3);
					if (skill == 4) A_SetTics(2);
					A_FaceTarget();
				}
			}
			RMOT B 0
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.5))
				{
					if (skill == 0) A_SetTics(randompick(8,9,10));
					if (skill == 1) A_SetTics(randompick(7,7,8));
					if (skill == 2) A_SetTics(6);
					if (skill == 3) A_SetTics(randompick(5,5,4));
					if (skill == 4) A_SetTics(randompick(4,3,2));
					A_SpawnProjectile("BadCherryBomb2",48,0,(random(-3,3)-seedangleerror),0,90);
				}
			}
			RMOT B 0
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.1667))
				{
					if (skill == 0) A_SetTics(6);
					if (skill == 1) A_SetTics(5);
					if (skill == 2) A_SetTics(4);
					if (skill == 3) A_SetTics(3);
					if (skill == 4) A_SetTics(2);
					A_FaceTarget();
				}
			}
			RMOT B 0
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.1667))
				{
					if (skill == 0) A_SetTics(randompick(8,9,10));
					if (skill == 1) A_SetTics(randompick(7,7,8));
					if (skill == 2) A_SetTics(6);
					if (skill == 3) A_SetTics(randompick(5,5,4));
					if (skill == 4) A_SetTics(randompick(4,3,2));
					A_SpawnProjectile("BadCherryBomb2",48,0,(random(-3,3)-seedangleerror),0,90);
				}
			}
			RMOT CD 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			RMOT F 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			RMOT F 0
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.1667))
				{
					if (skill == 0 && random(1,32) <= 1) return resolvestate("CherryShot");
					if (skill == 1 && random(1,16) <= 1) return resolvestate("CherryShot");
					if (skill == 2 && random(1,8) <= 1) return resolvestate("CherryShot");
					if (skill == 3 && random(1,4) <= 1) return resolvestate("CherryShot");
					if (skill == 4 && random(1,2) <= 1) return resolvestate("CherryShot");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.5))
				{
					if (skill == 0 && random(1,48) <= 1) return resolvestate("CherryShot");
					if (skill == 1 && random(1,24) <= 1) return resolvestate("CherryShot");
					if (skill == 2 && random(1,12) <= 1) return resolvestate("CherryShot");
					if (skill == 3 && random(1,6) <= 1) return resolvestate("CherryShot");
					if (skill == 4 && random(1,3) <= 1) return resolvestate("CherryShot");
				}
				else
				{
					if (skill == 0 && random(1,64) <= 1) return resolvestate("CherryShot");
					if (skill == 1 && random(1,32) <= 1) return resolvestate("CherryShot");
					if (skill == 2 && random(1,16) <= 1) return resolvestate("CherryShot");
					if (skill == 3 && random(1,8) <= 1) return resolvestate("CherryShot");
					if (skill == 4 && random(1,4) <= 1) return resolvestate("CherryShot");
				}
				return resolvestate(null);
			}
			Goto Preparing;
		SpreadShot:
			RMOT E 0
			{
				seedangleerror = frandom(-3.5,3.5);
			}
			RMOT E 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_FaceTarget();
			}
			RMOT G 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			RMOT H 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-15-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT H 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-11-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT I 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-7-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT I 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-3-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT J 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(3-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT J 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(7-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT K 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(11-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT K 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(15-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT K 0
			{
				if (health > ((SpawnHealth() + Stamina) * 0.5)) return resolvestate("SpreadEnd");
				return resolvestate(null);
			}
		SpreadExtra:
			RMOT K 0
			{
				seedangleerror = frandom(-3.5,3.5);
			}
			RMOT K 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(15-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT K 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(11-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT J 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(7-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT J 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(3-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT I 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-3-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT I 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-7-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT H 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-11-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT H 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_SpawnProjectile("SeedBall",48,0,(-15-seedangleerror));
				A_RoseMotherResetSpreadErrorMid();
			}
			RMOT G 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			RMOT E 4 
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
				A_FaceTarget();
			}
			Goto Preparing;
		SpreadEnd:
			RMOT L 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			RMOT F 4
			{
				if (skill == 0) A_SetTics(6);
				if (skill == 1) A_SetTics(5);
				if (skill == 2) A_SetTics(4);
				if (skill == 3) A_SetTics(3);
				if (skill == 4) A_SetTics(2);
			}
			Goto Preparing;
		Pain:
			RMOT X 0 A_DynamicMusic();
			RMOT X 8 A_EEPain();
			RMOT E 4 A_Jump(128,"Missile");
			Goto Preparing;
		Death:
			RMOT X 0 A_DynamicMusic();
			RMOT X 0 A_Scream();
			RMOT XXXXXXXXXXXX 7 bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			RMOT Y 10 A_NoBlocking();
			RMOT Z 10;
			RMOT Z 0 A_DDAFDOrigBossDie();
			RMOT Z -1;
			Stop;
		Raise:
			RMOT ZYX 10;
			RMOT FEDCBA 6;
			goto Spawn;
	}
}

class BossBoom : EEProjectile
{
	default
	{
		radius 10;
		height 12;
		damage 0;
		speed 0;
		renderstyle "Add";
		Alpha 0.80;
		Projectile;
		+NOCLIP
		+DONTSPLASH
		+SPAWNSOUNDSOURCE
	}
	
	states
	{
		Spawn:
			TNT1 A 1 A_Die();
		Death:
			FSPE ABCDE 5 Bright ;
			stop;
	}
}

//GAME MOTHER
class GameMother : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 2000;
		Radius 24;
		Height 96;
		Speed 18;
		PainChance 200;
		Painchance "Breakfast", 64;
		Mass 5000;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		DamageFactor "DashingBG", 4.6125;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 4.6125;
		PainChance "DashingSD", 255;
		MeleeRange 80;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		MissileType "FastCroquetBall";
		Obituary "%o was trampled by Game Mother.";
		Tag "Game Mother";
		painsound "mother/pain";
	}
	
	override void Tick()
	{
		if (InStateSequence(curstate,ResolveState("Idle")) ||
				InStateSequence(curstate,ResolveState("Missile")) ||
				InStateSequence(curstate,ResolveState("MissileSpread"))) 
		{
			A_StartSound("GameMother/Galloping",223,CHANF_NOSTOP,frandom(1.5,2.5),ATTN_NORM,frandom(0.875,1.125));
		}
		else 
		{
			A_StopSound(223);
		}
		
		super.Tick();
	}
	
	States
	{
		Spawn:
			CNST A 10 A_Look();
			Loop;
		See:
			CNST A 10
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(111,0,0,0,0);
			}
			CMOT J 10;
			CMOT ATUVATUV 7;
			Goto Idle;
		Idle:
			CMOT B 0 A_DynamicMusic();
			CMOT BBCCDDEE 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CMOT F 0 A_DynamicMusic();
			CMOT F 0 A_Jump(128,"MissileSpread");
			CMOT FFGG 2 A_Recoil(-4);
			CMOT H 0 A_FaceTarget();
			CMOT H 0 A_StartSound("MalletHit",CHAN_BODY);
			CMOT H 0 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				A_CustomComboAttack("FastCroquetBall", 32, (dmg), "mallethit");
			}
			CMOT HHII 3 A_Recoil(-4);
			Goto Idle;
		MissileSpread:
			CMOT J 4 A_DynamicMusic();
			CMOT KLM 4 A_FaceTarget();
			CMOT N 0 A_StartSound("Weapons/cherryboom",CHAN_BODY);
			CMOT N 0 A_SpawnProjectile("BadCherryBomb",40,0,random(-12,12),0,random(-5,-15));
			CMOT N 4 A_SpawnProjectile("BadCherryBomb",40,0,random(-12,12),0,random(-5,-15));
			CMOT O 0 A_SpawnProjectile("FastCroquetBall",40,0,random(-12,12));
			CMOT O 0 A_SpawnProjectile("FastCroquetBall",40,0,random(-12,12));
			CMOT O 4 Bright A_SpawnProjectile("FastCroquetBall",48,0,0,0);
			CMOT P 0 A_Jump(127,2);
			CMOT P 0 A_SpawnItemEX("MalletAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			CMOT P 4 Bright;
			Goto Idle;
		Pain:
			CMOT X 0 A_DynamicMusic();
			CMOT X 6 A_EEPain();
			CMOT X 3; //A_DynamicMusic();
			Goto Idle;
		Death:
			CMOT X 0 A_DynamicMusic();
			CMOT X 0 A_Scream();
			CMOT X 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_GameMother)
					{
						MiscItem.DD_GameMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			CMOT XXXXXXXXXXXX 7 
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			CMOT X 0 Bright A_NoBlocking();
			CMOT X 0 A_DDAFDOrigBossDie();
			Stop;
	}
}

class GameMotherClone : GameMother
{
	default
	{
		//$Category EE Bosses
		Health 2000;
		Radius 24;
		Height 96;
		ProjectilePassHeight 136;
		Speed 18;
		PainChance 50; // 200
		Painchance "Breakfast", 64;
		Mass 5000;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 0;
		PainChance "Bap", 0;
		MeleeRange 80;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		MissileType "FastCroquetBall";
		Obituary "%o was trampled by a clone of Game Mother.";
		Tag "Game Mother (Clone)";
		painsound "mother/pain";
	}
	
	States
	{
		Spawn:
			CNST A 5 A_Look();
			Loop;
		See:
			CMOT AA 2;
			CMOT ATUVATUV 3;
			Goto Idle;
		Idle:
			CMOT B 0 A_DynamicMusic();
			CMOT BBCCDDEE 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CMOT F 0 A_DynamicMusic();
			CMOT F 0 A_Jump(128,"MissileSpread");
			CMOT FFGG 2 A_Recoil(-4);
			CMOT H 0 
			{
				A_FaceTarget();
				A_StartSound("MalletHit",CHAN_BODY);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);

				A_CustomComboAttack("FastCroquetBall", 32, (dmg), "mallethit");
			}
			CMOT HHII 3 A_Recoil(-4);
			Goto Idle;
		MissileSpread:
			CMOT J 4 A_DynamicMusic();
			CMOT KLM 4 A_FaceTarget();
			CMOT N 0 A_StartSound("Weapons/cherryboom",CHAN_BODY);
			CMOT N 0 A_SpawnProjectile("BadCherryBomb",40,0,random(-12,12),0,random(-5,-15));
			CMOT N 4 A_SpawnProjectile("BadCherryBomb",40,0,random(-12,12),0,random(-5,-15));
			CMOT O 0 A_SpawnProjectile("FastCroquetBall",40,0,random(-12,12));
			CMOT O 0 A_SpawnProjectile("FastCroquetBall",40,0,random(-12,12));
			CMOT O 4 Bright A_SpawnProjectile("FastCroquetBall",48,0,0,0);
			CMOT P 0 A_Jump(127,2);
			CMOT P 0 A_SpawnItemEX("MalletAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			CMOT P 4 Bright;
			Goto Idle;
		Pain:
			CMOT X 0 A_DynamicMusic();
			CMOT X 6 A_EEPain();
			CMOT X 3; //A_DynamicMusic();
			Goto Idle;
		Death:
			CMOT X 0;
			CMOT X 0 A_Scream();
			CMOT XXXXXXXXXXXX 7 
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			CMOT X 0 Bright A_NoBlocking();
			CMOT X 0 A_DDAFDOrigBossDie();
			Stop;
	}
}

class FastCroquetBall : CroquetBall
{
	default
	{
		Speed 25;
		Damage 5;
	}
}

//GLOBE MOTHER
class GlobeMotherSpawner : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Height 64;
		Radius 24;
		Mass 0x7fffffff;
		Health 1500;
		PainChance 200;
		DamageFactor "Fire", 0.25;
		DamageFactor "CherryBomb", 0.25;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "BRocket", 0.25;
		Damagefactor "Zap", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Speed 12;
		Monster;
		+NOGRAVITY
		+FLOAT
		+NOBLOOD
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+LOOKALLAROUND
	}
	
	States
	{
		Spawn:
			SUNG A 0 A_SetInvulnerable();
			SUNG ABC 5 Bright A_Look();
			Loop;
		See:
			SUNG A 0 A_DynamicMusic();
			SUNG ABC 5 bright;
			GMOT EFGHFGH 5 bright;
			GMOT I 20 bright;
			GMOT I 0 A_Die();
			Goto Death;
		Death:
			TNT1 A 1 A_SpawnITemEX("GlobeMother",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,250);
			Stop;
	}
}

class GlobeMother : EECreature // Dragon
{
	default
	{
		//$Category EE Bosses
		Height 64;
		Radius 24;
		Mass 0x7fffffff;
		Health 1500;
		PainChance 256;
		DamageFactor "Fire", 0.25;
		DamageFactor "CherryBomb", 0.25;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "BRocket", 0.25;
		Damagefactor "Zap", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Speed 12;
		Monster;
		+NOGRAVITY
		+FLOAT
		+NOBLOOD
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+LOOKALLAROUND
		PainSound "Mother/Pain";
		Tag "Globe Mother";
		Obituary "%o was knocked into orbit by Globe Mother.";
	}
	
	States
	{
		Spawn:
			GMOT ABC 5 Bright A_Look();
			Loop;
		See:
			GMOT ABC 5 bright;
			GMOT A 5 bright A_DragonInitFlight();
			GMOT B 5 bright A_SpawnProjectile("StarBall",random(0,40),random(-32,32));
			GMOT A 0 A_DynamicMusic();
			GMOT BCCAABBCCAAB 5 bright A_DragonFlight();
			GMOT A 0 A_DynamicMusic();
			Goto See+4;
		Pain:
			GMOT A 0 A_DynamicMusic();
			GMOT D 10 bright A_DragonPain();
			Goto See+4;
		Missile:
			GMOT I 0 A_DynamicMusic();
			GMOT I 8 bright;
			GMOT FGH 8 bright A_DragonAttack();
			Goto See+4;
		Death:
			GMOT D 0 A_DynamicMusic();
			GMOT D 5 bright A_Scream();
			GMOT D 4 bright A_NoBlocking();
			GMOT D 4 bright A_DragonCheckCrash();
			Wait;
		Crash:
			GMOT F 0 A_DynamicMusic();
			GMOT F 0 A_Scream();
			GMOT F 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_GlobeMother)
					{
						MiscItem.DD_GlobeMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			GMOT FFFFFFFFFFFF 7 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-32,32),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			GMOT F 0 Bright A_NoBlocking();
			GMOT F 0 A_DDAFDOrigBossDie();
			Stop;
	}
}

// TO BE MADE: Less restricted GlobeMother for EE play >.>
class GlobeMotherClone : GlobeMother
{
}

//StarBall
class StarBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 8;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		+SEEKERMISSILE
		+ROCKETTRAIL
		+NOEXTREMEDEATH
		Projectile;
		DontHurtShooter;
		RenderStyle "Add";
		SeeSound "Weapons/RocketFire";
		DeathSound "virtuoso/musichit";
		ExplosionDamage 64;
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			GMBL A 2 Bright A_SeekerMissile (10,20,SMF_LOOK);
			GMBL BCD 2 Bright ;
			Loop;
		Death:
			SPNR C 4 Bright A_Explode();
			SPNR DEFG 4 Bright;
			Stop;
	}
}

//MeteorBall
class MeteorBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		+ROCKETTRAIL
		+NOEXTREMEDEATH
		Projectile;
		DontHurtShooter;
		renderstyle "Normal";
		SeeSound "Weapons/RocketFire";
		DeathSound "weapons/cherryboom";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			GMMT ABCD 2 Bright;
			Loop;
		Death:
			FSPE A 3 Bright;
			FSPE B 3 Bright A_Explode();
			FSPE C 3 Bright;
			FSPE DE 3 Bright;
			Stop;
	}
}

//MOSS MOTHER
class RiseCheck : Inventory
{
	default
	{
		Inventory.MaxAmount 1;
	}
}

class MossMother : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 1500;
		Speed 10;
		Radius 16;
		Height 64;
		PainChance 200;
		Mass 1400;
		Scale 2;
		DamageFactor "Boiling", 0;
		DamageFactor "Fire", 0.1;
		DamageFactor "CherryBomb", 0.1;
		DamageFactor "Spinner", 0.1;
		DamageFactor "Popper", 0.1;
		DamageFactor "BRocket", 0.1;
		DamageFactor "Ice", 10;
		DamageFactor "Zap", 3;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		DamageFactor "DashingBG", 4.6125;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 4.6125;
		PainChance "DashingSD", 255;
		Monster;
		painsound "mother/pain";
		+FLOORCLIP;
		+LOOKALLAROUND;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+NORADIUSDMG;
		Obituary "Moss Mother eventually grew on %o.";
		Tag "Moss Mother";
	}
	
	States
	{
		Spawn:
			MMRS D 0 A_Look();
			TNT1 A 0 A_SetInvulnerable();
			TNT1 A 1 A_Look();
			Goto Spawn+1;
		See:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 
			{
				if (A_JumpIfInventory("RiseCheck",1,"Walk")) return resolvestate("Walk");
				A_GiveInventory("RiseCheck",1);
				A_UnsetInvulnerable();
				A_SetShootable();
				return resolvestate(null);
			}
			MMRS DC 4;
			MMRS CD 4;
			Loop;
		Walk:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_SetInvulnerable();
			}
			TNT1 AA 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			TNT1 A 0 A_Jump(8,"PeekUp");
			Loop;
		PeekUp:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_UnsetInvulnerable();
			}
			MMRS DC 6;
			MMRS C 6 A_SpawnProjectile("mossball",40,0,random(-8,8));
			MMRS CD 6;
			Goto Walk;
		Melee:
		Missile:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_UnsetInvulnerable();
			}
			MMRS DCBA 4 A_SpawnProjectile("Geyserball",40,random(-32,32),0,0,random(0,10));
			MMAT ABC 4 A_FaceTarget();
			MMAT D 0 A_SpawnProjectile("mossballmini",40,0,random(-8,8));
			MMAT D 0 A_SpawnProjectile("mossballmini",40,0,random(-8,8));
			MMAT D 4 A_SpawnProjectile("mossball",40,0,random(-8,8));
			MMAT EFG 4 A_FaceTarget();
			MMAT H 0 A_SpawnProjectile("mossballmini",40,0,random(-8,8));
			MMAT H 0 A_SpawnProjectile("mossballmini",40,0,random(-8,8));
			MMAT H 4 A_SpawnProjectile("mossball",40,0,random(-8,8));
			MMRS ABCD 2;
			Goto Walk;
		Pain:
			TNT1 A 0 A_DynamicMusic();
			MMDM X 6 A_EEPain();
			MMRS CD 4;
			Goto See;
		Death:
			MMDM X 0 A_DynamicMusic();
			MMDM X 0 A_Scream();
			MMDM X 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_MossMother) 
					{
						MiscItem.DD_MossMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			MMDM XXXXXXXXXXXX 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			MMDM Y 10 A_NoBlocking();
			MMDM Z 10;
			Stop;
		Raise:
			MMRS DC 4;
			Goto See;
	}
}

class MossMotherClone : MossMother
{
	default
	{
		//$Category EE Bosses
		Health 1500; // 1500
		Speed 10; // 10
		Radius 32; // 16
		Height 64;
		ProjectilePassHeight 118; // default for at her "tallest" frame [59px * 2.0 scale]
		PainChance 50; // 200
		Mass 7000; // 1400
		Scale 2;
		DamageFactor 0.8;
		DamageFactor "Boiling", 0;
		Painchance "Boiling", 0;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "CherryBomb", 0.1;
		Painchance "CherryBomb", 5;
		DamageFactor "Spinner", 0.1;
		Painchance "Spinner", 5;
		DamageFactor "Popper", 0.1;
		Painchance "Popper", 5;
		DamageFactor "BRocket", 0.1;
		Painchance "BRocket", 5;
		DamageFactor "Ice", 10;
		Painchance "Ice", 255;
		DamageFactor "Zap", 3;
		Painchance "Zap", 150;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
		DamageFactor "Bap", 1;
		PainChance "Bap", 13;
		DamageFactor "DashingBG", 4.6125;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 4.6125;
		PainChance "DashingSD", 255;
		Monster;
		painsound "mother/pain";
		+FLOORCLIP;
		+LOOKALLAROUND;
		+NOTARGET;
		+NOINFIGHTING;
		+NOBLOOD;
		+NORADIUSDMG;
		Obituary "A clone of Moss Mother eventually grew on %o.";
		Tag "Moss Mother (Clone)";
	}
	
	States
	{
		Spawn:
			MMRS D 0 A_Look();
			TNT1 A 1
			{
				ProjectilePassHeight = frandom(0,1);
				A_UnsetShootable();
				A_SetInvulnerable();
				A_Look();
			}
			Goto Spawn+1;
		See:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0
			{
				if (A_JumpIfInventory("RiseCheck",1,"Walk")) return resolvestate("Walk");
				A_GiveInventory("RiseCheck",1);
				A_UnsetInvulnerable();
				A_SetShootable();
				return resolvestate(null);
			}
			MMRS D 4
			{
				ProjectilePassHeight = frandom(26,30);
			}
			MMRS C 4
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS C 4
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS D 4
			{
				ProjectilePassHeight = frandom(26,30);
			}
			Loop;
		Walk:
			TNT1 A 0
			{
				A_DynamicMusic();
				ProjectilePassHeight = frandom(0,1);
				A_UnsetShootable();
				A_SetInvulnerable();
			}
			TNT1 AA 2 
			{
				ProjectilePassHeight = frandom(0,1);
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_Jump(8,"PeekUp");
			Loop;
		PeekUp:
			TNT1 A 0
			{
				A_DynamicMusic();
				ProjectilePassHeight = frandom(0,1);
				A_UnsetInvulnerable();
				A_SetShootable();
			}
			MMRS D 6
			{
				ProjectilePassHeight = frandom(26,30);
			}
			MMRS C 6
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS C 6 
			{
				if (A_JumpIfTargetInLOS(1, 90.0)) 
				{
					ProjectilePassHeight = frandom(54,58);
					A_SpawnProjectile("mossball",40,0,random(-8,8));
				}
				else
				{
					A_SetTics(0);
				}
			}
			MMRS C 6
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS D 6
			{
				ProjectilePassHeight = frandom(26,30);
			}
			Goto Walk;
		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				ProjectilePassHeight = frandom(0,1);
				A_UnsetInvulnerable();
				A_SetShootable();
			}
			MMRS DCBA 4 
			{
				ProjectilePassHeight = frandom(110,114);
				A_SpawnProjectile("Geyserball",40,random(-32,32),0,0,random(0,10));
			}
			MMAT ABC 4 
			{
				ProjectilePassHeight = frandom(110,114);
				A_FaceTarget();
			}
			MMAT D 4
			{
				ProjectilePassHeight = frandom(110,114);
				A_SpawnProjectile("mossballmini",40,0,random(-8,8));
				A_SpawnProjectile("mossballmini",40,0,random(-8,8));
				A_SpawnProjectile("mossball",40,0,random(-8,8));
			}
			MMAT EFG 4 
			{
				ProjectilePassHeight = frandom(110,114);
				A_FaceTarget();
			}
			MMAT H 4
			{
				ProjectilePassHeight = frandom(110,114);
				A_SpawnProjectile("mossballmini",40,0,random(-8,8));
				A_SpawnProjectile("mossballmini",40,0,random(-8,8));
				A_SpawnProjectile("mossball",40,0,random(-8,8));
			}
			MMRS A 2
			{
				ProjectilePassHeight = frandom(110,114);
			}
			MMRS B 2
			{
				ProjectilePassHeight = frandom(82,86);
			}
			MMRS C 2
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS D 2
			{
				ProjectilePassHeight = frandom(26,30);
			}
			Goto Walk;
		Pain:
			TNT1 A 0 A_DynamicMusic();
			MMDM X 6 
			{
				A_EEPain();
			}
			MMRS C 4
			{
				ProjectilePassHeight = frandom(54,58);
			}
			MMRS D 4
			{
				ProjectilePassHeight = frandom(26,30);
			}
			Goto See;
		Death:
			MMDM X 0 A_Scream();
			MMDM XXXXXXXXXXXX 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			MMDM Y 10 A_NoBlocking();
			MMDM Z 10;
			Stop;
	}
}

class MossBall : JellyBall
{
	default
	{
		Speed 12;
		Damage 4;
		renderstyle "Normal";
		+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			SBAL ABC 2;
			Loop;
		Death:
			WBUX A 4 BRIGHT;
			WBUX BC 4 BRIGHT;
			Stop;
	}
}

class MossballMini : Mossball
{
	default
	{
		Speed 8;
		Damage 2;
		Scale 0.5;
	}
}

//SPHINX MOTHER
class SphinxMother : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 1500;
		Radius 20;
		Height 56;
		Speed 20;
		Mass 500;
		MaxDropOffHeight 64;
		MeleeRange 80;
		MeleeThreshold 128;
		PainChance 200;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 96;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 96;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 96;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 96;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 96;
		DamageFactor "Suck", 0;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		DamageFactor "DashingBG", 4.6125;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 4.6125;
		PainChance "DashingSD", 255;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+MISSILEMORE
		+MISSILEEVENMORE
		painsound "mother/pain";
		Obituary "%o was baffled and devoured by Sphinx Mother.";
		Tag "Sphinx Mother";
	}
	States
	{
		Spawn:
			SMOT K 2 A_Look();
			Loop;
		See:
			SMOT K 1 A_DynamicMusic();
			SMOT K 0 A_StartSound("sphinx/pounce",CHAN_VOICE);
			SMOT KKLMKKKLMK 3;
			Goto Pounce;
		Idle:
			TNT1 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			SMOT A 0 A_DynamicMusic();
			SMOT AABBCCDD 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			SMOT A 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.4666667),"TakeOff",0);
			SMOT A 0;
			Loop;
		Missile:
			SMOT F 0 A_Jump(96,"Pounce");
			SMOT F 4 A_DynamicMusic();
			SMOT GHH 5 A_FaceTarget();
			SMOT J 0 A_StartSound("galgoyle/fire",CHAN_BODY);
			SMOT I 4 bright A_SpawnProjectile("SphinxBall1",48,0);
			SMOT I 0 bright A_SpawnProjectile("SphinxBall2",48,0,random(0,4));
			SMOT I 4 bright A_SpawnProjectile("SphinxBall2",48,0,random(0,-4));
			SMOT J 4 bright A_SpawnProjectile("SphinxBall1",48,0);
			SMOT J 0 bright A_SpawnProjectile("SphinxBall2",48,0,random(0,4));
			SMOT J 4 bright A_SpawnProjectile("SphinxBall2",48,0,random(0,-4));
			SMOT KKLMK 3;
			Goto Idle;
		Melee:
		Pounce:
			TNT1 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_StartSound("sphinx/pounce",CHAN_VOICE);
			}
			SMOT F 0 A_DynamicMusic();
			SMOT F 4 A_Facetarget();
			SMOT N 0 ThrustThingz (0, 27, 0, 0);
			SMOT N 0 ThrustThing (angle*256/360, 27, 0, 0);
			SMOT NNNN 2 
			{
				int dmg = A_CalcDamageFormula2(random(10,15),0.025,random(5,10),0.02,random(5,10),0.01,0.01);
				A_CustomMeleeAttack(dmg, "mallethit", " ", "", 1);
			}
			SMOT F 5 
			{
				int dmg = A_CalcDamageFormula2(random(10,15),0.025,random(5,10),0.02,random(5,10),0.01,0.01);
				A_CustomMeleeAttack(dmg, "mallethit", " ", "", 1);
			}
			Goto Idle;
		Takeoff: 
			SMOF A 0 A_DynamicMusic();
			TNT1 A 0 A_JumpIf( pos.z + height + 64 >= CeilingZ, "Idle");
			TNT1 A 0 
			{
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
			}
			Goto Fly;
		Fly:
			SMOF E 0 ThrustThingZ(0,15,0,0);
			SMOF AABBCCDD 2 A_EEChase(null,"MissileF",0,1,3,1,1);
			Goto Hover;
		MissileF:
			SMOF A 0 A_DynamicMusic();
			SMOF A 0 A_FaceTarget();
			SMOF A 0 A_Recoil(-4);
			SMOF E 0 A_StartSound("galgoyle/fire",CHAN_BODY);
			SMOF E 4 bright A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			SMOF B 4 bright A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			SMOF G 4 bright A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			SMOF D 4 A_Stop();
			goto Land;
		Land:
			SMOF AA 4 ThrustThingZ(0,-20,0,0);
			SMOF E 1 A_CheckFloor("Idle");
			SMOF E 0 A_StartSound("galgoyle/fire",CHAN_BODY);
			SMOF E 4 bright A_SpawnProjectile("SphinxBall1",16,0,random(-9,9));
			SMOF BCD 4;
			SMOF E 1 A_CheckFloor("Idle");
			Goto Hover;
		Hover:
			SMOF AABBCCDD 2 A_EEChase(null,"MissileF",0,1,3,1,1);
			SMOF A 0 A_Jump(64,"Fly");
			SMOF A 0 A_Jump(32,"Land");
			Loop;
		Pain:
			TNT1 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			SMOT E 6 A_EEPain();
			SMOT F 3; //A_DynamicMusic();
			Goto Idle;
		Death:
			TNT1 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			SMOT E 0 A_DynamicMusic();
			SMOT E 0 A_Scream();
			SMOT E 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_SphinxMother)
					{
						MiscItem.DD_SphinxMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			SMOT EEEEEEEEEEEE 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 10 A_NoBlocking();
			TNT1 A 10
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(198,0,0,0,0);
			}
			Stop;
	}
}

class SphinxMotherClone : SphinxMother
{
	default
	{
		//$Category EE Bosses
		Health 1500;
		Radius 20;
		Height 56;
		ProjectilePassHeight 56;
		Speed 20;
		Mass 500;
		MaxDropOffHeight 64;
		MeleeRange 80;
		MeleeThreshold 128;
		PainChance 50; // 200
		DamageFactor "Bonk", 0.5;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 96;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 96;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 96;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 96;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 96;
		DamageFactor "Suck", 0;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 64;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		DamageFactor "DashingBG", 4.6125;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 4.6125;
		PainChance "DashingSD", 255;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+MISSILEMORE
		+MISSILEEVENMORE
		painsound "mother/pain";
		Obituary "%o was baffled and devoured by a clone of Sphinx Mother.";
		Tag "Sphinx Mother (Clone)";
	}
	States
	{
		Spawn:
			SMOT K 2 NoDelay
			{
				ProjectilePassHeight = 56;
				A_Look();
			}
			Loop;
		See:
			SMOT K 1
			{
				A_DynamicMusic();
				ProjectilePassHeight = 56;
			}
			SMOT K 0 A_StartSound("sphinx/pounce",CHAN_VOICE);
			SMOT KKLMKKKLMK 3
			{
				ProjectilePassHeight = 56;
			}
			Goto Pounce;
		Idle:
			TNT1 A 0 
			{
				ProjectilePassHeight = 56;
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_DynamicMusic();
			}
			SMOT AABBCCDD 2 
			{
				ProjectilePassHeight = 56;
				if (random(1,256) <= 192) A_EEChase("Melee","Missile",0,1,3,1,1);
														 else A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			SMOT A 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.4666667),"TakeOff",0);
			SMOT A 0;
			Loop;
		Missile:
			SMOT F 0 A_Jump(96,"Pounce");
			SMOT F 4
			{
				A_DynamicMusic();
				ProjectilePassHeight = 56;
			}
			SMOT GHH 5 
			{
				ProjectilePassHeight = 56;
				A_FaceTarget();
			}
			SMOT I 4 bright 
			{
				ProjectilePassHeight = 56;
				A_StartSound("galgoyle/fire",CHAN_BODY);
				A_SpawnProjectile("SphinxBall1",48,0);
			}
			SMOT I 4 bright 
			{
				ProjectilePassHeight = 56;
				A_SpawnProjectile("SphinxBall2",48,0,random(0,4));
				A_SpawnProjectile("SphinxBall2",48,0,random(0,-4));
			}
			SMOT J 4 bright
			{
				ProjectilePassHeight = 56;
				A_SpawnProjectile("SphinxBall1",48,0);
			}
			SMOT J 4 bright 
			{
				ProjectilePassHeight = 56;
				A_SpawnProjectile("SphinxBall2",48,0,random(0,4));
				A_SpawnProjectile("SphinxBall2",48,0,random(0,-4));
			}
			SMOT KKLMK 3;
			Goto Idle;
		Melee:
		Pounce:
			TNT1 A 0 
			{
				ProjectilePassHeight = 56;
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_StartSound("sphinx/pounce",CHAN_VOICE);
			}
			SMOT F 0;
			SMOT F 4 
			{
				ProjectilePassHeight = 56;
				A_Facetarget();
			}
			SMOT N 0 
			{
				ProjectilePassHeight = 48;
				ThrustThingz (0, 27, 0, 0);
				ThrustThing (angle*256/360, 27, 0, 0);
			}
			SMOT NNNN 2 
			{
				ProjectilePassHeight = 48;
				int dmg = A_CalcDamageFormula2(random(10,15),0.025,random(5,10),0.02,random(5,10),0.01,0.01);
				A_CustomMeleeAttack(dmg, "mallethit", " ", "", 1);
			}
			SMOT F 5 
			{
				ProjectilePassHeight = 56;
				int dmg = A_CalcDamageFormula2(random(10,15),0.025,random(5,10),0.02,random(5,10),0.01,0.01);
				A_CustomMeleeAttack(dmg, "mallethit", " ", "", 1);
			}
			Goto Idle;
		Takeoff:
			TNT1 A 0 A_DynamicMusic(); 
			TNT1 A 0 A_JumpIf( pos.z + height + 64 >= CeilingZ, "Idle");
			TNT1 A 0 
			{
				ProjectilePassHeight = 48;
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
			}
			Goto Fly;
		Fly:
			SMOF E 0 
			{
				ProjectilePassHeight = 48;
				ThrustThingZ(0,15,0,0);
			}
			SMOF AABBCCDD 2 
			{
				ProjectilePassHeight = 48;
				if (random(1,256) <= 192) A_EEChase(null,"MissileF",0,1,3,1,1);
														 else A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			Goto Hover;
		MissileF:
			SMOF A 0
			{
				A_DynamicMusic();
				ProjectilePassHeight = 48;
				A_FaceTarget();
				A_Recoil(-4);
			}
			SMOF E 4 bright
			{
				ProjectilePassHeight = 48;
				A_StartSound("galgoyle/fire",CHAN_BODY);
				A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			}
			SMOF B 4 bright
			{
				ProjectilePassHeight = 48;
				A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			}
			SMOF G 4 bright 
			{
				ProjectilePassHeight = 48;
				A_SpawnProjectile("SphinxBall2",16,0,random(-9,9));
			}
			SMOF D 4 
			{
				ProjectilePassHeight = 48;
				A_Stop();
			}
			goto Land;
		Land:
			SMOF AA 4 
			{
				ProjectilePassHeight = 48;
				ThrustThingZ(0,-20,0,0);
			}
			SMOF E 1 
			{
				ProjectilePassHeight = 48;
				A_CheckFloor("Idle");
			}
			SMOF E 0 
			{
				ProjectilePassHeight = 48;
				A_StartSound("galgoyle/fire",CHAN_BODY);
			}
			SMOF E 4 bright 
			{
				ProjectilePassHeight = 48;
				A_SpawnProjectile("SphinxBall1",16,0,random(-9,9));
			}
			SMOF BCD 4
			{
				ProjectilePassHeight = 48;
			}
			SMOF E 1 
			{
				ProjectilePassHeight = 48;
				A_CheckFloor("Idle");
			}
			Goto Hover;
		Hover:
			SMOF AABBCCDD 2 
			{
				ProjectilePassHeight = 48;
				if (random(1,256) <= 192) A_EEChase(null,"MissileF",0,1,3,1,1);
														 else A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			SMOF A 0 A_Jump(64,"Fly");
			SMOF A 0 A_Jump(32,"Land");
			Loop;
		Pain:
			TNT1 A 0 
			{
				ProjectilePassHeight = 56;
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			SMOT E 6 
			{
				ProjectilePassHeight = 56;
				A_EEPain();
			}
			SMOT F 3
			{
				//A_DynamicMusic();
				ProjectilePassHeight = 56;
			}
			Goto Idle;
		Death:
			TNT1 A 0 
			{
				ProjectilePassHeight = 56;
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
			}
			SMOT E 0 A_Scream();
			SMOT EEEEEEEEEEEE 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 10 A_NoBlocking();
			TNT1 A 10
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(198,0,0,0,0);
			}
			Stop;
	}
}

class SphinxBall1 : Musicball
{
	default
	{
		DamageFunction (finaldamagedealt);
		Speed 30;
		PoisonDamage 16;
		DamageType "Beats";
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NOEXTREMEDEATH;
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(16,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(16,0.005,5,0.334,2,0.1667,0.005);
	}

	States
	{
		Spawn:
			GBAL AB 4;
			Loop;
		Death:
			BROX B 4 Bright;
			BROX CDE 4 Bright;
			Stop;
	}
}

class SphinxBall2 : Musicball
{
	default
	{
		DamageFunction (finaldamagedealt);
		Speed 30;
		Scale 0.5;
		PoisonDamage 8;
		DamageType "Beats";
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(8,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(8,0.005,5,0.334,2,0.1667,0.005);
	}

	States
	{
		Spawn:
			GBAL AB 4;
			Loop;
		Death:
			BROX B 4 Bright;
			BROX CDE 4 Bright;
			Stop;
	}
}

//HANDMOTHER
class HandMother : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Radius 24;
		Height 128;
		Tag "HandMother (Prop)";
	}
	
	States
	{
		Spawn:
			BMOT YZ 20;
			Loop;
	}
}

class HandMotherTeleport : EEBaseZSC
{
	default
	{
		Radius 24;
		Height 128;
		Tag "HandMother (Teleport)";
	}
	
	States
	{
		Spawn:
			BMTX A 0 A_StartSound("misc/teledd");
			BMTX ABCD 3 Bright;
			stop;
	}
}

class HandMotherVac : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 1500;
		Radius 24;
		Height 128;
		Speed 12;
		PainChance 200;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		DamageFactor "Beats", 0.25;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		Mass 5000;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by Handmother.";
		Tag "HandMother (Vacuum)";
		painsound "mother/pain";
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
	}
	
	States
	{
		Spawn:
			BMOT YYYYZZZZ 5 A_Look();
			Loop;
		See:
			BMOT A 0 A_DynamicMusic();
			BMOT E 20;
			Goto Idle;
		Idle:
			BMOT A 0 A_DynamicMusic();
			BMOT AABBCCDD 3 
			{
				A_HandMotherChase();
			}
			Loop;
		Missile:
			BMOT E 0 A_DynamicMusic();
			BMOT E 0 A_Jump(96,"MissileCherry");
			BMOT E 8;
			BMOT G 0 A_StartSound("Handmother/Vacon",CHAN_BODY);
			BMOT GHIJGHIJGHIJKLMNKLMNKLMNKLMN 1 A_FaceTarget();
			BMOT O 0 A_StartSound("Weapons/spinnerfire");
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT P 6 A_SpawnProjectile("BigDustBall",80,0,0);
			BMOT Q 7 A_StartSound("Handmother/Vacoff",CHAN_BODY);
			Goto Idle;
		MissileCherry:
			BMOT R 0 A_DynamicMusic();
			BMOT R 7 A_FaceTarget();
			BMOT S 5 A_CheckSight("idle");
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
			BMOT T 7 A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
			Goto Missile+3;
		Melee:
			BMOT T 0 A_DynamicMusic();
			BMOT T 7 A_FaceTarget();
			BMOT V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMOT V 3;
			Goto Idle;
		Pain:
			BMOT U 0 A_DynamicMusic();
			BMOT U 4 A_EEPain();
			BMOT V 6;
			BMOT V 0 A_Jump(208,"Idle");
			Goto MissileCherry+4;
		Death:
			BMOT U 0 A_DynamicMusic();
			BMOT U 0 A_Scream();
			SMOT E 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem) 
					{
						if (!MiscItem.DD_HandMother1)
						{
							MiscItem.DD_HandMother1 += 1;
							A_PrintPowerupDDTNoRPG();
						}
						else
						{
							if (!MiscItem.DD_HandMother2) 
							{
								MiscItem.DD_HandMother2 += 1;
								A_PrintPowerupDDTNoRPG();
							}
						}
					}
				}
			}
			BMOT UVUUVUVVUVUU 7 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMOX A 7 A_NoBlocking();
			BMOX BCABCABC 7;
			BMOX C 0 A_DynamicMusic();
			BMOX DEFDEFDEFDEF 7;
			BMOX F 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(113,0,0,0,0);
			}
			BMOX F 0 A_StartSound("misc/teledd");
			BMTX EFGH 3 Bright;
			Stop;
	}
}

class HandMotherVacClone : HandMotherVac
{
	default
	{
		//$Category EE Bosses
		Health 1500;
		Radius 24;
		Height 128;
		Speed 12;
		PainChance 50; // 200
		ProjectilePassHeight 144;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		DamageFactor "Beats", 0.25;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		Mass 25000;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by a clone of the HandMother.";
		Tag "HandMother (Vacuum) (clone)";
		painsound "mother/pain";
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
	}
	
	States
	{
		Spawn:
			BMOT YYYYZZZZ 5 A_Look();
			Loop;
		See:
			BMOT A 0 A_DynamicMusic();
			BMOT E 20;
			Goto Idle;
		Idle:
			BMOT A 0 A_DynamicMusic();
			BMOT AABBCCDD 3
			{
				A_HandMotherChase();
			}
			Loop;
		Missile:
			BMOT E 0 A_DynamicMusic();
			BMOT E 0 A_Jump(96,"MissileCherry");
			BMOT E 8;
			BMOT G 0 A_StartSound("Handmother/Vacon",CHAN_BODY);
			BMOT GHIJGHIJGHIJKLMNKLMNKLMNKLMN 1 A_FaceTarget();
			BMOT O 0 A_StartSound("Weapons/spinnerfire");
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT P 6 A_SpawnProjectile("BigDustBall",80,0,0);
			BMOT Q 7 A_StartSound("Handmother/Vacoff",CHAN_BODY);
			Goto Idle;
		MissileCherry:
			BMOT R 0 A_DynamicMusic();
			BMOT R 7 A_FaceTarget();
			BMOT S 5 A_CheckSight("idle");
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
			BMOT T 7 A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
			Goto Missile+3;
		Melee:
			BMOT T 0 A_DynamicMusic();
			BMOT T 7 A_FaceTarget();
			BMOT V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMOT V 3;
			Goto Idle;
		Pain:
			BMOT U 0 A_DynamicMusic();
			BMOT U 4 A_EEPain();
			BMOT V 6;
			BMOT V 0 A_Jump(208,"Idle");
			Goto MissileCherry+4;
		Death:
			BMOT U 0 A_DynamicMusic();
			BMOT U 0 A_Scream();
			BMOT UVUUVUVVUVUU 7 Bright 
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMOX A 7 
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_NoBlocking();
			}
			BMOX BCABCABC 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMOX C 0 A_DynamicMusic();
			BMOX DEFDEFDEFDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMOX F 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(113,0,0,0,0);
			}
			BMOX F 0 A_StartSound("misc/teledd");
			BMTX EFGH 3 Bright;
			Stop;
	}
}

class HandmotherPhaseA : HandMotherVac
{
	default
	{
		//$Category EE Bosses
		Health 2000;
		Radius 24;
		Height 128;
		Speed 12;
		PainChance 200;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		DamageFactor "Beats", 0.25;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		Mass 5000;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by Handmother.";
		Tag "HandMother (Vacuum)";
		painsound "mother/pain";
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
	}
	
	States
	{
		Spawn:
			BMOT YYYYZZZZ 5 A_Look();
			Loop;
		See:
			BMOT A 0 A_DynamicMusic();
			BMOT E 20;
			Goto Idle;
		Idle:
			BMOT A 0 A_DynamicMusic();
			BMOT AABBCCDD 3
			{
				A_HandMotherChase();
			}
			Loop;
		Missile:
			BMOT E 0 A_DynamicMusic();
			BMOT E 0 A_Jump(96,"MissileCherry");
			BMOT E 8;
			BMOT G 0 A_StartSound("Handmother/Vacon",CHAN_BODY);
			BMOT GHIJGHIJGHIJKLMNKLMNKLMNKLMN 1 A_FaceTarget();
			BMOT O 0 A_StartSound("Weapons/spinnerfire");
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT P 6 A_SpawnProjectile("BigDustBall",80,0,0);
			BMOT Q 7 A_StartSound("Handmother/Vacoff",CHAN_BODY);
			Goto Idle;
		MissileCherry:
			BMOT R 0 A_DynamicMusic();
			BMOT R 7 A_FaceTarget();
			BMOT S 5 A_CheckSight("idle");
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
			BMOT T 7 A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
			Goto Missile+3;
		Melee:
			BMOT T 0 A_DynamicMusic();
			BMOT T 7 A_FaceTarget();
			BMOT V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMOT V 3;
			Goto Idle;
		Pain:
			BMOT U 0 A_DynamicMusic();
			BMOT U 4 A_EEPain();
			BMOT V 6;
			BMOT V 0 A_Jump(208,"Idle");
			Goto MissileCherry+4;
		Death:
			BMOT U 0 A_DynamicMusic();
			BMOT U 0 A_Scream();
			BMOT UVUUVUVVUVUU 7 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMOX A 7 A_NoBlocking();
			BMOX BCABCABC 7;
			BMOX C 0 A_DynamicMusic();
			BMOX DEFDEFDEFDEF 7;
			BMOX F 0 A_StartSound("misc/teledd");
			BMTX F 0 A_SpawnItemEX("HandMotherPhaseB",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class HandmotherPhaseAClone : HandmotherPhaseA
{
	bool shieldup;
	default
	{
		//$Category EE Bosses
		Health 2000;
		Radius 24;
		Height 128;
		ProjectilePassHeight 144;
		ReactionTime 14;
		Speed 12;
		PainChance 200;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		DamageFactor "Beats", 0.25;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		Mass 25000;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by a clone of the Handmother.";
		Tag "HandMother (Vacuum)";
		painsound "mother/pain";
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		//Dropitem "AppleWine", 256;
		//Dropitem "AppleWine", 64;
		//Dropitem "AppleWine", 16;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("CherryBombPickup",1,64);
			A_DropItem("CherryBombPickup",1,16);
			A_DropItem("CherryBombPickup",1,4);
		}
		else
		{
			A_DropItem("AppleWine",1,256,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,64,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,16,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,4,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,1,ADI_FULLAMMO);
			
			A_DropItem("CherryBombPickup",1,64,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,16,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,4,ADI_FULLAMMO);
		}
	}

	override void Tick()
	{
		if (shieldup)
		{
			if (exex_handmothershield) A_SetInventory("ShieldEmitter",1);
			else A_SetInventory("ShieldEmitter",0);
		}
		else A_SetInventory("ShieldEmitter",0);
		
		super.Tick();
	}
	
	void A_HandMotherReactSet()
	{
		int basereacttime = random(22,35);
		ReactionTime = (basereacttime * frandom(1.0,1.5));
		if (health > ((SpawnHealth() + Stamina) * 0.5)) 
		{
			ReactionTime = (basereacttime * frandom(1.0,1.5));
		}
		else if (health >= ((SpawnHealth() + Stamina) * 0.25) || health < ((SpawnHealth() + Stamina) * 0.50))
		{
			ReactionTime = (basereacttime * frandom(0.667,0.75));
		}
		else 
		{
			ReactionTime = (basereacttime * frandom(0.334,0.5));
		}
	}
	
	States
	{
		Spawn:
			BMOT YYYYZZZZ 5 
			{
				A_Look();
				A_HandMotherReactSet();
			}
			Loop;
		See:
			BMOT A 0 A_DynamicMusic();
			BMOT E 20;
			Goto Idle;
		Idle:
			BMOT A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMOT AABBCCDD 3
			{
				shieldup = true;
				A_HandMotherChase();
			}
			BMOT D 0 A_Jump(96,"IdleDash");
			Loop;
		IdleDash:
			BMOT A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMOT AABBCCDD 2 
			{
				shieldup = true;
				A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			BMOT D 0 A_Jump(64,"Idle");
			Loop;
		Missile:
			BMOT E 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMOT E 0 A_Jump(96,"MissileCherry");
			BMOT E 8;
			BMOT G 0 A_StartSound("Handmother/Vacon",CHAN_BODY);
			BMOT GHIJGHIJGHIJKLMNKLMNKLMNKLMN 1 A_FaceTarget();
			BMOT O 0 A_StartSound("Weapons/spinnerfire");
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",80,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",72,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",96,0,random(-12,12));
			BMOT O 1 A_SpawnProjectile("DustBall",64,0,random(-12,12));
			BMOT P 6 A_SpawnProjectile("BigDustBall",80,0,0);
			BMOT Q 7 A_StartSound("Handmother/Vacoff",CHAN_BODY);
			Goto Idle;
		MissileCherry:
			BMOT R 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMOT R 7 A_FaceTarget();
			BMOT S 5 A_CheckSight("idle");
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
			BMOT T 0 A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
			BMOT T 7 A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
			Goto Missile+3;
		Melee:
			BMOT T 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMOT T 7 A_FaceTarget();
			BMOT V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMOT V 3;
			Goto Idle;
		Pain:
			BMOT U 0
			{
				A_DynamicMusic();
				shieldup = false;
				if (random(1,16) <= 1) shieldup = true;
				if (random(1,4) <= 1) A_HandMotherReactSet();
			}
			BMOT U 4 A_EEPain();
			BMOT V 6;
			BMOT V 0 A_Jump(208,"Idle");
			Goto MissileCherry+4;
		Death:
			BMOT U 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMOT U 0 A_Scream();
			BMOT UVUUVUVVUVUU 7 Bright 
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMOX A 7
			{
				A_NoBlocking();
				A_Drop();
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMOX BCABCABC 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMOX C 0 A_DynamicMusic();
			BMOX DEFDEFDEFDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMOX F 0 A_StartSound("misc/teledd");
			BMTX F 0 A_SpawnItemEX("HandMotherPhaseBClone",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class HandMotherPhaseB : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 2500;
		Radius 24;
		Height 128;
		Speed 12;
		PainChance 200;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		Mass 5000;
		DamageFactor "Chop", 3;
		DamageFactor "Bonk", 3;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by Handmother.";
		Tag "HandMother (Phase B)";
		PainSound "mother/pain";
		//Dropitem "AppleWine";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("AppleWine",1,256);

			A_DropItem("SpinnerPickup",1,64);
			A_DropItem("SpinnerPickup",1,16);
			A_DropItem("SpinnerPickup",1,4);
		}
		else
		{
			A_DropItem("AppleWine",1,256,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,64,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,16,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,4,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,1,ADI_FULLAMMO);
			
			A_DropItem("SpinnerPickup",1,64,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,16,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,4,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			BMO2 E 5 A_Look();
			Loop;
		See:
			BMO2 A 0 A_DynamicMusic();
			BMO2 E 20;
			Goto Idle;
		Idle:
			BMO2 A 0 A_DynamicMusic();
			BMO2 AABBCCDD 3
			{
				A_HandMotherChase();
			}
			BMO2 D 0 A_Jump(96,"IdleDash");
			Loop;
		IdleDash:
			BMO2 A 0 A_DynamicMusic();
			BMO2 AABBCCDD 2 
			{
				A_HandMotherChase();
			}
			BMO2 D 0 A_Jump(64,"Idle");
			Loop;
		Missile:
			BMO2 E 0 A_DynamicMusic();
			BMO2 E 0 A_Jump(96,"MissileSpinner");
			BMO2 E 0 A_Jump(96,"MissileCherry");
			BMO2 E 8;
			BMO2 F 0 A_StartSound("Handmother/Zap",CHAN_BODY);
			BMO2 HIHIHIHIHIHIH 1 A_FaceTarget();
			BMO2 H 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 I 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 H 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 H 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 H 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 H 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 V 8;
			Goto Idle;
		MissileCherry:
			BMO2 R 0 A_DynamicMusic();
			BMO2 R 7 A_FaceTarget();
			BMO2 S 5;
			BMO2 T 0 A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
			BMO2 T 0 A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
			BMO2 T 7 A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
			Goto Missile+3;
		MissileSpinner:
			BMO2 R 0 A_DynamicMusic();
			BMO2 R 7 A_FaceTarget();
			BMO2 S 5 A_CheckSight("idle");
			BMO2 T 0 A_SpawnProjectile("SpinnerShot",80,0,random(-12,12),0,random(-5,-15));
			BMO2 V 0 A_SpawnItemEX("SpinnerPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			BMO2 V 0;
			Goto Idle;
		Melee:
			BMO2 T 0 A_DynamicMusic();
			BMO2 T 7 A_FaceTarget();
			BMO2 V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMO2 V 3;
			Goto Idle;
		Pain:
			BMO2 U 0 A_DynamicMusic();
			BMO2 U 4 A_EEPain();
			BMO2 V 6 A_Jump(192,"idle");
			BMO2 V 0 A_SpawnItemEX("MalletAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Goto Idle;
		Death:
			BMO2 U 0 A_DynamicMusic();
			BMO2 U 0 A_Scream();
			BMO2 UVUUVUVVUVUU 7 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM2X A 7 
			{
				A_NoBlocking();
				A_Drop();
			}
			BM2X BCABCABC 7;
			BM2X C 0 A_DynamicMusic();
			BM2X DEFDEFDEFDEF 7;
			BM2X F 0 A_StartSound("misc/teledd");
			BM2X F 0 A_SpawnItemEX("HandMotherPhaseC",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class HandMotherPhaseBClone : HandMotherPhaseB
{
	bool shieldup;
	default
	{
		//$Category EE Bosses
		Health 2500;
		Speed 11; // 12
		Radius 24;
		Height 128;
		Mass 25000;
		ReactionTime 14;
		PainChance 50; // 200
		ProjectilePassHeight 144;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		Mass 5000;
		DamageFactor "Chop", 3;
		DamageFactor "Bonk", 3;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by a clone of the HandMother.";
		Tag "HandMother (Phase B) (Clone)";
		painsound "mother/pain";
		//Dropitem "AppleWine", 256;
		//Dropitem "AppleWine", 64;
		//Dropitem "AppleWine", 16;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("AppleWine",1,256);

			A_DropItem("SpinnerPickup",1,64);
			A_DropItem("SpinnerPickup",1,16);
			A_DropItem("SpinnerPickup",1,4);
		}
		else
		{
			A_DropItem("AppleWine",1,256,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,64,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,16,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,4,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,1,ADI_FULLAMMO);
			
			A_DropItem("SpinnerPickup",1,64,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,16,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,4,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		if (shieldup)
		{
			if (exex_handmothershield) A_SetInventory("ShieldEmitter",1);
			else A_SetInventory("ShieldEmitter",0);
		}
		else A_SetInventory("ShieldEmitter",0);
		
		super.Tick();
	}
	
	void A_HandMotherReactSet()
	{
		int basereacttime = random(25,32);
		ReactionTime = (basereacttime * frandom(1.0,1.5));
		if (health > ((SpawnHealth() + Stamina) * 0.5)) 
		{
			ReactionTime = (basereacttime * frandom(1.0,1.5));
		}
		else if (health >= ((SpawnHealth() + Stamina) * 0.25) || health < ((SpawnHealth() + Stamina) * 0.50))
		{
			ReactionTime = (basereacttime * frandom(0.667,0.75));
		}
		else 
		{
			ReactionTime = (basereacttime * frandom(0.334,0.5));
		}
	}
	
	States
	{
		Spawn:
			BMO2 E 5 
			{
				A_Look();
				A_HandMotherReactSet();
			}
			Loop;
		See:
			BMO2 A 0 A_DynamicMusic();
			BMO2 E 20;
			Goto Idle;
		Idle:
			BMO2 A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMO2 AABBCCDD 3
			{
				shieldup = true;
				A_HandMotherChase();
			}
			BMO2 D 0 A_Jump(96,"IdleDash");
			Loop;
		IdleDash:
			BMO2 A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMO2 AABBCCDD 2
			{
				shieldup = true;
				A_HandMotherChase();
			}
			BMO2 D 0 A_Jump(64,"Idle");
			Loop;
		Missile:
			BMO2 R 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO2 E 0 A_Jump(96,"MissileSpinner");
			BMO2 E 0 A_Jump(96,"MissileCherry");
			BMO2 E 8;
			BMO2 F 0 A_StartSound("Handmother/Zap",CHAN_BODY);
			BMO2 HIHIHIHIHIHIH 1 A_FaceTarget();
			BMO2 H 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 I 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 H 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 H 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 I 1 A_SpawnProjectile("BadZapShot",80,0,0);
			BMO2 H 0 A_SpawnProjectile("BadZapShot",72,0,12);
			BMO2 H 1 A_SpawnProjectile("BadZapShot",96,0,-12);
			BMO2 V 8;
			BMO2 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		MissileCherry:
			BMO2 R 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO2 R 7 A_FaceTarget();
			BMO2 S 5;
			BMO2 T 7 
			{
				A_SpawnProjectile("BadCherryBomb",80,0,random(-12,12),0,random(-5,-15));
				A_SpawnProjectile("BadCherryBomb",76,0,random(-12,12),0,random(-5,-15));
				A_SpawnProjectile("BadCherryBomb",64,0,random(-12,12),0,random(-5,-15));
				if (health <= ((SpawnHealth() + Stamina) * 0.75))
				{
					A_SpawnProjectile("BadCherryBomb",88,0,random(-12,12),0,random(-5,-15));
					A_SpawnProjectile("BadCherryBomb",96,0,random(-12,12),0,random(-5,-15));
					A_SpawnProjectile("BadCherryBomb",56,0,random(-12,12),0,random(-5,-15));
				}
				if (health <= ((SpawnHealth() + Stamina) * 0.25))
				{
					A_SpawnProjectile("BadCherryBomb",48,0,random(-12,12),0,random(-5,-15));
					A_SpawnProjectile("BadCherryBomb",40,0,random(-12,12),0,random(-5,-15));
					A_SpawnProjectile("BadCherryBomb",104,0,random(-12,12),0,random(-5,-15));
				}
			}
			Goto Missile+3;
		MissileSpinner:
			BMO2 R 0 A_DynamicMusic();
			BMO2 R 7 A_FaceTarget();
			BMO2 S 5 A_CheckSight("idle");
			BMO2 T 0 A_SpawnProjectile("SpinnerShot",80,0,random(-12,12),0,random(-5,-15));
			BMO2 V 0 A_SpawnItemEX("SpinnerPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			BMO2 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		Melee:
			BMO2 T 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO2 T 7 A_FaceTarget();
			BMO2 V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMO2 V 3;
			BMO2 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		Pain:
			BMO2 U 0
			{
				A_DynamicMusic();
				shieldup = false;
				if (random(1,16) <= 1) shieldup = true;
				if (random(1,4) <= 1) A_HandMotherReactSet();
			}
			BMO2 U 4 A_EEPain();
			BMO2 V 6 A_Jump(192,"idle");
			BMO2 V 0 A_SpawnItemEX("MalletAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Goto Idle;
		Death:
			BMO2 U 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO2 U 0 A_Scream();
			BMO2 UVUUVUVVUVUU 7 Bright 
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM2X A 7
			{
				A_NoBlocking();
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BM2X BCABCABC 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BM2X C 0 A_DynamicMusic();
			BM2X DEFDEFDEFDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BM2X F 0 A_StartSound("misc/teledd");
			BM2X F 0 A_SpawnItemEX("HandMotherPhaseCClone",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class HandMotherPhaseC : DDOrigBoss
{
	default
	{
		//$Category EE Bosses
		Health 2500;
		Radius 24;
		Height 128;
		Speed 12;
		PainChance 200;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		Mass 5000;
		DamageFactor "Chop", 3;
		DamageFactor "Bonk", 3;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		DamageFactor "DashingBG", 2.305625;
		PainChance "DashingBG", 255;
		DamageFactor "DashingSD", 2.305625;
		PainChance "DashingSD", 255;
		MeleeRange 96;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by Handmother.";
		Tag "HandMother (Phase C)";
		painsound "mother/pain";
		//Dropitem "AppleWine", 256;
		//Dropitem "AppleWine", 64;
		//Dropitem "AppleWine", 16;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
		}
		else
		{
			A_DropItem("AppleWine",1,256,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,64,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,16,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,4,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,1,ADI_FULLAMMO);
			
			A_DropItem("CherryBombPickup",1,64,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,16,ADI_FULLAMMO);
			A_DropItem("CherryBombPickup",1,4,ADI_FULLAMMO);
			A_DropItem("BRocketPickup",1,16,ADI_FULLAMMO);
			A_DropItem("BRocketPickup",1,4,ADI_FULLAMMO);
			A_DropItem("BRocketPickup",1,1,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,64,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,16,ADI_FULLAMMO);
			A_DropItem("SpinnerPickup",1,4,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			BMO3 A 5 A_Look();
			Loop;
		See:
			BMO3 A 0 A_DynamicMusic();
			BMO3 EFE 10;
			Goto Idle;
		Idle:
			BMO3 A 0 A_DynamicMusic();
			BMO3 AABBCCDD 2
			{
				A_HandMotherChase();
			}
			Loop;
		Missile:
			BMO3 E 0 A_DynamicMusic();
			BMO3 E 0 A_Jump(96,"MissileSpinner");
			BMO3 E 9;
			BMO3 F 9 A_FaceTarget();
			BMO3 G 0 A_CheckSight("idle");
			BMO3 G 0 A_StartSound("Weapons/brocketfire");
			BMO3 G 5 bright A_SpawnProjectile("badbrocketshot",80,0,0);
			BMO3 HI 3 bright;
			Goto Idle;
		MissileSpinner:
			BMO3 R 0 A_DynamicMusic();
			BMO3 R 7 A_FaceTarget();
			BMO3 S 5 A_CheckSight("idle");
			BMO3 T 0 A_SpawnProjectile("SpinnerShot",80,0,random(-12,12),0,random(-5,-15));
			BMO3 V 0 A_Jump(192,"Idle");
			BMO3 V 0 A_SpawnItemEX("cherrybombpickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Goto Idle;
		Melee:
			BMO3 T 0 A_DynamicMusic();
			BMO3 T 7 A_FaceTarget();
			BMO3 V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMO3 V 3;
			Goto Idle;
		Pain:
			BMO3 U 0 A_DynamicMusic();
			BMO3 U 4 A_EEPain;
			BMO3 V 6;
			Goto Idle;
		Death:
			BMO3 U 0 A_DynamicMusic();
			BMO3 U 0 A_Scream();
			BMO3 U 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess"))
				{
					if (MiscItem && !MiscItem.DD_TrueHandMother)
					{
						MiscItem.DD_TrueHandMother += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			BMO3 UV 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ABCDEFABCDEF 7;
			BMO3 UV 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ABCDEF 7;
			BM3X C 0 A_DynamicMusic();
			BM3X ABCDEFABCDEF 7;
			BMO3 UVUVUV 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMO3 U 0 A_NoBlocking();
			BMO3 U 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(113,0,0,0,0);
			}
			BMO3 UUUUUU 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ZZZZZZZZ 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X Z 0;
			Stop;
	}
}

class HandMotherPhaseCClone : HandMotherPhaseC
{
	bool shieldup;
	default
	{
		//$Category EE Bosses
		Health 2500;
		Radius 24;
		Height 128;
		Speed 10; // 12
		PainChance 50; // 200
		ProjectilePassHeight 144;
		Painchance "Breakfast", 64;
		Painchance "Beats", 64;
		Mass 25000;
		DamageFactor "Chop", 3;
		DamageFactor "Bonk", 3;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 64;
		Damagefactor "Zap", 0.5;
		MeleeRange 96;
		ReactionTime 14;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+LOOKALLAROUND
		+DONTHARMCLASS
		+MISSILEMORE
		Obituary "%o was put to bed by a clone of the HandMother.";
		Tag "HandMother (Phase C) (Clone)";
		painsound "mother/pain";
	}
	
	override void Tick()
	{
		if (shieldup)
		{
			if (exex_handmothershield) A_SetInventory("ShieldEmitter",1);
			else A_SetInventory("ShieldEmitter",0);
		}
		else A_SetInventory("ShieldEmitter",0);
		
		super.Tick();
	}
	
	void A_HandMotherReactSet()
	{
		int basereacttime = random(22,35);
		ReactionTime = (basereacttime * frandom(1.0,1.5));
		if (health > ((SpawnHealth() + Stamina) * 0.5)) 
		{
			ReactionTime = (basereacttime * frandom(1.0,1.5));
		}
		else if (health >= ((SpawnHealth() + Stamina) * 0.25) || health < ((SpawnHealth() + Stamina) * 0.50))
		{
			ReactionTime = (basereacttime * frandom(0.667,0.75));
		}
		else 
		{
			ReactionTime = (basereacttime * frandom(0.334,0.5));
		}
	}
	
	States
	{
		Spawn:
			BMO3 A 5 
			{
				A_Look();
				A_HandMotherReactSet();
			}
			Loop;
		See:
			BMO3 A 0 A_DynamicMusic();
			BMO3 EFE 10;
			Goto Idle;
		Idle:
			BMO3 A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMO3 AABBCCDD 2 
			{
				shieldup = true;
				A_HandMotherChase();
			}
			BMO2 D 0 A_Jump(96,"IdleDash");
			Loop;
		IdleDash:
			BMO3 A 0
			{
				A_DynamicMusic();
				shieldup = true;
			}
			BMO3 AABBCCDD 2
			{
				shieldup = true;
				A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			BMO3 D 0 A_Jump(64,"Idle");
			Loop;
		Missile:
			BMO3 E 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO3 E 0 A_Jump(96,"MissileSpinner");
			BMO3 E 9;
			BMO3 F 9 A_FaceTarget();
			BMO3 G 0 A_CheckSight("idle");
			BMO3 G 5 bright
			{
				A_StartSound("Weapons/brocketfire",140);
				A_SpawnProjectile("badbrocketshot",80,0,0);
				if (health <= ((SpawnHealth() + Stamina) * 0.75))
				{
					A_StartSound("Weapons/brocketfire",141);
					A_SpawnProjectile("badbrocketshot",(80-(random(-4,4)*3)),(random(-4,4)*3),(random(-4,4)*3));
					A_StartSound("Weapons/brocketfire",142);
					A_SpawnProjectile("badbrocketshot",(80-(random(-4,4)*3)),(random(-4,4)*3),(random(-4,4)*3));
				}
				if (health <= ((SpawnHealth() + Stamina) * 0.25))
				{
					A_StartSound("Weapons/brocketfire",143);
					A_SpawnProjectile("badbrocketshot",(80-(random(-4,4)*random(1,5))),(random(-4,4)*random(1,5)),(random(-4,4)*random(1,5)));
					A_StartSound("Weapons/brocketfire",144);
					A_SpawnProjectile("badbrocketshot",(80-(random(-4,4)*random(1,5))),(random(-4,4)*random(1,5)),(random(-4,4)*random(1,5)));
				}
			}
			BMO3 HHHIII 3 bright;
			BMO3 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		MissileSpinner:
			BMO3 R 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO3 R 7 A_FaceTarget();
			BMO3 S 5 A_CheckSight("idle");
			BMO3 T 0 A_SpawnProjectile("SpinnerShot",80,0,random(-12,12),0,random(-5,-15));
			BMO3 V 0 A_Jump(32,"MissileSpinner");
			BMO3 S 10;
			BMO3 V 0 A_Jump(192,"Idle");
			BMO3 V 0 A_SpawnItemEX("cherrybombpickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			BMO3 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		Melee:
			BMO3 T 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO3 T 7 A_FaceTarget();
			BMO3 V 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(25,35),0.08,random(10,25),0.05,random(5,20),0.035,0.01);
				
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing", "", 1);
			}
			BMO3 V 3;
			BMO3 V 0
			{
				A_HandMotherReactSet();
			}
			Goto Idle;
		Pain:
			BMO3 U 0
			{
				A_DynamicMusic();
				shieldup = false;
				if (random(1,16) <= 1) shieldup = true;
				if (random(1,4) <= 1) A_HandMotherReactSet();
			}
			BMO3 U 4 A_EEPain;
			BMO3 V 6;
			Goto Idle;
		Death:
			BMO3 U 0
			{
				A_DynamicMusic();
				shieldup = false;
			}
			BMO3 U 0 A_Scream();
			BMO3 UV 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ABCDEFABCDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMO3 UV 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ABCDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BM3X C 0 A_DynamicMusic();
			BM3X ABCDEFABCDEF 7
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
			}
			BMO3 UVUVUV 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BMO3 U 0 A_NoBlocking();
			BMO3 U 0
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(113,0,0,0,0);
			}
			BMO3 UUUUUU 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X ZZZZZZZZ 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			BM3X Z 0;
			Stop;
	}
}

class DustBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		DamageType "Dust";
		Scale 0.35;
		Projectile;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+RANDOMIZE
		+NOEXTREMEDEATH
		PoisonDamage 15;
		renderstyle "Add";
		Alpha 0.7;
		DeathSound "croquet/ballhit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(15,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(15,0.005,5,0.334,2,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HMBL ABCDE 3 bright;
			Loop;
		Death:
			HMBX ABCDE 4 Bright;
			Stop;
	}
}

class BigDustBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 12;
		DamageFunction (finaldamagedealt);
		DamageType "Dust";
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		PoisonDamage 25;
		renderstyle "Add";
		Alpha 0.7;
		DeathSound "croquet/ballhit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(25,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
		PoisonDamage = A_CalcDamageFormula2(25,0.005,5,0.334,2,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HMBL ABCDE 3 bright;
			Loop;
		Death:
			HMBX ABCDE 4 Bright;
			Stop;
	}
}

//SUGARSNAKE
class SugarSnake : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 60;
		Radius 20;
		Height 56;
		Speed 10;
		PainChance 256;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+FRIENDLY
		+FLOAT
		+NOGRAVITY
		+LOOKALLAROUND
		SeeSound "hduck/sight";
		PainSound "hduck/pain";
		DeathSound "hduck/death";
		ActiveSound "hduck/active";
		Obituary "%o was sizzled by a sugar snake.";
		Tag "Sugar Snake";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	States
	{
		Spawn:
			FSNK A 2 A_Look();
			Loop;
		See:
			FSNK AABBCCDD 3 
			{
				A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				if (IPAttackSummon) A_SetTics(2);
			}
			Loop;
		Missile:
			FSNK B 5 A_DynamicMusic();
			FSNK B 5 A_FaceTarget();
			FSNK B 0 A_AlertMonsters(1024,0);
			FSNK BBB 4
			{
				A_SpawnProjectile("SnakeFireball",40);
			}
			Goto See;
		Pain:
			FSNK A 6 A_EEPain();
			FSNK B 3; //A_DynamicMusic();
			Goto See;
		Death:
			FSNK A 5 bright A_Scream();
			FSNK XY 5 bright;
			FSNK Z 5 A_NoBlocking();
			CBOX A 6 Bright A_StartSound("weapons/cherryboom");
			CBOX B 0 A_AlertMonsters();
			CBOX B 6 Bright A_Explode();
			CBOX CDE 6 Bright 
			{
				bool success;
				actor BombShots;
				EEProjectile IPCompat;
				[success, BombShots] = A_ThrowGrenade("SnakeMiniGrenade",2,random(2,6),random(8,16),0);
				if (BombShots && IPAttackSummon) 
				{
					IPCompat = EEProjectile(BombShots);
					if (IPCompat) IPCompat.IPattack = true;
				}
			}
			Stop;
	}
}

class MiniSugarSnake : DDOrigCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 30;
		Radius 20;
		Height 56;
		Speed 18;
		Scale 0.5;
		PainChance 256;
		MONSTER;
		+FLOORCLIP
		+NOINFIGHTING
		+NOTARGET
		+NOBLOOD
		+FRIENDLY
		+FLOAT
		+NOGRAVITY
		+LOOKALLAROUND
		SeeSound "hduck/sight";
		PainSound "hduck/pain";
		DeathSound "hduck/death";
		ActiveSound "hduck/active";
		Obituary "%o was sizzled by a sugar snake.";
		Tag "Sugar Snake";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	States
	{
		Spawn:
			FSNK A 0 A_AlertMonsters(1024,0);
			FSNK A 2 A_Look();
			Loop;
		See:
			FSNK AABBCCDD 2 A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			Loop;
		Missile:
			FSNK B 5 A_DynamicMusic();
			FSNK B 5 A_FaceTarget();
			FSNK B 0 A_AlertMonsters(1024,0);
			FSNK B 4 A_SpawnProjectile("SnakeMiniFireball",32);
			FSNK B 4 A_SpawnProjectile("SnakeMiniFireball",32);
			FSNK B 4 A_SpawnProjectile("SnakeMiniFireball",32);
			Goto See;
		Pain:
			FSNK A 6 A_EEPain();
			FSNK B 3; //A_DynamicMusic();
			Goto See;
		Death:
			FSNK A 5 bright A_Scream();
			FSNK XY 5 bright;
			FSNK Z 5 A_NoBlocking();
			CBOX A 6 Bright A_StartSound("weapons/cherryboom");
			CBOX B 0 A_AlertMonsters();
			CBOX B 6 Bright 
			{
				A_Explode();
			}
			CBOX CDE 6 Bright;
			Stop;
	}
}

class SnakeFireBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		Projectile;
		DontHurtShooter;
		+RANDOMIZE
		+NOEXTREMEDEATH
		RenderStyle "Normal";
		Seesound "weapons/rocketfire";
		DeathSound "croquet/ballhit";
		Tag "Sugar Snake";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BTRK ABCD 3 bright;
			Loop;
		Death:
			SPNR C 4 bright;
			SPNR DEFG 4 Bright;
			Stop;
	}
}

class SnakeMiniFireBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 12;
		Speed 18;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		DamageType "Fire";
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		renderstyle "Normal";
		Seesound "weapons/rocketfire";
		DeathSound "croquet/ballhit";
		Tag "Sugar Snake";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BTRK ABCD 3 bright;
			Loop;
		Death:
			SPNR CDEFG 4 Bright;
			Stop;
	}
}

class SnakeGrenade : EEProjectile
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		Projectile;
		-NOGRAVITY
		renderstyle "Normal";
		Seesound "weapons/cherrywick";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BSHT AB 3;
			loop;
		Death:
			FSNK ZYX 4;
			FSNK X 0 
			{
				bool success;
				actor summon;
				EECreature IPSummon;
				[success, summon] = A_SpawnItemEX("SugarSnake",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				if (summon && success)
				{
					summon.bFRIENDLY = true;
					summon.bNOBLOCKMONST = true;
					summon.ChangeTID(1000);
					if (IPAttack)
					{
						summon.health *= frandompick(2.0,2.25,2.5);
						summon.Speed *= frandompick(1.125,1.25,1.375);
						summon.Mass *= frandompick(1.25,1.5,1.75);
						summon.DamageFactor *= frandompick(0.75,0.825,0.9);
						summon.A_SetInventory("SnakeIPBuffAtk",1);
						IPSummon = EECreature(summon);
						if (IPSummon) IPSummon.IPAttackSummon = true;
					}
				}
			}
			Stop;
   }
}

class SnakeMiniGrenade : EEProjectile
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Scale 0.25;
		Projectile;
		-NOGRAVITY
		renderstyle "Normal";
		Seesound "weapons/cherrywick";
		Species "SugarSnake";
		+THRUSPECIES
		+MTHRUSPECIES
		+DONTHARMSPECIES
		+NOINFIGHTSPECIES
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.0075,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BSHT AB 3;
			loop;
		Death:
			FSNK ZYX 4;
			FSNK X 0
			{
				bool success;
				actor summon;
				EECreature IPSummon;
				[success, summon] = A_SpawnItemEX("MiniSugarSnake",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				if (summon && success)
				{
					summon.bFRIENDLY = true;
					summon.bNOBLOCKMONST = true;
					summon.ChangeTID(1000);
					if (IPAttack)
					{
						summon.health *= 2.5;
						summon.Speed *= 1.25;
						summon.Mass *= 1.5;
						summon.DamageFactor *= 0.75;
						summon.A_SetInventory("SnakeIPBuffAtk",1);
						IPSummon = EECreature(summon);
						if (IPSummon) IPSummon.IPAttackSummon = true;
					}
				}
			}
			Stop;
	}
}

//TANK GAME
class MiniTank_Green : DDMiniTank
{
	default
	{
		Health 30;
		Radius 8;
		Height 16;
		Speed 2;
		Scale 0.25;
		PainChance 256;
		Mass 200;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+FRIENDLY;
		+DONTHARMCLASS;
		-COUNTKILL;
		Species "GreenTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANG A 3 A_Look();
			Loop;
		See:
			TANG AA 4 A_Chase();
			TANG A 0 A_Jump(208,7);
			TANG AAAAAA 2 A_Chase();
			TANG AA 4 A_Chase();
			Loop;
		Retreat:
			TANG A 0 { bFRIGHTENED = true; }
			TANG AA 4 A_Chase();
			TANG A 0 A_Jump(80,2);
			TANG A 0 { bFRIGHTENED = false; }
			TANG AA 4 A_Chase();
			Loop;
		Missile:
			TANG A 5 A_DynamicMusic();
			TANG A 5 A_FaceTarget();
			TANG A 4 A_SpawnProjectile("TankShell",12,0,random(-3,3));
			Goto See;
		Pain:
			TANG A 6 A_EEPain;
			TANG A 0 A_Jump(64,"Retreat");
			Goto See;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
	}
}

class MiniTank_Green_Scout : Minitank_Green
{
	default
	{
		Health 20;
		Radius 6;
		Height 10;
		Speed 2;
		Scale 0.20;
		PainChance 256;
		Mass 200;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+FRIENDLY
		-COUNTKILL;
		Species "GreenTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANG A 3 A_Look();
			Loop;
		See:
			TANG AA 2 A_Chase();
			Loop;
		Retreat:
			TANG A 0 { bFRIGHTENED = true; }
			TANG AAAAAAAAAAAA 2 A_Chase();
			TANG A 0 { bFRIGHTENED = false; }
			Goto See;
		Missile:
			TANG A 5 A_DynamicMusic();
			TANG A 5 A_FaceTarget();
			TANG A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANG A 3 A_FaceTarget();
			TANG A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANG A 3 A_FaceTarget();
			TANG A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANG A 3 A_Jump(208,"Retreat");
			Goto See;
		Pain:
			TANG A 6 A_EEPain();
			TANG A 3 A_DynamicMusic();
			Goto See;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
	}
}

class MiniTank_Green_Battery : Minitank_Green
{
	default
	{
		Health 40;
		Radius 8;
		Height 16;
		Speed 2;
		Scale 0.40;
		PainChance 256;
		Mass 200;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+FRIENDLY
		+DONTHARMCLASS
		-COUNTKILL;
		Species "GreenTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANG A 3 A_Look();
			Loop;
		See:
			TANG AA 4 A_Chase();
			Loop;
		Missile:
			TANG A 5 A_DynamicMusic();
			TANG A 0 A_Jump(108,"Rocket");
			TANG A 5 A_FaceTarget();
			TANG A 0 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			TANG A 0 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			TANG A 4 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			Goto See;
		Rocket:
			TANG A 5 A_FaceTarget();
			TANG A 4 A_SpawnProjectile("TankMissile",12);
			TANG A 40;
			Goto See;
		Pain:
			TANG A 6 A_EEPain();
			TANG A 3 A_DynamicMusic();
			Goto See;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
	}
}

class MiniTank_Brown : DDMiniTank
{
	default
	{
		Health 30;
		Radius 8;
		Height 16;
		Speed 2;
		Scale 0.25;
		PainChance 256;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		Mass 200;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		-COUNTKILL;
		Species "BrownTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANK A 3 A_Look();
			Loop;
		See:
			TANK AA 4 A_Chase();
			TANK A 0 A_Jump(208,7);
			TANK AAAAAA 2 A_Chase();
			TANK AA 4 A_Chase();
			Loop;
		Retreat:
			TANK A 0 { bFRIGHTENED = true; }
			TANK AA 4 A_Chase();
			TANK A 0 A_Jump(80,2);
			TANK A 0 { bFRIGHTENED = false; }
			TANK AA 4 A_Chase();
			Loop;
		Missile:
			TANK A 5 A_DynamicMusic();
			TANK A 5 A_FaceTarget();
			TANK A 4 A_SpawnProjectile("TankShell",12,0,random(-3,3));
			Goto See;
		Pain:
			TANK A 6 A_EEPain();
			TANK A 0 A_Jump(64,"Retreat");
			Goto See;
		Death.Tank:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(724,0,0,0,0);
			}
			Stop;
	}
}

class MiniTank_Brown_Scout : MiniTank_Brown
{
	default
	{
		Health 20;
		Radius 6;
		Height 10;
		Speed 2;
		Scale 0.20;
		PainChance 256;
		Mass 200;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		-COUNTKILL;
		Species "BrownTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANK A 3 A_Look();
			Loop;
		See:
			TANK AA 2 A_Chase();
			Loop;
		Retreat:
			TANK A 0 { bFRIGHTENED = true; }
			TANK AAAAAAAAAAAA 2 A_Chase();
			TANK A 0 { bFRIGHTENED = false; }
			Goto See;
		Missile:
			TANK A 5 A_DynamicMusic();
			TANK A 5 A_FaceTarget();
			TANK A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANK A 3 A_FaceTarget();
			TANK A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANK A 3 A_FaceTarget();
			TANK A 3 A_SpawnProjectile("TankBullet",6,0,random(-3,3));
			TANK A 3 A_Jump(208,"Retreat");
			Goto See;
		Pain:
			TANK A 6 A_EEPain();
			TANK A 3 A_DynamicMusic();
			Goto See;
		Death.Tank:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(724,0,0,0,0);
			}
			Stop;
	}
}

class MiniTank_Brown_Battery : Minitank_Brown
{
	default
	{
		Health 40;
		Radius 8;
		Height 16;
		Speed 2;
		Scale 0.40;
		PainChance 256;
		Mass 200;
		MaxDropOffHeight 8;
		MaxStepHeight 8;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+DONTHARMCLASS
		-COUNTKILL;
		Species "BrownTank";
		Obituary "%o died embarrassingly to a toy tank.";
		Tag "Tank Unit";
	}
	
	States
	{
		Spawn:
			TANK A 3 A_Look();
			Loop;
		See:
			TANK AA 4 A_Chase();
			Loop;
		Missile:
			TANK A 5 A_DynamicMusic();
			TANK A 0 A_Jump(108,"Rocket");
			TANK A 5 A_FaceTarget();
			TANK A 0 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			TANK A 0 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			TANK A 4 A_SpawnProjectile("TankShell",12,0,random(-7,7));
			Goto See;
		Rocket:
			TANK A 5 A_FaceTarget();
			TANK A 4 A_SpawnProjectile("TankMissile",12);
			TANK A 40;
			Goto See;
		Pain:
			TANK A 6 A_EEPain();
			TANK A 3 A_DynamicMusic();
			Goto See;
		Death.Tank:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright;
			Stop;
		Death:
			TNKX A 6 Bright A_StartSound("weapons/cherryboom");
			TNKX B 6 Bright;
			TNKX C 6 Bright
			{
				actor player = players[0].mo;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ACS_Execute(724,0,0,0,0);
			}
			Stop;
	}
}

class TankShell : EEProjectile
{
	default
	{
		Radius 4;
		Height 8;
		Speed 4;
		Damage 2;
		Scale 0.20;
		DamageType "Tank";
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		+THRUSPECIES
		renderstyle "Normal";
		Seesound "blunderfire";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			BSHT AB 3 bright;
			Loop;
		Death:
			FSPE ABCDE 5 Bright;
			Stop;
	}
}

class TankBullet : EEProjectile
{
	default
	{
		Radius 4;
		Height 8;
		Speed 4;
		Damage 1;
		Scale 0.10;
		DamageType "Tank";
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		+THRUSPECIES
		renderstyle "Normal";
		Seesound "blunderfire";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			BSHT AB 3 bright;
			Loop;
		Death:
			FSPE ABCDE 5 Bright;
			Stop;
	}
}

class TankMissile : EEProjectile
{
	default
	{
		Radius 4;
		Height 8;
		Speed 4;
		Damage 5;
		Scale 0.25;
		DamageType "Tank";
		Projectile;
		+RANDOMIZE
		+NOEXTREMEDEATH
		+THRUSPECIES
		DontHurtShooter;
		renderstyle "Normal";
		Seesound "weapons/rocketfire";
		DeathSound "weapons/cherryboom";
		ExplosionRadius 64;
	}
	States
	{
		Spawn:
			BTRK ABCD 3 bright;
			Loop;
		Death:
			BMX2 A 5 A_Explode();
			BMX2 BCDEFG 5 Bright;
			Stop;
	}
}