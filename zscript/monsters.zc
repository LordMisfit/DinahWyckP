class BulletPuffNew : BulletPuff replaces BulletPuff
{
	default
	{
		Tag "Shot";
		+PUFFGETSOWNER
	}
}

//*****************
//* Doom specific *
//*****************
class BossBrainNew : BossBrain replaces BossBrain
{
	mixin MonsterCollider;
	default
	{
		Tag "Icon of Sin"; // Tag "John Romero"
		Health 250;
		Mass 10000000;
		PainChance 255;
		Height 80;
		Radius 20;
		//MONSTER;
		//+ISMONSTER

		+SHOOTABLE
		+SOLID
		+NOICEDEATH
		+OLDRADIUSDMG
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	States
	{
		BrainExplode:
			MISL BC 10 Bright;
			MISL D 10 A_BrainExplode();
			Stop;
		Spawn:
			BBRN A -1;
			Stop;
		Pain:
			BBRN B 36 A_BrainPain();
			Goto Spawn;
		Death:
			BBRN B 10 
			{
				if (exex_iconofsindthkillminions) A_KillChildren("Massacre");
				A_BrainScream();
			}
			BBRN B 0 
			{
				if (exex_iconofsindthkillminions) A_ExplodMinions();
			}
			BBRN BBBBBBBBB 10;
			BBRN BB 10;
			BBRN B -1 A_BrainDie();
			Stop;
	}
	
	void A_ExplodMinions()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while (mo = Actor(it.Next()))
		{
			if (mo.master == self)
			{
				double xpos = mo.pos.x;
				double ypos = mo.pos.y;
				double zpos = mo.pos.z;
				double mradius = mo.radius;
				double mheight = mo.height;
				bool success;
				actor explod;
				[success, explod] = mo.A_SpawnItemEx("IoSDeathExplosionEffect",0.0,0.0,(mo.height*0.5), 0.0,0.0,frandom(0.01,1.00), 0.0,SXF_NOCHECKPOSITION);
				if (explod && success)
				{
					explod.target = mo;
					let ndf = IoSDeathExplosionEffect(explod);
					if (ndf)
					{
						ndf.target = mo;
						ndf.mradius = mradius;
						ndf.mheight = mheight;
					}
				}
			}
		}
	}
}

class BossEyeNew : BossEye replaces BossEye
{
	mixin MonsterCollider;
	int user_bosseyetype;
	default
	{
		Height 32;
		+NOBLOCKMAP;
		+NOSECTOR;
		+BOSS;
	}
	
	States
	{
		Spawn:
			SSWV A 10 A_Look();
			Loop;
		See:
			SSWV A 181 
			{
				A_BrainAwake();
				if (user_bosseyetype > 0) 
				{
					A_SetTics(tics*frandom(0.45,0.55));
				}
				else
				{
					A_SetTics(tics*frandom(0.9,1.1));
				}
			}
		Shoot:
			SSWV A 150 
			{
				if (user_bosseyetype > 0) 
				{
					double timefactor = 1.00;
					if (master)
					{
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.95)) timefactor = frandom(0.925,0.95);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.667)) timefactor = frandom(0.625,0.667);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.4)) timefactor = frandom(0.375,0.4);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.25)) timefactor = frandom(0.3,0.334);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.125)) timefactor = frandom(0.2,0.25);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.05)) timefactor = frandom(0.1,0.125);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.005)) timefactor = frandom(0.025,0.0375);
					}
					A_SetTics(tics*(frandom(0.675,0.825) * timefactor));
				}
				else { A_SetTics(tics*frandom(0.9,1.1)); }
				
				if (master) 
				{
					if (master.health >= 1) A_BrainSpit("SpawnShotNew");
				}
				else
				{
					A_BrainSpit("SpawnShotNew");
				}
			}
			loop;
	}
	
	void A_BrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShotNew";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Assign [try to] the BossBrain as the shot's master
				if (master) spit.tracer = master;
				if (dydudebug_bossbraininfo2 && spit.tracer) Console.Printf("SpawnShot (\c[green]%p\c-) Tracer: \c[gold]%p\c-", spit, spit.tracer);

				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_StartSound(self.AttackSound, CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
			else
			{
				// compatibility fallback
				A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}

class SpawnShotNew : SpawnShot
{
	Default
	{
		Radius 6;
		Height 32;
		Speed 10;
		Damage 3;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		+RANDOMIZE
		SeeSound "brain/spit";
		DeathSound "brain/cubeboom";
		
		DropItem "DoomImpNew",							255,	50;
		DropItem "DemonNew",								255,	40;
		DropItem "SpectreNew",							255,	30;
		DropItem "PainElementalNew",				255,	10;
		DropItem "CacodemonNew",						255,	30;
		DropItem "ArchvileNew",							255,	4;
		DropItem "RevenantNew",							255,	10;
		DropItem "ArachnotronNew",					255,	20;
		DropItem "MancubusNew",							255,	30;
		DropItem "HellKnightNew",						255,	20;
		DropItem "BaronOfHellNew",					255,	10;
		DropItem "CyberdemonNew",						255,	2;
		
		DropItem "HammerDuck",							255,	25;
		DropItem "Planter",									255,	15;
		DropItem "PlanterBird",							255,	10;
		DropItem "Centaurion",							255,	40;
		DropItem "CentaurionSgt",						255,	30;
		DropItem "KnuckleHead",							255,	10;
		DropItem "Galgoyle",								255,	30;
		DropItem "Jugger",									255,	30;
		DropItem "Juggette",								255,	30;
		DropItem "Vitriola",								255,	24;
		DropItem "Killetante",							255,	10;
		DropItem "KilletanteSoloist",				255,	2;
	}
	
	States
	{
		Spawn:
			BOSF A 3 BRIGHT A_SpawnSound;
			BOSF BCD 3 BRIGHT A_SpawnFly;
			Loop;
	}
	
	void A_SpawnFly(class<Actor> spawntype = null)
	{
		sound snd; 
		if (spawntype != null) 
		{
			snd = GetDefaultByType(spawntype).SeeSound;
		}
		else
		{
			spawntype = "SpawnFire";
			snd = "brain/spawn";
		}
		SpawnFly(spawntype, snd);
	}
	
	void A_SpawnSound()
	{
		// travelling cube sound
		A_StartSound("brain/cube", CHAN_BODY);
		SpawnFly("SpawnFire", "brain/spawn");
	}

	void SpawnFly(class<Actor> spawntype, sound snd)
	{
		Actor newmobj;
		Actor fog;
		Actor eye = master; // The eye is the spawnshot's master, not the target!
		Actor targ = target; // Unlike other projectiles, the target is the intended destination.
		int r;
		
		if (tracer == null || (tracer && tracer.health <= 0))
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Tracer)\c-", self);
			Destroy();
			return;
		}
		
		if (targ == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Targ)\c-", self);
			Destroy();
			return;
		}
			
		// [GZ] Should be more viable than a countdown...
		if (special2 != 0)
		{
			if (special2 > level.maptime)
				return;		// still flying
		}
		else
		{
			if (reactiontime == 0 || --reactiontime != 0)
				return;		// still flying
		}
		
		if (spawntype)
		{
			fog = Spawn (spawntype, targ.pos, ALLOW_REPLACE);
			if (fog) A_StartSound(snd, CHAN_BODY);
		}

		class<Actor> SpawnName = null;

		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		int n = 0;

		// First see if this cube has its own actor list
		drop = GetDropItems();

		// If not, then default back to its master's list
		if (drop == null)
		{
			if (eye != null)
			{
				drop = eye.GetDropItems();
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting Eye DropTable\c-", self);
			}
			else
			{
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[RED]NO DROP TABLE INFO\c-", self);
			}
		}
		else
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting SpawnShot DropTable\c-", self);
		}

		if (drop != null)
		{
			for (di = drop; di != null; di = di.Next)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1; // default value is -1, we need a positive value.
					}
					n += amt; // this is how we can weight the list.
				}
			}
			di = drop;
			n = random[pr_spawnfly](0, n);
			while (n >= 0)
			{
				if (di.Name != 'none')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n -= amt;
				}
				if ((di.Next != null) && (n >= 0))
				{
					di = di.Next;
				}
				else
				{
					n = -1;
				}
			}
			SpawnName = di.Name;
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[blue]%s\c-", self, di.Name);
		}
		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post droptable)", self);
		if (SpawnName == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname was: \c[yellow]null\c-", self);
			// Randomly select monster to spawn.
			r = random[pr_spawnfly](0, 255);

			// Probability distribution (kind of :),
			// decreasing likelihood.
				 if (r < 50)  SpawnName = "DoomImp";
			else if (r < 90)  SpawnName = "Demon";
			else if (r < 120) SpawnName = "Spectre";
			else if (r < 130) SpawnName = "PainElemental";
			else if (r < 160) SpawnName = "Cacodemon";
			else if (r < 162) SpawnName = "Archvile";
			else if (r < 172) SpawnName = "Revenant";
			else if (r < 192) SpawnName = "Arachnotron";
			else if (r < 222) SpawnName = "Fatso";
			else if (r < 246) SpawnName = "HellKnight";
			else			  SpawnName = "BaronOfHell";
		}

		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post list)", self);
		if (spawnname != null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[sapphire]%s\c-", self, spawnname.GetClassName());
			newmobj = Spawn(spawnname, targ.pos, ALLOW_REPLACE);
			if (newmobj != null)
			{
				if (tracer) 
				{
					newmobj.master = tracer;
					newmobj.A_SetInventory("IoSMinion",1);
				}
				if (dydudebug_bossbraininfo2 && newmobj.master) 
				{
					Console.Printf("\c[green]%p\c-: Spawned Monster (\c[blue]%s\c-) Master: \c[gold]%p\c-", self, newmobj.GetClassName(), newmobj.master);
				}
				// Make the new monster hate what the boss eye hates
				if (eye != null)
				{
					newmobj.CopyFriendliness (eye, false);
				}
				// Make it act as if it was around when the player first made noise
				// (if the player has made noise).
				newmobj.LastHeard = newmobj.CurSector.SoundTarget;

				if (newmobj.SeeState != null && newmobj.LookForPlayers (true))
				{
					newmobj.SetState (newmobj.SeeState);
				}
				if (!newmobj.bDestroyed)
				{
					// telefrag anything in this spot
					newmobj.TeleportMove (newmobj.pos, true);
				}
				newmobj.bBossSpawned = true;
			}
		}

		// remove self (i.e., cube).
		Destroy ();
	}
}

class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		+PUSHABLE
		Tag "Explosive Barrel";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}
	States
	{
		Death:
			BEXP A 5 BRIGHT;
			BEXP B 5 Bright
			{
				A_Scream();
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
				A_AlertMonsters();
			}
			BEXP C 5 BRIGHT;
			BEXP D 10 BRIGHT 
			{
				A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BEXP E 10 BRIGHT;
			TNT1 A 1050 BRIGHT A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}

//********************
//* Heretic specific *
//********************
class PodNew : Pod replaces Pod
{
	Default
	{
		+PUSHABLE
		Tag "Explosive Pod";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}

	States
	{
		Death:
			PPOD C 5 BRIGHT A_RemovePod;
			PPOD D 5 BRIGHT A_Scream();
			Goto Super::Death+2;
	}
}

class ChickenNew : EECreature replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			loop;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CHKN A 8
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			CHKN D 5 A_Feathers();
			CHKN C 5 A_EEPain();
			Goto See;
		Death:
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}

class HereticImpNew : EECreature replaces HereticImp
{
	default
	{
		Tag "Gargoyle";
		Health 40;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 10;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 150;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 175;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 225;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 250;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		DamageFactor "Breakfast", 0.625;
		Painchance "Breakfast", 125;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.875;
		Painchance "Dust", 175;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 3;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1;
		Painchance "Spinner", 200;
		DamageFactor "Beats", 1;
		Painchance "Beats", 200;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		Species "Gargoyle";
		DamageFunction (0);
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "$OB_HERETICIMP";
		HitObituary "$OB_HERETICIMPHIT";
	}
	
	states
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(24);
			loop;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(6,12,18,24,0.333,0.333);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](5,12), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX A 0
			{
				user_chargechance = 25;
				if (exex_monsterlevelenabledflags) user_chargechance += (CountInv("MonsterLevel") * (0.075));
				if (user_chargechance > 70) user_chargechance = 70;

				if (random(1,100) > user_chargechance) { return resolvestate("See"); }
				else
				{
					A_GargDashCheck(); // if (AAPTR_TARGET == AAPTR_NULL) { return resolvestate("See"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Charge:
			IMPX A 10
			{
				A_DynamicMusic();
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			IMPX B 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }

				// A_ImpMsAttack; Emulation
				SetDamage(((0+(CountInv("MonsterLevel")/random(22,23)))));
				A_SkullAttack(12+(CountInv("MonsterLevel")/randompick(11,11,11,12)));
			}
			IMPX CBAB 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
			}
			IMPX A 0 A_GargDashCheck2();
			Goto Charge+2;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			goto See;
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GGGG 3;
			goto See;
		Death:
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Crash:
			IMPX I 7 A_ImpExplode();
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			IMPX H 5;
			IMPX G 4;
			goto See;
	}
}

class HereticImpLeaderNew : HereticImpNew replaces HereticImpLeader
{
	default
	{
		Tag "NitroGargoyle";
		Health 80;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Gargoyle Leader";
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 75;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 113;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 169;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 188;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.375;
		Painchance "Chop", 206;
		DamageFactor "Breakfast", 0.75;
		Painchance "Breakfast", 113;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 113;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 225;
		DamageFactor "Popper", 2;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 225;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 188;
		Species "Gargoyle";
		-MISSILEMORE;
		+DONTHARMSPECIES;
		AttackSound "himp/leaderattack";
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
	
	
	states
	{
		Melee:
			Stop;
		Missile:
			IMPX D 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBallNew", 16, random[ImpMsAttack2](5,12), "himp/leaderattack");
			}
			goto See;
	}
}

class HereticImpBallNew : EEProjectile replaces HereticImpBall 
{
	default
	{
		Tag "Gargoyle Fireball";
		Radius 8;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (1 * random(1,8));
		DamageType "Fire";
		Projectile;
		SeeSound "himp/leaderattack";
		DeathSound "misc/fireballsmall";
		+SPAWNSOUNDSOURCE;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX10 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX10 DEFG 5 Bright;
			Stop;
	}
}

class MummyNew : EECreature replaces Mummy
{
	default
	{
		Tag "Golem";
		Health 80;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 112;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	states
	{
		Spawn:
			MUMM A 0 NoDelay;
			MUMM AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMM A 0;
			MUMM ABCD 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Pain:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			Goto See;
		Pain.Fist:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			MUMM HH 4;
			Goto See;
		Pain.Kick:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			MUMM HHHH 4;
			Goto See;
		Death:
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMM H 5 A_GenericFreezeDeath();
			MUMM H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}

class MummyGhostNew : MummyNew replaces MummyGhost
{
	default
	{
		Tag "Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 128;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
	}
}

class MummyLeaderNew : EECreature replaces MummyLeader
{
	default
	{
		Tag "NitroGolem";
		Health 100;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 56;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		Obituary "$OB_MUMMYLEADER";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	
	states
	{
		Spawn:
			MUMA A 0 NoDelay;
			MUMA AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMA A 0;
			MUMA ABCD 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			MUMA X 0 A_DynamicMusic();
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();

				A_CustomComboAttack("MummyFX1", 32, random[MummyAttack2](1,8)*2, "mummy/attack2");
			}
			Goto See;
		Pain:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			Goto See;
		Pain.Fist:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			MUMA HH 4;
			Goto See;
		Pain.Kick:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			MUMA HHHH 4;
			Goto See;
		Death:
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMA H 5 A_GenericFreezeDeath();
			MUMA H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}

class MummyLeaderGhostNew : MummyLeaderNew replaces MummyLeaderGhost
{
	default
	{
		Tag "NitroGolem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 64;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
	}
}

class MummyFX1New : EEProjectile replaces MummyFX1 
{
	default
	{
		Tag "Screamer Fireskull";
		Radius 8;
		Height 14;
		Speed 9;
		FastSpeed 18;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		RenderStyle "Add";
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			FX15 A 5 Bright A_StartSound("mummy/head");
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			FX15 C 5 Bright;
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			Loop;
		Death:
			FX15 DEFG 5 Bright;
			Stop;
	}
}

class KnightNew : EECreature replaces Knight
{
	default
	{
		Tag "Undead Warrior";
		Health 200;
		Radius 24;
		Height 78;
		Mass 150;
		Speed 12;
		MeleeRange 68;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 1.00;
		Painchance "Suck", 100;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
		MeleeRange 68;
		Monster;
		+FLOORCLIP;
		SeeSound "hknight/sight";
		AttackSound "hknight/attack";
		PainSound "hknight/pain";
		DeathSound "hknight/death";
		ActiveSound "hknight/active";
		Obituary "$OB_BONEKNIGHT";
		HitObituary "$OB_BONEKNIGHTHIT";
		DropItem "CrossbowAmmo", 84, 5;
		DropItem "CrossbowHefty", 8, 25;
	}
	
	States
	{
		Spawn:
			KNIG A 0 NoDelay;
			KNIG AB 10 A_Look();
			goto Spawn+1;
		See:
			KNIG A 0;
			KNIG ABCD 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
		Missile:
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
				
				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();

				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			Goto See;
		Pain:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			Goto See;
		Pain.Fist:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			KNIG HH 3;
			Goto See;
		Pain.Kick:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			KNIG HHHH 3;
			Goto See;
		Death:
			KNIG I 6;
			KNIG J 6 A_Scream();
			KNIG K 6;
			KNIG L 6 A_NoBlocking();
			KNIG MN 6;
			KNIG O -1;
			Stop;
		Ice:
			KNIG H 5 A_GenericFreezeDeath();
			KNIG H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			KNIG N 6;
			KNIG MLKJI 6;
			Goto See;
	}
}

class KnightGhostNew : KnightNew replaces KnightGhost
{
	default
	{
		Tag "Undead Warrior (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 100;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
	}
}

class KnightAxeNew : EEEffectProjectile replaces KnightAxe 
{
	default
	{
		Tag "Green Axe";
		DamageFunction (2 * random(1,8));
		DamageType "Magic";
		Radius 10;
		Height 8;
		Speed 9;
		FastSpeed 18;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+THRUGHOST; // Knight Axe [Green]
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			SPAX A 3 Bright
			{
				A_StartSound("hknight/axewhoosh");
			}
			SPAX BC 3 Bright;
			Loop;
		Death:
			SPAX DDEEFF 3 Bright;
			Stop;
	}
}

class RedAxeNew : KnightAxeNew replaces RedAxe 
{
	default
	{
		Tag "Bloody Axe";
		DamageFunction (7 * random(1,8));
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			RAXE AA 2 Bright;
			RAXE A 1 Bright 
			{
				A_DripBlood();
			}
			RAXE BB 2 Bright;
			RAXE B 1 Bright 
			{
				A_DripBlood();
			}
			Loop;
		Death:
			RAXE CDE 6 Bright;
			Stop;
	}
}

class WizardNew : EECreature replaces Wizard
{
	default
	{
		Tag "Disciple of D'Sparil";
		Health 180;
		Radius 16;
		Height 68;
		Mass 100;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 112;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 48;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 88;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 64;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 112;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 128;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "Zap", 0.625;
		Painchance "Zap", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 2.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 48;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 128;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		SeeSound "wizard/sight";
		AttackSound "wizard/attack";
		PainSound "wizard/pain";
		DeathSound "wizard/death";
		ActiveSound "wizard/active";
		Obituary "$OB_WIZARD";
		HitObituary "$OB_WIZARDHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiTomeOfPower", 4, 1;
		Obituary "%o was cursed by a Disciple of D'Sparil.";
		HitObituary "%o was scratched by a Disciple of D'Sparil.";
	}
	
	States
	{
		Spawn:
			WZRD A 0 NoDelay;
			WZRD AB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			WZRD N 0 A_DynamicMusic();
			WZRD N 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD O 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD P 12 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(55,56)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(44,45)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(33,34)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(11,12)) { A_SetTics(11); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(1,5)*8, "wizard/melee", "none", "Melee", true);
			}
			Goto See;
		Missile:
			WZRD C 0 A_DynamicMusic();
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(66,67,67)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,33,34)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD D 12
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(55,56)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(44,45)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(33,34)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(11,12)) { A_SetTics(11); }

				A_WizAtk3("WizardFX1New", 5*random(1,8));
			}
			Goto See;
		Pain:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EE 3;
			Goto See;
		Pain.Kick:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EEEE 3;
			Goto See;
		Death:
			WZRD F 6 A_GhostOff();
			WZRD G 6 A_Scream();
			WZRD HI 6;
			WZRD J 6 A_NoBlocking();
			WZRD KL 6;
			WZRD M -1 A_SetFloorClip();
			Stop;
		Ice:
			WZRD Q 5 A_GenericFreezeDeath();
			WZRD Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WZRD M 6;
			WZRD LKJIHGF 6;
			Goto See;
	}
}

class WizardFX1New : EEProjectile replaces WizardFX1 
{
	default
	{
		Tag "Wizard Shot";
		DamageType "Magic"; 
		Radius 10;
		Height 6;
		Speed 18;
		FastSpeed 24;
		DamageFunction (3 * random(1,8));
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/magichit";
	}
	
	States
	{
		Spawn:
			FX11 AAABBB 2 Bright;
			Loop;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}

class IronLichNew : EECreature replaces IronLich
{
	default
	{
		Tag "Iron Lich";
		Health 700;
		Radius 40;
		Height 72;
		Mass 325;
		Speed 6;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 8;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 64;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 20;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 24;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 24;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 40;
		DamageFactor "Suck", 0.05;
		Painchance "Suck", 1;
		DamageFactor "Zap", 0.3125;
		Painchance "Zap", 10;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 128;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 32;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 32;
		Monster;
		+NOBLOOD;
		+DONTMORPH;
		+DONTSQUASH;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "ironlich/attack";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "$OB_IRONLICH";
		HitObituary "$OB_IRONLICHHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 10 A_Look();
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			LICH A 5 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			LICH B 20 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }

				if (exex_monsterlevelenabledflags) A_LichAttack(5 + (CountInv("MonsterLevel") / 30), 1 + (CountInv("MonsterLevel") / 45), 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
																			else A_LichAttack(5, 1, 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
			}
			goto See;
		Pain:
			LICH A 4;
			LICH A 4 A_EEPain();
			goto See;
		Pain.Fist:
			LICH A 4;
			LICH A 4 A_EEPain();
			LICH AA 4;
			goto See;
		Pain.Kick:
			LICH A 4;
			LICH A 4 A_EEPain();
			LICH AAAA 4;
			goto See;
		Death:
			LICH C 7;
			LICH D 7 A_Scream();
			LICH EF 7;
			LICH G 7 A_NoBlocking();
			LICH H 7;
			LICH I -1 A_BossDeath();
			Stop;
		Ice:
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}

class HeadFX1New : EEEffectProjectile replaces HeadFX1 
{
	default
	{
		Tag "Ice Sphere";
		DamageFunction (1 * random(1,8));
		Radius 12;
		Height 6;
		Speed 13;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Icon Lich Ice Ball
		DamageType "Ice";
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 AAABBBCCC 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(12);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						int basetime = random(105,175);
						if (!player.CountInv("PowerSlow"))
						{
							player.SetInventory("PowerSlow",1);
							let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
							if (SlowItem) SlowItem.EffectTics = basetime;
						}
						else
						{
							let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
							if (SlowItem) SlowItem.EffectTics += basetime;
						}
						player.A_StartSound("debuff/spddown",401,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					}
				}
			}
		Death2:
			FX05 D 5 Bright A_LichIceImpact("HeadFX2New", 8, -0.6);
			FX05 EFG 5 Bright;
			Stop;
	}
}
class HeadFX2New : EEEffectProjectile replaces HeadFX2 
{
	default
	{
		Tag "Ice Shard";
		DamageFunction (3 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 6;
		Speed 8;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 HHHIIIJJJ 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						int basetime = random(35,52);
						if (!player.CountInv("PowerSlow"))
						{
							player.SetInventory("PowerSlow",1);
							let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
							if (SlowItem) SlowItem.EffectTics = basetime;
						}
						else
						{
							let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
							if (SlowItem) SlowItem.EffectTics += basetime;
						}
						player.A_StartSound("debuff/spddown",401,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
					}
				}
			}
		Death2:
			FX05 DEFG 5 Bright;
			Stop;
	}
}
class HeadFX3New : EEEffectProjectile replaces HeadFX3 
{ 
	default
	{
		Tag "Fire Pillar";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Radius 14;
		Height 12;
		Speed 10;
		FastSpeed 18;
		Projectile;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		RenderStyle "Add";
		DeathSound "misc/fireballbig";
	}
	
	States
	{
		Spawn:
			FX06 A 2 Bright;
			FX06 A 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 B 2 Bright;
			FX06 B 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 C 2 Bright;
			FX06 C 2 Bright
			{
				A_LichFireGrow();
			}
			Loop;
		NoGrow:
			FX06 AA 2 Bright;
			FX06 A 1 Bright;
			FX06 BB 2 Bright;
			FX06 B 1 Bright;
			FX06 CC 2 Bright;
			FX06 C 1 Bright;
			Loop;
		Death:
			FX06 DEFG 5 Bright;
			Stop;
	}
}
class WhirlwindNew : EEWhirlwind replaces Whirlwind 
{
	default
	{
		Tag "Whirlwind";
		DamageFunction (1 * random(1,8));
		DamageType "Wind";
		Radius 16;
		Height 74;
		Speed 10;
		Accuracy 8; // Sets how long [tics] to wait between hits when the tornado is touching a target
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEMCROSS;
		+SEEKERMISSILE;
		+EXPLOCOUNT;
		+STEPMISSILE;
		RenderStyle "Translucent";
		DefThreshold 60;
		Threshold 50;
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			FX07 DEFG 3;
		Idle:
			FX07 ABC 3 
			{
				A_WhirlwindSeek();
			}
			Loop;
		Death:
			FX07 GFED 4;
			Stop;
	}
}

class BeastNew : Beast replaces Beast
{
	mixin MonsterCollider;
	default
	{
		Tag "Weredragon";
		Painchance 100;
		DamageFactor "Fire", 0.125;
		Painchance "Fire", 13;
		DamageFactor "Ice", 4.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.5625;
		Painchance "CherryBomb", 56;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 125;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 75;
		DamageFactor "Lead", 2.5;
		Painchance "Lead", 250;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 150;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 75;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 150;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 100;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 256;
	}
}

class ClinkNew : Clink replaces Clink
{
	mixin MonsterCollider;
	default
	{
		Tag "Sabreclaw";
		Painchance 32;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 28;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 43;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 30;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 32;
		DamageFactor "Cricket", 2.0;
		Painchance "Cricket", 64;
		DamageFactor "Lead", 0.25;
		Painchance "Lead", 8;
		DamageFactor "Chop", 4.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 16;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 48;
		DamageFactor "Dust", 3.0;
		Painchance "Dust", 72;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 8;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 8;
	}
}

class MinotaurNew : Minotaur replaces Minotaur
{
	mixin MonsterCollider;
	default
	{
		Tag "Maulotaur";
		Painchance 25;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
	}
}

class SnakeNew : Snake replaces Snake
{
	mixin MonsterCollider;
	default
	{
		Tag "Ophidian";
		Painchance 48;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 42;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 60;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 45;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 24;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 36;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 36;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 72;
		DamageFactor "Zap", 0.875;
		Painchance "Zap", 42;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 36;
		DamageFactor "BRocket", 1.25;
		Painchance "BRocket", 60;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 60;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 60;
	}
}

class Sorcerer1New : Sorcerer1 replaces Sorcerer1
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Painchance 56;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 70;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 56;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 70;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 84;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 38;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 140;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 112;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 168;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 84;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 168;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 70;
	}
}

class Sorcerer2New : Sorcerer2 replaces Sorcerer2
{
	mixin MonsterCollider;
	
	int lulwat;
	int lultimer1, lultimer1max;

	default
	{
		Tag "\c[gold]D'Sparil";
		Painchance 32;
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 80;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 24;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 32;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 48;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 8;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 4.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 256;
		DamageFactor "Zap", 0.05;
		Painchance "Zap", 2;
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
}

//******************
//* Hexen specific *
//******************
class PigNew : EECreature replaces Pig
{
	default
	{
		Tag "Pig";
		Health 25;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Speed 10;
		Radius 12;
		Height 22;
		Mass 60;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		SeeSound "PigActive1";
		PainSound "PigPain";
		DeathSound "PigDeath";
		ActiveSound "PigActive1";
	}
	
	States
	{
		Spawn:
			PIGY B 0 NoDelay;
			PIGY B 10 A_Look();
			goto Spawn+1;
		See:
			PIGY A 0;
			PIGY ABCD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			PIGY A 5 A_FaceTarget();
			PIGY A 10 
			{
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[PigAttack](2, 3), "PigAttack");
			}
			Goto See;
		Pain:
			PIGY D 4 A_PigPain();
			Goto See;
		Death:
			PIGY E 4 A_Scream();
			PIGY F 3 A_NoBlocking();
			PIGY G 4 A_QueueCorpse();
			PIGY H 3;
			PIGY IJK 4; 
			PIGY L -1;
			Stop;
		Ice:
			PIGY M 5 A_FreezeDeath();
			PIGY M 1 A_FreezeDeathChunks();
			Wait;
	}
}

class FireDemonNew : EECreature replaces FireDemon
{
	int user_firedemonchase;
	default
	{
		Tag "Afrit";
		Health 80;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Afrit";
		PainChance 1;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 0;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 0;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 1;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.75;
		Painchance "Chop", 2;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 0;
		DamageFactor "Suck", 2.50;
		Painchance "Suck", 3;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 0;
		DamageFactor "BRocket", 2;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 1;
		Painchance "Popper", 1;
		DamageFactor "Spinner", 2;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 24;
		Speed 13;
		Radius 20;
		Height 68;
		Mass 75;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		+DONTHARMSPECIES;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "$OB_FIREDEMON"; // "%o tasted an Afrit's fire.";
	}
	
	States
	{
		Spawn:
			FDMN X 0 NoDelay;
			FDMN X 5 Bright;
			FDMN EFG 10 Bright A_FloatLook(16);
			Goto Spawn+3;
		See:
			FDMN E 0;
			FDMN E 8 Bright;
			FDMN F 6 Bright;
			FDMN G 5 Bright;
			FDMN F 8 Bright;
			FDMN E 6 Bright;
			FDMN G 7 Bright A_FiredRocks();
			FDMN HI 5 Bright;
			FDMN J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDMN ABC 5 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FireDChase(32,4,20,13,1,1,3,1);
			}
			Loop;
		Pain:
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_EEPain();
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDMN K 3 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDMN KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonMissile",32);
			}
			Goto Chase;
		Crash:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;
		XDeath:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;

		Death:
			FDMN D 4 Bright A_FaceTarget();
			FDMN L 4 Bright A_Scream();
			FDMN L 4 Bright A_NoBlocking();
			FDMN L 200 Bright;
			Stop;
		Ice:
			FDMN R 5 A_FreezeDeath();
			FDMN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDMN L 4;
			FDMN LD 4;
			Goto Chase;
	}
}

class FireDemonMissileNew : EEProjectile replaces FireDemonMissile
{
	default
	{
		Tag "Fire Missile";
		Health 1000;
		ReactionTime 8;
		Speed 10;
		Radius 10;
		Height 6;
		Mass 5;
		DamageFunction (1 * random(1,6)); // 1
		DamageType "Fire";
		Projectile;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDMB A 5 Bright;
			Loop;
		Death:
			FDMB BCDE 5 Bright;
			Stop;
	}
}

class EttinNew : EECreature replaces Ettin
{
	default
	{
		Tag "Ettin";
		Health 175;
		Radius 25;
		Height 68;
		Mass 175;
		Speed 13;
		Damage 3;
		Painchance 60;
		Painchance "Fist", 90; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 150; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 40;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
		Monster;
		MeleeRange 68;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "EttinSight";
		AttackSound "EttinAttack";
		PainSound "EttinPain";
		DeathSound "EttinDeath";
		ActiveSound "EttinActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_ETTIN";
	}
	
	
	States
	{
		Spawn:
			ETTN A 0 NoDelay;
			ETTN AA 10 A_Look();
			goto Spawn+1;
		See:
			ETTN A 0;
			ETTN ABCD 5
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			ETTN EF 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ETTN G 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[EttinAttack](1,8)*2);
			}
			Goto See;
		Pain:
			ETTN H 7 A_EEPain();
			Goto See;
		Pain.Fist:
			ETTN H 7 A_EEPain();
			ETTN H 7;
			Goto See;
		Pain.Kick:
			ETTN H 7 A_EEPain();
			ETTN HH 7;
			Goto See;
		Death:
			ETTN IJ 4;
			ETTN K 4 A_Scream();
			ETTN L 4 A_NoBlocking();
			ETTN M 4 A_QueueCorpse();
			ETTN NOP 4;
			ETTN Q -1;
			Stop;

		XDeath:
			ETTB A 4;
			ETTB B 4 A_NoBlocking();
			ETTB C 4 A_SpawnItemEx("EttinMace", 0, 0, 8.5, random[DropMace](-128, 127)*0.03125, random[DropMace](-128, 127)*0.03125, 10+random[DropMace](0, 255)*0.015625, 0, SXF_ABSOLUTEVELOCITY);
			ETTB D 4 A_Scream();
			ETTB E 4 A_QueueCorpse();
			ETTB FGHIJK 4;
			TNT1 A 0;
			ETTB L -1;
			Stop;
		Ice:
			ETTN R 5 A_FreezeDeath();
			ETTN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ETTN P 4;
			ETTN ONMLKJI 4;
			Goto See;
	}
}

class EttinGhostNew : EttinNew replaces EttinMash
{
	default
	{
		Tag "Ettin (Ghost)";
		+NOBLOOD;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		PainChance 60;
		DamageFactor "Eldritch", 0.4;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 160;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
	}

	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}

class CentaurNew : EECreature replaces Centaur
{
	default
	{
		Tag "Centaur";
		Health 200;
		Painchance 135;
		Painchance "Fist", 201; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosion", 0.875;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 101;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
		Speed 13;
		Height 64;
		Mass 120;
		MeleeRange 80;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+SHIELDREFLECT;
		SeeSound "CentaurSight";
		AttackSound "CentaurAttack";
		PainSound "CentaurPain";
		DeathSound "CentaurDeath";
		ActiveSound "CentaurActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_CENTAUR";
	}
	
	
	States
	{
		Spawn:
			CENT A 0 NoDelay;
			CENT AB 10 A_Look();
			goto Spawn+1;
		See:
			CENT A 0;
			CENT ABCD 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](3, 9));
			}
			Goto See;
		Pain:
			CENT G 6 A_EEPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 6 A_EEPain();
			CENT GG 6;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 6 A_EEPain();
			CENT GGGG 6;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_CentaurShieldOn();
				A_FaceTarget();

				if (random(1,128) <= 1) { user_defendtimer += 1; }
				if (random(1,32) <= 1) { user_defendtimer += 1; }
				if (random(1,8) <= 1) { user_defendtimer += 1; }
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { user_defendtimermax = 3; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = 4; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_CentaurShieldOn();
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(17,18); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_defendtimermax = random(16,17); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
			}
			Goto See;

		Death:
			CENT K 4;
			CENT L 4 A_Scream();
			CENT MN 4;
			CENT O 4 A_NoBlocking();
			CENT PQ 4;
			CENT R 4 A_QueueCorpse();
			CENT S 4;
			CENT T -1;
			Stop;

		XDeath:
			CTXD A 4;
			CTXD B 4 A_NoBlocking();
			CTXD C 0 A_SpawnItemEx("CentaurSword", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 270);
			CTXD C 4 
			{
				if (random(1,256) == 1)
				{
					A_SpawnProjectile("EvilWarriorShield",44,-32,90,0);
				}
				else
				{
					A_SpawnItemEx("CentaurShield", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,
												1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 90);
				}
			}
			CTXD D 3 A_Scream();
			CTXD E 4 A_QueueCorpse();
			CTXD F 3;
			CTXD G 4;
			CTXD H 3;
			CTXD I 4;
			CTXD J 3;
			CTXD K -1;
			stop;
		Ice:
			CENT U 5 A_FreezeDeath();
			CENT U 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CENT T 4;
			CENT SRQPONMLK 4;
			Goto See;
	}
}

class CentaurGhostNew : CentaurNew replaces CentaurMash
{
	default
	{
		Tag "Centaur (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		PainChance 135;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
	}
	
	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}

class SlaughtaurNew : CentaurNew replaces CentaurLeader
{
	default
	{
		Health 325;
		Speed 12.5;
		MeleeRange 80;
		Painchance 84;
		Painchance "Fist", 126; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 210; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 126; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;

		DamageFactor "Fire", 0.25;
		Painchance "Fire", 21;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 53;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 63;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 95;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 95;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 105;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 42;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 63;
		DamageFactor "Dust", 1.125;
		Painchance "Dust", 95;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 42;
		DamageFactor "Popper", 2.25;
		Painchance "Popper", 189;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 21;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 105;
		Translation "81:96=85:92", "97:121=101:113", "0:32=231:235", "33:50=231:235";  // Dark Skin, Obsidian Armor
	}
	
	States
	{
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](5, 13));
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
		MissilePhase1:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(7,8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_defendtimermax = random(8,9); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase2"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase2:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { user_defendtimermax = random(5,6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(6,7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase3"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase3:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(7,8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_defendtimermax = random(8,9); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase4"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase4:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}
			
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { user_defendtimermax = random(5,6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(6,7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }
	
				if (user_defendtimer >= user_defendtimermax) 
				{
					A_CentaurShieldOff();
					A_SlaughtaurShieldOff();
					return resolvestate("See"); 
				}
				return resolvestate(null); 
			}
			Loop;
		Pain:
			CENT G 5 A_EEPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 5 A_EEPain();
			CENT GG 5;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 5 A_EEPain();
			CENT GGGG 5;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
	
				if (random(1,32) == 1) { user_defendtimer += 1; }
				if (random(1,8) == 1) { user_defendtimer += 1; }
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(157,158)) { user_defendtimermax = 2; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 105) { user_defendtimermax = 3; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(52,53)) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_SlaughtaurShieldOn();
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_defendtimermax = random(21,22); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_defendtimermax = random(19,20); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_defendtimermax = random(18,19); }
				else { user_defendtimermax = 18; }
	
				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
	
				user_paintomissile = 10;
				if (exex_monsterlevelenabledflags) user_paintomissile -= (CountInv("MonsterLevel") * (0.1));
				if (user_paintomissile < 1) user_paintomissile = 1;
	
				if (random(1,user_paintomissile) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
	}
}

class CentaurFXNew : EEProjectile replaces CentaurFX
{
	default
	{
		Tag "Shield Blast";
		Speed 20;
		DamageFunction (4 * random(1,8));
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "CentaurLeaderAttack";
		DeathSound "CentaurMissileExplode";
	}
	
	States
	{
		Spawn:
			CTFX A -1 Bright;
			Loop;
		Death:
			CTFX B 4 Bright;
			CTFX C 3 Bright;
			CTFX D 4 Bright;
			CTFX E 3 Bright;
			CTFX F 2 Bright;
			Stop;
	}
}

class Demon1New : Demon1 replaces Demon1
{
	mixin MonsterCollider;
	default
	{
		Tag "Green Chaos Serpent";
		Painchance 50;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon1MashNew : Demon1Mash replaces Demon1Mash
{
	mixin MonsterCollider;
	default
	{
		Tag "Green Chaos Serpent (Ghost)";
		Painchance 50;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon2New : Demon2 replaces Demon2
{
	mixin MonsterCollider;
	default
	{
		Tag "Brown Chaos Serpent";
		Painchance 50;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 56;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon2MashNew : Demon2Mash replaces Demon2Mash
{
	mixin MonsterCollider;
	default
	{
		Tag "Brown Chaos Serpent (Ghost)";
		Painchance 50;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class IceGuyNew : IceGuy replaces IceGuy
{
	mixin MonsterCollider;
	default
	{
		Tag "Wendigo";
		PainChance 144;
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 0.01;
		Painchance "Ice", 1;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 72;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 180;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 180;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.01;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0.8;
		Painchance "Zap", 115;
		DamageFactor "Dust", 1.75;
		Painchance "Dust", 252;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 1.5;
		Painchance "Popper", 212;
		DamageFactor "Spinner", 4.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
	}
}

class SerpentNew : Serpent replaces Serpent
{
	mixin MonsterCollider;
	default
	{
		Tag "Stalker";
		PainChance 96;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 192;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 72;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 144;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 120;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 144;
		DamageFactor "Lead", 0.875;
		Painchance "Lead", 84;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 108;
		DamageFactor "Breakfast", 1.125;
		Painchance "Breakfast", 108;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
		Mass 100000;
	}
}

class SerpentLeaderNew : SerpentLeader replaces SerpentLeader
{
	mixin MonsterCollider;
	default
	{
		Tag "Alpha Stalker";
		Translation "51:66=51:58", "186:202=186:194", "233:239=235:239", "33:50=33:41", "0:32=0:16";
		Meleerange 72;
		PainChance 96;
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 168;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 84;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 132;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.125;
		Painchance "Cricket", 108;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 120;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
		Mass 100000;
	}
}

class BishopNew : Bishop replaces Bishop
{
	mixin MonsterCollider;
	default
	{
		Tag "Dark Bishop";
		PainChance 110;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 55;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 220;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 83;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 165;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 165;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 83;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 165;
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 28;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 220;
		DamageFactor "Zap", 0.10;
		Painchance "Zap", 1; // 10 times EVEN LESS likely to flinch from the Pike's shots than expected
		DamageFactor "Dust", 10;
		Painchance "Dust", 256;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 165;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 110;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 220;
	}
}

class WraithNew : Wraith replaces Wraith
{
	mixin MonsterCollider;
	default
	{
		Tag "Reiver";
		PainChance 25;
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 44;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 6;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 31;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 6;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 3;
		DamageFactor "Suck", 5.00;
		Painchance "Suck", 125;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 100;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 50;
		DamageFactor "Popper", 3.5;
		Painchance "Popper", 88;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 2.75;
		Painchance "Beats", 69;
	}
}

class WraithBuriedNew : WraithBuried replaces WraithBuried
{
	mixin MonsterCollider;
	default
	{
		Tag "Reiver";
		PainChance 25;
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 44;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 6;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 31;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 6;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 3;
		DamageFactor "Suck", 5.00;
		Painchance "Suck", 125;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 100;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 50;
		DamageFactor "Popper", 3.5;
		Painchance "Popper", 88;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 2.75;
		Painchance "Beats", 69;
	}
}

class DragonNew : Dragon replaces Dragon
{
	mixin MonsterCollider;
	default
	{
		Tag "Death Wyvern";
		PainChance 16; // 8 times less than before
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 40;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 2;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 16;
		DamageFactor "Cricket", 0.125;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 0.125;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 16;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 48;
		DamageFactor "Suck", 0.03125;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0; // Is COMPLETELY immune to the Pike Shot
		Painchance "Zap", 0;
		DamageFactor "Dust", 0.0625;
		Painchance "Dust", 1;
		DamageFactor "BRocket", 0.125;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 10;
		Painchance "Popper", 160;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 0; // Does NOT flinch from the Grimophone despite having a weakness to it
	}
}

class HeresiarchNew : Heresiarch replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	mixin MonsterCollider;
	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBall> StopBall; // SorcBallBase
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 5000;
		Painchance 10;
		//DamageFactor 0.833;
		//RadiusDamageFactor 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 9;
		DamageFactor "Bonk", 2.0;
		Painchance "Bonk", 20;
		DamageFactor "Cricket", 3.75;
		Painchance "Cricket", 38;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 5;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 20;
		DamageFactor "Breakfast", 5.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 5;
		DamageFactor "Zap", 0.025; // Is virtually immune to the Pike Shot
		Painchance "Zap", 240; // That said, he almost always flinches from it anyways V:
		DamageFactor "Dust", 5.0;
		Painchance "Dust", 5;
		DamageFactor "BRocket", 0.0625;
		Painchance "BRocket", 1;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 3;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 3;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3;
			SORC A 2 A_SorcSpinBalls;
		Idle:
			SORC A 10 A_Look;
			Wait;
		See:
			SORC ABCD 5 A_Chase();
			Loop;
		Pain:
			SORC G 8;
			SORC G 8 A_Pain;
			Goto See;
		Missile:
			SORC F 6 Bright A_FaceTarget;
			SORC F 6 Bright A_SpeedBalls;
			SORC F 6 Bright A_FaceTarget;
			Wait;
		Attack1:
			SORC E 6 Bright;
			SORC E 6 Bright A_SpawnFizzle;
			SORC E 5 Bright A_FaceTarget;
			Goto Attack1+1;
		Attack2:
			SORC E 2 Bright;
			SORC E 2 Bright A_SorcBossAttack;
			Goto See;
		Death:
			SORC H 5 Bright;
			SORC I 5 Bright A_FaceTarget;
			SORC J 5 Bright A_Scream();
			SORC KLMNOPQRST 5 Bright;
			SORC U 5 Bright A_NoBlocking();
			SORC VWXY 5 Bright;
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) >> 1)) && (chance < 200))
		{
			StopBall = "SorcBall3";	// Green
		}
		else
		{
			StopBall = "SorcBall1";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}

class ClericBossNew : ClericBoss replaces ClericBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Traductus";
		PainChance 50;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "Ice", 1.8;
		Painchance "Ice", 90;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 50;
		DamageFactor "Cricket", 0.2;
		Painchance "Cricket", 10;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 50;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.0;
		Painchance "Zap", 50;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
	}
}

class FighterBossNew : FighterBoss replaces FighterBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Zedek";
		PainChance 50;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 20;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 0.7;
		Painchance "CherryBomb", 35;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 63;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 13;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 63;
		DamageFactor "Dust", 0.4;
		Painchance "Dust", 20;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 38;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 38;
	}
}

class MageBossNew : MageBoss replaces MageBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Menelkir";
		PainChance 50;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 13;
		DamageFactor "Ice", 0.625;
		Painchance "Ice", 31;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 31;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 0.3125;
		Painchance "Cricket", 16;
		DamageFactor "Lead", 0.3125;
		Painchance "Lead", 16;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 75;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 38;
		DamageFactor "Dust", 1.0;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 38;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 38;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
	}
}

class KoraxNew : Korax replaces Korax
{
	mixin MonsterCollider;
	
	int lulwat;
	int lultimer1, lultimer1max;

	default
	{
		Tag "\c[gold]Korax";
		PainChance 20;
		DamageFactor "Fire", 0.05;
		Painchance "Fire", 0; // Korax NEVER flinches from Fire
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 5;
		DamageFactor "CherryBomb", 0.525;
		Painchance "CherryBomb", 0; // Korax NEVER flinches from Cherry Bombs
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 3; // Korax flinches four times less than expected from bonks from various melee weapons
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 20;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 3; // Korax flinches four times less than expected from Blundershot
		DamageFactor "Chop", 0.5;
		Painchance "Chop", 3; // Korax flinches four times less than expected from Axe Chops
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 1; // Korax flinches four times less than expected from Fractal Eggs
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 1; // Korax flinches four times less than expected from the SuperVac
		DamageFactor "Zap", 0.25;
		Painchance "Zap", 0; // Korax NEVER flinches from the Pike's shots
		DamageFactor "Dust", 0.375;
		Painchance "Dust", 2; // Korax flinches four times less than expected from the Dust Devils
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 3; // Korax flinches four times less than expected from Bottle Rockets
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 5; // Korax flinches four times less than expected from Poppers
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 3; // Korax flinches four times less than expected from Spinners
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 0; // Korax NEVER flinches from the Grimophone
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
}

class MinotaurFriendNew : MinotaurFriend replaces MinotaurFriend
{
	mixin MonsterCollider;
	default
	{
		Tag "Maulotaur";
		Painchance 25;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
	}
}

//*******************
//* Strife specific *
//*******************

class AcolyteNew : Acolyte replaces Acolyte
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteTanNew : AcolyteTan replaces AcolyteTan
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteRedNew : AcolyteRed replaces AcolyteRed
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteRustNew : AcolyteRust replaces AcolyteRust
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteGrayNew : AcolyteGray replaces AcolyteGray
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteDGreenNew : AcolyteDGreen replaces AcolyteDGreen
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteGoldNew : AcolyteGold replaces AcolyteGold
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteLGreenNew : AcolyteLGreen replaces AcolyteLGreen
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteBlueNew : AcolyteBlue replaces AcolyteBlue
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteShadowNew : AcolyteShadow replaces AcolyteShadow
{
	mixin MonsterCollider;
	default
	{
		PainChance 50; // Much less pain chain vs normal Acolytes
		DamageFactor 0.334; // Most general damage is lessened against them
	}
}

class AcolyteToBeNew : AcolyteToBe replaces AcolyteToBe
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class RebelNew : Rebel replaces Rebel
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel1New : Rebel1 replaces Rebel1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel2New : Rebel2 replaces Rebel2
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel3New : Rebel3 replaces Rebel3
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel4New : Rebel4 replaces Rebel4
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel5New : Rebel5 replaces Rebel5
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel6New : Rebel6 replaces Rebel6
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class CeilingTurretNew : CeilingTurret replaces CeilingTurret
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		+NOPAIN
	}
}

class StalkerNew : Stalker replaces Stalker
{
	mixin MonsterCollider;
	default
	{
		PainChance 40;
	}
}

class SentinelNew : Sentinel replaces Sentinel
{
	mixin MonsterCollider;
	default
	{
		Painchance 255;
	}
}

class TemplarNew : Templar replaces Templar
{
	mixin MonsterCollider;
	default
	{
		PainChance 100;
	}
}

class ReaverNew : Reaver replaces Reaver
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class CrusaderNew : Crusader replaces Crusader
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class InquisitorNew : Inquisitor replaces Inquisitor
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		+NOPAIN
	}
}

class ProgrammerNew : Programmer replaces Programmer
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 13;
	}
}

class StrifeBishopNew : StrifeBishop replaces StrifeBishop
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class OracleNew : Oracle replaces Oracle
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 0;
	}
}

class Macil1New : Macil1 replaces Macil1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class Macil2New : Macil2 replaces Macil2
{
	mixin MonsterCollider;
	default
	{
		PainChance 200;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class LoremasterNew : Loremaster replaces Loremaster
{
	mixin MonsterCollider;
	default
	{
		Painchance 50;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 125;
	}
	
	States
	{
		Pain.Suck:
			PDED A 9;
			PDED A 9 A_Pain;
			stop;
		Pain:
			PDED A 3;
			PDED A 3 A_Pain;
			stop;
	}
}

class AlienSpectre1New : AlienSpectre1 replaces AlienSpectre1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 256;
	}
}

class AlienSpectre2New : AlienSpectre2 replaces AlienSpectre2
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre3New : AlienSpectre3 replaces AlienSpectre3
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre4New : AlienSpectre4 replaces AlienSpectre4
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre5New : AlienSpectre5 replaces AlienSpectre5
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class EntityBossNew : EntityBoss replaces EntityBoss
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class EntitySecondNew : EntitySecond replaces EntitySecond
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

//*******************************************
//* Mapset specific CompatPack Replacements *
//*******************************************
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMastermindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SSWV AABBCCDD 3
			{
				user_walksound++;
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}

// DV2's Balrog
class FlyingBalrog : EECreature
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 30;
		Mass 400;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		Monster;
		SeeSound "keen/pain";
		PainSound "keen/death";
		DeathSound "brain/spit";
		ActiveSound "keen/death";
		Obituary "%o fell to the might of a Balrog.";
	}
	
	States
	{
		Spawn:
			KEEN A 10 Bright A_Look();
			goto Spawn;
		See:
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			KEEN H 8 Bright;
			KEEN A 3 Bright A_Pain();
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			KEEN EF 6 Bright A_FaceTarget();
			KEEN G 1 Bright A_FatAttack1();
			KEEN G 1 Bright A_FatAttack2();
			KEEN G 1 Bright A_FatAttack3();
			KEEN G 1 Bright A_FaceTarget();
			KEEN GG 1 Bright A_SkelMissile();
			KEEN G 8 Bright A_SkelMissile();
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			KEEN I 5 Bright;
			KEEN J 5 Bright A_Scream();
			KEEN K 5 Bright;
			KEEN L 5 Bright A_Fall();
			KEEN MNOPQ 5 Bright;
			KEEN R 5 Bright A_BossDeath();
			KEEN R 1 Bright;
			stop;
	}
}

// DV2's Hell Cleric
class HellCleric : EECreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}

// TBC :V