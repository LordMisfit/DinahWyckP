class EEScriptedMarine : EECreature replaces ScriptedMarine
{
	const MARINE_PAIN_CHANCE = 160;

	enum EMarineWeapon
	{
		WEAPON_Dummy,
		WEAPON_Fist,
		WEAPON_BerserkFist,
		WEAPON_Chainsaw,
		WEAPON_Pistol,
		WEAPON_Shotgun,
		WEAPON_SuperShotgun,
		WEAPON_Chaingun,
		WEAPON_RocketLauncher,
		WEAPON_PlasmaRifle,
		WEAPON_Railgun,
		WEAPON_BFG
	};
	
	struct WeaponStates
	{
		state melee;
		state missile;
	}

	int CurrentWeapon;
	SpriteID SpriteOverride;
	
	Default
	{
		Tag "UAC Marine Buddy";
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance MARINE_PAIN_CHANCE;
		MONSTER;
		-COUNTKILL
		Translation 0;
		Damage 100;
		DeathSound "*death";
		PainSound "*pain50";
	}
	
	States
	{
		Spawn:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			Loop;
		Idle:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			PLAY A 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			PLAY B 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			Loop;
		See:
			PLAY ABCD 4 A_MarineChase;
			Loop;

		Melee.Fist:		
			PLAY E 4 A_FaceTarget;
			PLAY E 4 A_M_Punch(1);
			PLAY A 9;
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		FistEnd:
			PLAY A 5 A_FaceTarget;
			Goto See;
		Melee.Berserk:
			PLAY E 2 A_FaceTarget;
			PLAY E 2 A_M_Punch(10);
			PLAY A 4
			{
				A_SetTics(random(4,5));
			}
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		Melee.Chainsaw:
			PLAY E 4 A_MarineNoise;
			PLAY E 4 A_M_Saw;
			PLAY E 0 A_M_SawRefire;
			goto Melee.Chainsaw+1;

		Missile:
			PLAY E 0 A_DynamicMusic();
		Missile.None:
			PLAY E 12 A_FaceTarget;
			Goto Idle;
			PLAY F 6 BRIGHT;
			Loop;
		Missile.Pistol:
			PLAY E 4 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FirePistol(1);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		ShootEnd:
			PLAY A 5;
			Goto See;
		Fireloop.Pistol:
			PLAY F 0 A_DynamicMusic();
			PLAY F 6 BRIGHT A_M_FirePistol(0);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		Missile.Shotgun:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun;
			Goto See;
		Missile.SSG:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun2;
			Goto See;
		Missile.Chaingun:
			PLAY E 4 A_FaceTarget;
			PLAY FF 4 BRIGHT 
			{
				A_DynamicMusic();
				A_M_FireCGun(1);
			}
			PLAY FF 4 BRIGHT 
			{
				A_DynamicMusic();
				A_M_FireCGun(0);
			}
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Chaingun+3;
		Missile.Rocket:
			PLAY E 8;
			PLAY F 6 BRIGHT A_M_FireMissile;
			PLAY E 6;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;
		Missile.Plasma:
			PLAY E 2 A_FaceTarget;
			PLAY E 0 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			PLAY F 3 BRIGHT A_M_FirePlasma;
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Plasma+1;
		Missile.Railgun:
			PLAY E 4 A_M_CheckAttack;
			PLAY F 6 BRIGHT A_M_FireRailgun;
			Goto See;
		Missile.BFG:
			PLAY E 5 A_M_BFGSound;
			PLAY EEEEE 5 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FireBFG;
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;

		SkipAttack:
			PLAY A 1;
			Goto See;
		Pain:
			PLAY G 4;
			PLAY G 4 A_EEPain;
			Goto Idle;
		Death:
			PLAY H 10;
			PLAY I 10 A_Scream;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			PLAY O 5;
			PLAY P 5 A_XScream;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		Raise:
			PLAY MLKJIH 5;
			Goto See;
	}
	
	//============================================================================
	//
	// 
	//
	//============================================================================

	private bool GetWeaponStates(int weap, out WeaponStates wstates)
	{
		static const statelabel MeleeNames[] = 
		{
			"Melee.None", "Melee.Fist", "Melee.Berserk", "Melee.Chainsaw", "Melee.Pistol", "Melee.Shotgun", 
			"Melee.SSG", "Melee.Chaingun", "Melee.Rocket", "Melee.Plasma", "Melee.Railgun", "Melee.BFG"
		};

		static const statelabel MissileNames[] = 
		{
			"Missile.None", "Missile.Fist", "Missile.Berserk", "Missile.Chainsaw", "Missile.Pistol", "Missile.Shotgun", 
			"Missile.SSG", "Missile.Chaingun", "Missile.Rocket", "Missile.Plasma", "Missile.Railgun", "Missile.BFG"
		};
		
		if (weap < WEAPON_Dummy || weap > WEAPON_BFG) weap = WEAPON_Dummy;

		wstates.melee = FindState(MeleeNames[weap], true);
		wstates.missile = FindState(MissileNames[weap], true);

		return wstates.melee != null || wstates.missile != null;
	}

	//============================================================================
	//
	// 
	//
	//============================================================================

	override void BeginPlay ()
	{
		Super.BeginPlay ();

		// Set the current weapon
		for(int i = WEAPON_Dummy; i <= WEAPON_BFG; i++)
		{
			WeaponStates wstates;
			if (GetWeaponStates(i, wstates))
			{
				if (wstates.melee == MeleeState && wstates.missile == MissileState)
				{
					CurrentWeapon = i;
				}
			}
		}
	}

	//============================================================================
	//
	// 
	//
	//============================================================================
	
	override void Tick ()
	{
		Super.Tick ();

		// Override the standard sprite, if desired
		if (SpriteOverride != 0 && sprite == SpawnState.sprite)
		{
			sprite = SpriteOverride;
		}

		if (special1 != 0)
		{
			if (CurrentWeapon == WEAPON_SuperShotgun)
			{ // Play SSG reload sounds
				int ticks = level.maptime - special1;
				if (ticks < 47)
				{
					switch (ticks)
					{
					case 14:
						A_StartSound ("weapons/sshoto", CHAN_WEAPON);
						break; 
					case 28:   
						A_StartSound ("weapons/sshotl", CHAN_WEAPON);
						break;
					case 41:  
						A_StartSound ("weapons/sshotc", CHAN_WEAPON);
						break;
					}
				}
				else
				{
					special1 = 0;
				}
			}
			else
			{ // Wait for a long refire time
				if (level.maptime >= special1)
				{
					special1 = 0;
				}
				else
				{
					bJustAttacked = true;
				}
			}
		}
	}

	//============================================================================
	//
	// A_M_Refire
	//
	//============================================================================

	void A_M_Refire (bool ignoremissile = false, statelabel jumpto = null)
	{
		if (target == null || target.health <= 0)
		{
			if (MissileState && random[SMarineRefire]() < 160)
			{ // Look for a new target most of the time
				if (LookForPlayers (true) && CheckMissileRange ())
				{ // Found somebody new and in range, so don't stop shooting
					return;
				}
			}
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
			return;
		}
		if (((ignoremissile || MissileState == null) && !CheckMeleeRange ()) ||
			!CheckSight (target) ||	random[SMarineRefire]() < 4)	// Small chance of stopping even when target not dead
		{
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
		}
	}

	//============================================================================
	//
	// A_M_SawRefire
	//
	//============================================================================

	void A_M_SawRefire ()
	{
		if (target == null || target.health <= 0 || !CheckMeleeRange ())
		{
			SetStateLabel ("See");
		}
	}

	//============================================================================
	//
	// A_MarineNoise
	//
	//============================================================================

	void A_MarineNoise ()
	{
		if (CurrentWeapon == WEAPON_Chainsaw)
		{
			A_StartSound ("weapons/sawidle", CHAN_WEAPON);
		}
	}

	//============================================================================
	//
	// A_MarineChase
	//
	//============================================================================

	void A_MarineChase ()
	{
		A_MarineNoise();
		A_EEChase();
	}

	//============================================================================
	//
	// A_MarineLook
	//
	//============================================================================

	void A_MarineLook ()
	{
		A_MarineNoise();
		A_Look();
	}

	//============================================================================
	//
	// A_M_Punch (also used in the rocket attack.)
	//
	//============================================================================

	void A_M_Punch(int damagemul)
	{
		FTranslatedLineTarget t;

		if (target == null)
			return;

		int damage = (random[SMarinePunch](1, 10) << 1) * damagemul;

		A_FaceTarget ();
		double ang = angle + random2[SMarinePunch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, DEFMELEERANGE);
		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "BulletPuff", true, t);

		// turn to face target
		if (t.linetarget)
		{
			A_StartSound ("*fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
	}

	//============================================================================
	//
	// P_GunShot2
	//
	//============================================================================

	private void GunShot2 (bool accurate, double pitch, class<Actor> pufftype)
	{
		int damage = 5 * random[SMarineGunshot](1,3);
		double ang = angle;

		if (!accurate)
		{
			ang += Random2[SMarineGunshot]() * (5.625 / 256);
		}

		LineAttack (ang, MISSILERANGE, pitch, damage, 'Hitscan', pufftype);
	}

	//============================================================================
	//
	// A_M_FirePistol
	//
	//============================================================================

	void A_M_FirePistol (bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/pistol", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireShotgun
	//
	//============================================================================

	void A_M_FireShotgun ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/shotgf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 7; ++i)
		{
			GunShot2 (false, pitch, "BulletPuff");
		}
		special1 = level.maptime + 27;
	}

	//============================================================================
	//
	// A_M_CheckAttack
	//
	//============================================================================

	void A_M_CheckAttack ()
	{
		if (special1 != 0 || target == null)
		{
			SetStateLabel ("SkipAttack");
		}
		else
		{
			A_FaceTarget ();
		}
	}

	//============================================================================
	//
	// A_M_FireShotgun2
	//
	//============================================================================

	void A_M_FireShotgun2 ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/sshotf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 20; ++i)
		{
			int damage = 5*(random[SMarineFireSSG](1, 3));
			double ang = angle + Random2[SMarineFireSSG]() * (11.25 / 256);

			LineAttack (ang, MISSILERANGE, pitch + Random2[SMarineFireSSG]() * (7.097 / 256), damage, 'Hitscan', "BulletPuff");
		}
		special1 = level.maptime;
	}

	//============================================================================
	//
	// A_M_FireCGun
	//
	//============================================================================

	void A_M_FireCGun(bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/chngun", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireMissile
	//
	// Giving a marine a rocket launcher is probably a bad idea unless you pump
	// up his health, because he's just as likely to kill himself as he is to
	// kill anything else with it.
	//
	//============================================================================

	void A_M_FireMissile ()
	{
		if (target == null)
			return;

		if (CheckMeleeRange ())
		{ // If too close, punch it
			A_M_Punch(1);
		}
		else
		{
			A_FaceTarget ();
			SpawnMissile (target, "Rocket");
		}
	}

	//============================================================================
	//
	// A_M_FireRailgun
	//
	//============================================================================

	void A_M_FireRailgun ()
	{
		if (target == null)
			return;

		A_MonsterRail();
		special1 = level.maptime + 50;
	}

	//============================================================================
	//
	// A_M_FirePlasma
	//
	//============================================================================

	void A_M_FirePlasma ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "PlasmaBall");
		special1 = level.maptime + 20;
	}

	//============================================================================
	//
	// A_M_BFGsound
	//
	//============================================================================

	void A_M_BFGsound ()
	{
		if (target == null)
			return;

		if (special1 != 0)
		{
			SetState (SeeState);
		}
		else
		{
			A_FaceTarget ();
			A_StartSound ("weapons/bfgf", CHAN_WEAPON);
			// Don't interrupt the firing sequence
			PainChance = 0;
		}
	}

	//============================================================================
	//
	// A_M_FireBFG
	//
	//============================================================================

	void A_M_FireBFG ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "BFGBall");
		special1 = level.maptime + 30;
		PainChance = MARINE_PAIN_CHANCE;
	}
		
	//---------------------------------------------------------------------------

	final void SetWeapon (int type)
	{
		WeaponStates wstates;
		if (GetWeaponStates(type, wstates))
		{
			static const class<Actor> classes[] = {
				"EEScriptedMarine",
				"EEMarineFist",
				"EEMarineBerserk",
				"EEMarineChainsaw",
				"EEMarinePistol",
				"EEMarineShotgun",
				"EEMarineSSG",
				"EEMarineChaingun",
				"EEMarineRocket",
				"EEMarinePlasma",
				"EEMarineRailgun",
				"EEMarineBFG"
			};
			
			MeleeState = wstates.melee;
			MissileState = wstates.missile;
			DecalGenerator = GetDefaultByType(classes[type]).DecalGenerator;
		}
	}

	final void SetSprite (class<Actor> source)
	{
		if (source == null)
		{ // A valid actor class wasn't passed, so use the standard sprite
			SpriteOverride = sprite = SpawnState.sprite;
			// Copy the standard scaling
			Scale = Default.Scale;
		}
		else
		{ // Use the same sprite and scaling the passed class spawns with
			readonly<Actor> def = GetDefaultByType (source);
			SpriteOverride = sprite = def.SpawnState.sprite;
			Scale = def.Scale;
		}
	}
}

class EEMarineFist : EEScriptedMarine replaces MarineFist
{
	default
	{
		Tag "Marine [Fist]";
	}
	
	States
	{
		Melee:		
			Goto Super::Melee.Fist;
		Missile:
			Stop;
	}
}

class EEMarineBerserk : EEMarineFist replaces MarineBerserk
{
	default
	{
		Tag "Marine [Berserk]";
	}
	
	States
	{
		Melee:		
			Goto Super::Melee.Berserk;
		Missile:
			Stop;
	}
}

class EEMarineChainsaw : EEScriptedMarine replaces MarineChainsaw
{
	default
	{
		Tag "Marine [Chainsaw]";
	}
	
	States
	{
		Melee:
			Goto Super::Melee.Chainsaw;
		Missile:
			Stop;
	}
}

class EEMarinePistol : EEScriptedMarine replaces MarinePistol
{
	default
	{
		Tag "Marine [Pistol]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Pistol;
	}
}

class EEMarineShotgun : EEScriptedMarine replaces MarineShotgun
{
	default
	{
		Tag "Marine [Shotgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Shotgun;
	}
}

class EEMarineSSG : EEScriptedMarine replaces MarineSSG
{
	default
	{
		Tag "Marine [Super Shotgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.SSG;
	}
}

class EEMarineChaingun : EEScriptedMarine replaces MarineChaingun
{
	default
	{
		Tag "Marine [Chaingun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Chaingun;
	}
}

class EEMarineRocket : EEMarineFist replaces MarineRocket
{
	default
	{
		Tag "Marine [Rocket Launcher]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Rocket;
	}
}

class EEMarinePlasma : EEScriptedMarine replaces MarinePlasma
{
	default
	{
		Tag "Marine [Plasma Rifle]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Plasma;
	}
}

class EEMarineRailgun : EEScriptedMarine replaces MarineRailgun
{
	default
	{
		Tag "Marine [Railgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Railgun;
	}
}

class EEMarineBFG : EEScriptedMarine replaces MarineBFG
{
	default
	{
		Tag "Marine [BFG9000]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.BFG;
	}
}

class BulletPuffNew : BulletPuff replaces BulletPuff
{
	default
	{
		Tag "Shot";
		+PUFFGETSOWNER
	}
}

//*****************
//* Doom specific *
//*****************
class BossBrainNew : BossBrain replaces BossBrain
{
	mixin MonsterCollider;
	default
	{
		Tag "Icon of Sin"; // Tag "John Romero"
		Health 250;
		Mass 10000000;
		PainChance 255;
		Height 80;
		Radius 20;
		//MONSTER;
		//+ISMONSTER

		+SHOOTABLE
		+SOLID
		+NOICEDEATH
		+OLDRADIUSDMG
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	States
	{
		BrainExplode:
			MISL BC 10 Bright;
			MISL D 10 A_BrainExplode();
			Stop;
		Spawn:
			BBRN A -1;
			Stop;
		Pain:
			BBRN B 36 A_BrainPain();
			Goto Spawn;
		Death:
			BBRN B 10 
			{
				if (exex_iconofsindthkillminions) A_KillChildren("Massacre");
				A_BrainScream();
			}
			BBRN B 0 
			{
				if (exex_iconofsindthkillminions) A_ExplodMinions();
			}
			BBRN BBBBBBBBB 10;
			BBRN BB 10;
			BBRN B -1 A_BrainDie();
			Stop;
	}
	
	void A_ExplodMinions()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while (mo = Actor(it.Next()))
		{
			if (mo.master == self)
			{
				double xpos = mo.pos.x;
				double ypos = mo.pos.y;
				double zpos = mo.pos.z;
				double mradius = mo.radius;
				double mheight = mo.height;
				bool success;
				actor explod;
				[success, explod] = mo.A_SpawnItemEx("IoSDeathExplosionEffect",0.0,0.0,(mo.height*0.5), 0.0,0.0,frandom(0.01,1.00), 0.0,SXF_NOCHECKPOSITION);
				if (explod && success)
				{
					explod.target = mo;
					let ndf = IoSDeathExplosionEffect(explod);
					if (ndf)
					{
						ndf.target = mo;
						ndf.mradius = mradius;
						ndf.mheight = mheight;
					}
				}
			}
		}
	}
}

class BossEyeNew : BossEye replaces BossEye
{
	mixin MonsterCollider;
	int user_bosseyetype;
	double bosseyetimefactor;
	default
	{
		Height 32;
		+NOBLOCKMAP;
		+NOSECTOR;
		+BOSS;
	}
	
	States
	{
		Spawn:
			SSWV A 10 A_Look();
			Loop;
		See:
			SSWV A 181 
			{
				A_BrainAwake();
				if (user_bosseyetype > 0) A_SetTics(tics*frandom(0.45,0.55)*bosseyetimefactor);
														 else A_SetTics(tics*frandom(0.9,1.1)*bosseyetimefactor);
			}
		Shoot:
			SSWV A 150 
			{
				if (user_bosseyetype > 0) 
				{
					double timefactor = 1.00;
					if (master)
					{
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.95)) timefactor = frandom(0.925,0.95);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.667)) timefactor = frandom(0.625,0.667);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.4)) timefactor = frandom(0.375,0.4);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.25)) timefactor = frandom(0.3,0.334);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.125)) timefactor = frandom(0.2,0.25);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.05)) timefactor = frandom(0.1,0.125);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.005)) timefactor = frandom(0.025,0.0375);
					}
					A_SetTics(tics*(frandom(0.675,0.825) * timefactor)*bosseyetimefactor);
				}
				else 
				{
					A_SetTics(tics*frandom(0.9,1.1)*bosseyetimefactor); 
				}
				
				if (master) 
				{
					if (master.health >= 1) 
					{
						A_BrainSpit("SpawnShotNew");
						A_StartSound("brain/spit", 16, CHANF_DEFAULT, 1., ATTN_NONE);
					}
				}
				else
				{
					A_BrainSpit("SpawnShotNew");
					A_StartSound("brain/spit", 16, CHANF_DEFAULT, 1., ATTN_NONE);
				}
			}
			loop;
	}
	
	void A_BrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShotNew";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Assign [try to] the BossBrain as the shot's master
				if (master) spit.tracer = master;
				if (dydudebug_bossbraininfo2 && spit.tracer) Console.Printf("SpawnShot (\c[green]%p\c-) Tracer: \c[gold]%p\c-", spit, spit.tracer);

				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_StartSound(self.AttackSound, CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
			else
			{
				// compatibility fallback
				A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}

class SpawnShotNew : SpawnShot
{
	Default
	{
		Radius 6;
		Height 32;
		Speed 10;
		Damage 3;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		+RANDOMIZE
		SeeSound "brain/spit";
		DeathSound "brain/cubeboom";
		
		DropItem "DoomImpNew",							255,	50;
		DropItem "DemonNew",								255,	40;
		DropItem "SpectreNew",							255,	30;
		DropItem "PainElementalNew",				255,	10;
		DropItem "CacodemonNew",						255,	30;
		DropItem "ArchvileNew",							255,	4;
		DropItem "RevenantNew",							255,	10;
		DropItem "ArachnotronNew",					255,	20;
		DropItem "MancubusNew",							255,	30;
		DropItem "HellKnightNew",						255,	20;
		DropItem "BaronOfHellNew",					255,	10;
		DropItem "CyberdemonNew",						255,	2;
		
		DropItem "HammerDuck",							255,	25;
		DropItem "Planter",									255,	15;
		DropItem "PlanterBird",							255,	10;
		DropItem "Centaurion",							255,	40;
		DropItem "CentaurionSgt",						255,	30;
		DropItem "KnuckleHead",							255,	10;
		DropItem "Galgoyle",								255,	30;
		DropItem "Jugger",									255,	30;
		DropItem "Juggette",								255,	30;
		DropItem "Vitriola",								255,	24;
		DropItem "Killetante",							255,	10;
		DropItem "KilletanteSoloist",				255,	2;
	}
	
	States
	{
		Spawn:
			BOSF A 3 BRIGHT A_SpawnSound;
			BOSF BCD 3 BRIGHT A_SpawnFly;
			Loop;
	}
	
	void A_SpawnFly(class<Actor> spawntype = null)
	{
		sound snd; 
		if (spawntype != null) 
		{
			snd = GetDefaultByType(spawntype).SeeSound;
		}
		else
		{
			spawntype = "SpawnFire";
			snd = "brain/spawn";
		}
		SpawnFly(spawntype, snd);
	}
	
	void A_SpawnSound()
	{
		// travelling cube sound
		A_StartSound("brain/cube", CHAN_BODY);
		SpawnFly("SpawnFire", "brain/spawn");
	}

	void SpawnFly(class<Actor> spawntype, sound snd)
	{
		Actor newmobj;
		Actor fog;
		Actor eye = master; // The eye is the spawnshot's master, not the target!
		Actor targ = target; // Unlike other projectiles, the target is the intended destination.
		int r;
		
		if (tracer == null || (tracer && tracer.health <= 0))
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Tracer)\c-", self);
			Destroy();
			return;
		}
		
		if (targ == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Targ)\c-", self);
			Destroy();
			return;
		}
			
		// [GZ] Should be more viable than a countdown...
		if (special2 != 0)
		{
			if (special2 > level.maptime)
				return;		// still flying
		}
		else
		{
			if (reactiontime == 0 || --reactiontime != 0)
				return;		// still flying
		}
		
		if (spawntype)
		{
			fog = Spawn (spawntype, targ.pos, ALLOW_REPLACE);
			if (fog) A_StartSound(snd, CHAN_BODY);
		}

		class<Actor> SpawnName = null;

		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		int n = 0;

		// First see if this cube has its own actor list
		drop = GetDropItems();

		// If not, then default back to its master's list
		if (drop == null)
		{
			if (eye != null)
			{
				drop = eye.GetDropItems();
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting Eye DropTable\c-", self);
			}
			else
			{
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[RED]NO DROP TABLE INFO\c-", self);
			}
		}
		else
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting SpawnShot DropTable\c-", self);
		}

		if (drop != null)
		{
			for (di = drop; di != null; di = di.Next)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1; // default value is -1, we need a positive value.
					}
					n += amt; // this is how we can weight the list.
				}
			}
			di = drop;
			n = random[pr_spawnfly](0, n);
			while (n >= 0)
			{
				if (di.Name != 'none')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n -= amt;
				}
				if ((di.Next != null) && (n >= 0))
				{
					di = di.Next;
				}
				else
				{
					n = -1;
				}
			}
			SpawnName = di.Name;
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[blue]%s\c-", self, di.Name);
		}
		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post droptable)", self);
		if (SpawnName == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname was: \c[yellow]null\c-", self);
			// Randomly select monster to spawn.
			r = random[pr_spawnfly](0, 255);

			// Probability distribution (kind of :),
			// decreasing likelihood.
				 if (r < 50)  SpawnName = "DoomImp";
			else if (r < 90)  SpawnName = "Demon";
			else if (r < 120) SpawnName = "Spectre";
			else if (r < 130) SpawnName = "PainElemental";
			else if (r < 160) SpawnName = "Cacodemon";
			else if (r < 162) SpawnName = "Archvile";
			else if (r < 172) SpawnName = "Revenant";
			else if (r < 192) SpawnName = "Arachnotron";
			else if (r < 222) SpawnName = "Fatso";
			else if (r < 246) SpawnName = "HellKnight";
			else			  SpawnName = "BaronOfHell";
		}

		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post list)", self);
		if (spawnname != null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[sapphire]%s\c-", self, spawnname.GetClassName());
			newmobj = Spawn(spawnname, targ.pos, ALLOW_REPLACE);
			if (newmobj != null)
			{
				if (tracer) 
				{
					newmobj.master = tracer;
					newmobj.A_SetInventory("IoSMinion",1);
				}
				if (dydudebug_bossbraininfo2 && newmobj.master) 
				{
					Console.Printf("\c[green]%p\c-: Spawned Monster (\c[blue]%s\c-) Master: \c[gold]%p\c-", self, newmobj.GetClassName(), newmobj.master);
				}
				// Make the new monster hate what the boss eye hates
				if (eye != null)
				{
					newmobj.CopyFriendliness (eye, false);
				}
				// Make it act as if it was around when the player first made noise
				// (if the player has made noise).
				newmobj.LastHeard = newmobj.CurSector.SoundTarget;

				if (newmobj.SeeState != null && newmobj.LookForPlayers (true))
				{
					newmobj.SetState (newmobj.SeeState);
				}
				if (!newmobj.bDestroyed)
				{
					// telefrag anything in this spot
					newmobj.TeleportMove (newmobj.pos, true);
				}
				newmobj.bBossSpawned = true;
			}
		}

		// remove self (i.e., cube).
		Destroy ();
	}
}

class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		+PUSHABLE
		Tag "Explosive Barrel";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
		ProjectilePassHeight 32;
		//$Sprite "BAR1A0"
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 BRIGHT;
			BEXP B 5 Bright
			{
				A_Scream();
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
				A_AlertMonsters();
			}
			BEXP C 5 BRIGHT;
			BEXP D 10 BRIGHT 
			{
				A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BEXP E 10 BRIGHT;
			TNT1 A 1050 BRIGHT A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}

//********************
//* Heretic specific *
//********************
class PodNew : Pod replaces Pod
{
	Default
	{
		+PUSHABLE
		Tag "Explosive Pod";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}

	States
	{
		Death:
			PPOD C 5 BRIGHT A_RemovePod;
			PPOD D 5 BRIGHT A_Scream();
			Goto Super::Death+2;
	}
}

class ChickenNew : EECreature replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			loop;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CHKN A 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			CHKN D 5 A_Feathers();
			CHKN C 5 A_EEPain();
			Goto See;
		Death:
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}

class HereticImpNew : EECreature // replaces HereticImp
{
	default
	{
		Tag "Gargoyle";
		Health 40;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 10;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 150;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 175;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 225;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 250;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		DamageFactor "Breakfast", 0.625;
		Painchance "Breakfast", 125;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.875;
		Painchance "Dust", 175;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 3;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1;
		Painchance "Spinner", 200;
		DamageFactor "Beats", 1;
		Painchance "Beats", 200;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		Species "Gargoyle";
		DamageFunction (0);
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "$OB_HERETICIMP";
		HitObituary "$OB_HERETICIMPHIT";
	}
	
	states
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(24);
			loop;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(6,12,18,24,0.333,0.333);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](5,12), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX A 0
			{
				user_chargechance = 25;
				if (exex_monsterlevelenabledflags) user_chargechance += (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.075,true,self));
				if (user_chargechance > 70) user_chargechance = 70;

				if (random(1,100) > user_chargechance) { return resolvestate("See"); }
				else
				{
					A_GargDashCheck();
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Charge:
			IMPX A 10
			{
				A_DynamicMusic();
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			IMPX B 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				// A_ImpMsAttack; Emulation
				SetDamage(((0 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(random(22,23),true,self)))));
				A_SkullAttack(12 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(randompick(11,11,11,12),true,self)));
			}
			IMPX CBAB 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
			}
			IMPX A 0 A_GargDashCheck2();
			Goto Charge+2;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			goto See;
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GGGG 3;
			goto See;
		Death:
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Crash:
			IMPX I 7 A_ImpExplode();
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			IMPX H 5;
			IMPX G 4;
			goto See;
	}
}
class HereticImpLeaderNew : HereticImpNew // replaces HereticImpLeader
{
	default
	{
		Tag "NitroGargoyle";
		Health 80;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Gargoyle Leader";
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 75;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 113;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 169;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 188;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.375;
		Painchance "Chop", 206;
		DamageFactor "Breakfast", 0.75;
		Painchance "Breakfast", 113;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 113;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 225;
		DamageFactor "Popper", 2;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 225;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 188;
		Species "Gargoyle";
		-MISSILEMORE;
		+DONTHARMSPECIES;
		AttackSound "himp/leaderattack";
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
	
	states
	{
		Melee:
			Stop;
		Missile:
			IMPX D 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBallNew", 16, random[ImpMsAttack2](5,12), "himp/leaderattack");
			}
			goto See;
	}
}
class HereticImpBallNew : EEProjectile replaces HereticImpBall 
{
	default
	{
		Tag "Gargoyle Fireball";
		Radius 8;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (1 * random(1,8));
		DamageType "Fire";
		Projectile;
		SeeSound "himp/leaderattack";
		DeathSound "misc/fireballsmall";
		+SPAWNSOUNDSOURCE;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX10 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX10 DEFG 5 Bright;
			Stop;
	}
}

// Plague Gargoyle
class PlagueImp : HereticImpLeaderNew
{
	default
	{
		Tag "Plague Gargoyle";
		Health 120;
		Scale 1;
		Painchance 160;
		Painchance "Fist", 240; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
		Obituary "%o was poisoned by a plague gargoyle";
		HitObituary "%o was ripped up by a plague gargoyle";
		Translation "145:168=225:240", "255:248=0:0";
	}

	States
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](6,14), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
			IMPX D 0
			{
				int theta;
				A_CheckIfTargetDead("See");
				user_shotsfired = 0;
				if (health <= user_HPLowRange) { theta = (80 - (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(1.0,true,self))); }
																	else { theta = (240 - (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.3334,true,self))); }

				if (random(1,256) <= theta)
				{
					user_shotsfiredmax = 1;
					return resolvestate("MissileSingle"); 
				}
				else 
				{ 
					user_shotsfiredmax = randompick(3,4,5,6) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(frandompick(5.625,11.25,16.875,22.5),true,self));
					return resolvestate("MissileMulti"); 
				}
				return resolvestate(null);
			}
		MissileSingle:
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				if (random(1,256) <= 32) { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-0.6,0.6), frandom(-0.06,0.06)); }
														else { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-6.0,6.0), frandom(-0.6,0.6)); }
			}
			goto See;
		MissileMulti:
			IMPX DE 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }

				A_FaceTarget();
			}
			IMPX F 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }

				if (random(1,256) <= 32) { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-0.96,0.96), frandom(-0.096,0.096)); }
														else { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-9.6,9.6), frandom(-0.96,0.96)); }
			}
			IMPX F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				A_CheckIfTargetDead("See");
				return resolvestate(null);
			}
			Loop;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			goto See;	
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GGGG 3;
			goto See;
		Death:
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Crash:
			IMPX I 0 
			{
				bNOGRAVITY = false;
				A_SpawnItemEx("HereticImpChunk1", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
				A_SpawnItemEx("HereticImpChunk2", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
			}
			IMPX I 7;
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Raise:
			IMPX L 0;
			IMPX L 0 A_RemoveChildren();
			IMPX LKJIHG 6;
			goto See;
	}
}
class PlagueShot : EEEffectProjectile
{
	default
	{
		Tag "Plague Shot";
		DamageFunction (3*random(3,5));
		Radius 8;
		Height 16;
		Speed 16;
		PROJECTILE;
		+THRUGHOST; // Plague Gargoyle Poisonball
		DamageType "Poison";
		scale 0.5;
		SeeSound "himp/leaderattack";
		DeathSound "monster/plaugeBall";
	}

	States
	{
		Spawn:
			FVUL AAABBB 1 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(3);
					/*
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
					*/
				}
			}
		Death2:
			FVUL CDEF 4 Bright;
			Stop;
	}
}

// Dark/Watcher Gargoyle
class WatcherImp : HereticImpNew 
{
	default
	{
		Tag "Watcher Gargoyle";
		Health 120;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 15;
		scale 1.2;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "%o was burnt by a Watcher Gargoyle.";
		HitObituary "%o was slashed by a Watcher Gargoyle.";
		DamageFactor "Fire", 0.5;
		PainChance 50;
		Painchance "Fire", 25; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
	}
	
	States
	{
		Spawn:
			WATC A 0 NoDelay;
			WATC ABCB 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			WATC A 0;
			WATC AABBCCBB 3
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			TNT1 A 0 A_DynamicMusic();
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			goto See;

		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC D 0
			{
				user_firevolleys = 0;
				user_firevolleymax = random(2,3);
				if (random(1,16) == 1) { user_firevolleymax *= random(3,4); }
			}
			WATC D 0 BRIGHT A_Jump(85,"Beastball");
		MissileLoop:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBall2", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBall2", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC ] 0 BRIGHT
			{
				user_firevolleys += 1;
				if (user_firevolleys >= user_firevolleymax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Beastball:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 6 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WATC F 6 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("BeastBall2", 14, random[BeastAttack](1,8)*3, "beast/attack");
			}
			goto See;
		Pain:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			goto See;
		Pain.Fist:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GG 3;
			goto See;
		Pain.Kick:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GGGG 3;
			goto See;
		Death:
			WATC G 4 A_ImpDeath();
			WATC H 5;
			Wait;
		XDeath:
			WATC S 5 A_ImpXDeath1();
			WATC TU 5;
			WATC V 5 A_Gravity();
			WATC W 5;
			Wait;
		Crash:
			WATC I 7 A_ImpExplode();
			WATC J 7 A_Scream();
			WATC K 7;
			WATC L -1;
			Stop;
		XCrash:
			WATC X 7;
			WATC Y 7;
			WATC Z -1;
			Stop;
		Ice:
			WATC G 5 A_GenericFreezeDeath();
			WATC G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WATC H 5;
			WATC G 4;
			goto See;
	}
}
class HereticImpBall2 : HereticImpBallNew
{
	default
	{
		Tag "Gargoyle Fireball";
	}
	
	States
	{
		Spawn:
			HIB1 ABC 6 Bright;
			Loop;
		Death:
			HIB1 DEFG 5 Bright;
			Stop;
	}
}
class Beastball2 : BeastBallNew
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,0,0,0,0,SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			HIB2 DEFGH 4;
			Stop;
	}
}

class MummyNew : EECreature // replaces Mummy
{
	default
	{
		Tag "Golem";
		Health 80;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 112;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	states
	{
		Spawn:
			MUMM A 0 NoDelay;
			MUMM AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMM A 0;
			MUMM ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Pain:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			Goto See;
		Pain.Fist:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			MUMM HH 4;
			Goto See;
		Pain.Kick:
			MUMM H 4;
			MUMM H 4 A_EEPain();
			MUMM HHHH 4;
			Goto See;
		Death:
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMM H 5 A_GenericFreezeDeath();
			MUMM H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class MummyGhostNew : MummyNew // replaces MummyGhost
{
	default
	{
		Tag "Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 128;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
	}
}
class MummyLeaderNew : EECreature // replaces MummyLeader
{
	default
	{
		Tag "NitroGolem";
		Health 100;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 56;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		Obituary "$OB_MUMMYLEADER";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	
	states
	{
		Spawn:
			MUMA A 0 NoDelay;
			MUMA AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMA A 0;
			MUMA ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			MUMA X 0 A_DynamicMusic();
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				A_CustomComboAttack("MummyFX1", 32, random[MummyAttack2](1,8)*2, "mummy/attack2");
			}
			Goto See;
		Pain:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			Goto See;
		Pain.Fist:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			MUMA HH 4;
			Goto See;
		Pain.Kick:
			MUMA H 4;
			MUMA H 4 A_EEPain();
			MUMA HHHH 4;
			Goto See;
		Death:
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMA H 5 A_GenericFreezeDeath();
			MUMA H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class MummyLeaderGhostNew : MummyLeaderNew // replaces MummyLeaderGhost
{
	default
	{
		Tag "NitroGolem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 64;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
	}
}
class MummyFX1New : EEProjectile replaces MummyFX1 
{
	default
	{
		Tag "Screamer Fireskull";
		Radius 8;
		Height 14;
		Speed 9;
		FastSpeed 18;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		RenderStyle "Add";
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			FX15 A 5 Bright A_StartSound("mummy/head");
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			FX15 C 5 Bright;
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			Loop;
		Death:
			FX15 DEFG 5 Bright;
			Stop;
	}
}

// Ice Golem
class IceGolem : EECreature
{
	int user_HalfMaxHP;
	int user_regenchance;
	int user_regenchanceextra;
	default
	{
		Tag "Ice Golem";
		Health 450;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 56; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.925;
		RadiusDamageFactor 0.578125;
		DamageFactor "Explosion", 0.578125;
		DamageFactor "Fire", 1.8;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		HitObituary "%o was bludgeoned by an ice golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 32; }
				else if (health <= user_HPLowRange) { user_regenchance = 8; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 4; }
				else if (health <= user_MaxHP) { user_regenchance = 2; }
				if (exex_monsterlevelenabledflags)
				{
					user_regenchanceextra = user_regenchance / 4;
					user_regenchanceextra = (user_regenchanceextra * CountInv("MonsterLevel")) / 22.5;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart"); }
				return resolvestate(null);
			}
			Loop;
		Melee:
			IGLM E 0 A_DynamicMusic();
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM E 0 A_DynamicMusic();
			IGLM H 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_EEHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			Goto See;
		Pain.Fist:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM L 4;
			Goto See;
		Death:
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class IceGolemGhost : IceGolem
{
	default
	{
		Tag "Ice Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}

// Frost Golem [ranged Ice Golem]
class FrostGolem : IceGolem
{
	int user_randvar1;
	default
	{
		Tag "Frost Golem";
		Health 540;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 44; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.85;
		DamageFactor "Explosive", 0.53125;
		RadiusDamageFactor 0.53125;
		DamageFactor "Fire", 1.4;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		Obituary "%o was iced over by an frost golem";
		HitObituary "%o was bludgeoned by an frost golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 40; }
				else if (health <= user_HPLowRange) { user_regenchance = 10; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 5; }
				else if (health <= user_MaxHP) { user_regenchance = random(2,3); }
				if (exex_monsterlevelenabledflags)
				{
					user_regenchanceextra = user_regenchance * 6 / 20;
					user_regenchanceextra = (user_regenchanceextra * CountInv("MonsterLevel")) / 18;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart");  }
				return resolvestate(null);
			}
			Loop;
		Melee:
			IGLM E 0 A_DynamicMusic();
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM E 0 A_DynamicMusic();
			IGLM H 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			IGLM E 0 A_DynamicMusic();
			IGLM K 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			IGLM K 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				user_randvar1 = random(3,9) * 2;
				A_StartSound("IceGuyAttack");
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, ((user_randvar1*4)/2), 0, 1); }
				A_SpawnProjectile("IceGuyFX3New", 48, user_randvar1, 0, 1);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, 0, 0, 1); }
				A_SpawnProjectile("IceGuyFX3New", 48, -user_randvar1, 0, 1);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, ((-user_randvar1*4)/2), 0, 1); }
			}
			IGLM K 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_EEHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			Goto See;
		Pain.Fist:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			IGLM L 4;
			IGLM L 4 A_EEPain();
			IGLM L 4;
			Goto See;
		Death:
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class FrostGolemGhost : FrostGolem
{
	default
	{
		Tag "Frost Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}

// Various Raven Enemies
class IceGuyFX3New : EEEffectProjectile
{
	default
	{
		Tag "Spiked Ice Ball";
		DamageFunction (3 * random(1,8));
		Speed 14;
		Radius 8;
		Height 10;
		DamageType "Ice";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "IceGuyMissileExplode";
	}

	States
	{
		Spawn:
			ICPR ABC 3 Bright 
			{
				A_SpawnItemEx("IceFXPuff", 0, 0, 2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(70,105),401);
					}
				}
			}
		Death2:
			ICPR D 4 Bright;
			ICPR E 4 Bright A_IceGuyMissileExplode("IceGuyFX4New",16,-0.15);
			ICPR FG 4 Bright;
			ICPR H 3 Bright;
			Stop;
	}
}
class IceGuyFX4New : EEEffectProjectile
{
	default
	{
		Tag "Spiked Ice Shard";
		DamageFunction (random(2,3) * random(1,8));
		Speed 10;
		Radius 4;
		Height 4;
		DamageType "Ice";
		Gravity 0.125;
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+STRIFEDAMAGE;
	}
	
	States
	{
		Spawn:
			ICPR NOP 3 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(32);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			TNT1 A 0 Bright;
			Stop;
	}
}

class IceGolemArmor : PowerProtection
{
	default
	{
		damageFactor "normal", 0.01;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class IceGolemParticleA : EEBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		+DontSplash;
		+NoClip;
		RenderStyle "Add";
		Scale 0.0275;
	}
	
	States
	{
		Spawn:
			IGLP A 0 A_SpawnItemEx("IceGolemParticleTrail", -(Vel.X*1.2), -(Vel.Y*1.2), (Vel.Z*-1.2), (Vel.X*0.8), (Vel.Y*0.8), (Vel.Z*0.8), -Angle, 138);
			IGLP A 1 A_FadeOut(0.065);
			Loop;
	}
}

class IceGolemParticleTrail : IceGolemParticleA
{
	States
	{
		Spawn:
			IGLP A 1 A_FadeOut(0.075);
			Loop;
	}
}


class KnightNew : EECreature // replaces Knight
{
	default
	{
		Tag "Undead Warrior";
		Health 200;
		Radius 24;
		Height 78;
		Mass 150;
		Speed 12;
		MeleeRange 68;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 1.00;
		Painchance "Suck", 100;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
		MeleeRange 68;
		Monster;
		+FLOORCLIP;
		SeeSound "hknight/sight";
		AttackSound "hknight/attack";
		PainSound "hknight/pain";
		DeathSound "hknight/death";
		ActiveSound "hknight/active";
		Obituary "$OB_BONEKNIGHT";
		HitObituary "$OB_BONEKNIGHTHIT";
		DropItem "CrossbowAmmo", 84, 5;
		DropItem "CrossbowHefty", 8, 25;
	}
	
	States
	{
		Spawn:
			KNIG A 0 NoDelay;
			KNIG AB 10 A_Look();
			goto Spawn+1;
		See:
			KNIG A 0;
			KNIG ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
		Missile:
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			Goto See;
		Pain:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			Goto See;
		Pain.Fist:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			KNIG HH 3;
			Goto See;
		Pain.Kick:
			KNIG H 3;
			KNIG H 3 A_EEPain();
			KNIG HHHH 3;
			Goto See;
		Death:
			KNIG I 6;
			KNIG J 6 A_Scream();
			KNIG K 6;
			KNIG L 6 A_NoBlocking();
			KNIG MN 6;
			KNIG O -1;
			Stop;
		Ice:
			KNIG H 5 A_GenericFreezeDeath();
			KNIG H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			KNIG N 6;
			KNIG MLKJI 6;
			Goto See;
	}
}

class KnightGhostNew : KnightNew // replaces KnightGhost
{
	default
	{
		Tag "Undead Warrior (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 100;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
	}
}
class KnightAxeNew : EEEffectProjectile replaces KnightAxe 
{
	default
	{
		Tag "Green Axe";
		DamageFunction (2 * random(1,8));
		DamageType "Magic";
		Radius 10;
		Height 8;
		Speed 9;
		FastSpeed 18;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+THRUGHOST; // Knight Axe [Green]
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			SPAX A 3 Bright
			{
				A_StartSound("hknight/axewhoosh");
			}
			SPAX BC 3 Bright;
			Loop;
		Death:
			SPAX DDEEFF 3 Bright;
			Stop;
	}
}
class RedAxeNew : KnightAxeNew replaces RedAxe 
{
	default
	{
		Tag "Bloody Axe";
		DamageFunction (7 * random(1,8));
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			RAXE AA 2 Bright;
			RAXE A 1 Bright 
			{
				A_DripBlood();
			}
			RAXE BB 2 Bright;
			RAXE B 1 Bright 
			{
				A_DripBlood();
			}
			Loop;
		Death:
			RAXE CDE 6 Bright;
			Stop;
	}
}

// Death Knight
class DeathKnight : EECreature 
{ 
	default
	{
		Tag "Death Knight";
		Health 1100;
		Radius 24;
		Height 72;
		Mass 700;
		Speed 10;
		MeleeDamage 10;
		MeleeRange 80;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Holy", 35; // Holy attacks have a +75% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Holy", 1.75;
		MONSTER;
		+FLOORCLIP;
		+NOTARGET;
		+NORADIUSDMG;
		+MISSILEMORE;
		+BOSS;
		+DEFLECT;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		Obituary "%o got thought %g could kill a Death Knight.";
		HitObituary "A Death Knight hacked %o into pieces.";
		MeleeSound "monster/dknhit";
		SeeSound "monster/dknsit";
		PainSound "monster/dknpai";
		DeathSound "monster/dkndth";
		ActiveSound "monster/dknact";
		Species "UndeadWarrior";
	}
	
	States 
	{
		Spawn: 
			DKNT A 0 NoDelay;
			DKNT AB 10 A_Look();
			goto Spawn+1;
		See:
			DKNT A 0;
			DKNT A 0 A_Jump(51,"SeeShielded");
			DKNT AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_DeathKnightShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		SeeShielded:
			DKNT P 0;
			DKNT PPQQRRSS 3 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DKNT S 0
			{
				if (random(1,100) >= 20) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			DKNT E 0 // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/dknswg");
			}
			DKNT G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(10*random(1,8), "monster/dknhit");
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
			DKNT E 0 A_Jump(88,"Missile1");
			DKNT E 0 A_Jump(88,"Missile2");
			DKNT E 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/kntswg");
			}
			DKNT G 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_SpawnProjectile("DKDart",32,0,-3,0);
				A_SpawnProjectile("DKDart",32,0,-1,0);
				A_SpawnProjectile("DKDart",32,0,1,0);
				A_SpawnProjectile("DKDart",32,0,3,0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("DKDart",32,0,-5,0);
					A_SpawnProjectile("DKDart",32,0,5,0);
				}
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					A_SpawnProjectile("DKDart",32,0,-7,0);
					A_SpawnProjectile("DKDart",32,0,7,0);
				}
			}
			DKNT A 0 A_Jump(64,"Missile2");
			Goto See;
		Missile1:
			DKNT T 1 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 4; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1Phase2"); }
				return resolvestate(null);
			}
			Loop;
		Missile1Phase2:
			DKNT U 1 Bright
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile1Phase3:
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;
				if (user_defendtimer == 2) 
				{
					A_SpawnProjectile("FHeadShot",44,-4,-12,0);
					A_SpawnProjectile("FHeadShot",44,-4,12,0);
				}
				
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 3; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1End"); }
				return resolvestate(null);
			}
			Loop;
		Missile1End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT U 0 A_Jump(64,"Missile2");
			Goto See;
		Missile2:
			DKNT T 0 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile2Phase1: // 6 times
			DKNT T 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					return resolvestate("Missile2Phase2"); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2Phase2: // 6 times
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("DKbolt",44,-4,0,0); 
				}

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					user_defendcycles += 1;
					
					if (user_defendcycles >= 6) { return resolvestate("Missile2End"); } else { return resolvestate("Missile2Phase1"); }
					return resolvestate(null); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Pain:
			DKNT H 2;
			DKNT H 2 A_EEPain();
			goto PainShield;
		Pain.Fist:
			DKNT H 2;
			DKNT H 2 A_EEPain();
			DKNT HH 2;
			goto PainShield;
		Pain.Kick:
			DKNT H 2;
			DKNT H 2 A_EEPain();
			DKNT HHHH 2;
			goto PainShield;

		PainShield:
			DKNT T 1 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(17,18); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(16,17); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,4) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_DeathKnightShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 7) { return resolvestate("PainShieldEnd"); }
				return resolvestate(null);
			}
			Loop;
		PainShieldEnd:
			DKNT T 0 // A_UnSetReflectiveInvulnerable()
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();

				if (random(1,16) == 1) { return resolvestate("SeeShielded"); }
				return resolvestate(null);
			}
			DKNT H 1
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Death:
			DKNT I 0 Bright A_SpawnProjectile("DKSword",44,32,-90,0);
			DKNT I 8 Bright 
			{
				if (random(1,4) == 1) { A_SpawnProjectile("EvilWarriorShield",44,-32,90,0); }
				else { A_SpawnProjectile("DKShield",44,-32,90,0); }
			}
			DKNT J 8 Bright A_Scream(); 
			DKNT K 8 Bright;
			DKNT L 8 Bright A_NoBlocking();
			DKNT M 8 Bright;
			DKNT N 8 Bright;
			DKNT O -1;
			Stop;
		Ice:
			DKNT H 5 A_GenericFreezeDeath();
			DKNT H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DKNT NMLKJI 8 Bright;
			Goto See;
	}
}

class DeathKnightGhost : DeathKnight
{
	default
	{
		Tag "Death Knight (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		+DONTHARMSPECIES;
		Species "UndeadWarrior";
	}
}
// Death Knight Attacks
class DKDart : EEProjectile
{
	default
	{
		Tag "Sword Dart";
		DamageFunction (5 * random(1,8));
		Radius 3;
		Height 12;
		Speed 25;
		ExplosionDamage 64;
		ExplosionRadius 64;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		+THRUGHOST;
		Seesound "monster/dkndrt";
		DeathSound "weapons/firex2";
	}
	
	States
	{
		Spawn:
			DKAT ABC 3 Bright;
			Loop;
		Death:
			DKAT D 0 Bright A_SetTranslucent(0.85,1);
			DKAT D 3 Bright;
			DKAT E 3 Bright A_Explode(64,64);
			DKAT FG 3 Bright;
			DKAT H 3 Bright 
			{
				A_SpawnProjectile("DKFire",0,0,0,2);
				A_SpawnProjectile("DKFire",0,0,45,2);
				A_SpawnProjectile("DKFire",0,0,90,2);
				A_SpawnProjectile("DKFire",0,0,135,2);
				A_SpawnProjectile("DKFire",0,0,180,2);
				A_SpawnProjectile("DKFire",0,0,225,2);
				A_SpawnProjectile("DKFire",0,0,270,2);
				A_SpawnProjectile("DKFire",0,0,315,2);
			}
			DKAT IJKLM 3 Bright;
			Stop;
	}
}
class FHeadShot : EEProjectile
{
	default
	{
		Tag "Shield Firehead";
		DamageFunction (10 * random(1,8));
		Radius 12;
		Height 12;
		Speed 15;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		DamageType "Fire";
		+SEEKERMISSILE;
		+THRUGHOST; // Death Knight Head Fireball
		Seesound "monster/dknmsl";
		DeathSound "weapons/boom1";
	}
	
	States
	{
		Spawn:
			FHED ABCD 3 Bright 
			{
				A_SeekerMissile(5,15);
			}
			Loop;
		Death:
			RIP1 DEFGH 5 Bright;
			Stop;
	}
}
class DKbolt : EEProjectile
{
	default
	{
		Tag "Shield Firewave";
		DamageFunction (8 * random(1,8));
		Radius 8;
		Height 8;
		Speed 15;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.80;
		DamageType "Fire";
		+THRUGHOST;
		SeeSound "Weapons/boltfi";
		DeathSound "weapons/firex4";
	}
	
	States
	{
		Spawn:
			BOLT A 1 Bright 
			{
				A_BishopMissileWeave();
				A_SpawnItem("RedPuff",0,0);
			}
			Loop;
		Death:
			HBAL EFHI 2 Bright;
			Stop;
	}
}
class DKSword : EEProjectile // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		+LOWGRAVITY;
	}
	
	States
	{
		Spawn:
			SWRD KLMNOPQ 3 BRIGHT;
			goto Death;
		Death:
			SWRD RS 4 BRIGHT;
			SWRD T 4 BRIGHT;
			SWRD U 4;
			SWRD T 4 BRIGHT;
			SWRD U 8;
			SWRD T 4 BRIGHT;
			SWRD U 16;
			SWRD T 4 BRIGHT;
			SWRD U -1;
	}
}

class DKShield : EEProjectile // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		+LOWGRAVITY;
	}
	
	States
	{
		Spawn:
			SHLD ABCDEFGHI 3;
			goto Death;
		Death:
			SHLD H -1;
			Stop;
	}
}

class DKFire : EEProjectile
{
	default
	{
		Tag "Death Knight Flame";
		DamageFunction (0);
		ExplosionDamage 4;
		ExplosionRadius 8;
		Radius 2;
		Height 6;
		Speed 4;
		RenderStyle "Add";
		ALPHA 0.95;
		PROJECTILE;
		+THRUGHOST;
		DeathSound "weapons/scorch";
	}
	States
	{
		Spawn:
			DKAT NOPQRSTNOPQRSTNOPQRSTUVW 3 Bright 
			{
				A_Explode(4,8);
			}
			Stop;
	}
}
class RedPuff : EEProjectile
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.85;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			RPUF ABCDE 3 Bright;
			Stop;
	}
}

class WizardNew : EECreature // replaces Wizard
{
	default
	{
		Tag "Disciple of D'Sparil";
		Health 180;
		Radius 16;
		Height 68;
		Mass 100;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 112;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 48;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 88;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 64;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 112;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 128;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "Zap", 0.625;
		Painchance "Zap", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 2.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 48;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 128;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		SeeSound "wizard/sight";
		AttackSound "wizard/attack";
		PainSound "wizard/pain";
		DeathSound "wizard/death";
		ActiveSound "wizard/active";
		Obituary "$OB_WIZARD";
		HitObituary "$OB_WIZARDHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiTomeOfPower", 4, 1;
		Obituary "%o was cursed by a Disciple of D'Sparil.";
		HitObituary "%o was scratched by a Disciple of D'Sparil.";
	}
	
	States
	{
		Spawn:
			WZRD A 0 NoDelay;
			WZRD AB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			WZRD N 0 A_DynamicMusic();
			WZRD N 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD O 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD P 12 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(55,56),2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(44,45),2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(33,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(11,12),2,true,self)) { A_SetTics(11); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(1,5)*8, "wizard/melee", "none", "Melee", true);
			}
			Goto See;
		Missile:
			WZRD C 0 A_DynamicMusic();
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD D 12
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(55,56),2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(44,45),2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(33,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(11,12),2,true,self)) { A_SetTics(11); }

				A_WizAtk3("WizardFX1New", 5*random(1,8));
			}
			Goto See;
		Pain:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EE 3;
			Goto See;
		Pain.Kick:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EEEE 3;
			Goto See;
		Death:
			WZRD F 6 A_GhostOff();
			WZRD G 6 A_Scream();
			WZRD HI 6;
			WZRD J 6 A_NoBlocking();
			WZRD KL 6;
			WZRD M -1 A_SetFloorClip();
			Stop;
		Ice:
			WZRD Q 5 A_GenericFreezeDeath();
			WZRD Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WZRD M 6;
			WZRD LKJIHGF 6;
			Goto See;
	}
}
class WizardFX1New : EEProjectile replaces WizardFX1 
{
	default
	{
		Tag "Wizard Shot";
		DamageType "Magic"; 
		Radius 10;
		Height 6;
		Speed 18;
		FastSpeed 24;
		DamageFunction (3 * random(1,8));
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/magichit";
	}
	
	States
	{
		Spawn:
			FX11 AAABBB 2 Bright;
			Loop;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
// Greater Disciple
class GreaterDisciple : EECreature
{ 
	default
	{
		Tag "Greater Disciple";
		Health 300;
		PainChance 140;
		Painchance "Fist", 210; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Speed 8;
		Scale 0.90;
		Radius 20;
		Height 56;
		Mass 320;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+FLOAT;
		+NOGRAVITY;
		Obituary "%o was smote by a Greater Discple.";
		SeeSound "monster/dissit";
		PainSound "monster/dispai";
		DeathSound "monster/disdth";
		ActiveSound "monster/disact";
	}
	
	States 
	{ 
		Spawn: 
			DISC A 0 NoDelay;
			DISC AB 10 A_Look(); 
			goto Spawn+1;
		See: 
			DISC AAABBB 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DISC A 0
			{
				A_GDTeleport("Blur");
			}
			Loop;
		Blur:
			DISC A 1
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_StartSound("monster/blur");
				A_EEChase("Melee","Missile",CHF_FASTCHASE);
			}
			DISC AAABBBBAAAABBBB 1
			{
				A_SpawnItemEx("DSFX3",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERALPHA);
				A_EEChase("Melee","Missile",CHF_FASTCHASE);
			}
			Goto See;
		Missile:
			DISC A 0 A_DynamicMusic();
			DISC A 1 A_Jump(192,"Missile2");
		MissileBlur:
			DISC A 1
			{
				A_FaceTarget();
				A_SkullAttack();
				A_StartSound("monster/blur");
			}
			DISC AAAAAAAAAAA 1 
			{
				A_FaceTarget();
				A_SkullAttack();
				A_SpawnItemEx("DSFX3",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERALPHA);
			}
			Goto See;
		Missile2:
			DISC C 0 Bright A_Jump(128,"Missile3");
			DISC C 1 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat1");
			}
			DISC CC 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC D 8 Bright
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot1",36,0,-4,0);
				A_SpawnProjectile("DiscipleShot1",36,0,4,0);
				A_SpawnProjectile("DiscipleShot1",36,0,-8,0);
				A_SpawnProjectile("DiscipleShot1",36,0,8,0);
				A_SpawnProjectile("DiscipleShot1",36,0,0,0);
			}
			DISC D 0 Bright A_Jump(64,"Missile3");
			Goto See;
		Missile3:
			DISC E 1 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			DISC E 1 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			DISC E 1 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			Goto See;
		Pain: 
			DISC G 2;
			DISC G 2 A_EEPain(); 
			Goto See; 
		Pain.Fist: 
			DISC G 2;
			DISC G 2 A_EEPain(); 
			DISC GG 2;
			Goto See; 
		Pain.Kick: 
			DISC G 2;
			DISC G 2 A_EEPain(); 
			DISC GGGG 2;
			Goto See; 

		Death:
			DISC H 8 Bright A_Scream();
			DISC I 5 Bright;
			DISC J 5 Bright;
			DISC K 5 Bright A_NoBlocking();
			DISC LMN 4 Bright;
			DISC O -1;
			Stop;
		Raise: 
			DISC O 5;
			DISC NMLKJIH 5;
			Goto See; 
		XDeath:
			goto Death;
		Ice:
			DISC G 5 A_GenericFreezeDeath();
			DISC G 1 A_FreezeDeathChunks();
			wait;
	} 
}
class DSFX3 : EEAfterimageZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.90;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			NULL A 3;
			DISC A 3 A_FadeOut(basealpha*0.10);
			goto Spawn+1;
	}
}

class DiscipleShot1 : EEProjectile
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		DeathSound "monster/disht1";
	}
	
	States
	{
		Spawn:
			CFX2 ABCD 2 Bright 
			{
				A_SpawnProjectile("DSFX1",0,0,0,0);
			}
			Loop;
		Death:
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}

class DiscipleShot2 : EEProjectile
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (6 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		DeathSound "monster/disht2";
	}
	
	States
	{
		Spawn:
			CFX3 AB 3 Bright 
			{
				A_SpawnProjectile("DSFX2",0,0,0,0);
				A_SeekerMissile(5,8);
			}
			Loop;
		Death:
			CFX3 CDEFG 3 Bright;
			Stop;
	}
}

class DSFX1 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}
class DSFX2 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX3 HIJK 3 Bright;
			Stop;
	}
}

// Apprentice of D'Sparil
class ApprenticeSheenMode : PowerProtection
{
	default
	{
		damageFactor "normal", 0.25;
		radiusdamageFactor 0.25;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class HereticApprenticeNew : EECreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "TCOTD:A Monsters/Raven Style"
		Tag "Apprentice of D'Sparil";
		Health 500;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.8;
		RadiusDamageFactor 0.8;
		DamageFactor "Explosive", 0.8;
		DamageFactor "Magic", 0.8;
		DamageFactor "Zap", 0.8;
		MONSTER;
		+FLOORCLIP;
		+NOGRAVITY;
		+FLOAT;
		SeeSound "wizard2/sight";
		PainSound "wizard2/pain";
		DeathSound "wizard2/death";
		ActiveSound "wizard2/active";
		OBITUARY "%o was spooked by an Apprentice of D'Sparil";
	}

	states
	{
		Spawn:
			APDP A 0 NoDelay;
			APDP AB 10 A_Look();
			goto Spawn+1;
		See:
			APDP A 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP AABB 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 0 A_Jump(128,"Missile2");
			APDP C 0 A_Jump(64,"Missile3");
			APDP D 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			Goto See;
		Missile2:
			APDP CCCCCCCCC 1
			{
				A_SetTranslucent(alpha-0.1,0);
				A_FaceTarget(); 
			}
			APDP D 1 // A_SetInvulnerable
			{
				bNOPAIN = true;
				A_SetInventory("ApprenticeSheenMode",1);
				A_SetTranslucent(0.1,0);
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_EEWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_EEWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_EEWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_EEWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_EEWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP BABABABAB 1
			{
				A_SetTranslucent(alpha+0.1,0);
				A_FaceTarget(); 
			}
			APDP A 1 // A_UnsetInvulnerable
			{
				A_FaceTarget();
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1.0,0);
			}
			Goto See;
		Missile3:
			APDP D 4
			{
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("SuperFireBlast",15,0,0);
			}
			Goto See;
		Pain:
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_EEPain();
			Goto See;
		Pain.Fist:
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_EEPain();
			APDP EE 2;
			Goto See;
		Pain.Kick:
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_EEPain();
			APDP EEEE 2;
			Goto See;

		Death:
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 4;
			APDP F 4;
			APDP G 3 A_Scream();
			APDP H 3 A_SpawnProjectile("AoDGhost",8,0,0);
			APDP I 3 A_Fall();
			APDP JKL 2;
			APDP M -1;
			Stop;
		Raise:
			APDP M 8;
			APDP L 8;
			APDP KJI 6;
			Goto See;
		XDeath:
			goto Death;
		Ice:
			APDP E 5 A_GenericFreezeDeath();
			APDP E 1 A_FreezeDeathChunks();
			wait;
	}
}
class FireBlast : EEProjectile
{
	default
	{
		Tag "Apprentice FireBlast";
		DamageFunction (3 * random(1,4));
		Speed 25;
		Scale 0.75;
		PROJECTILE;
		+STRIFEDAMAGE;
		+NOGRAVITY;
		DEATHSOUND "fireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT;
			Loop;
    Death:
			PROJ D 4 BRIGHT 
			{
				A_Explode(8,64,0);
			}
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}

class SuperFireBlast : FireBlast
{
	default
	{
		Tag "Apprentice Super FireBlast";
		DamageFunction (24 * random(1,4));
		Speed 16;
		Scale 1.5;
		DEATHSOUND "superfireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT
			{
			}
			Loop;
    Death:
			PROJ D 4 BRIGHT A_Explode(256,128,0);
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}
class AoDGhost : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Projectile;
		RenderStyle "Translucent";
		Alpha 0.75;
		+NoClip;
		SeeSound "AoD/Ghost";
	}
	States
	{
		Spawn:
		Death:
			AODG ABCDEF 5 Bright;
			AODG G 5 Bright A_Fadeout();
			Stop;
	}
}
class Banshee : EECreature
{
	default
	{
		Tag "Abyssal Banshee";
		Health 720;
		Radius 12; // 15
		Height 48; // 60
		Mass 515;
		Speed 15;
		Scale 0.8;
		PainChance 100;
		Painchance "Fire", 50; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		SeeSound "Banshee/Sight";
		PainSound "Banshee/Pain";
		DeathSound "Banshee/Death";
		ActiveSound "Banshee/Active";
		MeleeSound "Banshee/Raise";
		MONSTER;
		Obituary "%o Heard The Banshee's Wail";
		DropItem "BlasterAmmo", 42, 10;
		DropItem "BlasterHefty", 4, 50;
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "BlasterAmmo", 128, 10;
		DropItem "BlasterHefty", 13, 50;
		DropItem "ArtiTomeOfPower", 8, 1;    
	}
	
	States
	{
		Spawn:
			BANS A 0 NoDelay;
			BANS A 1 A_FloatLook(12);
			goto Spawn+1;
		See:
			TNT1 A 0 A_UnSetInvulnerable();
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_TakeInventory("BansheeMissile5Token",24);
				A_TakeInventory("BansheePainToken",2);

				A_EEChase(null,"Missile", CHF_RESURRECT,1,3,1,1);
			}
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_EEChase("Melee","Missile", CHF_RESURRECT,1,3,1,1);
				A_SpawnItem("BansheeTrail",0,0);
			}
			BANS A 0 A_Jump(2,"BansheeTeleport");
			Loop;
		Missile:
			BANS A 0 A_Jump(2,"Missile3");
			BANS A 0 A_Jump(50,"Missile4");
			BANS A 0 A_Jump(256,"Missile2", "Melee", "Missile1", "Missile5", "Missile6");
			Goto See;
		Missile1:
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS B 0 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				int MapsFinished;
				if (globalvars) MapsFinished = globalvars.MapsFinished;
				
				if (random(1,256) <= 176) 
				{
					if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) 
					{
						if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) { A_PainAttack("ForgottenOne"); }
						else { A_DualPainAttack("LostSoulAnnoying"); }
					}
					else 
					{
						A_DualPainAttack("LostSoulNew"); 
					}
				}
				else
				{
					if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) 
					{
						if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) { A_DualPainAttack("ForgottenOne"); }
						else { A_DualPainAttack("LostSoulAnnoying"); }
					}
					else 
					{
						A_DualPainAttack("LostSoulNew"); 
					}
				}
			}
			Goto See;
		Missile2:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire", 50, 0, -8);
				A_SpawnProjectile("BansheeFire", 50, 0,  0);
				A_SpawnProjectile("BansheeFire", 50, 0,  8);
			}
			Goto See;
		Missile3:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS B 0 A_Jump(256,"BansheeTeleport");
			Goto See;
		Missile4:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire3");
			}
			Goto See;
		Missile5:  
			BANS B 0 A_FaceTarget();
		Missile5Loop:
			BANS BCD 1
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire4");

				A_GiveInventory("BansheeMissile5Token",1);
				if (CountInv("BansheeMissile5Token") >= 30) { return resolvestate("See"); }
				return resolvestate(null);
			}
			BANS D 1 A_MonsterRefire(40,"See");
			Loop;
		Missile6:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				A_SpawnProjectile("BansheeFire5", 50, 0,-160);
				A_SpawnProjectile("BansheeFire5", 50, 0,-128);
				A_SpawnProjectile("BansheeFire5", 50, 0,-96 );
				A_SpawnProjectile("BansheeFire5", 50, 0,-64 );
				A_SpawnProjectile("BansheeFire5", 50, 0,-32 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 0  );
				A_SpawnProjectile("BansheeFire5", 50, 0, 32 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 64 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 96 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 128);
				A_SpawnProjectile("BansheeFire5", 50, 0, 160);
			}
			Goto See;
		Melee:
			BANS B 0 A_FaceTarget();
			BANS BCD 1;
			BANS D 4
			{
				A_SpawnProjectile("BansheeFire2", 50, 0,-160);
				A_SpawnProjectile("BansheeFire2", 50, 0,-128);
				A_SpawnProjectile("BansheeFire2", 50, 0,-96 );
				A_SpawnProjectile("BansheeFire2", 50, 0,-64 );
				A_SpawnProjectile("BansheeFire2", 50, 0,-32 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 0  );
				A_SpawnProjectile("BansheeFire2", 50, 0, 32 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 64 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 96 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 128);
				A_SpawnProjectile("BansheeFire2", 50, 0, 160);
			}
			Goto See;
		BansheeTeleport:
			BANS A 0 A_SetInvulnerable();
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(1.0);
			BANS A 0 A_UnSetInvulnerable();
			Goto See;    

		Heal:
			BANS B 8 BRIGHT;
			BANS C 8 BRIGHT
			{
				A_BanshHealProj();
			}
			BANS D 8 BRIGHT;
			Goto See;

		Pain:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Fist:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Kick:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS AA 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Death:
			BANS G 2 A_Scream();
			BANS H 2 A_NoBlocking();
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS IJKLMNOPQR 2;
			BANS R -1;
			Stop;
	}
}
class BansheePainToken : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeFire3Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeMissile5Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeFire : EEEffectProjectile
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Radius 13;
		Height 8;
		Speed 15;
		Projectile;
		+RANDOMIZE;
		+RIPPER;
		+DEHEXPLOSION;
		+ROCKETTRAIL;
		SeeSound "Banshee/ASpawn";
		DeathSound "Banshee/ADeath";
		Obituary "%o Heard The Banshee's Wail.";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}

class BansheeFire2 : BansheeFire
{
	default
	{
		DamageFunction (2 * random(1,8));
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
	}
}

class BansheeFire3 : BansheeFire
{
	default
	{
		Tag "Banshee Megablast";
		DamageFunction (100 * random(1,8));
		Radius 24;
		Height 24;
		-RIPPER;
		+NOGRAVITY;
		+SPAWNCEILING;
		+SEEKERMISSILE;
		Scale 3.0;
		Decal "Scorch";
	}
	
	States
	{
		Spawn:
			BANB A 1 NoDelay BRIGHT A_SeekerMissile (50,50);
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}

class BansheeFire4 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 25;
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANF ABCDEFGH 3 bright;
			Stop;
		Death:
			BANF H 3 bright;
			Stop;
	}
}

class BansheeFire5 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 20;
		+SEEKERMISSILE;
		+FLOORHUGGER;
	}
	
	States
	{
		Spawn:
			BAFT A 1 BRIGHT 
			{
				A_SeekerMissile(50,50);
			}
			BAFT A 2 
			{
				A_SpawnItem("BansheeFireTrail2",0,0);
			}
			BAFT A 1 BRIGHT
			{
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Goto Spawn;
		Death:
			BAFT BCDEFGH 3 bright;
			Stop;
	}
}

class BansheeTrail : EEProjectile
{
	default
	{
		Radius 20;
		Height 56;
		VSpeed 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
		scale 0.80;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
		Idle:
			BANS A 3 
			{
				A_SetScale(scale.x-0.06,scale.y-0.06);
				A_FadeOut(0.09);
			}
			Loop;
	}
}

class BansheeFireTrail : EEProjectile
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BANF ABCDEFGH 3 Bright A_FadeOut(0.10);
			Stop;
	}
}

class BansheeFireTrail2 : EEProjectile
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BAFT ABCDEFG 3 Bright A_FadeOut(0.10);
			Stop;
	}
}

class IronLichNew : EECreature // replaces IronLich
{
	default
	{
		Tag "Iron Lich";
		Health 700;
		Radius 40;
		Height 72;
		Mass 325;
		Speed 6;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 8;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 64;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 20;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 24;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 24;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 40;
		DamageFactor "Suck", 0.05;
		Painchance "Suck", 1;
		DamageFactor "Zap", 0.3125;
		Painchance "Zap", 10;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 128;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 32;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 32;
		Monster;
		+NOBLOOD;
		+DONTMORPH;
		+DONTSQUASH;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "ironlich/attack";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "$OB_IRONLICH";
		HitObituary "$OB_IRONLICHHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 10 A_Look();
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			LICH A 0 A_DynamicMusic(); 
			LICH A 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			LICH B 20 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }

				if (exex_monsterlevelenabledflags) A_LichAttack(5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(30,true,self)), 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(45,true,self)), 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
																			else A_LichAttack(5, 1, 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
			}
			goto See;
		Pain:
			LICH A 4;
			LICH A 4 A_EEPain();
			goto See;
		Pain.Fist:
			LICH A 4;
			LICH A 4 A_EEPain();
			LICH AA 4;
			goto See;
		Pain.Kick:
			LICH A 4;
			LICH A 4 A_EEPain();
			LICH AAAA 4;
			goto See;
		Death:
			LICH C 7;
			LICH D 7 A_Scream();
			LICH EF 7;
			LICH G 7 A_NoBlocking();
			LICH H 7;
			LICH I -1 A_BossDeath();
			Stop;
		Ice:
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}
class HeadFX1New : EEEffectProjectile replaces HeadFX1 
{
	default
	{
		Tag "Ice Sphere";
		DamageFunction (1 * random(1,8));
		Radius 12;
		Height 6;
		Speed 13;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Icon Lich Ice Ball
		DamageType "Ice";
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 AAABBBCCC 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(12);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(105,175),401);
					}
				}
			}
		Death2:
			FX05 D 5 Bright A_LichIceImpact("HeadFX2New", 8, -0.6);
			FX05 EFG 5 Bright;
			Stop;
	}
}
class HeadFX2New : EEEffectProjectile replaces HeadFX2 
{
	default
	{
		Tag "Ice Shard";
		DamageFunction (3 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 6;
		Speed 8;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 HHHIIIJJJ 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			FX05 DEFG 5 Bright;
			Stop;
	}
}
class HeadFX3New : EEEffectProjectile replaces HeadFX3 
{ 
	default
	{
		Tag "Fire Pillar";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Radius 14;
		Height 12;
		Speed 10;
		FastSpeed 18;
		Projectile;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		RenderStyle "Add";
		DeathSound "misc/fireballbig";
	}
	
	States
	{
		Spawn:
			FX06 A 2 Bright;
			FX06 A 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 B 2 Bright;
			FX06 B 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 C 2 Bright;
			FX06 C 2 Bright
			{
				A_LichFireGrow();
			}
			Loop;
		NoGrow:
			FX06 AA 2 Bright;
			FX06 A 1 Bright;
			FX06 BB 2 Bright;
			FX06 B 1 Bright;
			FX06 CC 2 Bright;
			FX06 C 1 Bright;
			Loop;
		Death:
			FX06 DEFG 5 Bright;
			Stop;
	}
}
class WhirlwindNew : EEWhirlwind replaces Whirlwind 
{
	default
	{
		Tag "Whirlwind";
		DamageFunction (1 * random(1,8));
		DamageType "Wind";
		Radius 16;
		Height 74;
		Speed 10;
		Accuracy 8; // Sets how long [tics] to wait between hits when the tornado is touching a target
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEMCROSS;
		+SEEKERMISSILE;
		+EXPLOCOUNT;
		+STEPMISSILE;
		RenderStyle "Translucent";
		DefThreshold 60;
		Threshold 50;
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			FX07 DEFG 3;
		Idle:
			FX07 ABC 3 
			{
				A_WhirlwindSeek();
			}
			Loop;
		Death:
			FX07 GFED 4;
			Stop;
	}
}
// Ice Lich
class IceLich : EECreature
{
	default
	{
		Tag "Ice Lich";
		health 700;
		painchance 16;
		Painchance "Ice", 0; // Ice can't stun Ice Liches
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Ice", 0;
		DamageFactor "Fire", 2;
		speed 6;
		radius 40;
		height 72;
		mass 500;
		MONSTER;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+MISSILEMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTSQUASH;
		+NOICEDEATH;
		+DONTSPLASH;
		+BOSSDEATH;
		seesound "ironlich/sight";
		attacksound "";
		painsound "ironlich/pain";
		deathsound "freeze/shatter";
		activesound "ironlich/active";
		obituary "%o was frozen by an Ice Lich";
	}

	states
	{
		Spawn:
			ILCH A 0 NoDelay;
			ILCH A 10 A_Look();
			goto Spawn+1;
		See:
			ILCH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			ILCH B 0 A_DynamicMusic(); 
			ILCH B 0 bright A_JumpIfCloser(300, "Breath");
			ILCH B 20 bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_FaceTarget();
				A_StartSound("IceGuyAttack", CHAN_AUTO);

				A_SpawnProjectile("IceGuyFX3New", 44, 10, 0, 1);
				A_SpawnProjectile("IceGuyFX3New", 44, -10, 0, 1);
			}
			goto See;
		Breath:
			ILCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
			}
		BreathLoop: // 5 times
			ILCH B 0 bright 
			{
				A_StartSound("FrostBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			ILCH BBB 2 bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("IceBreath", 20, 0, frandom(-10.0,10.0), CMF_CHECKTARGETDEAD);
			}
			ILCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			ILCH A 0 A_EEPain();
			goto See;
		Death:
			ILCH A 3 A_Scream();
			ILCH A 1 A_IceGuyDie();
			Stop;
	}
}
class IceBreath : EEEffectProjectile
{
	default
	{
		Tag "Icy Breath";
		DamageFunction (5 * random(1,8));
		radius 12;
		height 8;
		speed 8;
		alpha 0.2;
		projectile;
		ProjectileKickBack 0;
		+NODAMAGETHRUST;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		+BLOODLESSIMPACT;
		DamageType "Ice";
		RenderStyle "Add";
	}
	states
	{
		Spawn:
			IBRT ABABABABABABABABABAB 2 bright;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			IBRT AB 2 bright;
			Stop;
	}
}
class Goldlich : IronlichNew
{
	default
	{
		Tag "Gold Lich";
		Mass 2000;
		Speed 10;
		Health 1400;
		Painchance 8;
		Painchance "Fist", 12; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 20; // Kick attacks have a +150% chance of stunning an enemy
		SeeSound "goldlich/sight";
		PainSound "goldlich/pain";
		DeathSound "goldlich/death";
		ActiveSound "goldlich/active";
		Translation "0:17=112:121", "18:35=137:144", "36:42=116:121", "43:51=137:144", "52:58=114:121", "59:65=137:144";
		Obituary "%o was annihilated by the goldlich's power.";
		Species "GoldLich";
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 1 A_Look();
			LICH A 3 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			LICH A 0 A_DynamicMusic(); 
			LICH A 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			LICH B 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);

				A_LichAttack(5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self)), 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(15,true,self)), 8*random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
			}
			LICH BBB 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			goto See;
		Missile:
			LICH A 0 A_DynamicMusic(); 
			LICH A 1 A_FaceTarget();
			LICH A 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 0
			{
				A_FaceTarget();
				if (random(1,256) <= 85 && GetClassName() == "Goldlich") { return resolvestate("Missile2"); }
				if (random(1,256) <= 128) { return resolvestate("Missile3"); }
				if (random(1,256) <= 255) { return resolvestate("Missile4"); }
				return resolvestate(null);
			}
			goto See;
		Missile2:
			LICH BBBBBBBB 1 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			TNT1 AAAAAAAAAAAAAAAA 0 A_EEWander(0,1,3,1,1);
			TNT1 A 0 
			{
				A_SpawnItemEx("TeleportFog");
				A_UnsetSolid();
				A_SpawnItemEx("FakeGoldlich", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_EEWander(0,1,3,1,1);
			TNT1 A 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_SetSolid();
			}
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			goto See;
		Missile3:
			LICH B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("goldlich/attack2");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				for (user_barragecounter = 0; user_barragecounter < 12; user_barragecounter++)
				{
					A_SpawnProjectile("GoldLichBounce",32,0,user_barragecounter*30);
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			goto See;
		Missile4:
			LICH B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("goldlich/attack1");

				user_shotsfired = 0;
				user_shotsfiredmax = 4 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
				if (random(1,2) == 1)
				{
					A_SpawnProjectile("GoldLichFire");
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
		Missile4Loop: // 4 times
			LICH B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("GoldLichFire");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				user_shotsfired += 1;
			}
			LICH B 1 
			{
				A_FaceTarget();
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("Missile4End"); }
				return resolvestate(null);
			}
			Loop;
		Missile4End:
			LICH B 0 
			{
				A_SpawnProjectile("GoldLichFire");
			}
			goto See;

		Death:
			LICH CC 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 1 A_Scream();
			LICH D 3 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH EE 4 A_SpawnItemEx("GoldLichGlitter", random(-40,40), random(-40,40), random(0,112),0,0,0, 0,0, 0);
			LICH FF 4 A_SpawnItemEx("GoldLichGlitter", random(-44,44), random(-44,44), random(0,96),0,0,0, 0,0, 0);
			LICH G 0 A_NoBlocking();
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH HH 4 A_SpawnItemEx("GoldLichGlitter", random(-56,56), random(-56,56), random(0,64),0,0,0, 0,0, 0);
			LICH I 4 A_SpawnItemEx("GoldLichGlitter", random(-64,64), random(-64,64), random(0,48),0,0,0, 0,0, 0);
			LICH I -1 A_BossDeath();
			Stop;
		Ice:
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}

class GoldLichMiniExplodes : EEBaseZSC
{
	default
	{
		+DONTSPLASH;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			FXA1 DEF 3 BRIGHT;
			Stop;
	}
}
class GoldLichGlitter : EEBaseZSC
{
	default
	{
		+NOGRAVITY;
	}
	States
	{
		Spawn:
			GGLT ABCDE 4 BRIGHT;
			Stop;
	}
}
class FakeGoldLich : GoldLich
{
	default
	{
		Tag "Gold Lich";
		DropItem "BlasterHefty", 255, 50;
		Mass 250;
		Health 175;
		Species "GoldLich";
	}
}
class GoldLichBounce : EEProjectile
{
	default
	{
		Tag "Gold Lich Bouncer";
		DamageFunction (1 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		BounceType "Doom";
		BounceCount 2;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+BOUNCEONACTORS;
		+CANBOUNCEWATER;
	}
	
	States
	{
		Spawn:
			FXA1 AABBCC 2 BRIGHT;
			Loop;
		Death:
			FXA1 A 0 A_StartSound("goldlich/attack2Blast");
			FXA1 A 0 BRIGHT A_Stop();
			FXA1 A 0 BRIGHT A_Explode(64,160,0);
			FXA1 GGGGGHHHHHIIIII 1 BRIGHT A_SpawnItemEx("GoldLichMiniExplodes", random(-32,32), random(-32,32), random(-32,32),0,0,0, 0,0, 0);
			Stop;
	}
}
class GoldLichFire : EEProjectile
{
	int user_tracks;
	default
	{
		Tag "Gold Lich Fire";
		DamageFunction (5 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST  ;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			FX06 A 0 { user_tracks = 5; }
		Weave:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_Weave(3, 0, 4.0, 0.0);
			}
			TNT1 A 0 A_Jump(128, "Track");
			Loop;
		Track:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			TNT1 A 0 A_Jump(user_tracks <= 0, "Track");
			TNT1 A 0 { user_tracks - 1; }
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_SeekerMissile(360, 1);
			}
			TNT1 A 0 A_Jump(128, "Weave");
			Loop;
		Death:
			FX06 DEFG 5 BRIGHT;
			Stop;
	}
}

// Blood Lich
class BloodLich : EECreature
{
	default
	{
		Tag "Blood Lich";
		Health 2100;
		Radius 40;
		Height 72;
		Mass 2100;
		Speed 10;
		PainChance 16;
		Painchance "Fire", 8; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 24; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		MONSTER;
		+NOGRAVITY;
		+NOTARGET;
		+NOFEAR;
		+SPAWNCEILING;
		+FLOAT;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTRIP;
		+DONTSPLASH;
		+BOSS;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "%o was reduced to a pile of ash by a Blood Lich.";
		DropItem "BlasterAmmo", 21, 50;
		DropItem "BlasterAmmo", 2, 50;
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 21, 50;
		DropItem "BlasterHefty", 2, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}

	States
	{
		Spawn:
			BLCH A 0 NoDelay;
			BLCH A 10 A_Look();
			goto Spawn+1;
		See:
			BLCH A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BLCH B 0 A_DynamicMusic(); 
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 0 Bright A_Jump(96,"Curse");
			BLCH B 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("MageStaffFire", CHAN_AUTO);

				A_SpawnProjectile("BloodLichFireball", 54, 10, -2, 1);
				A_SpawnProjectile("BloodLichFireball", 54, -10, 2, 1);
			}
			goto See;
		Breath:
			BLCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
			}
		BreathLoop: // 5
			BLCH B 0 Bright
			{
				A_StartSound("FlameBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			BLCH BBB 2 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("FireBreath", 20, 0, frandom(-3.0,3.0), CMF_CHECKTARGETDEAD);
			}
			BLCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Curse:
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_SpawnProjectile("CurseSpell", 20, 0, 0, 1);
			}
			goto See;
		Pain:
			BLCH A 0 A_EEPain();
			goto See;

		Death:
			BLCH C 7 
			{
				if (random(1,256) <= 160) { A_PainDie("HereticImpLeader"); }
			}
			BLCH D 7 A_Scream();
			BLCH EF 7;
			BLCH G 7 A_NoBlocking();
			BLCH H 7;
			BLCH I -1 A_BossDeath();
			Stop;
		Ice:
			BLCH A 5 A_GenericFreezeDeath();
			BLCH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BLCH H 7;
			BLCH GFEDC 7;
			goto See;
	}
}
class FireBreath : EEProjectile
{
	default
	{
		Tag "Blood Firebreath";
		DamageFunction (3 * random(1,8));
		Radius 12;
		Height 8;
		Speed 12;
		Alpha 0.2;
		PROJECTILE;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		+BLOODLESSIMPACT;
		DamageType "Fire";
		RenderStyle "Add";
	}
	
	States
	{
    Spawn:
			FRBS EFGEFGEFGEFGEFGEFG 3;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class BloodLichFireball : EEProjectile
{
	default
	{
		Tag "Blood Fireball";
		DamageFunction (4 * random(1,8));
		Speed 17;
		Height 8;
		PROJECTILE;
		+EXTREMEDEATH;
		DamageType "Fire";
		DeathSound "MageStaffExplode";
	}
	
	States
	{
		Spawn:
			MSP4 ABCD 2 Bright
			{
			}
			Loop;
		Death:
			MSP4 E 4 Bright A_SetTranslucent(1,1);
			MSP4 F 5 Bright A_Explode(80,192,0);
			MSP4 GH 5 Bright;
			MSP4 I 4 Bright;
			Stop;
	}
}
class CurseSpell : EEEffectProjectile
{
	default
	{
		Tag "Curse Sphere";
		PROJECTILE;
		+SEEKERMISSILE;
		+BLOODLESSIMPACT;
		RenderStyle "Add";
		DamageFunction (0);
		DamageType "Dark";
		Speed 15;
		Radius 10;
		Height 6;
	}
	
	void A_Effect(int basechance, int actualroll, int inflicttics, int sndchannel)
	{
		actor player = players[0].mo;
		A_StatusEffectChecker(basechance);
		if (random(1,user_ailmentmaxchance) <= actualroll && user_canafflict)
		{
			user_random = random(1,12);
			if (user_random >= 1 && user_random <= 4)
			{
				A_InflictWeaken(random(630,1050),sndchannel);
			}
			if (user_random >= 5 && user_random <= 8)
			{
				A_InflictHalve(random(630,1050),sndchannel);
			}
			if (user_random >= 9 && user_random <= 12)
			{
				A_InflictSlow(random(315,525),sndchannel);
			}
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			CURS A 0 A_StartSound("CurseActive", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_NORM);
			CURS ABCDEF 3 Bright A_SeekerMissile(50,50,2);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_Effect(4,2,random(630,1050),401);
				}
			}
		Death2:
			TNT1 A 0 A_StopSound(CHAN_AUTO);
			CURS GHIJKL 3 Bright;
			Stop;
	}
}

class BeastNew : EECreature // replaces Beast
{
	default
	{
		Tag "Were-Dragon";
		Health 220;
		Radius 32;
		Height 74;
		Mass 200;
		Speed 14;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.125;
		Painchance "Fire", 13;
		DamageFactor "Ice", 4.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.5625;
		Painchance "CherryBomb", 56;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 125;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 75;
		DamageFactor "Lead", 2.5;
		Painchance "Lead", 250;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 150;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 75;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 150;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 100;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 256;
		Monster;
		+FLOORCLIP;
		SeeSound "beast/sight";
		AttackSound "beast/attack";
		PainSound "beast/pain";
		DeathSound "beast/death";
		ActiveSound "beast/active";
		Obituary "$OB_BEAST";
		DropItem "CrossbowAmmo", 84, 10;
		DropItem "CrossbowHefty", 8, 50;
	}
	
	States
	{
		Spawn:
			BEAS A 0 NoDelay;
			BEAS AB 10 A_Look();
			goto Spawn+1;
		See:
			BEAS ABCDEF 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BEAS H 0 A_DynamicMusic(); 
			BEAS H 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			BEAS I 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomComboAttack("BeastBallNew", 32, random[BeastAttack](1,8)*3, "beast/attack");
			}
			Goto See;
		Pain:
			BEAS G 3;
			BEAS G 3 A_EEPain();
			Goto See;
		Pain.Fist:
			BEAS G 3;
			BEAS G 3 A_EEPain();
			BEAS GG 3;
			Goto See;
		Pain.Kick:
			BEAS G 3;
			BEAS G 3 A_EEPain();
			BEAS GGGG 3;
			Goto See;
		Death:
			BEAS R 6;
			BEAS S 6 A_Scream();
			BEAS TUV 6;
			BEAS W 6 A_NoBlocking();
			BEAS XY 6;
			BEAS Z -1;
			Stop;
		XDeath:
			BEAS J 5;
			BEAS K 6 A_Scream();
			BEAS L 5;
			BEAS M 6;
			BEAS N 5;
			BEAS O 6 A_NoBlocking();
			BEAS P 5;
			BEAS Q -1;
			Stop;
		Ice:
			BEAS G 5 A_GenericFreezeDeath();
			BEAS G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BEAS P 5;
			BEAS O 6;
			BEAS N 5;
			BEAS M 6;
			BEAS L 5;
			BEAS K 6;
			BEAS J 5;
			Goto See;
	}
}
class BeastBallNew : EEProjectile replaces BeastBall 
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 9;
		Height 8;
		Speed 12;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "beast/attack";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			FRB1 DEFGH 4;
			Stop;
	}
}
class ShadowBeast : EECreature
{
	default
	{
		Tag "Shadow Beast";
		Obituary "%o was killed by a shadow beast.";
		Bloodcolor "70 AC 00";
		Health 750; // 500
		Radius 40;
		Height 80;
		Mass 1250; // 500
		Speed 12;
		PainChance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		SEESOUND "shadowbeast/sight";
		PAINSOUND "shadowbeast/pain";
		DEATHSOUND "shadowbeast/death";
		ACTIVESOUND "shadowbeast/active";
		Alpha 1.0;
		RenderStyle "Translucent";
		MONSTER;
		+FloorClip;
	}
	
	states
	{
		Spawn:
			BDEM AB 10 A_Look();
			Loop;
		See:
			TNT1 A 0 A_JumpIfHealthLower((user_MaxHP / 2), "Run");
			BDEM ABCDEF 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); bAVOIDMELEE = true; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); bAVOIDMELEE = true; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); bAVOIDMELEE = true; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Run:
			TNT1 A 0 A_StartSound("shadowbeast/sight");
			BDEM AABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_EEChase(null,null,0,1,3,1,1);
			}
			TNT1 A 0 A_Jump(252, "Missile");
			Goto See;

		Missile:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_JumpIfHealthLower ((user_MaxHP / 2), "Missile2");
			TNT1 A 0 A_Jump(90, "Missile1b");
		
		Missile1a:
			BDEM H 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 0);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 8);
			}
			Goto See;
		Missile1b:
			BDEM H 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			BDEM I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -16);
			}
			BDEM I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -8);
			}
			BDEM I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 0);
			}
			BDEM I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 8);
			}
			BDEM I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 16);
			}
			BDEM I 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 32);
			}
			Goto See;

		Missile2:
			TNT1 A 0 A_Jump(90, "Missile2b");
		Missile2a:
			BDEM H 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM IIIIIIIIIIIII 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("ShadowBeastBallFire", 56, 0, random(-8,8));
			}
			Goto See;
		Missile2b:
			BDEM H 16 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(78,79,79,79),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(67,68),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(56,56,56,57),2,true,self)) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(22,23),2,true,self)) { A_SetTics(14); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(15); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 0);
			}
			Goto See;

		Pain:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(2,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_EEPain();
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(8,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_EEPain();
			BDEM GG 4;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(16,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_EEPain();
			BDEM GGGG 4;
			Goto See;

		Death:
			BDEM R 8;
			BDEM S 8 A_Scream();
			BDEM TUVWX 6;
			BDEM Y 6 A_NoBlocking();
			BDEM Z -1;
			Stop;
		Raise:
			BDEM Y 6;
			BDEM XWVUT 6;
			BDEM SR 8;
			Goto See;

		Spread:
			TNT1 A 0 
			{
				A_SpawnItemEx("ShadowBeastSpread", 0, 0, 0, 0, 0, 0, 0, 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);

				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				
				A_SetTranslucent(0.0);
			}
			Goto Wander;
		Wander:
			TNT1 A 0 
			{
				A_UnSetShootable();
				bNOPAIN = true;
			}
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				A_EEWander(0,1,3,1,1);
			}
			BDEM ABCDEF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FadeIn(0.1667,FTF_CLAMP);
				if (random(1,6) == 1) { A_EEWander(0,1,3,1,1); } else { A_EEChase(null,null,0,1,3,1,1); }
			}
			TNT1 A 0 
			{
				A_SetShootable();
				bNOPAIN = false;
			}
			Goto See;
	}
}

class ShadowBeastSpread : EEBaseZSC
{
	default
	{
		Tag "Shadow Beast Shot";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spread");
			BDEM JKLMNOP 8;
			BDEM Q 70;
			BDEM QQQQQQQQQQ 1 A_FadeOut(0.1);
			Stop;
	}
}
class ShadowBeastCreature : EESpawnedItem
{
	default
	{
		Tag "Shadow Beast Spirit";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 16;
		MONSTER;
		-SOLID;
		-SHOOTABLE;
		-COUNTKILL;
		+FLOAT;
		+NOGRAVITY;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spiritsit");
			Goto See;
		See:
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			BDSP ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB 2 A_Chase();
			Goto Death; 
		Melee:
			BDSP AB 2 A_CustomMeleeAttack((5 * random(1,8)), "none", "none", "Magic");
			Goto See;
		Death:
			TNT1 A 0 A_StartSound("shadowbeast/spiritdth");
			BDSP EFGHIJ 5;
			Stop;
	}
}
class ShadowBeastSparkle : EEProjectile
{   
	default
	{
		Alpha 1.0;
		RenderStyle "Add";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
		Scale 1.0;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(128,2);
			BDP1 GHI 5;
			Stop;
	}
}
class ShadowBeastBallFire : EEEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (1 * random(1,8)); // 2
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1death";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			BDP2 DEFGH 5 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 A 0;
			Stop;
	}
}
class ShadowBeastBall1 : EEEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0  ;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (5 * random(1,8));
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1sight";
		DeathSound "shadowbeast/pr1death";
	}
	
	States
	{
		Spawn:
			BDP2 ABC 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BDP2 DE 4 Bright;
			BDP2 FGH 3 Bright;
			Stop;
	}
}
class ShadowBeastBall2 : EEEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (2 * random(1,8));
		Speed 16;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DE 1 A_BishopMissileWeave();
			Loop;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class ShadowBeastBall3 : EEEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		Scale 1.4;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (10 * random(1,8));
		Speed 20;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DEDEDEDED 2 A_BishopMissileWeave();
			BDP1 ED 2 A_BishopMissileWeave();
			TNT1 A 0 A_FadeOut(0.20);
			Goto Spawn+9;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}

class ClinkNew : EECreature // replaces Clink
{
	default
	{
		Tag "Sabreclaw";
		Health 150;
		Radius 20;
		Height 64;
		Mass 75;
		Speed 14;
		MeleeRange 52;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 28;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 43;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 30;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 32;
		DamageFactor "Cricket", 2.0;
		Painchance "Cricket", 64;
		DamageFactor "Lead", 0.25;
		Painchance "Lead", 8;
		DamageFactor "Chop", 4.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 16;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 48;
		DamageFactor "Dust", 3.0;
		Painchance "Dust", 72;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 8;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 8;
		Monster;
		+NOBLOOD;
		+FLOORCLIP;
		SeeSound "clink/sight";
		AttackSound "clink/attack";
		PainSound "clink/pain";
		DeathSound "clink/death";
		ActiveSound "clink/active";
		Obituary "$OB_CLINK";
		DropItem "SkullRodAmmo", 84, 20;
		DropItem "SkullRodHefty", 8, 100;
	}
	
	States
	{
		Spawn:
			CLNK A 0 NoDelay;
			CLNK AB 10 A_Look();
			Loop;
		See:
			CLNK ABCD 3
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self))
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
				else
				{
					A_EEChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;
		Missile:
			CLNK E 0 A_DynamicMusic();
			CLNK E 0
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) 
				{
					if (random(1,256) <= 154) { return resolvestate("AxeMissile"); } else { return resolvestate("LungeAttack"); } 
					return resolvestate("See");
				}
				else
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) 
				{
					if (random(1,256) <= 85) { return resolvestate("AxeMissile"); } else { return resolvestate("LungeAttack"); } 
					return resolvestate("See"); 
				}
				return resolvestate("See");
			}
			Goto See;

		AxeMissile:
			CLNK EF 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK G 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("ClinkAxe", 30, random[ClinkAttack](3,9), "clink/attack");
			}
			Goto See;

		LungeAttack:
			CLNK A 0 A_JumpIfCloser(208,1);
			Goto AxeMissile;
			CLNK A 0 A_Jump(64, "AxeMissile");
			CLNK P 0 A_DynamicMusic();
			CLNK P 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CLNK P 0
			{
				A_SetInventory("ClinkLungeAttackStatus",1);
				A_FaceTarget();
			}
			CLNK Q 1 ThrustThingZ(0,40,0,1);
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK E 0 A_FaceTarget();
			CLNK Q 0 A_Recoil(-10);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQP 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK P 0 A_SpawnItemEx("SabreclawGhostTrail2",0,0,0,0,0,0,0,128,0);
			CLNK PPPP 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK P 0 A_SpawnItemEx("SabreclawGhostTrail2",0,0,0,0,0,0,0,128,0);
			CLNK P 1 A_JumpIfCloser(71, "MeleeStrike");
			Goto See;
		MeleeStrike:
			CLNK G 0 A_DynamicMusic();
			CLNK G 0 A_FaceTarget();
			CLNK G 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_SetInventory("ClinkLungeAttackStatus",0);
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(6,18), "clink/attack", "clink/attack", "Melee", 1);
			}
			Goto See;

		Melee:
			TNT1 A 0 
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
			}
			CLNK E 0 A_DynamicMusic();
			CLNK E 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK F 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK G 7 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ClinkAttack](3,9), "clink/attack", "clink/attack");
			}
			Goto See;
		Pain:
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_EEPain();
			Goto See;
		Pain.Fist:
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_EEPain();
			CLNK HH 3;
			Goto See;
		Pain.Kick:
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_EEPain();
			CLNK HHHH 3;
			Goto See;
		Death:
			CLNK IJ 6
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
			}
			CLNK K 5 A_Scream();
			CLNK L 5 A_NoBlocking();
			CLNK MN 5;
			CLNK O -1;
			Stop;
		Ice:
			CLNK H 5 A_GenericFreezeDeath();
			CLNK H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CLNK N 5;
			CLNK MLKJI 5;
			Goto See;
	}
}
class ClinkAxe : EEProjectile
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(2,2,2,2,2,2,3,3,3,4) * random(1,8));
		Radius 10;
		Height 8;
		Speed 25;
		FastSpeed 30;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Sabreclaw/Clink Spectral Axe
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.6;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX A 3 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 3 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}
class SabreclawGhostTrail : EEBaseZSC
{
	default
	{
		Radius 16;
		Height 56;
		Speed 1;
		DamageFunction (0);
		RenderStyle "Translucent";
		Alpha 0.7;
		PROJECTILE;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
			CLNK Q 0;
			CLNK Q 1 A_FadeOut(0.10);
			goto Spawn+1;
	}
}
class SabreclawGhostTrail2 : EEBaseZSC
{
	default
	{
		Radius 16;
		Height 56;
		Speed 1;
		DamageFunction (0);
		RenderStyle "Translucent";
		Alpha 0.7;
		PROJECTILE;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
			CLNK P 0;
			CLNK P 1 A_FadeOut(0.10);
			goto Spawn+1;
	}
}
class ClinkLungeAttackStatus : PowerProtection 
{
	default
	{
		DamageFactor "Melee", 1.5;
		DamageFactor "Fist", 1.5;
		DamageFactor "Kick", 1.5;
		DamageFactor "Chainsaw", 1.5;
		DamageFactor "Stomp", 1.5;
		DamageFactor "Trample", 1.5;
		DamageFactor "Bonk", 1.5;
		DamageFactor "Chop", 1.5;
		DamageFactor "Suck", 1.5;
		inventory.icon "";
	}
}
class DarkClink : EECreature //Recolour by Bouncy, new (edited) sprites by Phobus, Decorate by Phobus, Edited by Bouncy
{
	default
	{
		Tag "SabreBlade";
		Health 550;
		Radius 30;
		Height 64;
		Mass 600;
		Speed 16;
		Painchance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 12;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 12;

		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 20;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 32;
		DamageFactor "Cricket", 2.0;
		Painchance "Cricket", 64;
		DamageFactor "Lead", 0.25;
		Painchance "Lead", 8;
		DamageFactor "Chop", 4.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 16;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 48;
		DamageFactor "Dust", 3.0;
		Painchance "Dust", 72;
		DamageFactor "BRocket", 1.0;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 0.125;
		Painchance "Popper", 4;
		DamageFactor "Spinner", 1.334;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 8;

		RadiusDamageFactor 0.625;
		DamageFactor "Explosive", 0.625;

		DamageFactor "Holy", 1.50;
		Painchance "Holy", 60;
		DamageFactor "Thunder", 0.25;
		Painchance "Thunder", 12;
		MONSTER;
		SeeSound "clink/sight";
		DeathSound "clink/death";
		PainSound "clink/pain";
		ActiveSound "clink/active";
		MeleeSound "clink/attack";
		MeleeDamage 5;
		Bloodcolor "33 33 33";
		Renderstyle "Normal";
		Alpha 1.0;
		HitObituary "%o was decapitated by a Sabreblade.";
		Obituary "%o was zapped by a Sabreblade.";
		DropItem "SkullRodAmmo", 252, 20;
		DropItem "SkullRodAmmo", 252, 20;
		DropItem "SkullRodHefty", 24, 100;
		DropItem "SkullRodHefty", 24, 100;
	}
	
	States
	{
		Spawn:
			DCLK A 0 NoDelay;
			DCLK AB 10 A_Look();
			Loop;
		See:
			DCLK ABCD 3
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				user_fastchasetimermax = 16;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 10; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { user_fastchasetimermax = 12; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 14; }
				user_fastchasetimer++;
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					user_fastchasetimer = 0; 
				}
				else
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
				}
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			DCLK E 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DCLK F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DCLK G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(5*random(1,10), "clink/attack", "clink/attack");
			}
			Goto See;

		Missile:
			DCLK EF 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DCLK G 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("ClinkAxe2", 30, 5*random(1,10), "clink/attack");
			}
			Goto See;

		ExtraMissile:
			DCLK P 8 
			{
				A_FaceTarget();
			}
			DCLK Q 8 
			{
				A_FaceTarget();
				A_SpawnProjectile("DarkClinkBall",45,12,0,0);
				A_SpawnProjectile("DarkClinkBall",32,-18,0,0);
			}
			DCLK R 8 
			{
				A_FaceTarget();
				A_SpawnProjectile("DarkClinkBall",32,-12,0,0);
			}
			Goto See;

		Pain:
			DCLK H 5;
			DCLK H 5 A_EEPain(1,random(18,22),8,0,0,55);
			Goto See;
		Pain.Fist:
			DCLK H 5;
			DCLK H 5 A_EEPain(1,random(18,22),8,0,0,110);
			DCLK HH 5;
			Goto See;
		Pain.Kick:
			DCLK H 5;
			DCLK H 5 A_EEPain(1,random(18,22),8,0,0,165);
			DCLK HHHH 5;
			Goto See;
		Death:
			DCLK I 5;
			DCLK J 5 A_Scream();
			DCLK K 5;
			DCLK L 5 A_NoBlocking();
			DCLK MN 5;
			DCLK O -1 A_Die();
			Stop;
		Ice:
			DCLK H 5 A_GenericFreezeDeath();
			DCLK H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DCLK ONMLKJI 5;
			Goto See;
	}
}
class DarkClinkBall : EEProjectile
{
	default
	{
		Tag "SabreBlade Ball";
		Height 16;
		Radius 8;
		Speed 18;
		Damage 3;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.7;
		Decal "DoomImpScorch";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	States
	{
		Spawn:
			CLBL AABBCCDD 2 Bright;
			Loop;
		Death:
			CLBL EFG 5 Bright;
			Stop;
	}
}
class ClinkAxe2 : ClinkAxe
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(4,4,4,4,4,4,5,5,5,6) * random(1,8));
		Radius 10;
		Height 8;
		Speed 20;
		FastSpeed 24;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // SabreBlade/DarkClink Spectral Axe 2
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.8;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX ABC 2 Bright;
			CLAX A 2 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 2 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}

class MaulotaurNew : MaulotaurBase replaces Minotaur
{
	default
	{
		Tag "Maulotaur";
		Health 3000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
		MeleeRange 96;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOTARGET;
		+BOSSDEATH;
		+AVOIDMELEE;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "PhoenixRodAmmo", 168, 2;
		DropItem "PhoenixRodHefty", 17, 10;
		DropItem "PhoenixRodAmmo", 84, 2;
		DropItem "PhoenixRodHefty", 8, 10;
		DropItem "PhoenixRodAmmo", 42, 2;
		DropItem "PhoenixRodHefty", 4, 10;
		DropItem "PhoenixRodAmmo", 21, 2;
		DropItem "PhoenixRodHefty", 2, 10;
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
			MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR ABCD 5 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR X 12
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self)));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			MNTR F 6 A_MinotaurDeath();
			MNTR G 5;
			MNTR H 6 A_Scream();
			MNTR I 5;
			MNTR J 6;
			MNTR K 5;
			MNTR L 6;
			MNTR M 5 A_NoBlocking();
			MNTR N 6;
			MNTR O 5;
			MNTR P 6;
			MNTR Q 5;
			MNTR R 6;
			MNTR S 5;
			MNTR T -1 A_BossDeath();
			Stop;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			MNTR E 5 A_GenericFreezeDeath();
			MNTR E 1 A_FreezeDeathChunks();
			wait;
		Raise:
			MNTR S 5;
			MNTR R 6;
			MNTR Q 5;
			MNTR P 6;
			MNTR O 5;
			MNTR N 6;
			MNTR M 5;
			MNTR L 6;
			MNTR K 5;
			MNTR J 6;
			MNTR I 5;
			MNTR H 6;
			MNTR G 5;
			MNTR F 6;
			goto See;
	}
}
class MinotaurFX1New : EEEffectProjectile replaces MinotaurFX1 
{
	default
	{
		Tag "'taur Fire";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 26;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX12 AAABBB 2 Bright;
			Loop;
		Death:
			FX12 CDEFGH 5 Bright;
			Stop;
	}
}
class MinotaurFX2New : MinotaurFX1New replaces MinotaurFX2 
{
	default
	{
		Tag "'taur Firesnake";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 5;
		Height 12;
		Speed 14;
		FastSpeed 20;
		+FLOORHUGGER;
		ExplosionDamage 24;
		DeathSound "minotaur/fx2hit";
	}

	States
	{
		Spawn:
			FX13 A 2 Bright 
			{
				A_MntrFloorFire("MinotaurFX3New");
			}
			Loop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(24,64);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class MinotaurFX3New : MinotaurFX2New replaces MinotaurFX3 
{
	default
	{
		Tag "'taur Firesnake";
		DamageType "Fire";
		Radius 8;
		Height 16;
		Speed 0;
		DeathSound "minotaur/fx3hit";
		ExplosionDamage 128;
	}
	
	States
	{
		Spawn:
			FX13 DDCC 2 Bright;
			FX13 BB 2 Bright;
			FX13 B 1 Bright;
			FX13 CC 2 Bright;
			FX13 C 1 Bright;
			FX13 DD 2 Bright;
			FX13 D 1 Bright;
			FX13 EE 2 Bright;
			FX13 E 1 Bright;
			FX13 FFGGHH 2 Bright;
			Stop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(128,128);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}

class SnakeNew : EECreature // replaces Snake
{
	double user_varience;
	default
	{
		Tag "Ophidian";
		Health 280;
		Radius 22;
		Height 70;
		Speed 10;
		Painchance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 42;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 60;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 45;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 24;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 36;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 36;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 72;
		DamageFactor "Zap", 0.875;
		Painchance "Zap", 42;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 36;
		DamageFactor "BRocket", 1.25;
		Painchance "BRocket", 60;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 60;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 60;
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Obituary "$OB_SNAKE";
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodHefty", 8;
		DropItem "PhoenixRodHefty", 8;
		Species "Ophidian";
	}
	
	States
	{
		Spawn:
			SNKE A 0 NoDelay;
			SNKE AB 10 A_Look();
			goto Spawn+1;
		See:
			SNKE A 0;
			SNKE ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			SNKE FF 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE FFF 4
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjANew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			SNKE FFF 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE F 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjBNew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			goto See;
		Pain:
			SNKE E 3;
			SNKE E 3 A_EEPain();
			goto See;
		Pain.Fist:
			SNKE E 3;
			SNKE E 3 A_EEPain();
			SNKE EE 3;
			goto See;
		Pain.Kick:
			SNKE E 3;
			SNKE E 3 A_EEPain();
			SNKE EEEE 3;
			goto See;
		Death:
			SNKE G 5;
			SNKE H 5 A_Scream();
			SNKE IJKL 5;
			SNKE M 5 A_NoBlocking();
			SNKE NO 5;
			SNKE P -1;
			Stop;
		Ice:
			SNKE E 5 A_GenericFreezeDeath();
			SNKE E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			SNKE P 5;
			SNKE ONMLKJIHG 5;
			goto See;
	}
}
class SnakeProjANew : EEProjectile replaces SnakeProjA 
{
	default
	{
		Tag "Lil' Iceball";
		DamageFunction (1 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 8;
		Speed 14;
		FastSpeed 20;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "snake/attack";
		DeathSound "misc/magicsmall";
	}
	
	States
	{
		Spawn:
			SNFX AABBCCDD 2 Bright;
			Loop;
		Death:
			SNFX EF 5 Bright;
			SNFX G 4 Bright;
			SNFX HI 3 Bright;
			Stop;
	}
}
class SnakeProjBNew : SnakeProjANew replaces SnakeProjB 
{
	default
	{
		Tag "Lil' Fireball";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/magichit";
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			SNFX JJJKKK 2 Bright;
			Loop;
		Death:
			SNFX LM 5 Bright;
			SNFX N 4 Bright;
			SNFX O 3 Bright;
			Stop;
	}
}

// Hell Guard
class HellGuard : EECreature
{
	default
	{
		//$Category Monsters
		Tag "Abyssal Guard";
		Health 420; // 300
		Radius 24;
		Height 64;
		Speed 12; // 8
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Mass 750; // 500
		MONSTER;
		+FLOORCLIP;
		SeeSound "hellguard/sight";
		PainSound "hellguard/pain";
		DeathSound "hellguard/death";
		ActiveSound "hellguard/idle";
		Obituary "%o was fried to cinders by an abyssal guard.";
		MeleeDamage 12; // 8
		Species "Ophidian";
		+DONTHARMSPECIES;
		DropItem "PhoenixRodAmmo", 132, 5;
		DropItem "PhoenixRodHefty", 13, 25;
		DropItem "PhoenixRodAmmo", 44, 5;
		DropItem "PhoenixRodHefty", 4, 25;
		DropItem "PhoenixRodAmmo", 15, 5;
		DropItem "PhoenixRodHefty", 2, 25;
	}
	
	void A_HGShot()
	{
		if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0));
		if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
	}
	
	States
	{
		Spawn:
			HLGD A 0 NoDelay;
			HLGD AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			HLGD AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HLGD E 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			goto See;
		Pain:
			HLGD G 2;
			HLGD G 2 A_EEPain();
			goto See;
		Pain.Fist:
			HLGD G 2;
			HLGD G 2 A_EEPain();
			HLGD GG 2;
			goto See;
		Pain.Kick:
			HLGD G 2;
			HLGD G 2 A_EEPain();
			HLGD GGGG 2;
			goto See;
		Death:
			HLGD H 6;
			HLGD I 6 A_Scream();
			HLGD J 6;
			HLGD K 6 A_Fall();
			HLGD L 6;
			HLGD M 6;
			HLGD N -1;
			Stop;
		Ice:
			HLGD G 5 A_GenericFreezeDeath();
			HLGD G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HLGD O 8;
			HLGD NMLKJI 8;
			goto See;
	}
}
class HellGuardBall : EEProjectile
{
	default
	{
		Tag "Abyssal Sphere";
		DamageFunction (6 * random(1,8));
		Radius 13;
		Height 8;
		Speed 12;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
		SeeSound "hellguard/shot";
		DeathSound "hellguard/shothit";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			HGFB A 0 Bright NoDelay 
			{
				A_ScaleVelocity(frandom(0.875,1.125));
			}
		Idle:
			HGFB ABCD 2 Bright;
			Loop;
		Death:
			HGFB EFGH 4 Bright;
			Stop;
	}
}
class Serpathor : EECreature
{
	default
	{
		//$Category Monsters
		Tag "Serpathor";
		Health 650;
		Radius 20;
		Height 64;
		ProjectilePassHeight 92;
		Speed 12; // 10
		PainChance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Fire", 12;
		DamageFactor "Fire", 0.25;
		Mass 900; // 500
		Reactiontime 8;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		+MISSILEMORE;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Species "Ophidian";
		+DONTHARMSPECIES;
		Obituary "%o was stoned by a Serpathor.";
		DropItem "PhoenixRodAmmo", 84, 5;
		DropItem "PhoenixRod", 28, 1;
	}
	
	States
	{
		Spawn:
			SBTC A 0 NoDelay;
			SBTC AB 10 A_Look();
			goto Spawn+1;
		See:
			SBTC AABBCCDD 2 
			{
				user_shotsfired = 0;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); } 

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
				else
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 3; } else { user_shotsfiredmax = 2; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 2; } else { user_shotsfiredmax = 1; }
				}

				user_fastchasetimermax = 16;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 10; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { user_fastchasetimermax = 12; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 14; }
				user_fastchasetimer++;
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
					user_fastchasetimer = 0; 
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Missile:
			SBTC E 0 A_DynamicMusic();
			SBTC E 0 A_Jump(128,"MedusaBlast");
			SBTC E 0 A_StartSound("snake/sight", CHAN_VOICE);
			SBTC EE 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
		MissileFire:
			SBTC E 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_SpawnProjectile("SerpathorPhoenixFX1", 32, 0, 0, CMF_CHECKTARGETDEAD);
			}
			SBTC EE 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SBTC E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,8) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			Loop; //goto See;
		MedusaBlast:
			SBTC AF 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			SBTC G 8 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_StartSound("weapons/blastershoot");
				A_SpawnProjectile("MedusaBeam", 64, 8);
				A_SpawnProjectile("MedusaBeam", 64, -8);
			}
			SBTC F 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto Missile+1;
		Pain:
			SBTC H 3;
			SBTC H 3 A_EEPain(1,random(18,22),8,0,0,75);
			goto See;
		Pain.Fire:
			SBTC H 3 A_EEPain(1,random(18,22),8,0,0,25);
			goto See;
		Pain.Fist:
			SBTC H 3;
			SBTC H 3 A_EEPain(1,random(18,22),8,0,0,150);
			SBTC HH 3;
			goto See;
		Pain.Kick:
			SBTC H 3;
			SBTC H 3 A_EEPain(1,random(18,22),8,0,0,225);
			SBTC HHHH 3;
			goto See;

		Death:
			SBTC I 5 A_Scream();
			SBTC JKLM 5;
			SBTC N 5 A_NoBlocking();
			SBTC OPQR 5;
			SBTC R -1;
			Stop;

		Ice:
			SBTC H 5 A_GenericFreezeDeath();
			SBTC H 1 A_FreezeDeathChunks();
			Wait;

		Raise:
			SBTC RQPONMLKJI 5;
			goto See;
	}
}
class PhoenixFX1Base : EEProjectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		DamageType "Fire";
		Projectile;
		+THRUGHOST
		+SPECIALFIREDAMAGE
		SeeSound "weapons/phoenixshoot";
		DeathSound "weapons/phoenixhit";
		Obituary "$OB_MPPHOENIXROD";
	}

	States
	{
		Spawn:
			FX04 A 4 BRIGHT A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 6 BRIGHT A_Explode();
			FX08 BC 5 BRIGHT;
			FX08 DEFGH 4 BRIGHT;
			Stop;
	}
	
	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilUnmountedNew s2; 
		s2 = DSparilUnmountedNew(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				RandCall = 96;

				if (random[HornRodFX2]() <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}

	//----------------------------------------------------------------------------
	//
	// PROC A_PhoenixPuff
	//
	//----------------------------------------------------------------------------

	void A_PhoenixPuff(string missiletype = "PhoenixPuff", double anglediff = 90.0, double puffspeed = 1.3)
	{
		//[RH] Heretic never sets the target for seeking
		//P_SeekerMissile (self, 5, 10);
		Actor puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle + anglediff, puffspeed);
		}

		puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle - anglediff, puffspeed);
		}
	}
}
class SerpathorPhoenixFX1 : PhoenixFX1Base
{
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (10 * random(1,8)); // 5
		Speed 20; // 18
	}
	
	States
	{
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 3 Bright A_Explode((64+random(-12,12)),128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class Medusabeam : EEEffectFastProjectile
{
	default
	{
		Tag "Serpathor Eye Beam";
		Speed 125; // 100
		Radius 4;
		Height 4;
		DamageFunction (1*random(1,8));
		MissileType "MBSpark";
		Scale 0.25;
		Decal "CrossbowScorch2";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,5);
						if (user_random <= 1) { A_InflictSlow(random(140,280),401); }
						if (user_random == 2) { A_InflictSlow(random(210,350),401); }
						if (user_random == 3) { A_InflictSlow(random(210,350),401); }
						if (user_random == 4) { A_InflictSlow(random(210,350),401); }
						if (user_random >= 5) { A_InflictSlow(random(280,420),401); }
					}
				}
			}
		Death2:
			FX16 GHIJKL 2 bright;
			Stop;
	}
}

class DSparilBase : EEUniqueBoss
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (exex_monsterlevelenabledflags) extrasteps = (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(8,true,self));
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New")
	{
		string projtype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (dydudebug_showactormoveinfo) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (exex_monsterlevelenabledflags) extrasteps = (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(3,true,self));
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(90,true,self));
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(90,true,self));
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype2 = "Sorcerer2FX2New")
	{
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}
}
class DSparilMountedNew : DSparilBase replaces Sorcerer1
{
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Health 6000; //24000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Painchance 56;
		Painchance "Fist", 84; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 140; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 70;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 56;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 70;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 84;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 38;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 140;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 112;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 168;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 84;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 168;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 70;
		meleerange 82;
		Monster;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+DONTGIB;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparilserpent/sight";
		AttackSound "dsparilserpent/attack";
		PainSound "dsparilserpent/pain";
		DeathSound "dsparilserpent/death";
		ActiveSound "dsparilserpent/active";
		Obituary "$OB_DSPARIL1";
		HitObituary "$OB_DSPARIL1HIT";
	}
	
	States
	{
		Spawn:
			SRCR A 0 NoDelay;
			SRCR AB 10 A_Look();
			goto Spawn+1;
		See:
			SRCR A 0;
			SRCR ABCD 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				A_Sor1Chase();
			}
			Loop;
		Missile:
			SRCR Q 7 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_Srcr1Attack(8 * random(1,8), "SorcererFX1New");
			}
			Goto See;
		Missile2:
			SRCR S 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			SRCR Q 7 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_Srcr1Attack(8*random(1,8), "SorcererFX1New");
			}
			Goto See;
		Pain:
			SRCR Q 6 A_Sor1Pain();
			Goto See;
		Pain.Fist:
			SRCR Q 6 A_Sor1Pain();
			SRCR Q 6;
			Goto See;
		Pain.Kick:
			SRCR Q 6 A_Sor1Pain();
			SRCR QQ 6;
			Goto See;
		Death:
			SRCR E 7;
			SRCR F 7 A_Scream();
			SRCR G 7;
			SRCR HIJK 6;
			SRCR L 25 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 20 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 12;
			SRCR P -1 A_SorcererRise();
			Stop;
		Ice:
			goto Death;
	}
}
class SorcererFX1New : EEProjectile replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}

class DSparilUnmountedNew : DSparilBase replaces Sorcerer2
{
	int user_chaseteleportchance;
	int user_chaseteleportchance2;
	int lulwat;
	int lultimer1, lultimer1max;
	default
	{
		Tag "\c[gold]D'Sparil";
		Health 14000; // 56000;
		Radius 16;
		Height 70;
		Mass 300;
		Speed 14;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 80;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 24;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 32;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 48;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 8;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 4.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 256;
		DamageFactor "Zap", 0.05;
		Painchance "Zap", 2;
		MeleeRange 92;
		Monster;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+FULLVOLACTIVE;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparil/sight";
		AttackSound "dsparil/attack";
		PainSound "dsparil/pain";
		ActiveSound "dsparil/active";
		Obituary "$OB_DSPARIL2";
		HitObituary "$OB_DSPARIL2HIT";
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	States
	{
		Spawn:
			SOR2 A 0 NoDelay;
			SOR2 MN 10 A_Look();
			goto Spawn+1;
		See:
			SOR2 A 0;
			SOR2 MNOP 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				user_chaseteleportchance = 512;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { user_chaseteleportchance = 256; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(210,2,true,self)) { user_chaseteleportchance = 288; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { user_chaseteleportchance = 320; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { user_chaseteleportchance = 352; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { user_chaseteleportchance = 384; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_chaseteleportchance = 416; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_chaseteleportchance = 448; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_chaseteleportchance = 480; }
				
				user_chaseteleportchance2 = 1;
				if (health <= user_HPCritRange) { user_chaseteleportchance2 = 8; }
				else if (health <= user_HPLowRange) { user_chaseteleportchance2 = 4; }
				else if (health <= (user_MaxHP/2)) { user_chaseteleportchance2 = 2; }
				else { user_chaseteleportchance2 = 1; }
				if (random(1,user_chaseteleportchance) <= user_chaseteleportchance2)
				{
					DSparilTeleport();
				}
				else
				{
					A_Sor2Chase(); 
				}
			}
			Loop;
		Rise:
			SOR2 A 0;
			SOR2 A 0;
			SOR2 AB 4;
			SOR2 C 4 A_StartSound("dsparil/rise", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SOR2 DEF 4;
			SOR2 G 12 A_StartSound("dsparil/sight", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			Goto See;
		Pain:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			Goto See;
		Pain.Fist:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 Q 3;
			Goto See;
		Pain.Kick:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 QQ 3;
			Goto See;
		Missile:
			SOR2 R 0 A_DynamicMusic();
			SOR2 R 9 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(8); }
				A_Srcr2Decide();
			}
			SOR2 S 9 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(8); }
				A_FaceTarget();
			}
			SOR2 T 20 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_Srcr2Attack(20*random(1,8),"Sorcerer2FX1New","Sorcerer2FX2New");
			}
			Goto See;
		Teleport:
			TNT1 A 0; // makes sure D'Sparil is as stealth as possible when proceeding to teleport if flagged as stealth
			SOR2 LKJIHG 6;
			Goto See;
		Death:
			SDTH A 8 A_Sor2DthInit();
			SDTH B 8;
			SDTH C 8 A_StartSound("dsparil/scream", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
		DeathLoop:
			SDTH DE 7;
			SDTH F 7 A_Sor2DthLoop();
			SDTH G 6 A_StartSound("dsparil/explode", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH H 6;
			SDTH I 18;
			SDTH J 6 A_NoBlocking();
			SDTH K 6 A_StartSound("dsparil/bones", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH LMN 6;
			SDTH O -1 A_BossDeath();
			Stop;
		Ice:
			goto Death;
	}
}
class Sorcerer2FX1New : EEProjectile replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2New : EEProjectile replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}

//******************
//* Hexen specific *
//******************
class PigNew : EECreature replaces Pig
{
	default
	{
		Tag "Pig";
		Health 25;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Speed 10;
		Radius 12;
		Height 22;
		Mass 60;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		SeeSound "PigActive1";
		PainSound "PigPain";
		DeathSound "PigDeath";
		ActiveSound "PigActive1";
	}
	
	States
	{
		Spawn:
			PIGY B 0 NoDelay;
			PIGY B 10 A_Look();
			goto Spawn+1;
		See:
			PIGY A 0;
			PIGY ABCD 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			PIGY A 5 A_FaceTarget();
			PIGY A 10 
			{
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[PigAttack](2, 3), "PigAttack");
			}
			Goto See;
		Pain:
			PIGY D 4 A_PigPain();
			Goto See;
		Death:
			PIGY E 4 A_Scream();
			PIGY F 3 A_NoBlocking();
			PIGY G 4 A_QueueCorpse();
			PIGY H 3;
			PIGY IJK 4; 
			PIGY L -1;
			Stop;
		Ice:
			PIGY M 5 A_FreezeDeath();
			PIGY M 1 A_FreezeDeathChunks();
			Wait;
	}
}

class FireDemonNew : EECreature // replaces FireDemon
{
	int user_firedemonchase;
	default
	{
		Tag "Afrit";
		Health 80;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Afrit";
		PainChance 1;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 0;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 0;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 1;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.75;
		Painchance "Chop", 2;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 0;
		DamageFactor "Suck", 2.50;
		Painchance "Suck", 3;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 0;
		DamageFactor "BRocket", 2;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 1;
		Painchance "Popper", 1;
		DamageFactor "Spinner", 2;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 24;
		Speed 13;
		Radius 20;
		Height 68;
		Mass 75;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		+DONTHARMSPECIES;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "$OB_FIREDEMON"; // "%o tasted an Afrit's fire.";
	}
	
	States
	{
		Spawn:
			FDMN X 0 NoDelay;
			FDMN X 5 Bright;
			FDMN EFG 10 Bright A_FloatLook(16);
			Goto Spawn+3;
		See:
			FDMN E 0;
			FDMN E 8 Bright;
			FDMN F 6 Bright;
			FDMN G 5 Bright;
			FDMN F 8 Bright;
			FDMN E 6 Bright;
			FDMN G 7 Bright A_FiredRocks();
			FDMN HI 5 Bright;
			FDMN J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDMN ABC 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FireDChase(32,4,20,13,1,1,3,1);
			}
			Loop;
		Pain:
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_EEPain();
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDMN K 3 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDMN KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonMissile",32);
			}
			Goto Chase;
		Crash:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;
		XDeath:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;

		Death:
			FDMN D 4 Bright A_FaceTarget();
			FDMN L 4 Bright A_Scream();
			FDMN L 4 Bright A_NoBlocking();
			FDMN L 200 Bright;
			Stop;
		Ice:
			FDMN R 5 A_FreezeDeath();
			FDMN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDMN L 4;
			FDMN LD 4;
			Goto Chase;
	}
}
class FireDemonLeader : FireDemonNew
{
	default
	{
		Tag "Afrit Leader";
		Health 160;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 7;
		Radius 20;
		Height 56;
		Mass 100;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Leader's fire.";
	}
	
	States
	{
		Spawn:
			FDNL X 0 NoDelay;
			FDNL X 5 Bright;
			FDNL EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNL E 8 Bright;
			FDNL F 6 Bright;
			FDNL G 5 Bright;
			FDNL F 8 Bright;
			FDNL E 6 Bright;
			FDNL G 7 Bright A_FiredRocks();
			FDNL HI 5 Bright;
			FDNL J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNL A 0 Bright A_UnSetInvulnerable();
			FDNL AABBCC 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(40,8,15,10,1,1,3,1);
			}
			Loop;
		Pain:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_EEPain();
			Goto Chase;
		Pain.Fist:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_EEPain();
			FDNL DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_EEPain();
			FDNL DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNL K 3 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNL KKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonLeaderMissile",32);
			}
			Goto Chase;
		Crash:
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5;
			Stop;
		XDeath:
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5;
			Stop;

		Death:
			FDNL D 4 Bright A_FaceTarget();
			FDNL L 4 Bright A_Scream();
			FDNL L 4 Bright A_NoBlocking();
			FDNL L 200 Bright;
			Stop;
		Ice:
			FDNL R 5 A_FreezeDeath();
			FDNL R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNL L 4;
			FDNL LD 4;
			Goto Chase;
	}
}
class FireDemonLeaderSplotch1 : EEBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNL P 3;
			FDNL P 6 A_QueueCorpse();
			FDNL Y -1;
			Stop;
	}
}
class FireDemonLeaderSplotch2 : FireDemonLeaderSplotch1
{
	States
	{
		Spawn:
			FDNL Q 3;
			FDNL Q 6 A_QueueCorpse();
			FDNL Z -1;
			Stop;
	}
}
class FireDemonCommander : FireDemonNew
{
	default
	{
		Tag "Afrit Commander";
		Health 240;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 8; // 7
		Radius 20;
		Height 56;
		Mass 133;
		Damage 1;
		Species "Afrit";
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Commander's fire.";
	}
	
	States
	{
		Spawn:
			FDNC X 0 NoDelay ;
			FDNC X 5 Bright;
			FDNC EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNC E 8 Bright;
			FDNC F 6 Bright;
			FDNC G 5 Bright;
			FDNC F 8 Bright;
			FDNC E 6 Bright;
			FDNC G 7 Bright A_FiredRocks();
			FDNC HI 5 Bright;
			FDNC J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNC A 0 Bright A_UnSetInvulnerable();
			FDNC AABBCC 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(48,6,18,12,1,1,3,1);
			}
			Loop;
		Pain:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_EEPain();
			Goto Chase;
		Pain.Fist:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_EEPain();
			FDNC DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_EEPain();
			FDNC DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNC K 3 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNC KKKKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonCommanderMissile",32);
			}
			Goto Chase;
		Crash:
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5;
			Stop;
		XDeath:
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5;
			Stop;
		Death:
			FDNC D 4 Bright A_FaceTarget();
			FDNC L 4 Bright A_Scream();
			FDNC L 4 Bright A_NoBlocking();
			FDNC L 200 Bright;
			Stop;
		Ice:
			FDNC R 5 A_FreezeDeath();
			FDNC R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNC L 4;
			FDNC LD 4;
			Goto Chase;
	}
}
class FireDemonCommanderSplotch1 : EEBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNC P 3;
			FDNC P 6 A_QueueCorpse();
			FDNC Y -1;
			Stop;
	}
}
class FireDemonCommanderSplotch2 : FireDemonCommanderSplotch1
{
	States
	{
		Spawn:
			FDNC Q 3;
			FDNC Q 6 A_QueueCorpse();
			FDNC Z -1;
			Stop;
	}
}
class FireDemonQueen : FireDemonNew
{
	default
	{
		Tag "Afrit Queen";
		Health 960;
		ReactionTime 8;
		Speed 8;
		Radius 20;
		Height 56;
		Mass 250;
		Damage 1;
		Painchance "Fist", 16;
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.2;
		DamageFactor "Ice", 2.5;
		Monster;
		+BOSS;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+NEVERRESPAWN;
		+LOOKALLAROUND;
		+DONTMORPH;
		+NOFEAR;
		+NOPAIN;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Queen's fire.";
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FDNQ X 5 Bright;
			FDNQ EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNQ E 8 Bright;
			FDNQ F 6 Bright;
			FDNQ G 5 Bright;
			FDNQ F 8 Bright;
			FDNQ E 6 Bright;
			FDNQ G 7 Bright A_FiredRocks();
			FDNQ HI 5 Bright;
			FDNQ J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNQ A 0 Bright A_UnSetInvulnerable();
			FDNQ AABBCC 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(64,3,36,24,1,1,3,1);
			}
			Loop;
		Pain:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_EEPain();
			Goto Chase;
		Pain.Fist:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_EEPain();
			FDNQ DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_EEPain();
			FDNQ DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_Jump(48,"Clone");
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNQ K 3 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNQ KKKKKKKKK 4 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonQueenMissile",32);
			}
			Goto Chase;
		Clone:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_KillChildren();
			TNT1 A 0 A_UnSetShootable();
			FDNQ AAAAAAAAA 1 Bright A_FadeOut(0.10);
			FDNQ A 1 Bright
			{
				A_SetTranslucent(0.0);
				A_SpawnItemEx("FireDemonQueenClone",-50,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",50,-100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",100,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",-100,-50,0,0,0,0,0,16);
			}
			FDNQ AAAAAAAAAA 1 Bright A_FadeIn(0.10);
			TNT1 A 0 A_SetShootable();
			Goto Chase;
		Crash:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0 
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5;
			Stop;
		XDeath:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5;
			Stop;
		Death:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ D 4 Bright A_FaceTarget();
			FDNQ L 4 Bright A_Scream();
			FDNQ L 4 Bright;
			FDNQ L 200 Bright;
			Stop;
		Ice:
			FDNQ R 5 A_FreezeDeath();
			FDNQ R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNQ L 4;
			FDNQ LD 4;
			Goto Chase; 
	}
}
class FireDemonQueenClone : FireDemonQueen
{
	default
	{
		Tag "Afrit Queen?";
		Health 5;
		+NOBLOOD;
		-COUNTKILL;
		-TELESTOMP;
		-INVULNERABLE;
		-BOSS;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.0;
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FNDQ A 0;
			FDNQ AAAAAAA 1 Bright A_FadeIn(0.10);
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNQ K 4 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			FDNQ KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");

				A_SpawnProjectile("FireDemonQueenCloneMissile",32);
			}
			Goto Chase;
		Crash:
		XDeath:
		Death:
			FDNQ A 1 Bright A_FadeOut(0.10);
			Loop;
	}
}
class FireDemonQueenSplotch1 : EEBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	States
	{
		Spawn:
			FDNQ P 3;
			FDNQ P 6 A_QueueCorpse();
			FDMN Y -1;
			Stop;
	}
}
class FireDemonQueenSplotch2 : FireDemonQueenSplotch1
{
	States
	{
		Spawn:
			FDNQ Q 3;
			FDNQ Q 6 A_QueueCorpse();
			FDMN Z -1;
			Stop;
	}
}
class FireDemonMissileNew : EEProjectile replaces FireDemonMissile
{
	default
	{
		Tag "Fire Missile";
		Health 1000;
		ReactionTime 8;
		Speed 10;
		Radius 10;
		Height 6;
		Mass 5;
		DamageFunction (1 * random(1,6)); // 1
		DamageType "Fire";
		Projectile;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDMB A 5 Bright;
			Loop;
		Death:
			FDMB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonLeaderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (random(1,2) * random(1,6));
		DamageType "Fire";
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		Projectile;
		+FLOORCLIP;
		+SEEKERMISSILE;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDLB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonLeaderTrail1 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FLSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FLSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonLeaderTrail2 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FLFX ABCDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonCommanderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(1,2) * random(1,6)) + random(3,9));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDCB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonCommanderTrail1 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FCSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FCSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonCommanderTrail2 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FCFX ABCDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonQueenMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(2,3) * random(1,6)) + random(1,4));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenCloneMissile : FireDemonQueenMissile
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (((random(2,3) * random(1,6)) + random(1,4)) / 4);
		Speed 15;
		FastSpeed 20;
		Scale 0.5;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenTrail1 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FQSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FQSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonQueenTrail2 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FQFX ABCDE 3 BRIGHT;
			Stop;
	}
}

class EttinNew : EECreature // replaces Ettin
{
	default
	{
		Tag "Ettin";
		Health 175;
		Radius 25;
		Height 68;
		Mass 175;
		Speed 13;
		Damage 3;
		Painchance 60;
		Painchance "Fist", 90; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 150; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 40;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
		Monster;
		MeleeRange 68;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "EttinSight";
		AttackSound "EttinAttack";
		PainSound "EttinPain";
		DeathSound "EttinDeath";
		ActiveSound "EttinActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_ETTIN";
	}
	
	
	States
	{
		Spawn:
			ETTN A 0 NoDelay;
			ETTN AA 10 A_Look();
			goto Spawn+1;
		See:
			ETTN A 0;
			ETTN ABCD 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			ETTN EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ETTN G 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[EttinAttack](1,8)*2);
			}
			Goto See;
		Pain:
			ETTN H 7 A_EEPain();
			Goto See;
		Pain.Fist:
			ETTN H 7 A_EEPain();
			ETTN H 7;
			Goto See;
		Pain.Kick:
			ETTN H 7 A_EEPain();
			ETTN HH 7;
			Goto See;
		Death:
			ETTN IJ 4;
			ETTN K 4 A_Scream();
			ETTN L 4 A_NoBlocking();
			ETTN M 4 A_QueueCorpse();
			ETTN NOP 4;
			ETTN Q -1;
			Stop;

		XDeath:
			ETTB A 4;
			ETTB B 4 A_NoBlocking();
			ETTB C 4 A_SpawnItemEx("EttinMace", 0, 0, 8.5, random[DropMace](-128, 127)*0.03125, random[DropMace](-128, 127)*0.03125, 10+random[DropMace](0, 255)*0.015625, 0, SXF_ABSOLUTEVELOCITY);
			ETTB D 4 A_Scream();
			ETTB E 4 A_QueueCorpse();
			ETTB FGHIJK 4;
			TNT1 A 0;
			ETTB L -1;
			Stop;
		Ice:
			ETTN R 5 A_FreezeDeath();
			ETTN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ETTN P 4;
			ETTN ONMLKJI 4;
			Goto See;
	}
}
class EttinGhostNew : EttinNew replaces EttinMash
{
	default
	{
		Tag "Ettin (Ghost)";
		+NOBLOOD;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		PainChance 60;
		DamageFactor "Eldritch", 0.4;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 160;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
	}

	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}
class ThrownMace : EEProjectile
{
	default
	{
		Tag "Thrown Mace";
		DamageFunction ((Random(2,8) * 4));
		Speed 15;
		FastSpeed 20;
		Radius 6;
		Height 8;
		PROJECTILE;
		+NOTELEPORT;
		+NODAMAGETHRUST;
		+HEXENBOUNCE;
		-NOGRAVITY;
		+WINDTHRUST;
		+THRUGHOST;
		BounceCount 4;
		BounceFactor 1;
		WallBounceFactor 1;
		DeathSound "Fireball";
	}
	
	States
	{
		Spawn:
			AEMC ABCDEFG 3
			{
			}
			AEMC H 3
			{
				A_StartSound("FighterHammerContinuous");
			}
			Loop;
		Death:
			CFCF Q 0 Bright A_SetTranslucent(1,1);
			CFCF Q 1 Bright A_NoGravity();
			CFCF QQQ 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF RRR 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF SSSS 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF T 3 Bright;
			CFCF U 4 Bright;
			CFCF W 3 Bright;
			CFCF X 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}
class FlailPuffParticleFXSpawner : EEBaseZSC
{
	default
	{
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		+NoInteraction;
		+NoClip;
		-Solid;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
		Active:
			TNT1 A 0;
			TNT1 A 0 A_JumpIf(Args[1], "Circle");
			TNT1 A 2;
			TNT1 A 0 A_SpawnItemEx ("FlailPuffParticleFX", random(-1, 1), random(-2, 2), random(-2, 2), (0.1)*Random(-3, 3), (0.5)*Random(-3, 3), (0.4)*Random(-3, 3), 0 , SXF_ABSOLUTEMOMENTUM, Args[2]);
			TNT1 A 0 A_SpawnItemEx ("FlailPuffParticleFX", random(-1, 1), random(-2, 2), random(-2, 2), (0.1)*Random(-3, 3), (0.5)*Random(-3, 3), (0.4)*Random(-3, 3), 0 , SXF_ABSOLUTEMOMENTUM, Args[2]);
			Stop;
		Circle:
			TNT1 A 0;
			TNT1 A 2 A_SpawnItemEx ("FlailPuffParticleFX", random(-Args[0], Args[0]), 0, random(0, 8), (0.1)*Random(1, 3), 0, (0.1)*Random(1, 10), 0 , 129, Args[2]);
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}
class FlailPuffParticleFX : EEBaseZSC
{
	default
	{
		+Missile;
		+NoBlockmap;
		+NoInteraction;
		-Solid;
		+CLIENTSIDEONLY;
		Radius 0;
		Height 0;
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.7;
		Gravity 0.25;
	}
	
	States
	{
		Spawn:
			CFCF QQRRSSTTUUVVWWXXZZ 1 Bright A_FadeOut(0.06);
			Stop;
	}
}
// Ettin Commander [ported from Wrath of Cronos]
class EttinCommander : EttinNew
{
	default
	{
		Tag "Ettin Commander";
		Health 275;
		Mass 250;
		Speed 15;
		Damage 4;
		Painchance 35;
		Painchance "Fist", 52; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 87; // Kick attacks have a +150% chance of stunning an enemy
		MeleeRange 68;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Magic", 1.142857143;
		DamageFactor "Zap", 1.142857143;
		Translation "81:96=81:88", "97:121=97:109";
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+NODAMAGETHRUST;
		+MISSILEMORE;
		Obituary "%o was smashed by an Ettin Commander.";
	}
	
	States
	{
		Spawn:
			CETN A 0 NoDelay;
			CETN AA 10 A_Look();
			goto Spawn+1;
		See:
			CETN A 0;
			CETN ABCD 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			CETN H 7 A_EEPain();
			Goto See;
		Pain.Fist:
			CETN H 7 A_EEPain();
			CETN H 7;
			Goto See;
		Pain.Kick:
			CETN H 7 A_EEPain();
			CETN HH 7;
			Goto See;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CETN EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				A_CustomComboAttack("ThrownMace",52,(random(2,8)*4));
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
			CETN EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("FighterHammerMiss");
				A_CustomComboAttack("ThrownMace",52,(random(2,8)*4));
			}
			Goto See;

		Death:
			CETN IJ 4;
			CETN K 4 A_Scream();
			CETN L 4 A_NoBlocking();
			CETN M 4 A_QueueCorpse();
			CETN NO 4;
			CETN P 4;
			CETN Q -1;
			Stop;

		XDeath:
			CETB A 4; //A_SpawnItemEx("GIBBER");
			CETB B 4 A_NoBlocking();
			CETB C 4 A_SpawnItemEx("EttinMace", 0,0,8.5, random[DropMace](-128,127) * 0.03125, random[DropMace](-128,127) * 0.03125, 10 + random[DropMace](0,255) * 0.015625, 0, SXF_ABSOLUTEMOMENTUM);
			CETB D 4 A_Scream();
			CETB E 4 A_QueueCorpse();
			CETB FGHIJ 4;
			CETB K 4;
			ETTB L -1;
			Stop;
		Ice:
			---- E 5 A_GenericFreezeDeath();
			---- E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CETN P 4;
			CETN ONMLKJI 4;
			Goto See;
	}
}
// Bormereth :V
class Bormereth : EECreature
{
	default
	{
		Tag "Bormereth";
		Health 1200;
		Radius 30;
		Height 64;
		Speed 10;
		PainChance 75;
		Painchance "Fist", 112; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 187; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 112; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.1875;
		DamageFactor "Explosive", 0.1875;
		DamageFactor "Crush", 0.4;
		Mass 2500;
		BloodColor "Red";
		MeleeRange 68;
		MONSTER ;
		Meleedamage 8;
		+MISSILEEVENMORE;
		+FLOORCLIP;
		+BOSS;
		SeeSound "DMage/Attack";
		PainSound "DMage/Pain";
		ActiveSound "DMage/idle";
		DeathSound "DMage/death";
		Obituary "%o was incinerated by the rage of a Bormereth.";
		HitObituary "%o was smashed by a Bormereth.";
	}
	
	States
	{
		Spawn:
			BORM A 0 NoDelay;
			BORM A 10 A_Look();
			Loop;
		See:
			BORM A 0;
			BORM AABBCCDD 4
			{
				user_bormpainreact = 0;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BORM A 0;
			TNT1 A 0 A_Jump(60,"Missile2");
			TNT1 A 0 A_Jump(128,"Missile1b");
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			Goto See;

		Missile1b:
			TNT1 A 0 A_Jump(128,"Missile1c");
			BORM E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			BORM F 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",31,10,0);
			}
			BORM G 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",28,5,0);
			}
			BORM G 3 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			Goto See;

		Missile1c:
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,20);
				A_SpawnProjectile("BormerethFX1",25,0,0);
				A_SpawnProjectile("BormerethFX1",25,0,-20);
			}
			Goto See;
		Missile2:
			BORM F 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			TNT1 A 0 A_StartSound("bormereth/missile2prepare",CHAN_5);
			TNT1 A 0 A_SpawnItemEx("PossEttFakeFireBall",5,25,64,0,0,0,0,128);
			BORM EEEEE 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			BORM E 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			TNT1 A 0 
			{
				A_SpawnProjectile("PossEttFireBall",64,25,0);
			}
			BORM FG 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;
		Melee:
			BORM EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("BormerethFX1",randompick(25,28,31),8*random(1,8));
			}
			BORM E 0 A_CPosRefire();
			Goto See;
		Pain:
			TNT1 A 0 
			{
				if (random(1,256) <= 192)
				{
					user_bormpainreact = 1;
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_EEPain();
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Fist:
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_EEPain();
			BORM HH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Kick:
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_EEPain();
			BORM HHHH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		PainReact:
			BORM H 2 
			{
				A_SetInvulnerable();
				bCANTSEEK = true;
			}
			BORM HHHHHHHHHH 2;
			BORM H 2 
			{
				user_bormpainreact = 0;
				A_UnSetInvulnerable();
				bCANTSEEK = false;
			}
			Goto See;
		Death:
			BORM I 5;
			BORM J 5 A_Scream();
			BORM K 5 A_NoBlocking();
			BORM L 5 A_Fall();
			BORM MNO 5;
			BORM P 5;
			BORM Q -1;
			Stop;
		XDeath:  //I just like this death too much! :P
			TNT1 A 0 A_StartSound("misc/gibbed");
			BORB A 5 A_Scream();
			BORB B 5 A_SpawnItemEx("DBigEttinMace", 0, 0, 32, 3, 0, 0, -90, 128);
			BORB C 5 A_NoBlocking();
			BORB D 5 A_Fall();
			BORB EFGHIJ 5;
			BORB K 5;
			BORB L -1;
			Stop;
		Raise:
			BORM Q 5;
			BORM PONMLKJI 5;
			Goto See;
	}
}
class DBigEttinMace : EEProjectile
{
	default
	{
		Tag "Thrown Mace";
		+DOOMBOUNCE;
		Speed 3;
	}
	
	States
	{
		Spawn:
			BORB MNOPQR 5;
			BORB S -1;
			Stop;
	}
}
class BormerethFX1 : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (8 * random(1,8));
		DeathSound "bormereth/missilesimpledeath";
		Scale 0.85;
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}
class PossEttFakeFireBall : WraithFX1New
{
	default
	{
		+NOCLIP;
		DamageFunction (0);
		Speed 0;
		Scale 1.1;
	}
	
	States
	{
		Spawn:
			TNT1 AA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.1);
			WRBL A 1 Bright A_SetTranslucent(0.15);
			WRBL A 1 Bright A_SetTranslucent(0.2);
			TNT1 AAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.25);
			WRBL B 1 Bright A_SetTranslucent(0.3);
			WRBL B 1 Bright A_SetTranslucent(0.35);
			TNT1 AAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.4);
			WRBL C 1 Bright A_SetTranslucent(0.45);
			WRBL C 1 Bright A_SetTranslucent(0.5);
			TNT1 AAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.55);
			WRBL A 1 Bright A_SetTranslucent(0.6);
			WRBL A 1 Bright A_SetTranslucent(0.65);
			TNT1 AAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.7);
			WRBL B 1 Bright A_SetTranslucent(0.75);
			WRBL B 1 Bright A_SetTranslucent(0.8);
			TNT1 AAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.85);
			WRBL C 1 Bright A_SetTranslucent(0.9);
			WRBL C 1 Bright A_SetTranslucent(0.95);
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 3 Bright;
			Stop;
	}
}
class PossEttFireBall : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (15 * random(1,8));
		Scale 1.1;
		Speed 20;
		+SEEKERMISSILE;
		SeeSound "bormereth/missile2fired";
		DeathSound "bormereth/missile2death";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			WRBL A 1 Bright 
			{
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL AA 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL B 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL BB 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL C 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL CC 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			TNT1 A 0 A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			TNT1 A 0 A_SpawnProjectile("PEFBExplo",0,0,0);
			TNT1 A 0 A_Explode(80,80);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX23",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			WRBL DEF 3 Bright;
			WRBL GHI 3;
			Stop;
	}
}
class WraithFX22 : EEProjectile
{
	default
	{
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class WraithFX23 : EEProjectile
{
	default
	{
		Projectile;
		Damage 0;
		Speed 0;
		Radius 1;
		Height 1;
		+RIPPER;
		+BLOODLESSIMPACT;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class PEFBExplo : EEProjectile
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			FX58 ABCDEFGHIJKLMNOPQ 1 Bright;
			Stop;
	}
}
class PEFBTrail : EEProjectile
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Scale 0.4;
		Alpha 0.45;
	}
	
	States
	{
		Spawn:
			FX50 ABCDEFG 1;
			FX50 HIJKLMNOPQR 1;
			Stop;
	}
}
class FirePillarStarter : EEProjectile
{
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 28;
		DamageFunction (0);
		+NOTARGET;
		+RIPPER;
		+BLOODLESSIMPACT;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 3;
			Goto Death;
		Death:
			PLAY A 3 A_SpawnProjectile("FirePillarBase",-20,0,0);
			Stop;
	}
}
class FirePillarBase : EEProjectile
{
	int user_times;
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 0;
		+NOCLIP;
		Damage 0;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 2 
			{
				A_SpawnProjectile("FirePillarShot",5,0,0);
			}
			PLAY A 2
			{
				A_SpawnProjectile("FirePillarShot2",5,0,0);
			}
			TNT1 A 0
			{
				user_times++;
				if (user_times >= 5) { return resolvestate("Expire"); }
				return resolvestate(null);
			}
			Loop;
		Expire:
			PLAY A 2 A_SpawnProjectile("FirePillarShot",5,0,0);
			Stop;
	}
}
class FirePillarShot : EEProjectile
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Projectile;
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		Speed 0;
		Radius 4;
		Height 3;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			INFE ABCD 1 Bright 
			{
				ThrustThingZ(0,7,0,1);
			}
			INFE EFGHIJKLMNOPQRST 1 Bright 
			{
			}
			Stop;
	}
}
class FirePillarShot2 : FirePillarShot	//this one wont have light definition
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		Alpha 0.6;
	}
}

class CentaurNew : EECreature replaces Centaur
{
	default
	{
		Tag "Centaur";
		Health 200;
		Painchance 135;
		Painchance "Fist", 201; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosion", 0.875;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 101;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
		Speed 13;
		Height 64;
		Mass 120;
		MeleeRange 80;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+SHIELDREFLECT;
		SeeSound "CentaurSight";
		AttackSound "CentaurAttack";
		PainSound "CentaurPain";
		DeathSound "CentaurDeath";
		ActiveSound "CentaurActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_CENTAUR";
	}
	
	
	States
	{
		Spawn:
			CENT A 0 NoDelay;
			CENT AB 10 A_Look();
			goto Spawn+1;
		See:
			CENT A 0;
			CENT ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](3, 9));
			}
			Goto See;
		Pain:
			CENT G 6 A_EEPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 6 A_EEPain();
			CENT GG 6;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 6 A_EEPain();
			CENT GGGG 6;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_CentaurShieldOn();
				A_FaceTarget();

				if (random(1,128) <= 1) { user_defendtimer += 1; }
				if (random(1,32) <= 1) { user_defendtimer += 1; }
				if (random(1,8) <= 1) { user_defendtimer += 1; }
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = 3; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = 4; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_CentaurShieldOn();
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(17,18); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(16,17); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
			}
			Goto See;

		Death:
			CENT K 4;
			CENT L 4 A_Scream();
			CENT MN 4;
			CENT O 4 A_NoBlocking();
			CENT PQ 4;
			CENT R 4 A_QueueCorpse();
			CENT S 4;
			CENT T -1;
			Stop;

		XDeath:
			CTXD A 4;
			CTXD B 4 A_NoBlocking();
			CTXD C 0 A_SpawnItemEx("CentaurSword", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 270);
			CTXD C 4 
			{
				if (random(1,256) == 1)
				{
					A_SpawnProjectile("EvilWarriorShield",44,-32,90,0);
				}
				else
				{
					A_SpawnItemEx("CentaurShield", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,
												1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 90);
				}
			}
			CTXD D 3 A_Scream();
			CTXD E 4 A_QueueCorpse();
			CTXD F 3;
			CTXD G 4;
			CTXD H 3;
			CTXD I 4;
			CTXD J 3;
			CTXD K -1;
			stop;
		Ice:
			CENT U 5 A_FreezeDeath();
			CENT U 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CENT T 4;
			CENT SRQPONMLK 4;
			Goto See;
	}
}
class CentaurGhostNew : CentaurNew replaces CentaurMash
{
	default
	{
		Tag "Centaur (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		PainChance 135;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
	}
	
	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}
class SlaughtaurNew : CentaurNew replaces CentaurLeader
{
	default
	{
		Tag "Slaughtaur";
		Health 325;
		Speed 12.5;
		MeleeRange 80;
		Painchance 84;
		Painchance "Fist", 126; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 210; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;

		DamageFactor "Fire", 0.25;
		Painchance "Fire", 21;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 53;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 63;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 95;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 95;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 105;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 42;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 63;
		DamageFactor "Dust", 1.125;
		Painchance "Dust", 95;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 42;
		DamageFactor "Popper", 2.25;
		Painchance "Popper", 189;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 21;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 105;
		Translation "81:96=85:92", "97:121=101:113", "0:32=231:235", "33:50=231:235";  // Dark Skin, Obsidian Armor
	}
	
	States
	{
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](5, 13));
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
		MissilePhase1:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(7,8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(8,9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase2"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase2:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = random(5,6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(6,7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase3"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase3:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(7,8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(8,9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase4"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase4:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}
			
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = random(5,6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(6,7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }
	
				if (user_defendtimer >= user_defendtimermax) 
				{
					A_CentaurShieldOff();
					A_SlaughtaurShieldOff();
					return resolvestate("See"); 
				}
				return resolvestate(null); 
			}
			Loop;
		Pain:
			CENT G 5 A_EEPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 5 A_EEPain();
			CENT GG 5;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 5 A_EEPain();
			CENT GGGG 5;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
	
				if (random(1,32) == 1) { user_defendtimer += 1; }
				if (random(1,8) == 1) { user_defendtimer += 1; }
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(157,158),2,true,self)) { user_defendtimermax = 2; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { user_defendtimermax = 3; }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(52,53),2,true,self)) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_SlaughtaurShieldOn();
				user_defendtimer += 1;
	
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(21,22); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(19,20); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(18,19); }
				else { user_defendtimermax = 18; }
	
				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
	
				user_paintomissile = 10;
				if (exex_monsterlevelenabledflags) user_paintomissile -= (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.1,true,self));
				if (user_paintomissile < 1) user_paintomissile = 1;
	
				if (random(1,user_paintomissile) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
	}
}
class CentaurFXNew : EEProjectile replaces CentaurFX
{
	default
	{
		Tag "Shield Blast";
		Speed 20;
		DamageFunction (4 * random(1,8));
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "CentaurLeaderAttack";
		DeathSound "CentaurMissileExplode";
	}
	
	States
	{
		Spawn:
			CTFX A -1 Bright;
			Loop;
		Death:
			CTFX B 4 Bright;
			CTFX C 3 Bright;
			CTFX D 4 Bright;
			CTFX E 3 Bright;
			CTFX F 2 Bright;
			Stop;
	}
}

class GreenChaosSerpentNew : EECreature // replaces Demon1
{
	const ChunkFlags = SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY;
	default
	{
		Tag "Chaos Serpent [Green]";
		Health 250;
		meleerange 82;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
		Speed 13;
		Radius 32;
		Height 64;
		ProjectilePassHeight 104;
		Mass 220;
		Monster;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		+TELESTOMP;
		+FLOORCLIP;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "$OB_DEMON1";
	}
	
	States
	{
		Spawn:
			DEMN A 0 NoDelay;
			DEMN AA 10 A_Look();
			goto Spawn+1;
		See:
			DEMN ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			DEMN E 4;
			DEMN E 4 A_EEPain();
			Goto See;
		Pain.Fist:
			DEMN E 4;
			DEMN E 4 A_EEPain();
			DEMN EE 4;
			Goto See;
		Pain.Kick:
			DEMN E 4;
			DEMN E 4 A_EEPain();
			DEMN EEEE 4;
			Goto See;
		Melee:
			DEMN E 0 A_DynamicMusic();
			DEMN E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN F 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEMN G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEMN E 0 A_DynamicMusic();
			DEMN E 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMN F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN G 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon1FX1New", 62, 0);
			}
			Goto See;
		Death:
			DEMN HI 6;
			DEMN J 6 A_Scream();
			DEMN K 6 A_NoBlocking();
			DEMN L 6 A_QueueCorpse();
			DEMN MNO 6;
			DEMN P -1;
			Stop;
		XDeath:
			DEMN H 6;
			DEMN I 6 
			{
				A_SpawnItemEx("Demon1Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEMN O 6;
			DEMN NMLKJIH 6;
			Goto See;
	}
}
class Demon1FX1New : EEProjectile replaces Demon1FX1
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 15;
		Radius 10;
		Height 6;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			DMFX AABBCC 2 Bright;
			Loop;
		Death:
			DMFX DE 4 Bright;
			DMFX FGH 3 Bright;
			Stop;
	}
}
class GreenChaosSerpentGhostNew : GreenChaosSerpentNew replaces Demon1Mash
{
	default
	{
		Tag "Chaos Serpent [Green] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}
class BrownChaosSerpentNew : GreenChaosSerpentNew // replaces Demon2
{
	default
	{
		Tag "Chaos Serpent [Brown]";
		Painchance "Poison", 33;
		DamageFactor "Poison", 0.67;
		Painchance "PoisonElemental", 10;
		DamageFactor "PoisonElemental", 0.2;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 56;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
	
	States
	{
		Spawn:
			DEM2 A 0 NoDelay;
			DEM2 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM2 ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			DEM2 E 4;
			DEM2 E 4 A_EEPain();
			Goto See;
		Pain.Fist:
			DEM2 E 4;
			DEM2 E 4 A_EEPain();
			DEM2 EE 4;
			Goto See;
		Pain.Kick:
			DEM2 E 4;
			DEM2 E 4 A_EEPain();
			DEM2 EEEE 4;
			Goto See;
		Melee:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 F 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM2 G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM2 F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 G 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon2FX1New", 62, 0);
			}
			Goto See;
		Death:
			DEM2 HI 6;
			DEM2 J 6 A_Scream();
			DEM2 K 6 A_NoBlocking();
			DEM2 L 6 A_QueueCorpse();
			DEM2 MNO 6;
			DEM2 P -1;
			Stop;
		XDeath:
			DEM2 H 6;
			DEM2 I 6 
			{
				A_SpawnItemEx("Demon2Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEM2 O 6;
			DEM2 NMLKJIH 6;
			Goto See;
	}
}
class Demon2FX1New : EEEffectProjectile replaces Demon2FX1
{
	default
	{
		Tag "Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		Speed 15;
		Radius 10;
		Height 6;
		DamageType "Poison";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D2FX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
}
class BrownChaosSerpentGhostNew : BrownChaosSerpentNew replaces Demon2Mash
{
	default
	{
		Tag "Chaos Serpent [Brown] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}
// Magma Serpent [Demon3]
class Demon3Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			RDMA A 4;
			RDMA A 10 A_QueueCorpse();
			RDMA A 20;
			Wait;
		Death:
			RDMA A -1;
			Stop;
	}
}

class Demon3Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			RDMB A 4;
			RDMB A 10 A_QueueCorpse();
			RDMB A 20;
			Wait;
		Death:
			RDMB A -1;
			Stop;
	}
}

class Demon3Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			RDMC A 4;
			RDMC A 10 A_QueueCorpse();
			RDMC A 20;
			Wait;
		Death:
			RDMC A -1;
			Stop;
	}
}

class Demon3Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			RDMD A 4;
			RDMD A 10 A_QueueCorpse();
			RDMD A 20;
			Wait;
		Death:
			RDMD A -1;
			Stop;
	}
}

class Demon3Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			RDME A 4;
			RDME A 10 A_QueueCorpse();
			RDME A 20;
			Wait;
		Death:
			RDME A -1;
			Stop;
	}
}
class MagmaChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Magma]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 25;
		DamageFactor "Fire", 0.5;
		Painchance "Ice", 100;
		DamageFactor "Ice", 2.0;
		Mass 330; // 220
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "Orange";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "%o was blasted by a Magma Serpent.";
		HitObituary "%o was swallowed by a Magma Serpent.";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			RDMN A 0 NoDelay;
			RDMN AA 10 A_Look();
			goto Spawn+1;
		See:
			RDMN ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			RDMN E 0 A_DynamicMusic();
			RDMN E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN F 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			RDMN G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			RDMN E 0 A_DynamicMusic();
			RDMN E 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			RDMN F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN G 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon3FX",62,0,0,0);
			}
			Goto See;

		Pain:
			RDMN E 4;
			RDMN E 4 A_EEPain();
			Goto See;
		Pain.Fist:
			RDMN E 4;
			RDMN E 4 A_EEPain();
			RDMN EE 4;
			Goto See;
		Pain.Kick:
			RDMN E 4;
			RDMN E 4 A_EEPain();
			RDMN EEEE 4;
			Goto See;

		Death:
			RDMN HI 6;
			RDMN J 6 A_Scream();
			RDMN K 6 A_NoBlocking();
			RDMN L 6  A_QueueCorpse();
			RDMN MN 6;
			RDMN O 6;
			RDMN P -1;
			Stop;
		XDeath:
			RDMN H 6;
			RDMN I 6 
			{
				A_SpawnItemEx("Demon3Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon3Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon3FX : EEProjectile
{
	default
	{
		Tag "Magmatized Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			RDFX AABBCC 2 Bright 
			{
				A_SpawnItemEx("Demon3FX1Trail");
			}
			Loop;
		Death:
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 A 4 BRIGHT A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 B 4 BRIGHT A_Explode(32,52,0);
			XPL1 CDEF 4 BRIGHT;
			Stop;
	}
}
class Demon3FX1Trail : EEProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Gravity 0;
		Speed 1;
		Scale 1.1;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FBL1 CDEFG 4;
			Stop;
	}
}
class HrVolcanoTBlast : EEProjectile
{
	default
	{
		Tag "Magmatized VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		+NODAMAGETHRUST;
		Gravity 0.825;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		Damagetype "Fire";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT;
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}
// Black Serpent [Demon4]
class Demon4Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			BDMA A 4;
			BDMA A 10 A_QueueCorpse();
			BDMA A 20;
			Wait;
		Death:
			BDMA A -1;
			Stop;
	}
}

class Demon4Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			BDMB A 4;
			BDMB A 10 A_QueueCorpse();
			BDMB A 20;
			Wait;
		Death:
			BDMB A -1;
			Stop;
	}
}

class Demon4Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			BDMC A 4;
			BDMC A 10 A_QueueCorpse();
			BDMC A 20;
			Wait;
		Death:
			BDMC A -1;
			Stop;
	}
}

class Demon4Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			BDMD A 4;
			BDMD A 10 A_QueueCorpse();
			BDMD A 20;
			Wait;
		Death:
			BDMD A -1;
			Stop;
	}
}

class Demon4Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			BDME A 4;
			BDME A 10 A_QueueCorpse();
			BDME A 20;
			Wait;
		Death:
			BDME A -1;
			Stop;
	}
}

class BlackChaosSerpentNew : BrownChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Black]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Mass 330; // 220
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 37 ;
		DamageFactor "Fire", 0.75;
		Painchance "Ice", 75;
		DamageFactor "Ice", 1.5;
		Painchance "Poison", 16;
		DamageFactor "Poison", 0.33;
		Painchance "PoisonElemental", 5;
		DamageFactor "PoisonElemental", 0.1;
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "00 80 00";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was envenomed by a Black Serpent.";
		HitObituary "%o was devoured by a Black Serpent.";
	}

	States
	{
		Spawn:
			DEM4 A 0 NoDelay;
			DEM4 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM4 ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 F 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM4 G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM4 F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 G 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon4FX",62,0,0,0);
			}
			Goto See;

		Pain:
			DEM4 E 4;
			DEM4 E 4 A_EEPain();
			Goto See;
		Pain.Fist:
			DEM4 E 4;
			DEM4 E 4 A_EEPain();
			DEM4 EE 4;
			Goto See;
		Pain.Kick:
			DEM4 E 4;
			DEM4 E 4 A_EEPain();
			DEM4 EEEE 4;
			Goto See;
		Death:
			DEM4 HI 6;
			DEM4 J 6 A_Scream();
			DEM4 K 6 A_NoBlocking();
			DEM4 L 6 A_QueueCorpse();
			DEM4 MNO 6;
			DEM4 P -1;
			Stop;
		XDeath:
			DEM4 H 6;
			DEM4 I 6 
			{
				A_SpawnItemEx("Demon4Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon4Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon4FX : EEEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		Alpha 0.99;
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D4FX AABB 2 Bright 
			{
				A_SpawnItemEx("BlackDemonTrail", 0, 0, 0, 0, 0, 0, 0, 0);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX C 4 BRIGHT A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX D 4 BRIGHT A_Explode(32,52,0);
			D4FX EFGH 4 BRIGHT;
			Stop;
	}
}
class BlackDemonTrail : EEEffectProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 10;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			D4TR DEFGH 4;
			Stop;
	}
}
class PoisonVolcanoTBlast : EEEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		PoisonDamage 5;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		Gravity 0.825;
		DamageType "Poison";
		DamageType "Fire";
		Obituary "%o was envenomed by a Serpent.";
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			BPBL AABB 2 BRIGHT;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			BPBL EDCDEFG 4 BRIGHT;
			Stop;
	}
}

class EtherealChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Ethereal]";
		Health 1750; // 1400
		Speed 19; // 13
		Radius 32;
		Height 64;
		Mass 550; // 220
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 15; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.15;
		Monster;
		+BOSS;
		+TELESTOMP;
		+FLOORCLIP;
		+NODAMAGETHRUST;
		+NOBLOOD;
		+NOICEDEATH;
		+GHOST;
		+DONTMORPH;
		RenderStyle "Add";
		meleerange 82;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was blasted by a Spectral Chaos Serpent.";
	}
	
	States
	{
		Spawn:
			DEM5 A 0 NoDelay;
			DEM5 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM5 ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 F 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM5 G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(4,5) * random(2,9));
			}
			Goto See;
		Missile:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM5 F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 G 0 
			{
				if (A_JumpIfCloser(512,"Missile2") && random(1,256) <= 208) 
				{
					user_shotsfired = 0;
					user_shotsfiredmax = 10 + (random(1,256) & 2) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(15,true,self)) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(30,true,self)) + (CountInv("MonsterLevel") / 60);		
					return resolvestate("Missile2"); 
				}
				return resolvestate(null);
			}
			DEM5 G 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon5FX1", 62, 0, -10);
				A_SpawnProjectile("Demon5FX1", 62, 0, 0);
				A_SpawnProjectile("Demon5FX1", 62, 0, 10);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("Demon5FX1", 62, 0, -20);
					A_SpawnProjectile("Demon5FX1", 62, 0, 20);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
					{
						A_SpawnProjectile("Demon5FX1", 62, 0, -30);
						A_SpawnProjectile("Demon5FX1", 62, 0, 30);
					}
				}
			}
			Goto See;
		Missile2:
			DEM5 E 0 A_DynamicMusic();
			DEM5 G 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("Demon5Jet", 62, 0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("Demon5Jet", 62, 0, -4);
					A_SpawnProjectile("Demon5Jet", 62, 0, 4);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
					{
						A_SpawnProjectile("Demon5Jet", 62, 0, -8);
						A_SpawnProjectile("Demon5Jet", 62, 0, 8);
					}
				}

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			DEM5 E 4;
			DEM5 E 4 A_EEPain();
			Goto See;
		Pain.Fist:
			DEM5 E 4;
			DEM5 E 4 A_EEPain();
			DEM5 EE 4;
			Goto See;
		Pain.Kick:
			DEM5 E 4;
			DEM5 E 4 A_EEPain();
			DEM5 EEEE 4;
			Goto See;
		Death:
			---- H 0 A_NoBlocking();
			---- H 2 A_FadeOut();
			Wait;
		XDeath:
			Goto Death;
		Ice:
			Goto Death;
	}
}
class Demon5FX1 : EEEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D5FX AABBCCDDEEFF 2 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(30);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5FX G 4 Bright A_Explode(32,52,0);
			D5FX HIJ 4 Bright;
			D5FX KL 3 Bright;
			Stop;
	}
}
class Demon5Jet : EEEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (random(1,4));
		Radius 14;
		Height 12;
		Speed 16;
		PROJECTILE;
		ProjectileKickback 0;
		//+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 0.5;
		SeeSound "DemonMissileFire";
		DeathSound "FireBall";
		//DamageType "ManaDrain";
	}
	States
	{
		Spawn:
			D5JT AABBCC 2 BRIGHT
			{
				A_Weave(1, 2, 0.25, 0.5);
				A_FadeOut(0.034);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(90);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5JT DEFG 2 BRIGHT;
			Stop;
	}
}

class IceGuyNew : EECreature replaces IceGuy
{
	default
	{
		Tag "Wendigo";
		Health 120;
		Painchance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 0.01;
		Painchance "Ice", 1;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 72;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 180;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 180;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.01;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0.8;
		Painchance "Zap", 115;
		DamageFactor "Dust", 1.75;
		Painchance "Dust", 252;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 1.5;
		Painchance "Popper", 212;
		DamageFactor "Spinner", 4.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
		Speed 14;
		Radius 22;
		Height 75;
		Mass 150;
		DamageType "Ice";
		Monster;
		+NOBLOOD;
		+TELESTOMP;
		+NOICEDEATH;
		SeeSound "IceGuySight";
		AttackSound "IceGuyAttack";
		ActiveSound "IceGuyActive";
		Obituary "$OB_ICEGUY"; // "%o was frozen solid by a Wendigo.";
	}
	
	
	States
	{
		Spawn:
			ICEY A 0 NoDelay;
			ICEY A 10 A_IceGuyLook();
			goto Spawn+1;
		See:
			ICEY A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY B 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_IceGuyChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY CD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			ICEY A 1 A_EEPain();
			Goto See;
		Missile:
			ICEY E 0 A_DynamicMusic(); 
			ICEY EF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			ICEY G 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_IceGuyAttack("IceGuyFXNew");
			}
			ICEY F 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		Death:
			ICEY A 1;
			ICEY A 1 A_IceGuyDie();
			Stop;
		Inactive:
			ICEY A -1;
			Goto See;
	}
}
class IceGuyFXNew : EEEffectProjectile replaces IceGuyFX
{
	default
	{
		Tag "Spiked Ice Ball";
		DamageFunction (1 * random(1,8));
		Speed 14;
		Radius 8;
		Height 10;
		DamageType "Ice";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "IceGuyMissileExplode";
	}
	
	States
	{
		Spawn:
			ICPR ABC 3 Bright 
			{
				A_SpawnItemEx("IceFXPuff", 0, 0, 2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(70,105),401);
					}
				}
			}
		Death2:
			ICPR D 4 Bright;
			ICPR E 4 Bright A_IceGuyMissileExplode();
			ICPR FG 4 Bright;
			ICPR H 3 Bright;
			Stop;
	}
}
class IceGuyFX2New : EEEffectProjectile replaces IceGuyFX2
{
	default
	{
		Tag "Spiked Ice Shard";
		DamageFunction (1 * random(1,8));
		Speed 10;
		Radius 4;
		Height 4;
		DamageType "Ice";
		Gravity 0.125;
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+STRIFEDAMAGE;
	}
	
	States
	{
		Spawn:
			ICPR NOP 3 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(32);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			TNT1 A 0 Bright;
			Stop;
	}
}

class StalkerNew : EECreature // replaces Serpent
{
	default
	{
		Tag "Stalker";
		Health 90;
		Painchance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 192;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 72;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 144;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 120;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 144;
		DamageFactor "Lead", 0.875;
		Painchance "Lead", 84;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 108;
		DamageFactor "Breakfast", 1.125;
		Painchance "Breakfast", 108;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
		Meleerange 72;
		Speed 12;
		Radius 32;
		Height 70;
		Mass 160000;
		Monster;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		SeeSound "SerpentSight";
		AttackSound "SerpentAttack";
		PainSound "SerpentPain";
		DeathSound "SerpentDeath";
		HitObituary "$OB_SERPENTHIT"; // "%o was mauled by a Stalker.";
	}
	
	States
	{
		Spawn:
			SSPT H 0 NoDelay; 
			SSPT H 10 A_Look();
			goto Spawn+1;
		See:
			SSPT HH 1 
			{
				A_EEChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			SSPT H 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			SSPT L 5;
			SSPT L 5 A_EEPain();
			Goto Dive;
		Pain.Fist:
			SSPT L 5;
			SSPT L 5 A_EEPain();
			SSPT L 5;
			Goto Dive;
		Pain.Kick:
			SSPT L 5;
			SSPT L 5 A_EEPain();
			SSPT LLLLL 5;
			Goto Dive;
		Dive:
			SSDV ABC 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			SSDV D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			SSDV E 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			SSDV F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSDV GH 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			SSDV I 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSDV J 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			SSPT A 0 A_DynamicMusic();
			SSPT A 1 A_UnHideThing();
			SSPT A 1 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(0); }
				A_StartSound("SerpentBirth",CHAN_VOICE);
			}
			SSPT B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			SSPT C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSPT D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Death:
			SSPT O 4;
			SSPT P 4 A_Scream();
			SSPT Q 4 A_NoBlocking();
			SSPT RSTUVWXYZ 4;
			Stop;
		XDeath:
			SSXD A 4;
			SSXD B 4 A_SpawnItemEx("SerpentHead", 0, 0, 45);
			SSXD C 4 A_NoBlocking();
			SSXD DE 4;
			SSXD FG 3;
			SSXD H 3 A_SerpentSpawnGibs();
			Stop;
		Ice:
			SSPT [ 5 A_FreezeDeath();
			SSPT [ 1 A_FreezeDeathChunks();
			Wait;
		Walk:
			SSPT IJI 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_EEChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			SSPT J 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			SSPT H 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentUnHide();
			}
			SSPT EFGEF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentRaiseHump();
			}
			SSPT GEF 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSPT GEFGE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentLowerHump();
			}
			SSPT F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			SSPT K 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SSPT L 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			SSPT N 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(5*random(1,8));
				if (random (1,256) < 96) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}
class StalkerLeaderNew : StalkerNew // replaces SerpentLeader
{
	default
	{
		Tag "Alpha Stalker";
		Health 120;
		Meleerange 72;
		Translation "51:66=51:58", "186:202=186:194", "233:239=235:239", "33:50=33:41", "0:32=0:16";
		PainChance 96;
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 168;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 84;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 132;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.125;
		Painchance "Cricket", 108;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 120;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
	}
	
	States
	{
		Missile:
			SSPT N 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("SerpentFXNew", 32, 0);
			}
			Goto Dive;
	}
}
class SerpentFXNew : EEProjectile replaces SerpentFX
{
	default
	{
		Tag "Sizzling Slime";
		DamageFunction (4 * random(1,8));
		Speed 15;
		Radius 8;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "SerpentFXHit";
	}
	
	States
	{
		Spawn:
			SSFX A 0;
			SSFX A 3 Bright
			{
				A_StartSound("SerpentFXContinuous",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			SSFX BAB 3 Bright
			{
			}
			Goto Spawn+1;
		Death:
			SSFX C 4 Bright A_StopSound(CHAN_BODY);
			SSFX DEFGH 4 Bright;
			Stop;
	}
}
class IceStalker : StalkerNew
{
	default
	{
		Tag "Ice Stalker";
		Health 180;
		Speed 10;
		Monster;
		Meleerange 72;
		damagetype "Ice";
		DamageFactor "Ice", 0.05;
		DamageFactor "Fire", 2.5;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		+NOICEDEATH;
		+NODAMAGETHRUST;
		Obituary "%o caught a chill from an ice stalker.";
		HitObituary "%o caught a chill from an ice stalker.";
	}
	
	States
	{
		Spawn:
			ISPT A 0 NoDelay;
			ISPT H 10 A_Look();
			goto Spawn+1;
		See:
			ISPT HH 1 
			{
				A_EEChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			ISPT H 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			Goto Dive;
		Pain.Fist:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			ISPT L 5;
			Goto Dive;
		Pain.Kick:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			ISPT LLLLL 5;
			Goto Dive;
		Dive:
			ISDV ABC 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			ISDV E 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			ISDV F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV GH 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV I 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV J 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			ISPT A 1 A_UnHideThing();
			ISPT A 1 A_StartSound("SerpentBirth",CHAN_VOICE);
			ISPT B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			ISPT C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Death:
		XDeath:
		Ice:
			ISPT [ 1;
			ISPT [ 1 A_IceGuyDie();
			Stop;
		Walk:
			ISPT IJI 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_EEChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			ISPT J 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			ISPT H 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentUnHide();
			}
			ISPT EFGEF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentRaiseHump();
			}
			ISPT GEF 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT GEFGE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentLowerHump();
			}
			ISPT F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			ISPT K 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ISPT L 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			ISPT N 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(15,30));
				if (random(1,8) <= 3) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}
class IceStalkerLeader : StalkerLeaderNew
{
	default
	{
		Tag "Alpha Ice Stalker";
		Health 240;
		Speed 10;
		Monster;
		Meleerange 72;
		damagetype "Ice";
		DamageFactor "Ice", 0.05;
		DamageFactor "Fire", 2.5;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		+NOICEDEATH;
		+NODAMAGETHRUST;
		Obituary "%o caught a chill from an ice stalker.";
		HitObituary "%o caught a chill from an ice stalker.";
		Translation "51:66=51:66", "186:202=186:202", "233:239=233:239", "33:50=33:50", "0:32=0:32", "67:80=67:74";  // Neutralizes the Translation from the Stalker Leader [for now]
	}
	
	States
	{
		Spawn:
			ISPT A 0 NoDelay;
			ISPT H 10 A_Look();
			goto Spawn+1;
		See:
			ISPT HH 1 
			{
				A_EEChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			ISPT H 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			Goto Dive;
		Pain.Fist:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			ISPT L 5;
			Goto Dive;
		Pain.Kick:
			ISPT L 5;
			ISPT L 5 A_EEPain();
			ISPT LLLLL 5;
			Goto Dive;
		Dive:
			ISDV ABC 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			ISDV E 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			ISDV F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV GH 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV I 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV J 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			ISPT A 1 A_UnHideThing();
			ISPT A 1 A_StartSound("SerpentBirth",CHAN_VOICE);
			ISPT B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			ISPT C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT D 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Missile:
			ISPT N 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("IceGuyFXNew", 32, 10, 0, 1);
				A_SpawnProjectile("IceGuyFXNew", 32, -10, 0, 1);
			}
			Goto Dive;
		Death:
		XDeath:
		Ice:
			ISPT [ 1;
			ISPT [ 1 A_IceGuyDie();
			Stop;
		Walk:
			ISPT IJI 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }
				A_EEChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			ISPT J 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			ISPT H 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentUnHide();
			}
			ISPT EFGEF 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentRaiseHump();
			}
			ISPT GEF 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
			}
			ISPT GEFGE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentLowerHump();
			}
			ISPT F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			ISPT K 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ISPT L 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			ISPT N 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(15,30));
				if (random(1,8) <= 3) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}

class EtherealBloodPurple : EEBaseZSC
{
	default
	{
		+NOCLIP;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+CLIENTSIDEONLY;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1
			{
				if (GetCVar("exex_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodPurpleParticle : EEBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+MISSILE;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.045;
		Gravity 0.25;
	}
	
	States
	{
		Spawn:
			EBLD A 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class EtherealBloodGreen : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("exex_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodGreenParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD B 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class EtherealBloodRed : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("exex_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("exex_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodRedParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class BishopNew : EECreature replaces Bishop
{
	default
	{
		Tag "Dark Bishop";
		Health 130;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 100;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 55;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 220;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 83;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 165;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 165;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 83;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 165;
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 28;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 220;
		DamageFactor "Zap", 0.10;
		Painchance "Zap", 1; // 10 times EVEN LESS likely to flinch from the Pike's shots than expected
		DamageFactor "Dust", 10;
		Painchance "Dust", 256;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 165;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 110;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 220;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		+NOTARGETSWITCH;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "$OB_BISHOP";
		Bloodtype "EtherealBloodGreen";
		-NOBLOOD;
		Species "Bishop";
	}
	
	States
	{
		Spawn:
			BISH A 0 NoDelay;
			BISH A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			BISH A 0;
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase();
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 1 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				A_BishopDecide();
			}
			Loop;
		Blur:
			BISH A 2 A_BishopDoBlur(3,3,11.0);
			BISH A 4 A_BishopSpawnBlur(96);
			Wait;
		Pain:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Fist:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Kick:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCCC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			BISH ADE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			BISH F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_BishopAttack(4*random(1,8), (random(1,256) & 3) + 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(15,true,self)));
			}
			BISH F 5 
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_BishopAttack2("BishopFXNew");
			}
			Wait;
		Death:
			BISH G 6;
			BISH H 6 Bright A_Scream();
			BISH I 5 Bright A_NoBlocking();
			BISH J 5 Bright A_Explode(random[BishopBoom](25, 40));
			BISH K 5 Bright;
			BISH LM 4 Bright;
			BISH N 4 A_SpawnItemEx("BishopPuff", 0, 0, 40, 0, 0, 0.5);
			BISH O 4 A_QueueCorpse();
			BISH P -1;
			Stop;
		Ice:
			BISH X 5 A_FreezeDeath();
			BISH X 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BISH O 4;
			BISH NML 4;
			BISH KJI 5;
			BISH HG 6;
			Goto See;
	}
}
class BishopFXNew : EEProjectile
{
	Default
	{
		Tag "Green Star";
		Radius 10;
		Height 6;
		Speed 10;
		Damage 1;
		Projectile;
		+SEEKERMISSILE
		-ACTIVATEIMPACT -ACTIVATEPCROSS
		+STRIFEDAMAGE +ZDOOMTRANS
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
	}
	States
	{
		Spawn:
			BPFX ABAB 1 Bright A_BishopMissileWeave();
			BPFX B 0 Bright A_SeekerMissile(2,3);
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}
class BishopFXNew2 : BishopFXNew replaces BishopFX
{
	default
	{
		Tag "Green Star";
		DamageFunction (random(2,6) + random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		Projectile;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+STRIFEDAMAGE;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
	}
	
	States
	{
		Spawn:
			BPFX ABAB 1 Bright 
			{
				A_Weave(2, 2, 2.0, 1.0);
			}
			BPFX B 0 Bright 
			{
				A_SeekerMissile(2, 3);
			}
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}
class DarkDisciple : BishopNew
{
	default
	{
		Tag "Dark Disciple";
		Health 220;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 140;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		-NOTARGETSWITCH;
		+NODAMAGETHRUST;
		-NOBLOOD;
		Species "Bishop";
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o succumbed to a Disciple's dark power.";
		Bloodtype "EtherealBloodPurple";
	}
	
	States
	{
		Spawn:
			HDIS A 0 NoDelay;
			HDIS A 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			Loop;

		Blur:
			HDIS A 0 { bGHOST = true; }
			HDIS A 0 A_SetTranslucent(0.8,0);
			HDIS A 2 A_BishopDoBlur(3,3,14.0);
			HDIS AAA 4 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			HDIS AA 4 A_SpawnItem("DiscipleBlur");
			HDIS A 0 { bGHOST = false; }
			HDIS A 0 A_SetTranslucent(1,0);
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;
		Pain:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Fist:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Kick:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCCC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HDIS ADE 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			HDIS F 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_BishopAttack(5*random(1,8));
				user_shotsfired = 0;
				user_shotsfiredmax = (random(1,256) & 3) + 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(12.5,true,self));
				A_StartSound("BishopAttack");
			}
		MissileLoop:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HDIS F 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("DiscipleSpreadFX",32,0,-60,1);
				A_SpawnProjectile("DiscipleSpreadFX",32,0,60,1);
				A_SpawnProjectile("DiscipleFX",32);
				user_shotsfired += 1;
			}
			HDIS F 0 
			{
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			HDIS A 0
			{ 
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS G 6;
			HDIS H 6 Bright A_Scream();
			HDIS I 5 Bright A_NoBlocking();
			HDIS J 5 Bright A_Explode(random(40, 65),128,1);
			HDIS K 5 Bright;
			HDIS LM 4 Bright;
			HDIS N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			HDIS O 4 A_QueueCorpse();
			HDIS P -1;
			Stop;
		Ice:
			HDIS C 5 A_GenericFreezeDeath();
			HDIS C 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HDIS ON 5;
			HDIS MLKJIH 5 Bright;
			HDIS G 5;
			Goto See;
	}
}
class DiscipleFX : EEProjectile
{
	default
	{
		Tag "Disciple's Star";
		DamageFunction (random(1,4) * random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		FastSpeed 15;
		Projectile;
		+NODAMAGETHRUST;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			HDFX ABAB 1 Bright 
			{
				A_BishopMissileWeave();
			}
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DiscipleSpreadFX : DiscipleFX
{
	States
	{
		Spawn:
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX ABAB 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Goto Spawn+16;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DisciplePainBlur : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS C 8;
			Stop;
	}
}

class DiscipleBlur : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS A 16;
			HDIS A 8 A_SetTranslucent(0.4);
			Stop;
	}
}

// Vampire [Bishop Variant]
class VampireEE : BishopNew
{ 
	default
	{
		Tag "Vampire";
		Health 450;
		PainChance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Species "Bishop";
		Speed 8;
		Scale 0.90;
		Radius 20;
		Height 56; 
		Mass 200;
		SeeSound "vampire/see";
		DeathSound "vampire/death";
		PainSound "vampire/pain";
		Bloodtype "EtherealBloodRed";
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		-NOGRAVITY;
		-FLOAT;
		Obituary "A Vampire drained all of %o's life.";
	}
	
	States 
	{
		Spawn: 
			VAM1 A 0 NoDelay;
			VAM1 AB 10 A_FloatLook(8);
			goto Spawn+1;
		See:
			VAM1 A 0;
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 A 1
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
			}
			Loop;

		Blur:
			VAM1 A 2 A_BishopDoBlur(3,3,17.0);
			VAM1 AAA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			VAM1 AA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;

		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 X 0 Bright A_Jump(96,"Missile2");
			VAM1 X 8 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 9 + (random(1,256) & 3) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
			}
		BatAttack:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 Bright 
			{
				A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);

				A_SpawnProjectile("BatAttack",Random(8,64),random(-32,32),random(20,-20),1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("BatEnd"); }
				return resolvestate(null);
			}
			Loop;
		BatEnd:
			VAM1 Y 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			Goto See;

		Missile2:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 E 8 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 42 + (random(1,256) & 14) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self));
			}
			VAM1 AAAAAAAAAAAAAA 0 A_SpawnDebris("VampireBloodBoom",1);
		BeamLoop: // 56
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 F 1 Bright 
			{
				A_SpawnProjectile("VampireRoundBeam",32,0,0,1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			VAM1 C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;

		Death:
			VAM1 G 1 Bright;
			VAM1 G 8 Bright A_Scream(); 
			VAM1 H 5 Bright;
			VAM1 I 5 Bright A_NoBlocking();
			TNT1 AAAAAAAAAAAAAA 0 A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			VAM1 J 5 Bright;
			VAM1 KLM 5 Bright;
			VAM1 N 5;
			VAM1 O 5;
			VAM1 P -1;
			Stop;
		Ice:
			VAM1 C 5 A_GenericFreezeDeath();
			VAM1 C 1 A_FreezeDeathChunks();
			Wait;
		Raise: 
			VAM1 P 5;
			VAM1 ONMLKJIHG 5;
			Goto See;
	}
}
class VampireRoundBeam : EEProjectile
{
	default
	{
		Tag "Vampiric Blood Beam";
		DamageFunction (random(1,5));
		Radius 2;
		Height 4;
		Speed 10;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			VAM2 A 0 Bright 
			{
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
			}
			VAM2 AAAA 1 Bright 
			{
				A_CStaffMissileSlither();
				A_SpawnItemEx("VampireRoundBeamTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop;
		Death:
			VAM2 CDEFGH 3 Bright;
			Stop;
	}
}
class VampireRoundBeamTrail : EEProjectile
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		ALPHA 0.67;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
		SeeSound "monster/acosht";
		DeathSound "monster/acohit";
	}
	
	States
	{
		Spawn:
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 0 Bright;
			Goto Death;
		Death:
			VAM2 A 1 Bright A_SetTranslucent(0.60);
			VAM2 A 1 Bright A_SetTranslucent(0.50);
			VAM2 A 1 Bright A_SetTranslucent(0.40);
			VAM2 A 1 Bright A_SetTranslucent(0.30);
			VAM2 A 1 Bright A_SetTranslucent(0.20);
			VAM2 A 1 Bright A_SetTranslucent(0.10);
			VAM2 A 1 Bright A_SetTranslucent(0.00);
			Stop;
	}
}
class BatAttack : EEProjectile
{
	default
	{
		Tag "Bat Familiar";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 12;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
		SeeSound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC 3 BRIGHT
			{
				A_SpawnItemEx("BatTrail");
			}
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}
class BatTrail : EEProjectile
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.3;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
	}
	
	states
	{
		Spawn:
			VAM5 ABCDEFGHI 3 BRIGHT;
			Goto Death;
		Death:
			VAM5 I 1;
			Stop;
	}
}

class BatAttackSafe : EEProjectile
{
	default
	{
		Radius 8;
		Height 16;
		Speed 15;
		DamageFunction (0);
		PROJECTILE;
		+Randomize;
		+NoGravity;
		+Float;
		seesound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}
class VampirePainBlur : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 C 8;
			Stop;
	}
}
class VampireBlur : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 A 16;
			VAM1 A 8 A_SetTranslucent(0.4);
			Stop;
	}
}
class VampireBloodBoom : EEBaseZSC
{
	default
	{
		scale 0.75;
		health 1;
		radius 8;
		height 1;
		mass 1;
		+CORPSE;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1 ;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			Loop;
		Crash:
			TNT1 A 1 A_SpawnItemEx("VampireBloodSpot",0,0,0,1,0,0,0,128);
			Stop;
	}
}

class VampireBloodSpot : EEBaseZSC
{
	default
	{
		radius 12;
		height 2;
		mass 1;
		+NOTELEPORT;
		-NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_StartSound("vampireblood");
			TNT1 A 0 A_Jump(64,4);
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(192,4);
			TNT1 A 0 A_Jump(255,4);
			VAB3 A 750;
			Stop;
			VAB3 B 750;
			Stop;
			VAB3 C 750;
			Stop;
			VAB3 D 750;
			Stop;
	}
}

class VampireBloodTrail : EEBaseZSC
{
	default
	{
		scale 0.70;
		mass 1;
		+LOWGRAVITY;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			VAB2 A 4;
			VAB2 B 4;
			VAB2 C 4;
			VAB2 D 4;
			Stop;
	}
}

class VampCloudSpawner : EEBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("VampCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}

class VampCloud : EEBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.5;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.05);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.05);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.05);
			Goto Spawn+12;
	}
}

class BatCloudSpawner : EEBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("BatCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}

class BatCloud : EEBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.2;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.10);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.10);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.10);
			Goto Spawn+12;
	}
}

class EtherealBloodWhite : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
			TNT1 AAAA 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
	}
}

class EtherealBloodWhiteParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

class DarkPatriarch : BishopNew
{
	default
	{
		Health 1000;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 250;
		PainChance 0;
		Species "Bishop";
		Monster;
		+FLOAT;
		+NOTARGET;
		+NOGRAVITY;
		-NOTARGETSWITCH;
		+TELESTOMP;
		-NOBLOOD;
		+NOPAIN;
		-DONTOVERLAP;
		+DONTMORPH;
		+NOFEAR;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o was judged by the Dark Patriarch.";
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch";
		+USEKILLSCRIPTS;
		
		DropItem "ArtiSuperHealth", 64;
		DropItem "ArtiInvulnerability2", 64;
		Dropitem "ArtiDarkServant", 64;
		Dropitem "ArtiBoostMana", 64;
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 0 
			{
				//A_RadiusGive("PatriarchRadiusHeal", 256, RGF_MONSTERS, 1);
			}
			DPTR A 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR A 0 A_UnsetShootable();
			DPTR AAA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_SetShootable();
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItemEx("PatriarchBlur");
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			DPTR A 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			TNT1 A 0 A_Jump(256,1,2,3,4);
			DPTR FFFFFFFF 5 
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				A_SpawnProjectile("PatriarchFX",32);
			}
			Goto See;
		Pain:
			DPTR C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Death:
			DPTR G 6 A_KillChildren();
			DPTR H 6 Bright A_Scream();
			DPTR I 5 Bright A_NoBlocking();
			DPTR J 5 Bright A_Explode(frandom(50,80),128,XF_NOTMISSILE);
			DPTR K 5 Bright;
			DPTR LM 4 Bright;
			DPTR N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			DPTR O 4 A_QueueCorpse();
			DPTR P -1;
			Stop;
		Ice:
			DPTR C 5 A_GenericFreezeDeath();
			DPTR C 1 A_FreezeDeathChunks();
			Wait;
	}
}

class PatriarchPainBlur : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR C 2 A_SetTranslucent(0.6);
			DPTR C 2 A_SetTranslucent(0.45);
			DPTR C 2 A_SetTranslucent(0.3);
			DPTR C 2 A_SetTranslucent(0.15);
			Stop;
	}
}

class PatriarchBlur : EEBaseZSC
{
	default
	{
		PROJECTILE;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NOCLIP;
		+PAINLESS;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR A 8 A_SetTranslucent(0.6);
			DPTR A 8 A_SetTranslucent(0.5);
			DPTR A 8 A_SetTranslucent(0.4);
			DPTR A 0 A_SpawnItemEx("DarkPatriarchClone", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER, 250);
			Stop;
	}
}
class DarkPatriarchClone : DarkPatriarch
{
	default
	{
		Health 100;
		Mass 125;
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch Clone";
		+USEKILLSCRIPTS;
		+NOICEDEATH;
		+DONTFALL;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.6;
		
		DropItem "None";
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR AAA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItem("PatriarchBlurClone");
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			DPTR A 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			DPTR FFF 5 
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_SpawnProjectile("PatriarchFX",32);
			}
			Goto See;
		Death:
			---- A 3 A_FadeOut(0.1);
			Wait;
	}
}

class PatriarchRadiusHeal : CustomInventoryExt
{
	default
	{
		Inventory.MaxAmount 1;
		+Inventory.AUTOACTIVATE
	}

	override void Tick()
	{
		//Console.Printf("e324");
		let healactor = EECreature(owner);
		if (healactor)
		{
			if (healactor.health > 0 && healactor.health < healactor.user_MaxHP) { healactor.health += random(10,12); }
		}
		super.Tick();
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PatriarchBlurClone : EEBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			DPTR A 16;
			DPTR A 8 A_SetTranslucent(0.2);
			Stop;
	}
}

class PatriarchFX : EEProjectile
{
	default
	{
		Tag "Patriarch Star";
		Radius 10;
		Height 6;
		Speed 15;
		DamageType "Spiritual";
		Projectile;
		+SEEKERMISSILE;
		DamageFunction (frandom(8,28));
		RenderStyle "Add";
		SeeSound "PatriarchMissileFire";
		DeathSound "PatriarchMissileExplode";
	}
	
	States
	{
		Spawn:
			PFX1 CCCC 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 DDDD 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 EEEE 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 FFFF 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			PFX1 HHHHH 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 IIIII 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 JJJJ 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 KKKLLLMMM 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 GGG 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			Stop;
	}
}
class PatriarchFXClone : PatriarchFX
{
	States
	{
		Death:
			PFX1 HHHHH 1 Bright;
			PFX1 IIIII 1 Bright;
			PFX1 JJJJ 1 Bright;
			PFX1 KKKLLLMMM 1 Bright;
			PFX1 GGG 1 Bright;
			Stop;
	}
}

class PatriarchRainFX : EEProjectile
{
	default
	{
		Tag "Patriarch Rain";
		Radius 6;
		Height 12;
		Speed 12;
		DamageFunction (frandom(3,24));
		DamageType "Spiritual";
		Mass 5;
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		-NOGRAVITY;
		+SPAWNCEILING;
		+CEILINGHUGGER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			PFX3 A 0;
			PFX3 A 0 { bCEILINGHUGGER = false; }
		Animation:
			PFX3 A -1 Bright;
			Stop;
		Death:
			PFX3 B 0 Bright { bNOGRAVITY = true; }
			PFX3 B 0 Bright A_CheckFloor("NotFloor");
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 GHI 4 Bright;
			Stop;
		NotFloor:
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 BCDEF 4 Bright;
			Stop;
		Disappear:
			TNT1 A 1 Bright;
			Stop;
	}
}
class PatriarchShot : EEBaseZSC
{
	default
	{
		Tag "Patriarch Shot";
		Radius 10;
		Height 6;
		Speed 25;
		DamageFunction (frandom(15,30));
		Paintype "ManaDrain";
		DamageType "Spiritual";
		RenderStyle "Add";
		ALPHA 1;
		PROJECTILE;
		BounceType "Doom";
		BounceFactor 1;
		BounceCount 2;
		DeathSound "monster/disht1";
		Decal "WizardScorch";
	}
	
	States
	{
		Spawn:
			PFX1 AAABBB 1 Bright A_SpawnItemEx("DPFX1",  -(Pos.X/1.2), -(Pos.Y/1.2), (Pos.Z/1.2*-1), (Pos.X/1.2), (Pos.Y/1.2), (Pos.Z/1.2), 0, 138);
			Loop;
		Death:
			PFX1 HIJKLM 3 Bright;
			Stop;
	}
}

class DPFX1 : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			PFX1 A 1 Bright A_FadeOut(0.1);
			Loop; 
	}
}

class WraithNew : EECreature replaces Wraith
{
	default
	{
		Tag "Reiver";
		Health 150;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 44;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 6;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 31;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 6;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 3;
		DamageFactor "Suck", 5.00;
		Painchance "Suck", 125;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 100;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 50;
		DamageFactor "Popper", 3.5;
		Painchance "Popper", 88;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 2.75;
		Painchance "Beats", 69;
		Speed 11;
		Height 55;
		Mass 75;
		Damage 10;
		Monster;
		+NOGRAVITY;
		+DROPOFF;
		+FLOAT;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "WraithSight";
		AttackSound "WraithAttack";
		PainSound "WraithPain";
		DeathSound "WraithDeath";
		ActiveSound "WraithActive";
		HitObituary "$OB_WRAITHHIT"; // "%o had %p life stolen by a Reiver.";
		Obituary "$OB_WRAITH"; // "%o was charred by a Reiver.";
	}
	
	States
	{
		Spawn:
			WRTH A 0 NoDelay;
			WRTH A 10;
			WRTH B 5 A_WraithInit();
			goto Look;
		Look:
			WRTH A 0;
			WRTH AB 15 A_Look();
			Loop;
		See:
			WRTH ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_WraithChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			WRTH A 2;
			WRTH H 6 A_EEPain();
			Goto See;
		Pain.Fist:
			WRTH A 2;
			WRTH H 6 A_EEPain();
			WRTH H 6;
			Goto See;
		Pain.Kick:
			WRTH A 2;
			WRTH H 6 A_EEPain();
			WRTH HH 6;
			Goto See;
		Melee:
			WRTH E 0 A_DynamicMusic();
			WRTH E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WRTH F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_WraithFX3();
			}
			WRTH G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_WraithMelee(random[StealHealth](1,8)*2);
			}
			Goto See;
		Missile:
			WRTH E 0 A_DynamicMusic();
			WRTH EF 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WRTH G 6 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_SpawnProjectile("WraithFX1", 32, 0);
			}
			Goto See;
		Death:
			WRTH I 4;
			WRTH J 4 A_Scream();
			WRTH KL 4;
			WRTH M 4 A_NoBlocking();
			WRTH N 4 A_QueueCorpse();
			WRTH O 4;
			WRTH PQ 5;
			WRTH R -1;
			Stop;

		XDeath:
			WRT2 A 5;
			WRT2 B 5 A_Scream();
			WRT2 CD 5;
			WRT2 E 5 A_NoBlocking();
			WRT2 F 5 A_QueueCorpse();
			WRT2 G 5;
			WRT2 H -1;
			Stop;
		Ice:
			WRT2 I 5 A_FreezeDeath();
			WRT2 I 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WRT2 Q 5;
			WRT2 P 5;
			WRT2 ONMLKJI 4;
			goto See;
	}
}
class WraithBuriedNew : WraithNew replaces WraithBuried
{
	default
	{
		Tag "Reiver";
		Height 68;
		-SHOOTABLE;
		-SOLID;
		+DONTMORPH;
		+DONTBLAST;
		+SPECIALFLOORCLIP;
		+STAYMORPHED;
		+INVISIBLE;
		PainChance 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			Goto Look;
		Look:
			WRTH A 0;
			WRTH AB 15 A_Look();
			Loop;
		See:
			WRTH A 2 A_WraithRaiseInit();
			WRTH A 2 A_WraithRaise();
			WRTH A 2 A_FaceTarget();
			WRTH BB 2 A_WraithRaise();
			Goto See+1;
		Chase:
			WRTH ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_WraithChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
	}
}
class WraithFX1New : EEProjectile replaces WraithFX1
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 14;
		Radius 10;
		Height 6;
		Mass 5;
		Projectile;
		+FLOORCLIP;
		SeeSound "WraithMissileFire";
		DeathSound "WraithMissileExplode";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}

class DragonNew : EECreature replaces Dragon
{
	default
	{
		Tag "Death Wyvern";
		Health 2560; //10240;
		Mass 51200;
		PainChance 16; // 8 times less than before
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 40;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 2;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 16;
		DamageFactor "Cricket", 0.125;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 0.125;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 16;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 48;
		DamageFactor "Suck", 0.03125;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0; // Is COMPLETELY immune to the Pike Shot
		Painchance "Zap", 0;
		DamageFactor "Dust", 0.0625;
		Painchance "Dust", 1;
		DamageFactor "BRocket", 0.125;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 10;
		Painchance "Popper", 160;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 0; // Does NOT flinch from the Grimophone despite having a weakness to it
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 10;
		Height 65;
		Monster;
		+NOGRAVITY;
		+FLOAT;
		+NOBLOOD;
		+BOSS;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+AVOIDMELEE;
		+NODAMAGETHRUST;
		SeeSound "DragonSight";
		AttackSound "DragonAttack";
		PainSound "DragonPain";
		DeathSound "DragonDeath";
		ActiveSound "DragonActive";
		Obituary "$OB_DRAGON";
	}
	
	States
	{
		Spawn:
			DRAG A 0 NoDelay;
			DRAG D 10 A_Look();
			goto Spawn+1;
		See:
			DRAG A 0;
			DRAG CB 5;
			DRAG A 5 A_DragonInitFlight();
			DRAG B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_DragonFlap(4.0,8.0,10*random(1,8), "DragonFireball");
			}
			DRAG BCCDDCCBBAA 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_DragonFlight(4.0,8.0,10*random(1,8), "DragonFireball");
			}
			Goto See+4;
		Pain:
			DRAG F 10 A_DragonPain();
			Goto See+4;
		Pain.Fist:
			DRAG F 10 A_DragonPain();
			DRAG F 5;
			Goto See+4;
		Pain.Kick:
			DRAG F 10 A_DragonPain();
			DRAG F 15;
			Goto See+4;
		Missile:
			DRAG E 8 Fast
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(7); }
				
				A_DragonAttack("DragonFireball");
			}
			Goto See+4;

		Death:
			DRAG G 5 A_Scream();
			DRAG H 4 A_NoBlocking();
			DRAG I 4;
			DRAG J 4 A_DragonCheckCrash();
			Wait;
		Crash:
			DRAG KL 5;
			DRAG M -1;
			Stop;
	}
}
class DragonFireballNew : EEProjectile replaces DragonFireball
{
	default
	{
		Tag "Wyvern Clusterblast";
		DamageFunction (6 * random(1,8));
		Speed 24;
		Radius 12;
		Height 10;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "DragonFireballExplode";
	}
	
	States
	{
		Spawn:
			DRFX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			DRFX GHI 4 Bright;
			DRFX J 4 Bright
			{
				A_DragonFX2("DragonExplosion");
			}
			DRFX KL 3 Bright;
			Stop;
  }
}
class DragonExplosionNew : EEProjectile replaces DragonExplosion
{
	default
	{
		Tag "Wyvern Clusterblast";
		Radius 8;
		Height 8;
		DamageType "Fire";
		+NOBLOCKMAP;
		+NOTELEPORT;
		+INVISIBLE;
		RenderStyle "Add";
		DeathSound "DragonFireballExplode";
	}
	
	States
	{
		Spawn:
			CFCF Q 1 Bright;
			CFCF Q 4 Bright A_UnHideThing();
			CFCF R 3 Bright A_Scream();
			CFCF S 4 Bright;
			CFCF T 3 Bright A_Explode(80, 128, 0);
			CFCF U 4 Bright;
			CFCF V 3 Bright;
			CFCF W 4 Bright;
			CFCF X 3 Bright;
			CFCF Y 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}

class SorcBallBase : EEProjectile
{
	Default
	{
		Tag "Heresiarch Mana Cube";
		Speed 10;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererBigBallExplode";
	}

	double OldAngle, AngleOffset;

	//============================================================================
	//
	// SorcBall::DoFireSpell
	//
	//============================================================================

	virtual void DoFireSpell ()
	{
		CastSorcererSpell ();
		target.args[3] = HeresiarchNew.SORC_STOPPED;
	}

	
	virtual void SorcUpdateBallAngle ()
	{
	}
	
	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// don't blast sorcerer balls
		return false;
	}
	
	//============================================================================
	//
	// ASorcBall::CastSorcererSpell
	//
	// Make noise and change the parent sorcerer's animation
	//
	//============================================================================

	virtual void CastSorcererSpell ()
	{
		target.A_StartSound("SorcererSpellCast", CHAN_VOICE);

		// Put sorcerer into throw spell animation
		if (target.health > 0)
			target.SetStateLabel ("Missile2");
	}

	//============================================================================
	//
	// A_SorcBallOrbit
	//
	// - actor is ball
	//============================================================================

	void A_SorcBallOrbit()
	{
		// [RH] If no parent, then die instead of crashing
		if (target == null || target.health <= 0)
		{
			SetStateLabel ("Pain");
			return;
		}

		int mode = target.args[3];
		HeresiarchNew parent = HeresiarchNew(target);
		double dist = parent.radius - (radius*2);

		double prevangle = OldAngle;
		double baseangle = parent.BallAngle;
		double curangle = baseangle + AngleOffset;

		angle = curangle;

		switch (mode)
		{
		case HeresiarchNew.SORC_NORMAL:			// Balls rotating normally
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_DECELERATE:		// Balls decelerating
			A_DecelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_ACCELERATE:		// Balls accelerating
			A_AccelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_STOPPING:			// Balls stopping
			if ((parent.StopBall == GetClass()) &&
				(parent.args[1] > HeresiarchNew.SORCBALL_SPEED_ROTATIONS) &&
				absangle(curangle, parent.angle) < 42.1875)
			{
				// Can stop now
				target.args[3] = HeresiarchNew.SORC_FIRESPELL;
				target.args[4] = 0;
				// Set angle so self angle == sorcerer angle
				parent.BallAngle = parent.angle - AngleOffset;
			}
			else
			{
				SorcUpdateBallAngle ();
			}
			break;

		case HeresiarchNew.SORC_FIRESPELL:			// Casting spell
			if (parent.StopBall == GetClass())
			{
				// Put sorcerer into special throw spell anim
				if (parent.health > 0)
					parent.SetStateLabel("Missile1");

				DoFireSpell ();
			}
			break;

		case HeresiarchNew.SORC_FIRING_SPELL:
			if (parent.StopBall == GetClass())
			{
				if (special2-- <= 0)
				{
					// Done rapid firing 
					parent.args[3] = HeresiarchNew.SORC_STOPPED;
					// Back to orbit balls
					if (parent.health > 0)
						parent.SetStateLabel("Missile2");
				}
				else
				{
					// Do rapid fire spell
					A_SorcOffense2();
				}
			}
			break;

		default:
			break;
		}

		// The comparison here depends on binary angle semantics and cannot be done in floating point.
		// It also requires very exact conversion that must be done natively.
		if (BAM(curangle) < BAM(prevangle) && (parent.args[4] == HeresiarchNew.SORCBALL_TERMINAL_SPEED))
		{
			parent.args[1]++;			// Bump rotation counter
			// Completed full rotation - make woosh sound
			A_StartSound("SorcererBallWoosh", CHAN_BODY);
		}
		OldAngle = curangle;		// Set previous angle

		Vector3 pos = parent.Vec3Angle(dist, curangle, -parent.Floorclip + parent.Height);
		SetOrigin (pos, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}

	//============================================================================
	//
	// A_SorcOffense2
	//
	// Actor is ball
	//
	//============================================================================

	void A_SorcOffense2()
	{
		Actor parent = target;
		Actor dest = parent.target;

		// [RH] If no enemy, then don't try to shoot.
		if (dest == null)
		{
			return;
		}

		// Heresiarch's Purple Fireballs
		string basemissile4 = "SorcFX4New";

		let parentHeresiarch = HeresiarchNew(parent);

		int index = args[4];
		args[4] = (args[4] + 15) & 255;
		double delta = sin(index * (360 / 256.f)) * HeresiarchNew.SORCFX4_SPREAD_ANGLE;

		double ang1 = Angle + delta;
		Actor mo = parent.SpawnMissileAngle(basemissile4, ang1, 0);
		if (mo)
		{
			mo.special2 = 35*5/2;		// 5 seconds
			double dist = mo.DistanceBySpeed(dest, mo.Speed);
			mo.Vel.Z = (dest.pos.z - mo.pos.z) / dist;
		}
	}

	//============================================================================
	//
	// A_AccelBalls
	//
	// Increase ball orbit speed - actor is ball
	//
	//============================================================================

	void A_AccelBalls()
	{
		HeresiarchNew sorc = HeresiarchNew(target);

		if (sorc.args[4] < sorc.args[2])
		{
			sorc.args[4]++;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
			if (sorc.args[4] >= HeresiarchNew.SORCBALL_TERMINAL_SPEED)
			{
				// Reached terminal velocity - stop balls
				sorc.A_StopBalls();
			}
		}
	}

	//============================================================================
	//
	// A_DecelBalls
	//
	// Decrease ball orbit speed - actor is ball
	//
	//============================================================================

	void A_DecelBalls()
	{
		Actor sorc = target;

		if (sorc.args[4] > sorc.args[2])
		{
			sorc.args[4]--;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
		}
	}


	void A_SorcBallExplode()
	{
		bNoBounceSound = true;
		A_Explode(255, 255);
	}
	
	//============================================================================
	//
	// A_SorcBallPop
	//
	// Ball death - bounce away in a random direction
	//
	//============================================================================

	void A_SorcBallPop()
	{
		A_StartSound("SorcererBallPop", CHAN_BODY, 1, false, ATTN_NONE);
		bNoGravity = false;
		Gravity = 1. / 8;

		Vel.X = ((random[Heresiarch]()%10)-5);
		Vel.Y = ((random[Heresiarch]()%10)-5);
		Vel.Z = (2+(random[Heresiarch]()%3));
		args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;	// Bounce time unit
		args[3] = 5;					// Bounce time in seconds
	}
	
	//============================================================================
	//
	// A_BounceCheck
	//
	//============================================================================

	void A_BounceCheck ()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererBigBallExplode", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
	}
}
// First ball (purple) - fires projectiles ----------------------------------
class SorcBall1Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMP A 5 A_SorcBallPop;
			SBMP B 2 A_BounceCheck;
			Wait;
		Death:
			SBS4 D 5 A_SorcBallExplode;
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL1_ANGLEOFFSET;
	}

	//============================================================================
	//
	// SorcBall1::CastSorcererSpell
	//
	// Offensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{

		Super.CastSorcererSpell ();

		Actor parent = target;

		// Heresiarch's Bouncing Lavaballs
		string basemissile1 = "SorcFX1New";

		let parentHeresiarch = HeresiarchNew(parent);

		double ang1 = Angle + 70;
		double ang2 = Angle - 70;
		Class<Actor> cls = basemissile1;
		Actor mo = parent.SpawnMissileAngle (cls, ang1, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
		mo = parent.SpawnMissileAngle (cls, ang2, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
	}

	
	//============================================================================
	//
	// ASorcBall1::SorcUpdateBallAngle
	//
	// Update angle if first ball
	//============================================================================

	override void SorcUpdateBallAngle ()
	{
		(HeresiarchNew(target)).BallAngle += target.args[4];
	}

	//============================================================================
	//
	// SorcBall1::DoFireSpell
	//
	//============================================================================

	override void DoFireSpell ()
	{
		if (random[Heresiarch]() < 200)
		{
			target.A_StartSound("SorcererSpellCast", CHAN_VOICE, 1, false, ATTN_NONE);
			special2 = HeresiarchNew.SORCFX4_RAPIDFIRE_TIME;
			args[4] = 128;
			target.args[3] = HeresiarchNew.SORC_FIRING_SPELL;
		}
		else
		{
			Super.DoFireSpell ();
		}
	}
}
// Second ball (blue) - generates the shield --------------------------------
class SorcBall2Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMB A 5 A_SorcBallPop;
			SBMB B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL2_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall2::CastSorcererSpell
	//
	// Defensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Super.CastSorcererSpell ();

		Actor parent = target;
		Actor mo = Spawn("SorcFX2", Pos + (0, 0, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT), ALLOW_REPLACE);
		parent.bReflective = true;
		//parent.bInvulnerable = true;
		parent.bNoPain = true;
		parent.bNoBlood = true;
		parent.bBuddha = true;
		A_GiveInventory("HeresiarchShieldDefense",1,AAPTR_TARGET);
		parent.args[0] = HeresiarchNew.SORC_DEFENSE_TIME;
		if (mo) mo.target = parent;
	}
}
// Third ball (green) - summons Bishops -------------------------------------
class SorcBall3Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMG A 5 A_SorcBallPop;
			SBMG B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL3_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall3::CastSorcererSpell
	//
	// Reinforcements
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Actor mo;
		Super.CastSorcererSpell ();
		Actor parent = target;

		double ang1 = Angle - 45;
		double ang2 = Angle + 45;
		Class<Actor> cls = "SorcFX3";

		if (parent.health < ((parent.SpawnHealth() + parent.Stamina) / 4))
		{
			// Spawn 2 at a time
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
			mo = parent.SpawnMissileAngle(cls, ang2, 4.);
			if (mo) mo.target = parent;
		}			
		else
		{
			if (random[Heresiarch]() < 128)	ang1 = ang2;
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
		}
	}
}
// Sorcerer spell 1 (The burning, bouncing head thing) ----------------------
class SorcFX1Base : EEProjectile
{
	Default
	{
		Tag "Heresiarch Bouncing Fireface";
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		-NOGRAVITY
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceFactor 1.0;
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}

	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek;
			Loop;
		Death:
			FHFX S 2 Bright A_Explode(30, 128);
			FHFX SS 6 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX1Seek
	//
	// Yellow spell - offense
	//
	//============================================================================

	void A_SorcFX1Seek()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererHeadScream", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
		A_SeekerMissile(2, 6);
	}
	
}
// Sorcerer spell 2 (The visible part of the shield) ------------------------
class SorcFX2Base : EEProjectile
{
	Default
	{
		Speed 15;
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
	}

	states
	{
		Spawn:
			SBS2 A 3 Bright A_SorcFX2Split;
			Loop;
		Orbit:
			SBS2 A 2 Bright;
			SBS2 BCDEFGHIJKLMNOPA 2 Bright A_SorcFX2Orbit;
			Goto Orbit+1;
		Death:
			SBS2 A 10;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX2Split
	//
	// Blue spell - defense
	//
	//============================================================================
	//
	// FX2 Variables
	//		specialf1		current angle
	//		special2
	//		args[0]		0 = CW,  1 = CCW
	//		args[1]		
	//============================================================================

	// Split ball in two
	void A_SorcFX2Split()
	{
		Actor mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 0;									// CW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 1;									// CCW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		Destroy ();
	}

	//============================================================================
	//
	// A_SorcFX2Orbit
	//
	// Orbit FX2 about sorcerer
	//
	//============================================================================

	void A_SorcFX2Orbit ()
	{
		Actor parent = target;

		// [RH] If no parent, then disappear
		if (parent == null)
		{
			Destroy();
			return;
		}

		double dist = parent.radius;

		if ((parent.health <= 0) ||		// Sorcerer is dead
			(!parent.args[0]))				// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bInvulnerable = false;
			parent.bNoPain = false; 
			parent.bNoBlood = false;
			parent.bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_TARGET);
		}

		if (args[0] && (parent.args[0]-- <= 0))		// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bNoPain = false;
			parent.bNoBlood = false;
			parent.bBuddha = false;
		}

		Vector3 posi;
		// Move to new position based on angle
		if (args[0])		// Counter clock-wise
		{
			specialf1 += 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 15 * cos(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}
		else							// Clock wise
		{
			specialf1 -= 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 20 * sin(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}

		SetOrigin (posi, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}
}
// Sorcerer spell 3 (The Bishop spawner) ------------------------------------
class SorcFX3Base : EEProjectile
{
	Default
	{
		Tag "Heresiarch Spawn Sphere";
		Speed 15;
		Radius 22;
		Height 65;
		+NOBLOCKMAP
		+MISSILE
		+NOTELEPORT
		SeeSound "SorcererBishopSpawn";
	}

	States
	{
		Spawn:
			SBS3 ABC 2 Bright;
			Loop;
		Death:
			SBS3 A 4 Bright;
			BISH P 4 A_SorcererBishopEntry;
			BISH ON 4;
			BISH MLKJIH 3;
			BISH G 3 A_SpawnBishop;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcererBishopEntry
	//
	//============================================================================

	void A_SorcererBishopEntry()
	{
		Spawn("SorcFX3Explosion", Pos, ALLOW_REPLACE);
		A_StartSound(SeeSound, CHAN_VOICE);
	}

	//============================================================================
	//
	// A_SpawnBishop
	//
	// Green spell - spawn bishops
	//
	//============================================================================

	void A_SpawnBishop()
	{
		Actor mo = Spawn("Bishop", Pos, ALLOW_REPLACE);
		if (mo)
		{
			if (!mo.TestMobjLocation())
			{
				mo.ClearCounters();
				mo.Destroy ();
			}
			else if (target != null)
			{
				// [RH] Make the new bishops inherit the Heriarch's target
				mo.CopyFriendliness (target, true);
				mo.master = target;
			}
		}
		Destroy ();
	}
}
// Sorcerer spell 4 (The purple projectile) ---------------------------------
class SorcFX4Base : EEProjectile
{
	Default
	{
		Tag "Heresiarch Magic Missile";
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		DeathSound "SorcererBallExplode";
	}

	States
	{
		Spawn:
			SBS4 ABC 2 Bright A_SorcFX4Check;
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright A_Explode(20, 128);
			SBS4 FGH 2 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX4Check
	//
	// FX4 - rapid fire balls
	//
	//============================================================================

	void A_SorcFX4Check()
	{
		if (special2-- <= 0)
		{
			SetStateLabel ("Death");
		}
	}
}
// Heresiarch
class SorcBall1New : SorcBall1Base replaces SorcBall1
{
	States
	{
		Death:
			SBS4 D 0 { bNOBOUNCESOUND = true; }
			SBS4 D 5 A_Explode(255, 255);
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}
}
class SorcBall2New : SorcBall2Base replaces SorcBall2
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcBall3New : SorcBall3Base replaces SorcBall3
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcFX1New : SorcFX1Base replaces SorcFX1
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		+HEXENBOUNCE;
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek();
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}
class SorcFX4New : SorcFX4Base replaces SorcFX4
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}
class HeresiarchNew : EEUniqueBoss replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBallBase> StopBall;
	int HPLowRange;
	int HPCritRange;
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 12500; // 50000
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 9;
		DamageFactor "Bonk", 2.0;
		Painchance "Bonk", 20;
		DamageFactor "Cricket", 3.75;
		Painchance "Cricket", 38;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 5;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 20;
		DamageFactor "Breakfast", 5.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 5;
		DamageFactor "Zap", 0.025; // Is virtually immune to the Pike Shot
		Painchance "Zap", 240; // That said, he almost always flinches from it anyways V:
		DamageFactor "Dust", 5.0;
		Painchance "Dust", 5;
		DamageFactor "BRocket", 0.0625;
		Painchance "BRocket", 1;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 3;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 3;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3 NoDelay;
			SORC A 0
			{
				HPLowRange = user_HPLowRange;
				HPCritRange = user_HPCritRange;
			}
			SORC A 2 
			{
				A_ShieldCheck();
				A_SorcSpinBalls();
			}
		Idle:
			SORC A 10 
			{
				A_ShieldCheck();
				A_Look();
			}
			Wait;
		See:
			SORC A 0 
			{
				A_ShieldCheck();
			}
			SORC ABCD 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = 1; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_ShieldCheck();
				A_Chase();
			}
			Loop;
		Pain:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_EEPain();
				A_ShieldCheck();
			}
			Goto See;
		Pain.Fist:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_EEPain();
				A_ShieldCheck();
			}
			SORC G 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Pain.Kick:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_EEPain();
				A_ShieldCheck();
			}
			SORC GG 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC F 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			SORC F 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SpeedBalls();
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Wait;
		Missile1:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC E 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_ShieldCheck();
			}
			SORC E 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SpawnFizzle();
				A_ShieldCheck();
			}
			SORC E 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Goto Missile1+1;
		Missile2:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 2 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_ShieldCheck();
			}
			SORC E 2 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SorcBossAttack();
				A_ShieldCheck();
			}
			Goto See;
		Death:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC H 5 Bright
			{
				A_ShieldCheck();
			}
			SORC I 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC J 5 Bright 
			{
				A_ShieldCheck();
				A_Scream();
			}
			SORC KLMNOPQRST 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC U 5 Bright 
			{
				A_ShieldCheck();
				A_NoBlocking();
			}
			SORC VWXY 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_ShieldCheck()
	{
		if (args[0] <= 0)
		{
			bReflective = false; 
			bInvulnerable = false; 
			bNoPain = false; 
			bNoBlood = false; 
			bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_DEFAULT);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2Base";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) / 2)) && (chance < 200))
		{
			StopBall = "SorcBall3Base";	// Green
		}
		else
		{
			StopBall = "SorcBall1Base";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1Base", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}

class ClericBossNew : EECreature replaces ClericBoss
{
	default
	{
		Tag "\c[gold]Traductus, Grand Patriarch of the Church";
		Health 3200; // 12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "Ice", 1.8;
		Painchance "Ice", 90;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 50;
		DamageFactor "Cricket", 0.2;
		Painchance "Cricket", 10;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 50;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.0;
		Painchance "Zap", 50;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		Reactiontime 8;
		MaxTargetRange 2048;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerClericPain";
		DeathSound "PlayerClericCrazyDeath";
		Obituary "$OBCBOSS";
	}
	
	States
	{
		Spawn:
			CLER A 0 NoDelay;
			CLER A 2;
			CLER A 3; //A_ClassBossHealth();
			CLER A 5 A_Look();
			goto Spawn+1;
		See:
			CLER ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			CLER H 4;
			CLER H 4 A_EEPain();
			Goto See;
		Pain.Fist:
			CLER H 4;
			CLER H 4 A_EEPain();
			CLER HH 4;
			Goto See;
		Pain.Kick:
			CLER H 4;
			CLER H 4 A_EEPain();
			CLER HHHH 4;
			Goto See;
		Melee:
		Missile:
			CLER E 0 A_DynamicMusic(); 
			CLER EF 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			CLER G 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_ClericAttack("HolyMissile");
			}
			Goto See;

		Death:
			CLER I 6;
			CLER K 6 A_Scream();
			CLER LL 6;
			CLER M 6 A_NoBlocking();
			CLER NOP 6;
			CLER Q -1;
			Stop;

		XDeath:
			CLER R 5 A_Scream();
			CLER S 5;
			CLER T 5 A_NoBlocking();
			CLER UVWXYZ 5;
			CLER [ -1;
			Stop;
		Ice:
			CLER \ 5 A_FreezeDeath();
			CLER \ 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			CLER C 5 Bright A_StartSound("PlayerClericBurnDeath");
			FDTH D 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class HolyMissileNew : EEProjectile replaces HolyMissile
{
	default
	{
		Tag "WraithVerge Shot";
		DamageFunction (4 * random(1,8));
		Speed 30;
		Radius 15;
		Height 8;
		Projectile;
		DamageType "Spiritual";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+EXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			SPIR PPPP 3 Bright 
			{
				A_SpawnItemEx("HolyMissilePuff");
			}
		Death:
			SPIR P 1 Bright 
			{
				A_CHolyAttack2("HolySpiritNew",4,105,85);
			}
			Stop;
	}
}
class HolySpiritNew : EEProjectile replaces HolySpirit
{
	default
	{
		Tag "WraithVerge Spirit";
		DamageFunction (3 * random(1,8));
		Health 105;
		Speed 12;
		Radius 10;
		Height 6;
		Projectile;
		+RIPPER;
		+SEEKERMISSILE;
		+FOILINVUL;
		+SKYEXPLODE;
		+NOEXPLODEFLOOR;
		+CANBLAST;
		+EXTREMEDEATH;
		DamageType "Spiritual";
		RenderStyle "Translucent";
		Alpha 0.4;
		DeathSound "SpiritDie";
		Obituary "$OB_MPCWEAPWRAITHVERGE";
	}
	
	States
	{
		Spawn:
			SPIR AAB 2 A_CHolySeek;
			SPIR B 2 A_CHolyCheckScream;
			Loop;
		Death:
			SPIR D 4;
			SPIR E 4 A_Scream;
			SPIR FGHI 4;
			Stop;
	}
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilBase s2; 
		s2 = DSparilBase(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				if (random(1,1024) <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}
	
	override bool Slam(Actor thing)
	{
		if (thing.bShootable && thing != target)
		{
			if (multiplayer && !deathmatch && thing.player && target.player)
			{
				// don't attack other co-op players
				return true;
			}
			if (thing.bReflective && (thing.player || thing.bBoss))
			{
				tracer = target;
				target = thing;
				return true;
			}
			if (thing.bIsMonster || thing.player)
			{
				tracer = thing;
			}
			if (random[SpiritSlam]() < 96)
			{
				int dam = 12;
				if (thing.player || thing.bBoss)
				{
					dam = 3;
					// ghost burns out faster when attacking players/bosses
					health -= 6;
				}
				
				thing.DamageMobj(self, target, dam, 'Melee');
				if (random[SpiritSlam]() < 128)
				{
					Spawn("HolyPuff", Pos, ALLOW_REPLACE);
					A_StartSound("SpiritAttack", CHAN_WEAPON);
					if (thing.bIsMonster && random[SpiritSlam]() < 128)
					{
						thing.Howl();
					}
				}
			}
			if (thing.health <= 0)
			{
				tracer = null;
			}
		}
		return true;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		if (tracer == source)
		{
			tracer = target;
			target = source;
		}
		return true;
	}

	//============================================================================
	//
	// CHolyFindTarget
	//
	//============================================================================

	private void CHolyFindTarget ()
	{
		Actor target;

		if ( (target = RoughMonsterSearch (6, true)) )
		{
			tracer = target;
			bNoClip = true;
			bSkullFly = true;
			bMissile = false;
		}
	}

	//============================================================================
	//
	// CHolySeekerMissile
	//
	// Similar to P_SeekerMissile, but seeks to a random Z on the target
	//============================================================================

	private void CHolySeekerMissile (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == NULL)
		{
			return;
		}
		if (!target.bShootable || (!target.bIsMonster && !target.player))
		{
			// Target died/target isn't a player or creature
			tracer = null;
			bNoClip = false;
			bSkullFly = false;
			bMissile = true;
			CHolyFindTarget();
			return;
		}
		double ang = deltaangle(angle, AngleTo(target));
		double delta = abs(ang);
		
		if (delta > thresh)
		{
			delta /= 2;
			if (delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if (ang > 0)
		{
			// Turn clockwise
			angle += delta;
		}
		else
		{
			// Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(level.time&15) 
			|| pos.z > target.pos.z + target.height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + ((random[HolySeeker]()*target.Height) / 256.);
			double deltaZ = newZ - pos.z;
			if (abs(deltaZ) > 15)
			{
				if (deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ / DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_CHolySeek
	//
	//============================================================================

	void A_CHolySeek()
	{
		health--;
		if (health <= 0)
		{
			Vel.X /= 4;
			Vel.Y /= 4;
			Vel.Z = 0;
			SetStateLabel ("Death");
			tics -= random[HolySeeker]()&3;
			return;
		}
		if (tracer)
		{
			CHolySeekerMissile (args[0], args[0]*2.);
			if (!((level.time+7)&15))
			{
				args[0] = 5+(random[HolySeeker]()/20);
			}
		}

		int xyspeed = (random[HolySeeker]() % 5);
		int zspeed = (random[HolySeeker]() % 5);
		A_Weave(xyspeed, zspeed, 4., 2.);
	}

	//============================================================================
	//
	// A_CHolyCheckScream
	//
	//============================================================================

	void A_CHolyCheckScream()
	{
		A_CHolySeek();
		if (random[HolyScream]() < 20)
		{
			A_StartSound("SpiritActive", CHAN_VOICE);
		}
		if (!tracer)
		{
			CHolyFindTarget();
		}
	}
}

class FighterBossNew : EECreature replaces FighterBoss
{
	default
	{
		Tag "\c[gold]Zedek, Grand Marshal of the Legion";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 20;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 0.7;
		Painchance "CherryBomb", 35;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 63;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 13;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 63;
		DamageFactor "Dust", 0.4;
		Painchance "Dust", 20;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 38;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 38;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Reactiontime 8;
		Meleerange 72;
		MaxTargetRange 2048;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerFighterPain";
		DeathSound "PlayerFighterCrazyDeath";
		Obituary "$OB_FBOSS";
	}
	
	States
	{
		Spawn:
			PLAY A 0 NoDelay;
			PLAY A 2;
			PLAY A 3; //A_ClassBossHealth();
			PLAY A 5 A_Look();
			goto Spawn+1;
		See:
			PLAY ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			PLAY G 4;
			PLAY G 4 A_EEPain();
			Goto See;
		Pain.Fist:
			PLAY G 4;
			PLAY G 4 A_EEPain();
			PLAY GG 4;
			Goto See;
		Pain.Kick:
			PLAY G 4;
			PLAY G 4 A_EEPain();
			PLAY GGGG 4;
			Goto See;
		Melee:
		Missile:
			PLAY E 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PLAY F 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FighterAttack("FSwordMissile");
			}
			Goto See;

		Death:
			PLAY H 6;
			PLAY I 6 A_Scream();
			PLAY JK 6;
			PLAY L 6 A_NoBlocking();
			PLAY M 6;
			PLAY N -1;
			Stop;

		XDeath:
			PLAY O 5 A_Scream();
			PLAY P 5 A_SkullPop();
			PLAY R 5 A_NoBlocking();
			PLAY STUV 5;
			PLAY W -1;
			Stop;
		Ice:
			PLAY X 5 A_FreezeDeath();
			PLAY X 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			FDTH A 5 Bright A_StartSound("PlayerFighterBurnDeath");
			FDTH B 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class FSwordMissileNew : EEProjectile replaces FSwordMissile
{
	default
	{
		Tag "Quietus Dart";
		DamageFunction (8 * random(1,8));
		Speed 30;
		Radius 16;
		Height 8;
		Projectile;
		+EXTREMEDEATH;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "FighterSwordExplode";
		Obituary "$OB_MPFWEAPQUIETUS";
	}

	States
	{
		Spawn:
			FSFX ABC 3 Bright;
			Loop;
		Death:
			FSFX D 4 Bright;
			FSFX E 3 Bright A_FSwordFlames();
			FSFX F 4 Bright A_Explode(64, 128, 0);
			FSFX G 3 Bright;
			FSFX H 4 Bright;
			FSFX I 3 Bright;
			FSFX J 4 Bright;
			FSFX KLM 3 Bright;
			Stop;
	}
}

class MageBossNew : EECreature replaces MageBoss
{
	default
	{
		Tag "\c[gold]Menelkir, Arch Mage of the Arcanum";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 13;
		DamageFactor "Ice", 0.625;
		Painchance "Ice", 31;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 31;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 0.3125;
		Painchance "Cricket", 16;
		DamageFactor "Lead", 0.3125;
		Painchance "Lead", 16;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 75;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 38;
		DamageFactor "Dust", 1.0;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 38;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 38;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Reactiontime 8;
		MaxTargetRange 2048;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerMagePain";
		DeathSound "PlayerMageCrazyDeath";
		Obituary "$OB_MBOSS"; // "%o couldn't absorb Menelkir's Mana.";
	}
	
	States
	{
		Spawn:
			MAGE A 0 NoDelay;
			MAGE A 2;
			MAGE A 3; //A_ClassBossHealth();
			MAGE A 5 A_Look();
			goto Spawn+1;
		See:
			MAGE ABCD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1) 
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			Loop;
		Pain:
			MAGE G 4;
			MAGE G 4 A_EEPain();
			Goto See;
		Pain.Fist:
			MAGE G 4;
			MAGE G 4 A_EEPain();
			MAGE GG 4;
			Goto See;
		Pain.Kick:
			MAGE G 4;
			MAGE G 4 A_EEPain();
			MAGE GGGG 4;
			Goto See;
		Melee:
		Missile:
			MAGE E 0 A_DynamicMusic();
			MAGE E 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			MAGE F 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_MageAttack("MageStaffFX2New");
			}
			Goto See;

		Death:
			MAGE H 6;
			MAGE I 6 A_Scream();
			MAGE JK 6;
			MAGE L 6 A_NoBlocking();
			MAGE M 6;
			MAGE N -1;
			Stop;

		XDeath:
			MAGE O 5 A_Scream();
			MAGE P 5;
			MAGE R 5 A_NoBlocking();
			MAGE S 5;
			MAGE T 5;
			MAGE U 5;
			MAGE V 5;
			MAGE W 5;
			MAGE X -1;
			Stop;
		Ice:
			MAGE Y 5 A_FreezeDeath();
			MAGE Y 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			FDTH E 5 Bright A_StartSound("PlayerMageBurnDeath");
			FDTH F 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class MageStaffFX2New : EEProjectile replaces MageStaffFX2
{
	default
	{
		Tag "Bloodscourge Star";
		Speed 17;
		Height 8;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE
		+SCREENSEEKER
		+EXTREMEDEATH
		DeathSound "MageStaffExplode";
		Obituary "$OB_MPMWEAPBLOODSCOURGE";
	}
	
	States
	{
		Spawn:
			MSP2 ABCD 2 Bright A_MStaffTrack();
			Loop;
		Death:
			MSP2 E 4 Bright A_SetTranslucent(1, 1);
			MSP2 F 5 Bright A_Explode(80, 192, 0);
			MSP2 GH 5 Bright;
			MSP2 I 4 Bright;
			Stop;
	}
	
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int SpecialMissileHit (Actor victim) // MageStaffFX2Base
	{
		if (victim != target && !victim.player && !victim.bBoss)
		{
			int dam = 10;

			victim.DamageMobj (self, target, dam, 'Fire');
			return 1;	// Keep going
		}
		return -1;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// Reflect to originator
		tracer = target;	
		target = source;
		return true;
	}

	//============================================================================
	//
	// A_MStaffTrack
	//
	//============================================================================

	void A_MStaffTrack()
	{
		if (tracer == null && random[MStaffTrack]() < 50)
		{
			tracer = RoughMonsterSearch (10, true);
		}
		A_SeekerMissile(2, 10);
	}
}

class KoraxSpiritNew : EEBaseZSC replaces KoraxSpirit
{
	Default
	{
		Speed 8;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			SPIR AB 5 A_KSpiritRoam;
			Loop;
		Death:
			SPIR DEFGHI 5;
			Stop;
	}
	
	//============================================================================
	//
	// A_KSpiritSeeker
	//
	//============================================================================

	private void KSpiritSeeker (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == null)
		{
			return;
		}
		double dir = deltaangle(angle, AngleTo(target));
		double delta = abs(dir);
		if (delta > thresh)
		{
			delta /= 2;
			if(delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if(dir > 0)
		{ // Turn clockwise
			angle += delta;
		}
		else
		{ // Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(Level.maptime&15) 
			|| pos.z > target.pos.z + target.Default.Height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + random[KoraxRoam]() * target.Default.Height / 256;
			double deltaZ = newZ - pos.z;

			if (abs(deltaZ) > 15)
			{
				if(deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ + DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_KSpiritRoam
	//
	//============================================================================

	void A_KSpiritRoam()
	{
		if (health-- <= 0)
		{
			A_StartSound("SpiritDie", CHAN_VOICE);
			SetStateLabel ("Death");
		}
		else
		{
			if (tracer)
			{
				KSpiritSeeker(args[0], args[0] * 2.);
			}
			int xyspeed = random[KoraxRoam](0, 4);
			int zspeed = random[KoraxRoam](0, 4);
			A_Weave(xyspeed, zspeed, 4., 2.);

			if (random[KoraxRoam]() < 50)
			{
				A_StartSound("SpiritActive", CHAN_VOICE, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}

class KoraxBoltNew : EEBaseZSC replaces KoraxBolt
{
	const KORAX_BOLT_HEIGHT		= 48.;
	const KORAX_BOLT_LIFETIME		= 3;
	
	Default
	{
		Radius 15;
		Height 35;
		Projectile;
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltNew");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
	
	//============================================================================
	//
	// A_KBolt
	//
	//============================================================================

	void A_KBolt()
	{
		// Countdown lifetime
		if (special1-- <= 0)
		{
			Destroy ();
		}
	}

	//============================================================================
	//
	// A_KBoltRaise
	//
	//============================================================================

	void A_KBoltRaise(string actorname = "KoraxBoltNew")
	{
		// Spawn a child upward
		double z = pos.z + KORAX_BOLT_HEIGHT;

		if ((z + KORAX_BOLT_HEIGHT) < ceilingz)
		{
			Actor mo = Spawn(actorname, (pos.xy, z), ALLOW_REPLACE);
			if (mo)
			{
				mo.special1 = KORAX_BOLT_LIFETIME;
			}
		}
	}
}

class KoraxBoltHealing : KoraxBoltNew
{
	default
	{
		Translation "217:223=211:216", "32:32=216:216";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltHealing");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
}
class KoraxNew : EEUniqueBoss replaces Korax
{
	int lulwat;
	int lultimer1, lultimer1max;
	
	// Korax
	const KORAX_ARM_EXTENSION_SHORT = 40;
	const KORAX_ARM_EXTENSION_LONG = 55;
	const KORAX_ARM1_HEIGHT = 108;
	const KORAX_ARM2_HEIGHT = 82;
	const KORAX_ARM3_HEIGHT = 54;
	const KORAX_ARM4_HEIGHT = 104;
	const KORAX_ARM5_HEIGHT = 86;
	const KORAX_ARM6_HEIGHT = 53;
	const KORAX_FIRST_TELEPORT_TID = 248;
	const KORAX_TELEPORT_TID = 249;
	const KORAX_DELTAANGLE = 85;
	const KORAX_COMMAND_HEIGHT = 120;
	const KORAX_COMMAND_OFFSET = 27;
	const KORAX_SPIRIT_LIFETIME = 5*TICRATE/5;	// 5 seconds
	
	int maxhealchance;
	int timeshealed;
	int maxhealsallowed;
	int user_koraxrepeatchance;
	
	default
	{
		Tag "\c[gold]Korax";
		Health 20000; // 80000;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.05;
		Painchance "Fire", 0; // Korax NEVER flinches from Fire
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 5;
		DamageFactor "CherryBomb", 0.525;
		Painchance "CherryBomb", 0; // Korax NEVER flinches from Cherry Bombs
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 3; // Korax flinches four times less than expected from bonks from various melee weapons
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 20;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 3; // Korax flinches four times less than expected from Blundershot
		DamageFactor "Chop", 0.5;
		Painchance "Chop", 3; // Korax flinches four times less than expected from Axe Chops
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 1; // Korax flinches four times less than expected from Fractal Eggs
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 1; // Korax flinches four times less than expected from the SuperVac
		DamageFactor "Zap", 0.25;
		Painchance "Zap", 0; // Korax NEVER flinches from the Pike's shots
		DamageFactor "Dust", 0.375;
		Painchance "Dust", 2; // Korax flinches four times less than expected from the Dust Devils
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 3; // Korax flinches four times less than expected from Bottle Rockets
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 5; // Korax flinches four times less than expected from Poppers
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 3; // Korax flinches four times less than expected from Spinners
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 0; // Korax NEVER flinches from the Grimophone
		DamageFactor 0.667;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Speed 20;
		Radius 65;
		Height 115;
		Mass 2000;
		Damage 15;
		Monster;
		+BOSS;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+NOFEAR;
		SeeSound "KoraxSight";
		AttackSound "KoraxAttack";
		PainSound "KoraxPain";
		DeathSound "KoraxDeath";
		ActiveSound "KoraxActive";
		Obituary "$OB_KORAX"; // "%o was swept from the board by Korax."
	}
	
	override void PostBeginPlay()
	{
		maxhealchance = 32 + random(-4,4);
		maxhealsallowed = random(4,6);
		Super.PostBeginPlay();
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	//*******
	//*Korax*
	//*******
	//===========================================================================
	// Korax Variables
	//	tracer		last teleport destination
	//	special2	set if "below half" script not yet run
	//
	// Korax Scripts (reserved)
	//	249		Tell scripts that we are below half health
	//	250-254	Control scripts (254 is only used when less than half health)
	//	255		Death script
	//
	// Korax TIDs (reserved)
	//	245		Reserved for Korax himself
	//  248		Initial teleport destination
	//	249		Teleport destination
	//	250-254	For use in respective control scripts
	//	255		For use in death script (spawn spots)
	//===========================================================================
	void A_KoraxStep(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0)
	{
		A_StartSound("KoraxStep"); 
		A_EEChase(melee,missile,flags,type,value1,value2,value3,value4,value5); 
	}

	void A_KoraxChase()
	{
		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = (SpawnHealth() / 2); 
										else teleporthealth = (User_MaxHP / 2);
		if ((!special2) && (health <= (teleporthealth)))
		{
			ActorIterator it = level.CreateActorIterator(KORAX_FIRST_TELEPORT_TID);
			Actor spot = it.Next ();
			if (spot != null)
			{
				Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
			}
			ACS_Execute(249, 0);
			special2 = 1;	// Don't run again
			return;
		}

		if (target == null)
		{
			return;
		}
		if (random[KoraxChase]() < 30)
		{
			SetState(MissileState);
		}
		else if (random[KoraxChase]() < 30)
		{
			A_StartSound("KoraxActive", CHAN_VOICE, 1, false, ATTN_NONE);
		}

		// Teleport away
		int teleporthealth2;
		if (User_MaxHP <= 0) teleporthealth2 = SpawnHealth() >> 1; else teleporthealth2 = User_MaxHP >> 1;
		if (health < (teleporthealth2))
		{
			if (random[KoraxChase]() < 10)
			{
				ActorIterator it = level.CreateActorIterator(KORAX_TELEPORT_TID);
				Actor spot;

				if (tracer != null)
				{
					// Find the previous teleport destination
					do
					{
						spot = it.Next ();
					} while (spot != null && spot != tracer);
				}

				// Go to the next teleport destination
				spot = it.Next ();
				tracer = spot;
				if (spot)
				{
					Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
				}
			}
		}
	}

	void A_KoraxDecide()
	{
		if (random[KoraxDecide]() < 220)
		{
			SetStateLabel ("Attack");
		}
		else
		{
			SetStateLabel ("Command");
		}
	}

	void A_KoraxBonePop(int numspirits = 6)
	{
		// Spawn (usually 6?) spirits equalangularly
		double spiritangle = 360.0 / numspirits;
		for (int i = 0; i < numspirits; ++i)
		{
			Actor mo = SpawnMissileAngle ("KoraxSpiritNew", spiritangle*i, 5.);
			if (mo)
			{
				KSpiritInit (mo);
			}
		}
		ACS_Execute(255, 0);
	}

	private void KSpiritInit (Actor spirit)
	{
		spirit.health = KORAX_SPIRIT_LIFETIME;

		spirit.tracer = self;						// Swarm around korax
		spirit.WeaveIndexZ = 32 + (random[Kspiritnit]() & 7);	// Float bob index
		spirit.args[0] = 10; 						// initial turn value
		spirit.args[1] = 0; 						// initial look angle

		// Spawn a tail for spirit
		HolyTail.SpawnSpiritTail (spirit);
	}

	void A_KoraxMissile()
	{
		static const class<Actor> choices[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace"
		};
		static const class<Actor> choices2[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace",
			
			"HolyMissileNew",
			"HolyMissileNew",
			"FSwordMissileNew",
			"FSwordMissileNew",
			"MageStaffFX2New",
			"MageStaffFX2New"
		};
		static const sound sounds[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss"
		};
		static const sound sounds2[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss",
			
			"HolyMissilePuff",
			"HolyMissilePuff",
			"FighterSwordFire",
			"FighterSwordFire",
			"MageStaffFire",
			"MageStaffFire"
		};
		int type = random[KoraxMissile]() % 14;
		int type2 = random[KoraxMissile]() % 20;

		A_StartSound("KoraxAttack", CHAN_VOICE);

		// Fire all 6 missiles at once
		A_StartSound(sounds[type], CHAN_WEAPON, 1, false, ATTN_NONE);

		class<Actor> info = choices[type];

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		// Throws out the fireballs form Korax's arms
		//Console.Printf("Korax Volley 1");
		for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(0.0,0.2));
		if (health <= commandhealth)
		{
			if (random(1,256) <= 192)
			{
				//Console.Printf("Korax Volley 2 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 128)
			{
				//Console.Printf("Korax Volley 3 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 64)
			{
				//Console.Printf("Korax Volley 4 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
			if (random(1,256) <= 32)
			{
				//Console.Printf("Korax Volley 5 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(5.6,5.8));
			}
		}
		else
		{
			if (random(1,256) <= 96)
			{
				//Console.Printf("Korax Volley 2");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 48)
			{
				//Console.Printf("Korax Volley 3");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 24)
			{
				//Console.Printf("Korax Volley 4");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
		}
	}

	void KoraxFire (Class<Actor> type, int arm, double angleerror = 0.0)
	{
		static const int extension[] =
		{
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG
		};
		static const int armheight[] =
		{
			KORAX_ARM1_HEIGHT,
			KORAX_ARM2_HEIGHT,
			KORAX_ARM3_HEIGHT,
			KORAX_ARM4_HEIGHT,
			KORAX_ARM5_HEIGHT,
			KORAX_ARM6_HEIGHT
		};

		double angerr2 = frandom(-angleerror,angleerror);
		double ang = angle + (arm < 3 ? -KORAX_DELTAANGLE : KORAX_DELTAANGLE) + angerr2;
		Vector3 pos = Vec3Angle(extension[arm], ang, armheight[arm] - Floorclip);
		SpawnKoraxMissile (pos, target, type, angerr2);
	}

	private void SpawnKoraxMissile (Vector3 pos, Actor dest, Class<Actor> type, double angleerror = 0.0)
	{
		Actor th = Spawn (type, pos, ALLOW_REPLACE);
		if (th != null)
		{
			th.target = self; // Originator
			double an = th.AngleTo(dest);
			if (dest.bShadow)
			{
				// Invisible target
				an += Random2[KoraxMissile]() * (45/256.);
			}
			an += frandom(-angleerror,angleerror);
			//Console.Printf("angle: %8f, angleerror: %8f", an, angleerror);

			th.angle = an;
			th.VelFromAngle();
			double dist = dest.DistanceBySpeed(th, th.Speed);
			th.Vel.Z = (dest.pos.z - pos.Z + 30) / dist;
			th.CheckMissileSpawn(radius);
		}
	}

	void A_KoraxCommand(int firstscriptnum = 250, int lastscriptnum = 254)
	{
		int numcommands;

		A_StartSound("KoraxCommand", CHAN_VOICE);

		// Shoot stream of lightning to ceiling
		double ang = angle - 90;
		Vector3 pos = Vec3Angle(KORAX_COMMAND_OFFSET, ang, KORAX_COMMAND_HEIGHT);

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		int maxhealchance2 = maxhealchance;
		if (health >= (User_MaxHP * 2)) maxhealchance2 *= 256;
		if (health >= (User_MaxHP * 1.5)) maxhealchance2 *= 1.75;
		if (health >= (User_MaxHP * 1.0)) maxhealchance2 *= 1.5;
		if (health <= (User_MaxHP * 0.75)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.5)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.25)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.0625)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.03125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.015625)) maxhealchance2 *= 0.5;
		if (maxhealchance2 < 1) maxhealchance2 = 1;

		//Console.Printf("\cycommandhealth: %d", commandhealth);
		int maxheals = (maxhealsallowed + (skill * 0.625));
		if (timeshealed <= maxheals)
		{
			int healroll = random(1,maxhealchance2);
			//Console.Printf("\cxhealroll: %d / maxhealchance: %d", healroll, maxhealchance2);
			if (healroll <= 1)
			{
				Spawn("KoraxBoltHealing", pos, ALLOW_REPLACE);
				int healamount;
				healamount = user_MaxHP * (frandompick(frandom(0.0375,0.075), frandom(0.10,0.15), frandom(0.20,0.30)) * (1.00 + ((skill * 0.125))));
				int temphealth = health + healamount;
				if (temphealth > (user_MaxHP * 2)) temphealth = (user_MaxHP * 2);
				health = temphealth;
				A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_StartSound("healing_dq",84,CHANF_DEFAULT,1.0,ATTN_NONE);
				//A_PrintHealingMessage(self, healamount);
				int healscale = frandom(1.25,1.75);
				maxhealchance *= (frandompick(1.125,1.25,1.375,1.5,1.625,1.75,1.875) * (1.00 - (skill * 0.0625)));
				//A_UCIIHealSpark(self,"CustomHealSpark",healscale,healscale,"Heal3Glitter",random(12,20),(healscale*5),(healscale*5),(healscale*5));
				timeshealed++;
				//Console.Printf("\czKorax Healed Himself %d Times So Far!", timeshealed);
			}
			else
			{
				Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
				ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
			}
		}
		else
		{
			Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
			ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
		}
	}
	
	States
	{
		Spawn:
			KORX A 0 NoDelay;
			KORX A 5 A_Look();
			goto Spawn+1;
		See:
			KORX A 0;
			KORX AAA 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			KORX BBB 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX C 0 A_StartSound("KoraxStep");
			KORX C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			KORX CCC 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX D 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			KORX DDD 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX A 0 A_StartSound("KoraxStep");
			KORX A 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			KORX H 5 A_EEPain();
			KORX H 5;
			Goto See;
		Pain.Fist:
			KORX H 5 A_EEPain();
			KORX HH 5;
			Goto See;
		Pain.Kick:
			KORX H 5 A_EEPain();
			KORX HHH 5;
			Goto See;
		Missile:
			KORX E 0 A_DynamicMusic(); 
			KORX E 2 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
			}
			KORX E 5 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_KoraxDecide();
				A_FaceTarget();
			}
			Wait;
		Attack:
			KORX E 4 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
		AttackLoop:
			KORX F 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_KoraxMissile();
				A_FaceTarget();
			}
			KORX E 8 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KORX E 0 Bright
			{
				user_koraxrepeatchance = 32 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(2.5,true,self));
				if (user_koraxrepeatchance >= 160) { user_koraxrepeatchance = 160; }

				if (random(1,256) <= user_koraxrepeatchance) { return resolvestate("AttackLoop"); }
				return resolvestate(null);
			}
			Goto See;
		Command:
			KORX E 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			KORX W 10 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX G 15 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(62,63),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(11); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(12); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(25,2,true,self)) { A_SetTics(13); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(12,13),2,true,self)) { A_SetTics(14); }
				A_FaceTarget();
				A_KoraxCommand();
			}
			KORX W 10 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX E 5 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Death:
			KORX I 5;
			KORX J 5 A_FaceTarget();
			KORX K 5 A_Scream;
			KORX LMNOP 5;
			KORX Q 10;
			KORX R 5 A_KoraxBonePop(randompick(6,6,6,12,12,18));
			KORX S 5 A_NoBlocking();
			KORX TU 5;
			KORX V -1;
			Stop;
	}
}

class MaulotaurFriendNew : MaulotaurFriendBase replaces MinotaurFriend
{
	default
	{
		Tag "Maulotaur";
		Health 2500;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		PainChance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
		MeleeRange 96;
		Monster;
		+FLOORCLIP;
		+NORADIUSDMG;
		+NOTARGET;
		+BOSSDEATH;
		-DROPOFF;
		-BOSS;
		-DONTMORPH;
		+FRIENDLY;
		+NOTARGETSWITCH;
		+STAYMORPHED;
		+TELESTOMP;
		+SUMMONEDMONSTER;
		+AVOIDMELEE;
		RenderStyle "Translucent";
		Alpha 0.3333;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "None";
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
//		MNTR A 15;
//		MNTR A 15 A_SetTranslucent(0.66, 0);
//		MNTR A 3 A_SetTranslucent(1, 0);
//		MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			MNTR X 12
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self)));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_EEPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			Goto FadeOut;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			Goto FadeOut;
	}
}

//*******************
//* Strife specific *
//*******************
class StrifeGenBulletTracer : EEBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,5) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeGenBulletTracer2 : StrifeGenBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,15) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeGenBulletTracerTrail : EEBulletTracerTrail
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}

class StrifeHumanoidBase : EECreature
{
	default
	{
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		CrushPainSound "misc/pcrush";
	}
	
	States
	{
		Burn:
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_EEWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_EEWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_EEWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

class AcolyteNew : StrifeHumanoidBase replaces Acolyte
{
	default
	{
		Tag "Order Acolyte";
		Health 70;
		PainChance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		PainChance "Fire", 131;
		DamageFactor "Ice", 0.9375;
		PainChance "Ice", 141;
		DamageFactor "CherryBomb", 0.9375;
		PainChance "CherryBomb", 141;
		DamageFactor "BRocket", 2.0;
		PainChance "BRocket", 256;
		DamageFactor "Spinner", 1.5;
		PainChance "Spinner", 225;
		DamageFactor "Popper", 2.5;
		PainChance "Popper", 256;
		DamageFactor "Cricket", 1.0;
		PainChance "Cricket", 150;
		DamageFactor "Bonk", 1.0;
		PainChance "Bonk", 150;
		DamageFactor "Chop", 1.25;
		PainChance "Chop", 188;
		DamageFactor "Lead", 1.25;
		PainChance "Lead", 188;
		DamageFactor "Breakfast", 1.25;
		PainChance "Breakfast", 188;
		DamageFactor "Zap", 1.0;
		PainChance "Zap", 150;
		DamageFactor "Suck", 0.625;
		PainChance "Suck", 94;
		DamageFactor "Dust", 4;
		PainChance "Dust", 256;
		DamageFactor "Beats", 1.75;
		PainChance "Beats", 256;
		DamageFactor "Dashing", 1.25;
		PainChance "Dashing", 188;
		DamageFactor "DashingBG", 1.25;
		PainChance "DashingBG", 188;
		DamageFactor "DashingSD", 1.25;
		PainChance "DashingSD", 188;
		Speed 7;
		Radius 24;
		Height 64;
		Mass 400;
		Monster;
		+SEESDAGGERS;
		+NOSPLASHALERT;
		+FLOORCLIP;
		+NEVERRESPAWN;
		MinMissileChance 150;
		Tag "$TAG_ACOLYTE"; // "ACOLYTE";
		SeeSound "acolyte/sight";
		PainSound "acolyte/pain";
		AttackSound "acolyte/rifle";
		DeathSound "acolyte/death";
		ActiveSound "acolyte/active";
		Obituary "$OB_ACOLYTE"; // "%o was zealously shot down by an Acolyte.";
		DropItem "AssaultGun", 1;
	}
	
	States
	{
		Spawn:
			AGRD A 0 NoDelay;
			AGRD A 5
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_Look2();
			}
			goto Spawn+1;
			AGRD B 8 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_ClearShadow();
			}
			goto Spawn+1;
			AGRD D 8
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			goto Spawn+1;
			AGRD ABCDABCD 5 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_EEWander(0,1,3,1,1);
			}
			goto Spawn+1;
		See:
			AGRD A 6 Fast Slow 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				A_AcolyteBits();
				A_AcolyteShieldOff();
			}
			AGRD BCD 6 Fast Slow
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
				A_AcolyteShieldOff();
			}
			Loop;

		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 
			{
				A_DynamicMusic();
				A_AcolyteShieldOn();
			}
			AGRD E 8 Fast Slow 
			{
				A_AcolyteShieldOn();

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			
				user_shotsfired = 0;
				user_shotsfiredmax = 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(50,true,self));
			}

		// Shot 1
		Shoot1:
			AGRD FE 4 Fast Slow 
			{
				A_CheckIfTargetDead("See");

				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				A_AcolyteShieldOn();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SpawnProjectile("StrifeGenBulletTracer2", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_SpawnProjectile("StrifeGenBulletTracer", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			AGRD F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("EndShoot"); }
				return resolvestate(null);
			}
			loop;
		EndShoot:
			AGRD F 6 Fast Slow 
			{
				A_CheckIfTargetDead("See");

				user_shotsfired = 0;
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_AcolyteShieldOn();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SpawnProjectile("StrifeGenBulletTracer2", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_SpawnProjectile("StrifeGenBulletTracer", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			AGRD F 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_EEPain();
			}
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain.Fist:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_EEPain();
			}
			AGRD OO 4 Fast Slow
			{
				A_AcolyteShieldOn();
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain.Kick:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_EEPain();
			}
			AGRD OOOO 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			AGRD G 4;
			AGRD H 4 A_Scream();
			AGRD I 4;
			AGRD J 3;
			AGRD K 3 A_NoBlocking();
			AGRD L 3;
			AGRD M 3 A_AcolyteDie();
			AGRD N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			GIBS A 5 A_NoBlocking();
			GIBS BC 5 A_TossGib();
			GIBS D 4 A_TossGib();
			GIBS E 4 A_XScream();
			GIBS F 4 A_TossGib();
			GIBS GH 4;
			GIBS I 5;
			GIBS J 5 A_AcolyteDie();
			GIBS K 5;
			GIBS L 1400;
			Stop;
		Ice:
			TNT1 A 0 A_GiveGold(random(3,8));
			AGRD O 5 A_FreezeDeath();
			AGRD O 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			AGRD M 3;
			AGRD LKJ 3;
			AGRD IHG 4;
			goto See;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_EEWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_EEWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_EEWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN N 5 Bright A_AcolyteDie();
			BURN OPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR G 4 A_AcolyteDie();
			DISR HIJ 4;
			MEAT D 700;
			Stop;
	}
}
class AcolyteBlueNew : AcolyteNew replaces AcolyteBlue
{
	default
	{
		Tag "Order Acolyte";
		Health 60;
		Translation 6;
		PainChance 150;
	}
}
class AcolyteDGreenNew : AcolyteNew replaces AcolyteDGreen
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 3;
		PainChance 150;
	}
}
class AcolyteGoldNew : AcolyteNew replaces AcolyteGold
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 4;
		PainChance 150;
	}
}
class AcolyteGrayNew : AcolyteNew replaces AcolyteGray
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 2;
		PainChance 150;
	}
}
class AcolyteLGreenNew : AcolyteNew replaces AcolyteLGreen
{
	default
	{
		Tag "Order Acolyte";
		Health 60;
		Translation 5;
		PainChance 150;
	}
}
class AcolyteRedNew : AcolyteNew replaces AcolyteRed
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 0;
		PainChance 150;
	}
}
class AcolyteRustNew : AcolyteNew replaces AcolyteRust
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 1;
		PainChance 150;
	}
}
class AcolyteShadowNew : AcolyteShadow replaces AcolyteShadow
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 1;
		PainChance 50; // Much less pain chain vs normal Acolytes
		DamageFactor 0.334; // Most general damage is lessened against them
	}
}
class AcolyteTanNew : AcolyteNew replaces AcolyteTan
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		DropItem "ClipOfBullets";
		PainChance 150;
	}
}

class AcolyteToBeNew : AcolyteToBe replaces AcolyteToBe
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class RebelNew : StrifeHumanoidBase replaces Rebel // Base class for Rebels
{
	default
	{
		Tag "Front Rebel";
		Health 75; // 1.25x the HP
		PainChance 187; // 75% the original pain chance
		DamageFactor "PoisonBolt", 25.0;
		Speed 10; // 25% more speed than before
		Radius 20;
		Height 56;
		Monster;
		+FRIENDLY;
		-COUNTKILL;
		+NOSPLASHALERT;
		+CANTSEEK;
		species "Players";
		MinMissileChance 150;
		Tag "$TAG_REBEL"; // "Rebel"
		SeeSound "rebel/sight";
		PainSound "rebel/pain";
		DeathSound "rebel/death";
		ActiveSound "rebel/active";
		Obituary "$OB_REBEL"; // "%o was gunned down by a Rebel."
	}
	
	States
	{
		Spawn:
			HMN1 P 0 NoDelay;
			HMN1 P 5 A_Look2();
			goto Spawn+1;
			HMN1 Q 0;
			HMN1 Q 8;
			goto Spawn+1;
			HMN1 R 0;
			HMN1 R 8;
			goto Spawn+1;
			HMN1 A 0;
			HMN1 ABCDABCD 6 A_EEWander(0,1,3,1,1);
			goto Spawn+1;
		See:
			HMN1 A 0;
			HMN1 AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HMN1 E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}

		Shoot1:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HMN1 F 6 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						A_SpawnProjectile("StrifeGenBulletTracer2", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_SpawnProjectile("StrifeGenBulletTracer", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 E 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						A_SpawnProjectile("StrifeGenBulletTracer2", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_SpawnProjectile("StrifeGenBulletTracer", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			HMN1 O 0 A_Jump(96,"See");
			HMN1 O 0 A_MonsterRefire(48,"See");
			Goto See;

		Pain:
			HMN1 O 2;
			HMN1 O 2 A_EEPain();
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Fist:
			HMN1 O 2;
			HMN1 O 2 A_EEPain();
			HMN1 OO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Kick:
			HMN1 O 2;
			HMN1 O 2 A_EEPain();
			HMN1 OOOO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			HMN1 G 5;
			HMN1 H 5 A_Scream();
			HMN1 I 3 A_NoBlocking();
			HMN1 J 4;
			HMN1 KLM 3;
			HMN1 N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			RGIB A 4 A_TossGib();
			RGIB B 4 A_XScream();
			RGIB C 3 A_NoBlocking();
			RGIB DEF 3 A_TossGib();
			RGIB G 3;
			RGIB H 1400;
			Stop;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_EEWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_EEWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_EEWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
		Ice:
			TNT1 A 0 { bCANTSEEK = true; }
			HMN1 A 5 A_FreezeDeath();
			HMN1 A 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Rebel1New : RebelNew replaces Rebel1
{
	default
	{
		Tag "Front Rebel";
		DropItem "ClipOfBullets";
	}
}
class Rebel2New : RebelNew replaces Rebel2
{
	default
	{
		Tag "Front Rebel";
	}
}
class Rebel3New : RebelNew replaces Rebel3
{
	default
	{
		Tag "Front Rebel";
	}
}
class Rebel4New : RebelNew replaces Rebel4
{
	default
	{
		Tag "Front Rebel";
	}
}
class Rebel5New : RebelNew replaces Rebel5
{
	default
	{
		Tag "Front Rebel";
	}
}
class Rebel6New : RebelNew replaces Rebel6
{
	default
	{
		Tag "Front Rebel";
	}
}

class CeilingTurretNew : EECreature replaces CeilingTurret
{
	default
	{
		Tag "Ceiling Turret";
		Health 125;
		Speed 0;
		PainChance 0;
		Painchance "Fist", 0; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 0; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.85;
		DamageFactor "Ice", 0.9375;
		DamageFactor "CherryBomb", 0.925;
		DamageFactor "BRocket", 1.5;
		DamageFactor "Spinner", 2.0;
		DamageFactor "Popper", 0.625;
		DamageFactor "Cricket", 1.0;
		DamageFactor "Bonk", 1.0;
		DamageFactor "Chop", 1.0;
		DamageFactor "Lead", 1.0;
		DamageFactor "Breakfast", 1.0;
		DamageFactor "Zap", 1.0;
		DamageFactor "Suck", 0.875;
		DamageFactor "Dust", 1.5;
		DamageFactor "Beats", 0.25;
		DamageFactor "Dashing", 1.5;
		DamageFactor "DashingBG", 1.5;
		DamageFactor "DashingSD", 1.5;
		Mass 1000000000;
		Monster;
		+NOPAIN;
		-SOLID;
		-CANPASS;
		+AMBUSH;
		+SPAWNCEILING;
		+DONTTHRUST;
		+NOGRAVITY;
		+NOBLOOD;
		+NOSPLASHALERT;
		+DONTFALL;
		MinMissileChance 150;
		DeathSound "turret/death";
	}
	
	States
	{
		Spawn:
			TURT A 0 NoDelay 
			{
				A_SetInventory("OnCeiling",1);
			}
			TURT A 5 
			{
				A_SetInventory("OnCeiling",1);
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				A_TurretLook();
			}
			goto Spawn+1;
		See:
			TURT A 0
			{
				A_SetInventory("OnCeiling",1);
			}
			TURT A 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
		Pain:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic(); 
			TURT B 4 Slow 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SpawnProjectile("StrifeGenBulletTracer2", 0, 0, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_SpawnProjectile("StrifeGenBulletTracer", 0, 0, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			TURT D 3 Slow
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(2); }
				A_SentinelRefire();
			}
			TURT A 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_SentinelRefire();
			}
			goto Missile;

		Death:
			TNT1 A 0 A_GiveGold(random(4,7));
			BALL A 6 Bright A_Scream();
			BALL BCDE 6 Bright;
			TURT C -1;
			Stop;
		Ice:
			goto Death;
	}
}

class OStalkerNew : Stalker replaces Stalker
{
	mixin MonsterCollider;
	default
	{
		PainChance 40;
	}
}

class SentinelNew : Sentinel replaces Sentinel
{
	mixin MonsterCollider;
	default
	{
		Painchance 255;
	}
}

class TemplarNew : Templar replaces Templar
{
	mixin MonsterCollider;
	default
	{
		PainChance 100;
	}
}

class ReaverNew : Reaver replaces Reaver
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class CrusaderNew : Crusader replaces Crusader
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class InquisitorNew : EECreature replaces Inquisitor
{
	default
	{
		Tag "Order Inquisitor";
		Health 1000;
		Speed 12;
		Radius 40;
		Height 110;
		Mass 80000;
		Monster;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.2;
		DamageFactor "Fire", 0.25;
		DamageFactor "Ice", 0.5;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		+DROPOFF;
		+NOBLOOD;
		+BOSS;
		+FLOORCLIP;
		+DONTMORPH;
		+NORADIUSDMG;
		MaxDropOffHeight 32;
		MinMissileChance 150;
		SeeSound "inquisitor/sight";
		DeathSound "inquisitor/death";
		ActiveSound "inquisitor/active";
		Obituary "$OB_INQUISITOR"; // "%o was sentenced by an Inquisitor.";
	}
	
	States
	{
		Spawn:
			ROB3 A 0 NoDelay;
			ROB3 AB 10 A_Look();
			goto Spawn+1;
		See:
			ROB3 A 0;
			ROB3 B 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 CCDD 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			ROB3 E 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 E 3 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_InquisitorDecide();
			}
			Loop;
		Missile:
			TNT1 A 0 A_DynamicMusic();
			ROB3 A 2
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_InquisitorDecide();
			}
			ROB3 F 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB3 G 8 Bright  // A_ReaverRanged
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				A_StartSound("reaver/attack", CHAN_WEAPON);
				if (exex_bulletstracers == 0)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_CustomBulletAttack(11.0, 0, 3, random(3,24) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(11.0, 0, 3, random(1,8) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SpawnProjectile("StrifeReaverBulletTracer2",80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
						else { A_SpawnProjectile("StrifeReaverBulletTracer", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					}
				}
			}
			ROB3 G 8 // A_ReaverRanged
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				if (exex_bulletstracers == 0)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_CustomBulletAttack(11.0, 0, 3, random(3,24) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(11.0, 0, 3, random(1,8) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SpawnProjectile("StrifeReaverBulletTracer2", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
						else { A_SpawnProjectile("StrifeReaverBulletTracer", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					}
				}
			}
			Goto See;
		Grenade:
			TNT1 A 0;
			ROB3 K 12 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(11); }
				A_FaceTarget();
			}
			ROB3 J 6 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				A_InquisitorAttack("InquisitorShotNew");
			}
			ROB3 K 12
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(9); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(10); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(11); }
			}
			Goto See;
		Jump:
			ROB3 H 8 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_InquisitorJump();
			}
			ROB3 IH 4 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				A_InquisitorCheckLand();
			}
			Goto Jump+1;

		Pain:
			ROB3 G 6;
			ROB3 G 6 A_EEPain();
			Goto See;
		Pain.Fist:
			ROB3 G 6;
			ROB3 G 6 A_EEPain();
			ROB3 G 6;
			Goto See;
		Pain.Kick:
			ROB3 G 6;
			ROB3 G 6 A_EEPain();
			ROB3 GG 6;
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(100,150));
			ROB3 L 0 A_StopSound(CHAN_ITEM);
			ROB3 L 4 A_TossGib();
			ROB3 M 4 A_Scream();
			ROB3 N 4 A_TossGib();
			ROB3 O 4 Bright A_Explode(128, 128, 1, 1);
			ROB3 P 4 Bright A_TossGib();
			ROB3 Q 4 Bright A_NoBlocking();
			ROB3 RSTUV 4 A_TossGib();
			ROB3 W 4 Bright A_Explode(128, 128, 1, 1);
			ROB3 XY 4 Bright A_TossGib();
			ROB3 Z 4 A_TossGib();
			ROB3 [ 4 A_TossGib();
			ROB3 \ 3 A_TossGib();
			ROB3 ] 3 Bright A_Explode(128, 128, 1, 1);
			RBB3 A 3 Bright A_TossArm();
			RBB3 B 3 Bright A_TossGib();
			RBB3 CD 3 A_TossGib();
			RBB3 E -1;
			Stop;

		Ice:
			TNT1 A 0 A_GiveGold(random(100,150));
			ROB3 A 5 A_FreezeDeath();
			ROB3 A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			RBB3 C 3;
			RBB3 DBA 3;
			ROB3 ] 3;
			ROB3 \ 3;
			ROB3 [ 3;
			ROB3 ZYXWVUTSRQPONML 4;
			Goto See;
	}
}
class DarkInquisitor : InquisitorNew
{
	default
	{
		Tag "Order Dark Inquisitor";
		Health 2400; //If using in Strife, reduce to 1200.
		PainChance 1;
		Damagefactor "Disintegrate", 0.25;
		DamageFactor "Fire", 0.15;
		Damagefactor "Ice", 0;
		DamageFactor "Plasma", 1.625;
		DamageFactor "Thunder", 2.25;
		DamageFactor "Electric", 2.25;
		DamageFactor "Lightning", 2.25;
		DamageFactor "PoisonBolt", 0.125;
		Speed 20;
		FloatSpeed 15;
		Mass 120000;
		+BOSS;
		+BOSSDEATH;
		+FLOORCLIP;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOICEDEATH;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+DROPOFF;
		SeeSound "darkinquisitor/sight";
		ActiveSound "darkinquisitor/active";
		DeathSound "darkinquisitor/death";
		PainSound "darkinquisitor/pain";
		Obituary "%o was executed by a Dark Inquisitor.";
	}
	
	States
	{
		Spawn:
			ROB4 A 0 NoDelay
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				A_TakeInventory("FlightToken",0);
			}
			ROB4 A 10 A_Look();
			goto Spawn+1;
		See:
			ROB4 A 0;
			ROB4 B 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			ROB4 C 0 A_StartSound("darkinquisitor/step",6);
			ROB4 C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");	//Lets it fly if it falls off a high enough ledge.
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 D 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 E 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 D 0 A_StartSound("darkinquisitor/step",6);
			ROB4 D 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 C 3
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			Goto See;
		TakeOff: //Thanks for the code, Ghastly! ^^
			ROB4 A 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
			}
			ROB4 A 0 
			{
				bNOPAIN = true;
			}
			ROB4 I 4
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				ThrustThingZ(0, 42, 0, 1);
			}
			ROB4 A 0 
			{
				bFLOAT = true;
				bNOGRAVITY = true;
			}
			ROB4 H 4 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
			}
			ROB4 A 0 A_Stop();
			ROB4 A 0 A_StartSound("darkinquisitor/flight");
			ROB4 A 0 A_GiveInventory("FlightToken", 1);
			ROB4 A 0 { bNOPAIN = false; }
			Goto Fly;
		Land:
			ROB4 A 0 
			{
				bNOPAIN = true;
				bFLOAT = false;
				bNOGRAVITY = false;
			}
			ROB4 A 0 A_TakeInventory("FlightToken", 0);
			ROB4 A 3 A_CheckFloor(1);
			Goto Land+4;
			ROB4 A 0 { bNOPAIN = false; }
			TNT1 A 0 A_StopSound(CHAN_6);
			Goto See;
		Fly:
			ROB4 H 1 Bright A_StartSound("darkinquisitor/flight",6,CHANF_LOOPING,1.0,ATTN_NORM,1.0);
			ROB4 H 3 Bright A_EEChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");	//If low enough, it lands safely on the ground.
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 I 4 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase(null,"Missile",0,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 H 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 I 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase(null,"Missile",0,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 H 4 Bright
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_EEChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			Loop;
		Missile:
			TNT1 A 0;
			TNT1 A 0 A_Jump(80,2);
			ROB4 A 0 A_JumpIfCloser(850,"EMP");
			ROB4 A 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB4 F 4 Bright	
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				A_StartSound("darkinquisitor/darkmatterfire");

				A_SpawnProjectile("DarkMatterBall",64,-32,0);
			}
			ROB4 G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		EMP:
			ROB4 A 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB4 J 3 Bright 
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_StartSound("darkinquisitor/empfire");
				A_SpawnProjectile("EMPGrenade",100,24,0,1);
				A_SpawnProjectile("EMPGrenade",100,-24,0,1);
			}
			ROB4 G 6
			{
				if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain:
			ROB4 G 6;
			ROB4 G 6 A_EEPain();
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain.Fist:
			ROB4 G 6;
			ROB4 G 6 A_EEPain();
			ROB4 G 6;
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain.Kick:
			ROB4 G 6;
			ROB4 G 6 A_EEPain();
			ROB4 GG 6;
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;

		Death:
			TNT1 A 0 A_GiveGold(random(250,375));
			TNT1 A 0;
			ROB4 A 0 A_TakeInventory("FlightToken", 1);
			ROB4 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
			}
			ROB4 A 0 A_StopSound(CHAN_6);
			ROB4 L 1 A_NoBlocking();
			ROB4 LLLLLLLLLLLLLLLLLLLLLLL 5 Bright A_SpawnProjectile("InquisitorDeathExplosion",0+random(20,120),0,0+random(0,370),0);
			ROB4 L 1 A_Scream();
			NULL AAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("DarkInquisitorGibber",50,0,frandom(0,360));
			NULL A 0 A_SpawnProjectile("DarkInquisitorBigExplosion",0,0,0);
			TNT1 A 0 Radius_Quake(8,40,0,35,0);
			Stop;
		Ice:
			TNT1 A 0 A_GiveGold(random(250,375));
			ROB4 A 5 A_FreezeDeath();
			ROB4 A 1 A_FreezeDeathChunks();
			Wait;
	}
}
class DarkInquisitorGibber : EEBaseZSC
{
	default
	{
		radius 20;
		height 20;
		+NOINTERACTION;
	}
	
	states
	{
		Spawn:
			NULL A 0 A_Gravity();
			NULL A 0;
			NULL A 0 A_StartSound("darkinquisitor/gibbage");
			NULL A 1 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			Stop;
	}
}

class Shrapnel1 : EEProjectile
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.5;
		SeeSound "darkinquisitor/shrapnel";
		Speed 25;
	}
	
	States
	{
		Spawn:
			SHRP L 0;
			SHRP L 0 A_Jump(64,"Alt");
			SHRP L 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP M 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP L 5;
			SHRP L 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP L 5;
			SHRP L 5;
			Loop;
		Death:
			SHRP L 0;
			SHRP L 0;
			SHRP L 0;
			SHRP L 70;
			Stop;
	}
}

class Shrapnel2 : EEProjectile
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.4;
		SeeSound "darkinquisitor/shrapnel";
		Speed 20;
	}
	
	States
	{
		Spawn:
			SHRP M 0;
			SHRP M 0 A_Jump(64,"Alt");
			SHRP M 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP N 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP M 5;
			SHRP M 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP M 5;
			SHRP M 5;
			Loop;
		Death:
			SHRP M 0;
			SHRP M 0;
			SHRP M 0;
			SHRP M 70;
			Stop;
	}
}

class Shrapnel3 : EEProjectile
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.6;
		SeeSound "darkinquisitor/shrapnel";
		Speed 23;
	}
	
	States
	{
		Spawn:
			SHRP N 0;
			SHRP N 0 A_Jump(64,"Alt");
			SHRP N 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP L 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP N 5;
			SHRP N 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP N 5;
			SHRP N 5;
			Loop;
		Death:
			SHRP N 0;
			SHRP N 0;
			SHRP N 0;
			SHRP N 70;
			Stop;
	}
}

class InquisitorDeathExplosion : EEProjectile
{
	default
	{
		Tag "Explosion";
		radius 10;
		height 12;
		DamageFunction (0);
		speed 0;
		RenderStyle "Add";
		Alpha 0.90;
		seesound "darkinquisitor/deathexplosion";
		PROJECTILE;
		+NOCLIP;
		+DONTSPLASH;
		+SPAWNSOUNDSOURCE;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			TNT1 A 0 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			TNT1 A 0 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			R045 MNOPQ 3 bright A_Explode();
			Stop;
	}
}

class DarkInquisitorBigExplosion : EEProjectile
{
	default
	{
		Tag "Explosion";
		Radius 2;
		Height 2;
		Damage 0;
		+NOCLIP
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.75;
		Scale 2.0;
		SeeSound "darkinquisitor/bigdeathexpl";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_SpawnItemEx("ShadowVaporSpawner",0,0,0,0,0,0,0,32);
			GRNE A 3 Bright A_Explode (128,256,0);
			GRNE B 3 Bright;
			GRNE CDEFGHIJKLMN 3 Bright;
			Stop;
	}
}

class EMPTrail : EEProjectile
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		+DontSplash;
		RenderStyle "Add";
		Scale 0.50;
	}
	
	States
	{
		Spawn:
			ZAPR ABCDEF 2 Bright A_FadeOut(0.07);
			Loop;
	}
}

class DarkMatterBall : EEProjectile
{
	default
	{
		Tag "Dark Matter Ball";
		DamageFunction (35 * random(1,4));
		Radius 11;
		Height 8;
		Speed 32;
		Scale 0.5;
		Projectile;
		+RANDOMIZE;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+STRIFEDAMAGE;
		RenderStyle "Translucent";
		Alpha 0.625;
		DamageType "Disintegrate";
		DeathSound "darkinquisitor/darkmatterdie";
	}
	
	States
	{
		Spawn:
			DMGB AAABBBCCC 1 Bright
			{
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("ShadowVaporSpawner",0,0,0,0,0,0,0,32);
			TNT1 A 0 A_Explode(150,275,0);
			TNT1 A 15 Radius_Quake(5,15,0,20,0);
			Stop;
	}
}
class ShadowVaporSpawner : EEBaseZSC
{
	default
	{
		+NOINTERACTION;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			NULL A 0;
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("ShadowVapor",0,0,0,random(4,-4),random(4,-4),random(4,-4),random(0,359),32);
			PLAY A 2;
			PLAY BCDEF 4;
			Stop;
	}
}

class ShadowVapor : EEProjectile
{
	default
	{
		PROJECTILE;
		+RIPPER;
		+RANDOMIZE;
		Damagetype "Ice";
		DamageFunction (random(1,10));
		Speed 0;
		Radius 2;
		Height 2;
		RenderStyle "Translucent";
		Scale 0.65;
		Alpha 0.4;
		BounceType "Doom";
	}
	
	States
	{
		Spawn:
			VPXS MNOPQRSTUVWXYZ 1 Bright A_FadeOut(0.01);
			VPXZ ABC 1 A_FadeOut(0.01);
			Stop;
	}
}

class DarkMatterSpark : EEProjectile
{
	default
	{
		RenderStyle "Translucent";
		Scale 0.75;
		Alpha 0.5;
		PROJECTILE;
	}
	
	States
	{
		Spawn:
			VPXS ABCDEFGHIJKL 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

class FlightToken : Inventory //Used to keep the Dark Inquisitor in the air even when in pain or attacking.
{
	default
	{
		Inventory.MaxAmount 1;
	}
}

class EMPGrenade : EEProjectile
{
	int user_boost;
	int user_boost2;
	default
	{
		Tag "EMP Grenade";
		DamageFunction (10 * random(1,8));
		Speed 30;
		Radius 5;
		Height 5;
		Scale 0.35;
		RenderStyle "Add";
		Damagetype "Thunder";
		Gravity 0.25;
		PROJECTILE;
		+NODAMAGETHRUST;
		-NOGRAVITY;
		+STRIFEDAMAGE;
		DeathSound "darkinquisitor/empdie";
	}
	
	States
	{
		Spawn:
			TEFX ABCDEFGHIJKLMNOPQRST 1 Bright 
			{
				A_SpawnItemEx("EMPTrail",0,0,0,1,0,random(-1,3),random(1,360));
			}
			Loop;
		Death:
			TXP1 A 0 Bright
			{
				A_StartSound("darkinquisitor/empdie");
				Gravity = 1.00;
				bNOGRAVITY = true;
				bFORCERADIUSDMG = true;
				bNOINTERACTION = true;
				A_Explode(15,40,0);
				user_boost = 48;
				user_boost2 = 24;
			}
			TXP1 A 1 Bright
			{
				A_Explode(15,user_boost,0,0,user_boost2);
				A_SetScale(0.4);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 BCDEFGH 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15,user_boost,0,0,user_boost2);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 I 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15,user_boost,0,0,user_boost2);
				A_SetTranslucent(0.96);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 JKLMNOP 1 Bright
			{
				A_SetScale(1.12);
				A_FadeOut(alpha-0.12);
				A_Explode(15,user_boost,0,0,user_boost2);
				user_boost += 8;
				user_boost2 += 4;
			}
			Stop;
	}
}

class ProgrammerNew : Programmer replaces Programmer
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 13;
	}
}

class StrifeBishopNew : StrifeBishop replaces StrifeBishop
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class OracleNew : Oracle replaces Oracle
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 0;
	}
}

class Macil1New : Macil1 replaces Macil1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class Macil2New : Macil2 replaces Macil2
{
	mixin MonsterCollider;
	default
	{
		PainChance 200;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class LoremasterNew : Loremaster replaces Loremaster
{
	mixin MonsterCollider;
	default
	{
		Painchance 50;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 125;
	}
	
	States
	{
		Pain.Suck:
			PDED A 9;
			PDED A 9 A_Pain;
			stop;
		Pain:
			PDED A 3;
			PDED A 3 A_Pain;
			stop;
	}
}

class AlienSpectre1New : AlienSpectre1 replaces AlienSpectre1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 256;
	}
}

class AlienSpectre2New : AlienSpectre2 replaces AlienSpectre2
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre3New : AlienSpectre3 replaces AlienSpectre3
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre4New : AlienSpectre4 replaces AlienSpectre4
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre5New : AlienSpectre5 replaces AlienSpectre5
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class EntityBossNew : EntityBoss replaces EntityBoss
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class EntitySecondNew : EntitySecond replaces EntitySecond
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

//*******************************************
//* Mapset specific CompatPack Replacements *
//*******************************************
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMastermindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SSWV AABBCCDD 3
			{
				user_walksound++;
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}

// DV2's Balrog
class FlyingBalrog : EECreature
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 30;
		Mass 400;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		Monster;
		SeeSound "keen/pain";
		PainSound "keen/death";
		DeathSound "brain/spit";
		ActiveSound "keen/death";
		Obituary "%o fell to the might of a Balrog.";
	}
	
	States
	{
		Spawn:
			KEEN A 10 Bright A_Look();
			goto Spawn;
		See:
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			KEEN H 8 Bright;
			KEEN A 3 Bright A_Pain();
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			KEEN EF 6 Bright A_FaceTarget();
			KEEN G 1 Bright A_FatAttack1();
			KEEN G 1 Bright A_FatAttack2();
			KEEN G 1 Bright A_FatAttack3();
			KEEN G 1 Bright A_FaceTarget();
			KEEN GG 1 Bright A_SkelMissile();
			KEEN G 8 Bright A_SkelMissile();
			KEEN ABCD 3 Bright A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			KEEN I 5 Bright;
			KEEN J 5 Bright A_Scream();
			KEEN K 5 Bright;
			KEEN L 5 Bright A_Fall();
			KEEN MNOPQ 5 Bright;
			KEEN R 5 Bright A_BossDeath();
			KEEN R 1 Bright;
			stop;
	}
}

// DV2's Hell Cleric
class HellCleric : EECreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}

// Reaver Tracer
class StrifeReaverBulletTracer : EEBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,8) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.75;
		//decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeReaverBulletTracer2 : StrifeReaverBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,24) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeReaverBulletTracerTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.75;
		RenderStyle "Add";
	}
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}

// Mauler Tracers
class StrifeMaulerTracer : EEBulletTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,4) * 2));
		Damagetype "Disintegrate";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		//decal "BulletChip";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}

class StrifeMaulerTracer2 : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,12) * 2));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}

class StrifeMaulerTracerRetail : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,5) * 3));
	}
}

class StrifeMaulerTracerRetail2 : StrifeMaulerTracerRetail
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,15) * 3));
	}
}

class StrifeMaulerTracerTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			GTAC A 2 bright;
			Stop;
	}
}
