class BulletPuffNew : BulletPuff replaces BulletPuff
{
	default
	{
		Tag "Shot";
		+PUFFGETSOWNER
	}
}

//*****************
//* Doom specific *
//*****************
class BossBrainNew : BossBrain replaces BossBrain
{
	mixin MonsterCollider;
	default
	{
		Tag "Icon of Sin"; // Tag "John Romero"
		Health 250;
		Mass 10000000;
		PainChance 255;
		Height 80;
		Radius 20;
		//MONSTER;
		//+ISMONSTER

		+SHOOTABLE
		+SOLID
		+NOICEDEATH
		+OLDRADIUSDMG
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	States
	{
		BrainExplode:
			MISL BC 10 Bright;
			MISL D 10 A_BrainExplode();
			Stop;
		Spawn:
			BBRN A -1;
			Stop;
		Pain:
			BBRN B 36 A_BrainPain();
			Goto Spawn;
		Death:
			BBRN B 10 
			{
				if (exex_iconofsindthkillminions) A_KillChildren("Massacre");
				A_BrainScream();
			}
			BBRN B 0 
			{
				if (exex_iconofsindthkillminions) A_ExplodMinions();
			}
			BBRN BBBBBBBBB 10;
			BBRN BB 10;
			BBRN B -1 A_BrainDie();
			Stop;
	}
	
	void A_ExplodMinions()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while (mo = Actor(it.Next()))
		{
			if (mo.master == self)
			{
				double xpos = mo.pos.x;
				double ypos = mo.pos.y;
				double zpos = mo.pos.z;
				double mradius = mo.radius;
				double mheight = mo.height;
				bool success;
				actor explod;
				[success, explod] = mo.A_SpawnItemEx("IoSDeathExplosionEffect",0.0,0.0,(mo.height*0.5), 0.0,0.0,frandom(0.01,1.00), 0.0,SXF_NOCHECKPOSITION);
				if (explod && success)
				{
					explod.target = mo;
					let ndf = IoSDeathExplosionEffect(explod);
					if (ndf)
					{
						ndf.target = mo;
						ndf.mradius = mradius;
						ndf.mheight = mheight;
					}
				}
			}
		}
	}
}

class BossEyeNew : BossEye replaces BossEye
{
	mixin MonsterCollider;
	int user_bosseyetype;
	default
	{
		Height 32;
		+NOBLOCKMAP;
		+NOSECTOR;
		+BOSS;
	}
	
	States
	{
		Spawn:
			SSWV A 10 A_Look();
			Loop;
		See:
			SSWV A 181 
			{
				A_BrainAwake();
				if (user_bosseyetype > 0) 
				{
					A_SetTics(tics*frandom(0.45,0.55));
				}
				else
				{
					A_SetTics(tics*frandom(0.9,1.1));
				}
			}
		Shoot:
			SSWV A 150 
			{
				if (user_bosseyetype > 0) 
				{
					double timefactor = 1.00;
					if (master)
					{
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.95)) timefactor = frandom(0.925,0.95);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.667)) timefactor = frandom(0.625,0.667);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.4)) timefactor = frandom(0.375,0.4);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.25)) timefactor = frandom(0.3,0.334);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.125)) timefactor = frandom(0.2,0.25);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.05)) timefactor = frandom(0.1,0.125);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.005)) timefactor = frandom(0.025,0.0375);
					}
					A_SetTics(tics*(frandom(0.675,0.825) * timefactor));
				}
				else { A_SetTics(tics*frandom(0.9,1.1)); }
				
				if (master) 
				{
					if (master.health >= 1) A_BrainSpit("SpawnShotNew");
				}
				else
				{
					A_BrainSpit("SpawnShotNew");
				}
			}
			loop;
	}
	
	void A_BrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShotNew";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Assign [try to] the BossBrain as the shot's master
				if (master) spit.tracer = master;
				if (dydudebug_bossbraininfo2 && spit.tracer) Console.Printf("SpawnShot (\c[green]%p\c-) Tracer: \c[gold]%p\c-", spit, spit.tracer);

				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_StartSound(self.AttackSound, CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
			else
			{
				// compatibility fallback
				A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}

class SpawnShotNew : SpawnShot
{
	Default
	{
		Radius 6;
		Height 32;
		Speed 10;
		Damage 3;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		+RANDOMIZE
		SeeSound "brain/spit";
		DeathSound "brain/cubeboom";
		
		DropItem "DoomImpNew",							255,	50;
		DropItem "DemonNew",								255,	40;
		DropItem "SpectreNew",							255,	30;
		DropItem "PainElementalNew",				255,	10;
		DropItem "CacodemonNew",						255,	30;
		DropItem "ArchvileNew",							255,	4;
		DropItem "RevenantNew",							255,	10;
		DropItem "ArachnotronNew",					255,	20;
		DropItem "MancubusNew",							255,	30;
		DropItem "HellKnightNew",						255,	20;
		DropItem "BaronOfHellNew",					255,	10;
		DropItem "CyberdemonNew",						255,	2;
		
		DropItem "HammerDuck",							255,	25;
		DropItem "Planter",									255,	15;
		DropItem "PlanterBird",							255,	10;
		DropItem "Centaurion",							255,	40;
		DropItem "CentaurionSgt",						255,	30;
		DropItem "KnuckleHead",							255,	10;
		DropItem "Galgoyle",								255,	30;
		DropItem "Jugger",									255,	30;
		DropItem "Juggette",								255,	30;
		DropItem "Vitriola",								255,	24;
		DropItem "Killetante",							255,	10;
		DropItem "KilletanteSoloist",				255,	2;
	}
	
	States
	{
		Spawn:
			BOSF A 3 BRIGHT A_SpawnSound;
			BOSF BCD 3 BRIGHT A_SpawnFly;
			Loop;
	}
	
	void A_SpawnFly(class<Actor> spawntype = null)
	{
		sound snd; 
		if (spawntype != null) 
		{
			snd = GetDefaultByType(spawntype).SeeSound;
		}
		else
		{
			spawntype = "SpawnFire";
			snd = "brain/spawn";
		}
		SpawnFly(spawntype, snd);
	}
	
	void A_SpawnSound()
	{
		// travelling cube sound
		A_StartSound("brain/cube", CHAN_BODY);
		SpawnFly("SpawnFire", "brain/spawn");
	}

	void SpawnFly(class<Actor> spawntype, sound snd)
	{
		Actor newmobj;
		Actor fog;
		Actor eye = master; // The eye is the spawnshot's master, not the target!
		Actor targ = target; // Unlike other projectiles, the target is the intended destination.
		int r;
		
		if (tracer == null || (tracer && tracer.health <= 0))
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Tracer)\c-", self);
			Destroy();
			return;
		}
		
		if (targ == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Targ)\c-", self);
			Destroy();
			return;
		}
			
		// [GZ] Should be more viable than a countdown...
		if (special2 != 0)
		{
			if (special2 > level.maptime)
				return;		// still flying
		}
		else
		{
			if (reactiontime == 0 || --reactiontime != 0)
				return;		// still flying
		}
		
		if (spawntype)
		{
			fog = Spawn (spawntype, targ.pos, ALLOW_REPLACE);
			if (fog) A_StartSound(snd, CHAN_BODY);
		}

		class<Actor> SpawnName = null;

		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		int n = 0;

		// First see if this cube has its own actor list
		drop = GetDropItems();

		// If not, then default back to its master's list
		if (drop == null)
		{
			if (eye != null)
			{
				drop = eye.GetDropItems();
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting Eye DropTable\c-", self);
			}
			else
			{
				if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[RED]NO DROP TABLE INFO\c-", self);
			}
		}
		else
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting SpawnShot DropTable\c-", self);
		}

		if (drop != null)
		{
			for (di = drop; di != null; di = di.Next)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1; // default value is -1, we need a positive value.
					}
					n += amt; // this is how we can weight the list.
				}
			}
			di = drop;
			n = random[pr_spawnfly](0, n);
			while (n >= 0)
			{
				if (di.Name != 'none')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n -= amt;
				}
				if ((di.Next != null) && (n >= 0))
				{
					di = di.Next;
				}
				else
				{
					n = -1;
				}
			}
			SpawnName = di.Name;
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[blue]%s\c-", self, di.Name);
		}
		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post droptable)", self);
		if (SpawnName == null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname was: \c[yellow]null\c-", self);
			// Randomly select monster to spawn.
			r = random[pr_spawnfly](0, 255);

			// Probability distribution (kind of :),
			// decreasing likelihood.
				 if (r < 50)  SpawnName = "DoomImp";
			else if (r < 90)  SpawnName = "Demon";
			else if (r < 120) SpawnName = "Spectre";
			else if (r < 130) SpawnName = "PainElemental";
			else if (r < 160) SpawnName = "Cacodemon";
			else if (r < 162) SpawnName = "Archvile";
			else if (r < 172) SpawnName = "Revenant";
			else if (r < 192) SpawnName = "Arachnotron";
			else if (r < 222) SpawnName = "Fatso";
			else if (r < 246) SpawnName = "HellKnight";
			else			  SpawnName = "BaronOfHell";
		}

		if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post list)", self);
		if (spawnname != null)
		{
			if (dydudebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[sapphire]%s\c-", self, spawnname.GetClassName());
			newmobj = Spawn(spawnname, targ.pos, ALLOW_REPLACE);
			if (newmobj != null)
			{
				if (tracer) 
				{
					newmobj.master = tracer;
					newmobj.A_SetInventory("IoSMinion",1);
				}
				if (dydudebug_bossbraininfo2 && newmobj.master) 
				{
					Console.Printf("\c[green]%p\c-: Spawned Monster (\c[blue]%s\c-) Master: \c[gold]%p\c-", self, newmobj.GetClassName(), newmobj.master);
				}
				// Make the new monster hate what the boss eye hates
				if (eye != null)
				{
					newmobj.CopyFriendliness (eye, false);
				}
				// Make it act as if it was around when the player first made noise
				// (if the player has made noise).
				newmobj.LastHeard = newmobj.CurSector.SoundTarget;

				if (newmobj.SeeState != null && newmobj.LookForPlayers (true))
				{
					newmobj.SetState (newmobj.SeeState);
				}
				if (!newmobj.bDestroyed)
				{
					// telefrag anything in this spot
					newmobj.TeleportMove (newmobj.pos, true);
				}
				newmobj.bBossSpawned = true;
			}
		}

		// remove self (i.e., cube).
		Destroy ();
	}
}

class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		Tag "Explosive Barrel";
		+PUSHABLE
	}
	States
	{
		Death:
			BEXP A 5 Bright;
			BEXP B 5 Bright
			{
				A_Scream();
				A_AlertMonsters();
			}
			Goto Super::Death+2;
	}
}

class ZombiemanNew : Zombieman // replaces Zombieman
{
	mixin MonsterCollider;
	default
	{
		Tag "Zombieman";
		Painchance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
	}
}

class ShotgunGuyNew : ShotgunGuy // replaces ShotgunGuy
{
	mixin MonsterCollider;
	default
	{
		Tag "Shotgun Guy";
		Painchance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 255;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
	}
}

class ChaingunGuyNew : ChaingunGuy // replaces ChaingunGuy
{
	mixin MonsterCollider;
	default
	{
		Tag "Chaingun Guy";
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 255;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
	}
}

class WolfensteinSSNew : WolfensteinSS replaces WolfensteinSS
{
	mixin MonsterCollider;
	default
	{
		Tag "Schutzstaffel";
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 255;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;
	}
}

class DoomImpNew : DoomImp // replaces DoomImp
{
	mixin MonsterCollider;
	default
	{
		Tag "Imp";
		PainChance 200;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 80;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.6;
		Painchance "CherryBomb", 120;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
	}
}

class DemonNew : Demon replaces Demon
{
	mixin MonsterCollider;
	default
	{
		Tag "Pinky Demon";
		PainChance 180;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 135;
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 135;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 157;
		DamageFactor "Chop", 0.625;
		Painchance "Chop", 113;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 202;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 240;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 240;
	}
}

class SpectreNew : DemonNew replaces Spectre
{
	default
	{
		Tag "Pinky Spectre";
		+SHADOW
		RenderStyle "OptFuzzy";
	}
}

class NightmareSpectreNew : DemonNew
{
	int nightmarephasetimer;
	int nightmarephaserand;
	int nightmarealphatimeroffset;
	
	default
	{
		Tag "Pinky Spectre (Nightmare)";
		Health 300;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was devoured by a nightmare spectre.";
		Meleedamage 5;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SARG AABB 5 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast 
			{
				A_SetTics(randompick(1,2,2,2));
				A_Chase();
			}
			Loop;
		Melee:
			SARG EF 7 Fast 
			{
				A_SetTics(randompick(5,6,6,6));
				A_FaceTarget();
			}
			SARG G 7 Fast 
			{
				A_SetTics(randompick(5,6,6,6));
				A_SargAttack();
			}
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_Pain();
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 4;
			SARG MLKJI 4;
			Goto See;
		}
}

class LostSoulNew : LostSoul // replaces LostSoul
{
	mixin MonsterCollider;
	default
	{
		Tag "Lost Soul";
		PainChance 256;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 85;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 256;
		DamageFactor "Cricket", 2.5;
		Painchance "Cricket", 256;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 128;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 64;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 128;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 256;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		//-RETARGEAFTERNSLAM
	}
}

class CacodemonNew : Cacodemon // replaces Cacodemon
{
	mixin MonsterCollider;
	default
	{
		Tag "Cacodemon";
		MeleeRange 80;
		PainChance 128;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 32;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Spinner", 3.75;
		Painchance "Spinner", 256;
		DamageFactor "Dust", 5;
		Painchance "Dust", 256;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 32;
		BloodColor "00 00 CD";
	}

	States
	{
		Melee:
		Missile:
			HEAD B 5 A_FaceTarget;
			HEAD C 5 A_FaceTarget;
			HEAD D 5 BRIGHT A_CustomComboAttack("CacodemonBall", 32, 10 * random(1, 6), "caco/melee");
			Goto See;
	}
}

class PainElementalNew : PainElemental // replaces PainElemental
{
	mixin MonsterCollider;
	default
	{
		Tag "Pain Elemental";
		MeleeRange 80;
		PainChance 16;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 28;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 80;
		DamageFactor "Suck", 7.5;
		Painchance "Suck", 120;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Dust", 5;
		Painchance "Dust", 80;
		//-RETARGEAFTERNSLAM
	}
	
	void A_PainShootSkull(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		// Don't spawn if we get massacred.
		if (DamageType == 'Massacre') return;

		if (spawntype == null) spawntype = "LostSoul";

		// [RH] check to make sure it's not too close to the ceiling
		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		// [RH] make this optional
		if (limit < 0 && (Level.compatflags & COMPATF_LIMITPAIN))
			limit = 21;

		if (limit > 0)
		{
			// count total number of skulls currently on the level
			// if there are already 21 skulls on the level, don't spit another one
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		// okay, there's room for another one
		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);

		// Now check if the spawn is legal. Unlike Boom's hopeless attempt at fixing it, let's do it the same way
		// P_XYMovement solves the line skipping: Spawn the Lost Soul near the PE's center and then use multiple
		// smaller steps to get it to its intended position. This will also result in proper clipping, but
		// it will avoid all the problems of the Boom method, which checked too many lines that weren't even touched
		// and despite some adjustments never worked with portals.

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;
			
			// make the PE nonsolid for the check and the LS non-teleporting so that P_TryMove doesn't do unwanted things.
			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					// kill it immediately
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, 'None');
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					// If the new position does not match the desired position, the player
					// must have gone through a portal.
					// For that we need to adjust the movement vector for the following steps.
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			// [RH] Lost souls hate the same things as their pain elementals
			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));
			
			// Inherit the PE's Master if they have a IoS master
			if (master && BossBrainNew(master)) other.master = master;
			if (dydudebug_bossbraininfo2 && other.master)
			{
				Console.Printf("%s Master: \c[gold]%p\c-", other.GetClassName(), other.master);
			}

			if (!(flags & PAF_NOSKULLATTACK))
			{
				other.A_SkullAttack();
			}
		}
	}

	void A_PainAttack(class<Actor> spawntype = "LostSoul", double addangle = 0, int flags = 0, int limit = -1)
	{
		if (target)
		{
			A_FaceTarget();
			A_PainShootSkull(spawntype, angle + addangle, flags, limit);
		}
	}
	
	void A_DualPainAttack(class<Actor> spawntype = "LostSoul")
	{
		if (target)
		{
			A_FaceTarget();
			A_PainShootSkull(spawntype, angle + 45);
			A_PainShootSkull(spawntype, angle - 45);
		}
	}
	
	void A_PainDie(class<Actor> spawntype = "LostSoul")
	{
		if (target && IsFriend(target))
		{ // And I thought you were my friend!
			bFriendly = false;
		}
		A_NoBlocking();
		A_PainShootSkull(spawntype, angle + 90);
		A_PainShootSkull(spawntype, angle + 180);
		A_PainShootSkull(spawntype, angle + 270);
	}
	
	States
	{
		Melee:
		Missile:
			PAIN D 5 A_FaceTarget;
			PAIN E 5 A_FaceTarget;
			PAIN F 5 BRIGHT A_FaceTarget;
			PAIN F 0 BRIGHT 
			{
				if (CheckMeleeRange()) 
				{ 
					A_CustomMeleeAttack(10*random(1,6),"caco/melee","none","Melee",true);
				}
				else
				{
					A_PainAttack();
				}
			}
			Goto See;
	}
}

class RevenantNew : Revenant // replaces Revenant
{
	mixin MonsterCollider;
	default
	{
		Tag "Revenant";
		PainChance 100;
		DamageFactor "Fire", 1.25;
		Painchance "Fire", 125;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 175;
		DamageFactor "CherryBomb", 1.125;
		Painchance "CherryBomb", 112;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 75;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 75;
		DamageFactor "Breakfast", 0.5;
		Painchance "Breakfast", 50;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 150;
	}
}

class ArachnotronNew : Arachnotron replaces Arachnotron
{
	mixin MonsterCollider;
	default
	{
		Tag "Arachnotron";
		PainChance 128;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 112;
		DamageFactor "Bonk", 0.625;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 64;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 192;
	}
}

class MancubusNew : Fatso // replaces Fatso
{
	mixin MonsterCollider;
	default
	{
		Tag "Mancubus";
		PainChance 80;
		DamageFactor "Fire", 0.667;
		Painchance "Fire", 53;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 200;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 40;
		DamageFactor "Bonk", 3.75;
		Painchance "Bonk", 256;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 40;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 100;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 120;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "CherryBomb", 2;
		Painchance "CherryBomb", 160;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 140;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 100;
	}
}
class HellKnightNew : HellKnight // replaces HellKnight
{
	mixin MonsterCollider;
	default
	{
		Tag "Hell Knight";
		PainChance 100;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 50;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 200;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 256;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 250;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 250;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 75;
		BloodColor "00 64 00";
	}
}

class BaronOfHellNew : BaronOfHell // replaces BaronOfHell
{
	mixin MonsterCollider;
	default
	{
		Tag "Baron of Hell";
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 187;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 37;
		BloodColor "00 64 00";
	}
}

class ArchvileNew : Archvile // replaces Archvile
{
	mixin MonsterCollider;
	default
	{
		Tag "Archvile";
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 5.0;
		Painchance "Ice", 100;
		DamageFactor "Suck", 3.75;
		Painchance "Suck", 38;
		DamageFactor "Bonk", 2.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 5;
		Painchance "Cricket", 5;
		DamageFactor "Chop", 5.0;
		Painchance "Chop", 50;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 15;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 15;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 2;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 15;
		DamageFactor "Popper", 1.5;
		Painchance "Popper", 15;
	}
}

class CyberdemonNew : Cyberdemon // replaces Cyberdemon
{
	mixin MonsterCollider;
	default
	{
		Tag "Cyberdemon";
		PainChance 20;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 75;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 13;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 25;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 5;
	}
}

class SpiderMasterMindNew : SpiderMasterMind // replaces SpiderMasterMind
{
	mixin MonsterCollider;
	default
	{
		Tag "Spider Mastermind";
		PainChance 40;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 4;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 130;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 256;
		DamageFactor "CherryBomb", 0.65;
		Painchance "CherryBomb", 26;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 50;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 10;
	}
}

//********************
//* Heretic specific *
//********************
class PodNew : Pod replaces Pod
{
	Default
	{
		Tag "Explosive Pod";
		+PUSHABLE
	}

	States
	{
		Death:
			PPOD C 5 BRIGHT A_RemovePod;
			PPOD D 5 BRIGHT A_Scream;
			Goto Super::Death+2;
	}
}

class ChickenNew : Chicken replaces Chicken
{
	mixin MonsterCollider;
	default
	{
		Tag "Chicken";
	}
}

class HereticImpNew : HereticImp replaces HereticImp
{
	mixin MonsterCollider;
	default
	{
		Tag "Gargoyle";
		Painchance 200;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 150;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 175;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 225;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 250;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		DamageFactor "Breakfast", 0.625;
		Painchance "Breakfast", 125;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.875;
		Painchance "Dust", 175;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 3;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1;
		Painchance "Spinner", 200;
		DamageFactor "Beats", 1;
		Painchance "Beats", 200;
	}
}

class HereticImpLeaderNew : HereticImpLeader replaces HereticImpLeader
{
	mixin MonsterCollider;
	default
	{
		Tag "Gargoyle Leader";
		Painchance 200;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 150;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 225;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 250;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.375;
		Painchance "Chop", 256;
		DamageFactor "Breakfast", 0.75;
		Painchance "Breakfast", 150;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 150;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 2;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 1;
		Painchance "Beats", 200;
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
}

class MummyNew : Mummy replaces Mummy
{
	mixin MonsterCollider;
	default
	{
		Tag "Golem";
		Painchance 128;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 112;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
	}
}

class MummyGhostNew : MummyGhost replaces MummyGhost
{
	mixin MonsterCollider;
	default
	{
		Tag "Golem (Ghost)";
		Painchance 128;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 128;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 96;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 112;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 160;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 144;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 160;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 192;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 144;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 144;
		DamageFactor "Beats", 1;
		Painchance "Beats", 128;
	}
}

class MummyLeaderNew : MummyLeader replaces MummyLeader
{
	mixin MonsterCollider;
	default
	{
		Tag "NitroGolem";
		Painchance 64;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 0.875;
		Painchance "Suck", 56;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
	}
}

class MummyLeaderGhostNew : MummyLeaderGhost replaces MummyLeaderGhost
{
	mixin MonsterCollider;
	default
	{
		Tag "NitroGolem (Ghost)";
		Painchance 64;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		DamageFactor "CherryBomb", 1.0;
		Painchance "CherryBomb", 64;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 56;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 80;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 96;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 96;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 72;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1;
		Painchance "Beats", 64;
	}
}

class KnightNew : Knight replaces Knight
{
	mixin MonsterCollider;
	default
	{
		Tag "Undead Warrior";
		Painchance 100;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 1.00;
		Painchance "Suck", 100;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
	}
}

class KnightGhostNew : KnightGhost replaces KnightGhost
{
	mixin MonsterCollider;
	default
	{
		Tag "Undead Warrior (Ghost)";
		Painchance 100;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 125;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 100;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 100;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;
		DamageFactor "Chop", 0.875;
		Painchance "Chop", 88;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 250;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 113;
		DamageFactor "Popper", 0.5;
		Painchance "Popper", 50;
		DamageFactor "Spinner", 1.125;
		Painchance "Spinner", 113;
		DamageFactor "Beats", 0.5;
		Painchance "Beats", 50;
	}
}

class WizardNew : Wizard replaces Wizard
{
	mixin MonsterCollider;
	default
	{
		Tag "Disciple of D'Sparil";
		Painchance 64;
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 112;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 48;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 88;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 64;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 112;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 128;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 80;
		DamageFactor "Zap", 0.625;
		Painchance "Zap", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 2.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 48;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 128;
	}
}

class IronLichNew : IronLich replaces IronLich
{
	mixin MonsterCollider;
	default
	{
		Tag "Iron Lich";
		Painchance 32;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 8;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 64;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 20;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 48;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 48;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 24;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 24;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 40;
		DamageFactor "Suck", 0.05;
		Painchance "Suck", 1;
		DamageFactor "Zap", 0.3125;
		Painchance "Zap", 10;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 128;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 32;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 32;
	}
}

class BeastNew : Beast replaces Beast
{
	mixin MonsterCollider;
	default
	{
		Tag "Weredragon";
		Painchance 100;
		DamageFactor "Fire", 0.125;
		Painchance "Fire", 13;
		DamageFactor "Ice", 4.0;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.5625;
		Painchance "CherryBomb", 56;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 125;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 75;
		DamageFactor "Lead", 2.5;
		Painchance "Lead", 250;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 150;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 75;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 150;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 100;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 256;
	}
}

class ClinkNew : Clink replaces Clink
{
	mixin MonsterCollider;
	default
	{
		Tag "Sabreclaw";
		Painchance 32;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 28;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 43;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 30;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 32;
		DamageFactor "Cricket", 2.0;
		Painchance "Cricket", 64;
		DamageFactor "Lead", 0.25;
		Painchance "Lead", 8;
		DamageFactor "Chop", 4.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 16;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 48;
		DamageFactor "Dust", 3.0;
		Painchance "Dust", 72;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 8;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 8;
	}
}

class MinotaurNew : Minotaur replaces Minotaur
{
	mixin MonsterCollider;
	default
	{
		Tag "Maulotaur";
		Painchance 25;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
	}
}

class SnakeNew : Snake replaces Snake
{
	mixin MonsterCollider;
	default
	{
		Tag "Ophidian";
		Painchance 48;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 42;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 60;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 45;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 24;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 36;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 36;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 72;
		DamageFactor "Zap", 0.875;
		Painchance "Zap", 42;
		DamageFactor "Dust", 0.75;
		Painchance "Dust", 36;
		DamageFactor "BRocket", 1.25;
		Painchance "BRocket", 60;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 60;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 72;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 60;
	}
}

class Sorcerer1New : Sorcerer1 replaces Sorcerer1
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Painchance 56;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 70;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 56;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 70;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 84;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 38;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 140;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 112;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 168;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 84;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 168;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 70;
	}
}

class Sorcerer2New : Sorcerer2 replaces Sorcerer2
{
	mixin MonsterCollider;
	
	int lulwat;
	int lultimer1, lultimer1max;

	default
	{
		Tag "\c[gold]D'Sparil";
		Painchance 32;
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 80;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 24;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 32;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 48;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 8;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 80;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 64;
		DamageFactor "Popper", 4.0;
		Painchance "Popper", 128;
		DamageFactor "Spinner", 2.0;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 256;
		DamageFactor "Zap", 0.05;
		Painchance "Zap", 2;
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
}

//******************
//* Hexen specific *
//******************
class PigNew : Pig replaces Pig
{
	mixin MonsterCollider;
	default
	{
		Tag "Pig";
	}
}

class FireDemonNew : FireDemon replaces FireDemon
{
	mixin MonsterCollider;
	default
	{
		Tag "Afrit";
		PainChance 1;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 0;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 0;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 1;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.75;
		Painchance "Chop", 2;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 0;
		DamageFactor "Suck", 2.50;
		Painchance "Suck", 3;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 0;
		DamageFactor "BRocket", 2;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 1;
		Painchance "Popper", 1;
		DamageFactor "Spinner", 2;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 24;
	}
}

class EttinNew : Ettin replaces Ettin
{
	mixin MonsterCollider;
	default
	{
		Tag "Ettin";
		PainChance 60;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 40;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
	}
}

class EttinMashNew : EttinMash replaces EttinMash
{
	mixin MonsterCollider;
	default
	{
		Tag "Ettin (Ghost)";
		PainChance 60;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		DamageFactor "CherryBomb", 1.25;
		Painchance "CherryBomb", 75;
		DamageFactor "Bonk", 0.667;
		Painchance "Bonk", 40;
		DamageFactor "Cricket", 0.667;
		Painchance "Cricket", 40;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 45;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 150;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 90;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 160;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 75;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 90;
		DamageFactor "Popper", 1.25;
		Painchance "Popper", 90;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 45;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 90;
	}
}

class CentaurNew : Centaur replaces Centaur
{
	mixin MonsterCollider;
	default
	{
		Tag "Centaur";
		PainChance 135;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 101;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
	}
}

class CentaurMashNew : CentaurMash replaces CentaurMash
{
	mixin MonsterCollider;
	default
	{
		Tag "Centaur (Ghost)";
		PainChance 135;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 101;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 118;
		DamageFactor "Cricket", 0.875;
		Painchance "Cricket", 118;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 169;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 169;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 203;
		DamageFactor "Suck", 4.00;
		Painchance "Suck", 256;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 203;
		DamageFactor "Dust", 1.25;
		Painchance "Dust", 169;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 101;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 68;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 203;
	}
}

class CentaurLeaderNew : CentaurLeader replaces CentaurLeader
{
	mixin MonsterCollider;
	default
	{
		Tag "Slaughtaur";
		PainChance 96;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 24;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 60;
		DamageFactor "Bonk", 0.75;
		Painchance "Bonk", 72;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 72;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 108;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 108;
		DamageFactor "Breakfast", 1.25;
		Painchance "Breakfast", 120;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 48;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 120;
		DamageFactor "Dust", 1.125;
		Painchance "Dust", 108;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 2.25;
		Painchance "Popper", 216;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 24;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 120;
		Translation "81:96=85:92", "97:121=101:113", "0:32=231:235", "33:50=231:235";  // Dark Skin, Obsidian Armor
	}
}

class Demon1New : Demon1 replaces Demon1
{
	mixin MonsterCollider;
	default
	{
		Tag "Green Chaos Serpent";
		Painchance 50;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon1MashNew : Demon1Mash replaces Demon1Mash
{
	mixin MonsterCollider;
	default
	{
		Tag "Green Chaos Serpent (Ghost)";
		Painchance 50;
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		DamageFactor "CherryBomb", 0.9375;
		Painchance "CherryBomb", 47;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 63;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon2New : Demon2 replaces Demon2
{
	mixin MonsterCollider;
	default
	{
		Tag "Brown Chaos Serpent";
		Painchance 50;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 56;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 0.667;
		Painchance "Suck", 34;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class Demon2MashNew : Demon2Mash replaces Demon2Mash
{
	mixin MonsterCollider;
	default
	{
		Tag "Brown Chaos Serpent (Ghost)";
		Painchance 50;
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}

class IceGuyNew : IceGuy replaces IceGuy
{
	mixin MonsterCollider;
	default
	{
		Tag "Wendigo";
		PainChance 144;
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 0.01;
		Painchance "Ice", 1;
		DamageFactor "CherryBomb", 2.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 72;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 180;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 180;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 36;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.01;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0.8;
		Painchance "Zap", 115;
		DamageFactor "Dust", 1.75;
		Painchance "Dust", 252;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 1.5;
		Painchance "Popper", 212;
		DamageFactor "Spinner", 4.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
	}
}

class SerpentNew : Serpent replaces Serpent
{
	mixin MonsterCollider;
	default
	{
		Tag "Stalker";
		PainChance 96;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 192;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 72;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 144;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 120;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 144;
		DamageFactor "Lead", 0.875;
		Painchance "Lead", 84;
		DamageFactor "Chop", 1.125;
		Painchance "Chop", 108;
		DamageFactor "Breakfast", 1.125;
		Painchance "Breakfast", 108;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
	}
}

class SerpentLeaderNew : SerpentLeader replaces SerpentLeader
{
	mixin MonsterCollider;
	default
	{
		Tag "Alpha Stalker";
		Translation "51:66=51:58", "186:202=186:194", "233:239=235:239", "33:50=33:41", "0:32=0:16";
		Meleerange 72;
		PainChance 96;
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 168;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 84;
		DamageFactor "CherryBomb", 1.375;
		Painchance "CherryBomb", 132;
		DamageFactor "Bonk", 0.875;
		Painchance "Bonk", 84;
		DamageFactor "Cricket", 1.125;
		Painchance "Cricket", 108;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 120;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 72;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 144;
		DamageFactor "Suck", 1.50;
		Painchance "Suck", 144;
		DamageFactor "Dust", 0.125;
		Painchance "Dust", 12;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 0.375;
		Painchance "Popper", 36;
		DamageFactor "Spinner", 5.0;
		Painchance "Spinner", 256;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 36;
	}
}

class BishopNew : Bishop replaces Bishop
{
	mixin MonsterCollider;
	default
	{
		Tag "Dark Bishop";
		PainChance 110;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 55;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 220;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 83;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 165;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 165;
		DamageFactor "Lead", 0.75;
		Painchance "Lead", 83;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 165;
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 28;
		DamageFactor "Suck", 2.00;
		Painchance "Suck", 220;
		DamageFactor "Zap", 0.10;
		Painchance "Zap", 1; // 10 times EVEN LESS likely to flinch from the Pike's shots than expected
		DamageFactor "Dust", 10;
		Painchance "Dust", 256;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 165;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1.0;
		Painchance "Spinner", 110;
		DamageFactor "Beats", 2.0;
		Painchance "Beats", 220;
	}
}

class WraithNew : Wraith replaces Wraith
{
	mixin MonsterCollider;
	default
	{
		Tag "Reiver";
		PainChance 25;
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 44;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 6;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 31;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 6;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 3;
		DamageFactor "Suck", 5.00;
		Painchance "Suck", 125;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 100;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 50;
		DamageFactor "Popper", 3.5;
		Painchance "Popper", 88;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 2.75;
		Painchance "Beats", 69;
	}
}

class WraithBuriedNew : WraithBuried replaces WraithBuried
{
	mixin MonsterCollider;
	default
	{
		Tag "Reiver";
		PainChance 25;
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 44;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 6;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 31;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 6;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 3;
		DamageFactor "Suck", 5.00;
		Painchance "Suck", 125;
		DamageFactor "Dust", 4.0;
		Painchance "Dust", 100;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 50;
		DamageFactor "Popper", 3.5;
		Painchance "Popper", 88;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 2.75;
		Painchance "Beats", 69;
	}
}

class DragonNew : Dragon replaces Dragon
{
	mixin MonsterCollider;
	default
	{
		Tag "Death Wyvern";
		PainChance 16; // 8 times less than before
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 40;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 2;
		DamageFactor "CherryBomb", 1.75;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 16;
		DamageFactor "Cricket", 0.125;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 0.125;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 16;
		DamageFactor "Breakfast", 3.0;
		Painchance "Breakfast", 48;
		DamageFactor "Suck", 0.03125;
		Painchance "Suck", 0;
		DamageFactor "Zap", 0; // Is COMPLETELY immune to the Pike Shot
		Painchance "Zap", 0;
		DamageFactor "Dust", 0.0625;
		Painchance "Dust", 1;
		DamageFactor "BRocket", 0.125;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 10;
		Painchance "Popper", 160;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.25;
		Painchance "Beats", 0; // Does NOT flinch from the Grimophone despite having a weakness to it
	}
}

class HeresiarchNew : Heresiarch replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	mixin MonsterCollider;
	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBall> StopBall; // SorcBallBase
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 5000;
		Painchance 10;
		//DamageFactor 0.833;
		//RadiusDamageFactor 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 9;
		DamageFactor "Bonk", 2.0;
		Painchance "Bonk", 20;
		DamageFactor "Cricket", 3.75;
		Painchance "Cricket", 38;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 5;
		DamageFactor "Chop", 2.0;
		Painchance "Chop", 20;
		DamageFactor "Breakfast", 5.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 5;
		DamageFactor "Zap", 0.025; // Is virtually immune to the Pike Shot
		Painchance "Zap", 240; // That said, he almost always flinches from it anyways V:
		DamageFactor "Dust", 5.0;
		Painchance "Dust", 5;
		DamageFactor "BRocket", 0.0625;
		Painchance "BRocket", 1;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 3;
		DamageFactor "Spinner", 0.125;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 3;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3;
			SORC A 2 A_SorcSpinBalls;
		Idle:
			SORC A 10 A_Look;
			Wait;
		See:
			SORC ABCD 5 A_Chase;
			Loop;
		Pain:
			SORC G 8;
			SORC G 8 A_Pain;
			Goto See;
		Missile:
			SORC F 6 Bright A_FaceTarget;
			SORC F 6 Bright A_SpeedBalls;
			SORC F 6 Bright A_FaceTarget;
			Wait;
		Attack1:
			SORC E 6 Bright;
			SORC E 6 Bright A_SpawnFizzle;
			SORC E 5 Bright A_FaceTarget;
			Goto Attack1+1;
		Attack2:
			SORC E 2 Bright;
			SORC E 2 Bright A_SorcBossAttack;
			Goto See;
		Death:
			SORC H 5 Bright;
			SORC I 5 Bright A_FaceTarget;
			SORC J 5 Bright A_Scream;
			SORC KLMNOPQRST 5 Bright;
			SORC U 5 Bright A_NoBlocking;
			SORC VWXY 5 Bright;
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) >> 1)) && (chance < 200))
		{
			StopBall = "SorcBall3";	// Green
		}
		else
		{
			StopBall = "SorcBall1";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}

class ClericBossNew : ClericBoss replaces ClericBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Traductus";
		PainChance 50;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "Ice", 1.8;
		Painchance "Ice", 90;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 28;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 50;
		DamageFactor "Cricket", 0.2;
		Painchance "Cricket", 10;
		DamageFactor "Lead", 1.0;
		Painchance "Lead", 50;
		DamageFactor "Chop", 1.0;
		Painchance "Chop", 50;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.0;
		Painchance "Zap", 50;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
	}
}

class FighterBossNew : FighterBoss replaces FighterBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Zedek";
		PainChance 50;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 20;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 0.7;
		Painchance "CherryBomb", 35;
		DamageFactor "Bonk", 0.25;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 63;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 63;
		DamageFactor "Chop", 0.25;
		Painchance "Chop", 13;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 1.25;
		Painchance "Zap", 63;
		DamageFactor "Dust", 0.4;
		Painchance "Dust", 20;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 13;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 38;
		DamageFactor "Spinner", 0.25;
		Painchance "Spinner", 13;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 38;
	}
}

class MageBossNew : MageBoss replaces MageBoss
{
	mixin MonsterCollider;
	default
	{
		Tag "\c[gold]Menelkir";
		PainChance 50;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 13;
		DamageFactor "Ice", 0.625;
		Painchance "Ice", 31;
		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 31;
		DamageFactor "Bonk", 1.5;
		Painchance "Bonk", 75;
		DamageFactor "Cricket", 0.3125;
		Painchance "Cricket", 16;
		DamageFactor "Lead", 0.3125;
		Painchance "Lead", 16;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 75;
		DamageFactor "Breakfast", 1.0;
		Painchance "Breakfast", 50;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 38;
		DamageFactor "Dust", 1.0;
		Painchance "Dust", 50;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 38;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 13;
		DamageFactor "Spinner", 0.75;
		Painchance "Spinner", 38;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 13;
	}
}

class KoraxNew : Korax replaces Korax
{
	mixin MonsterCollider;
	
	int lulwat;
	int lultimer1, lultimer1max;

	default
	{
		Tag "\c[gold]Korax";
		PainChance 20;
		DamageFactor "Fire", 0.05;
		Painchance "Fire", 0; // Korax NEVER flinches from Fire
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 5;
		DamageFactor "CherryBomb", 0.525;
		Painchance "CherryBomb", 0; // Korax NEVER flinches from Cherry Bombs
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 3; // Korax flinches four times less than expected from bonks from various melee weapons
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 20;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 3; // Korax flinches four times less than expected from Blundershot
		DamageFactor "Chop", 0.5;
		Painchance "Chop", 3; // Korax flinches four times less than expected from Axe Chops
		DamageFactor "Breakfast", 0.25;
		Painchance "Breakfast", 1; // Korax flinches four times less than expected from Fractal Eggs
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 1; // Korax flinches four times less than expected from the SuperVac
		DamageFactor "Zap", 0.25;
		Painchance "Zap", 0; // Korax NEVER flinches from the Pike's shots
		DamageFactor "Dust", 0.375;
		Painchance "Dust", 2; // Korax flinches four times less than expected from the Dust Devils
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 3; // Korax flinches four times less than expected from Bottle Rockets
		DamageFactor "Popper", 1.0;
		Painchance "Popper", 5; // Korax flinches four times less than expected from Poppers
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 3; // Korax flinches four times less than expected from Spinners
		DamageFactor "Beats", 1.0;
		Painchance "Beats", 0; // Korax NEVER flinches from the Grimophone
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
}

class MinotaurFriendNew : MinotaurFriend replaces MinotaurFriend
{
	mixin MonsterCollider;
	default
	{
		Tag "Maulotaur";
		Painchance 25;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 38;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 13;
		DamageFactor "Cricket", 1.0;
		Painchance "Cricket", 25;
		DamageFactor "Lead", 1.25;
		Painchance "Lead", 31;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 31;
		DamageFactor "Breakfast", 4.0;
		Painchance "Breakfast", 100;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 6;
		DamageFactor "Zap", 0.75;
		Painchance "Zap", 18;
		DamageFactor "Dust", 0.5;
		Painchance "Dust", 13;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 62;
		DamageFactor "Popper", 5.0;
		Painchance "Popper", 125;
		DamageFactor "Spinner", 1.75;
		Painchance "Spinner", 44;
		DamageFactor "Beats", 5.0;
		Painchance "Beats", 125;
	}
}

//*******************
//* Strife specific *
//*******************

class AcolyteNew : Acolyte replaces Acolyte
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteTanNew : AcolyteTan replaces AcolyteTan
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteRedNew : AcolyteRed replaces AcolyteRed
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteRustNew : AcolyteRust replaces AcolyteRust
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteGrayNew : AcolyteGray replaces AcolyteGray
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteDGreenNew : AcolyteDGreen replaces AcolyteDGreen
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteGoldNew : AcolyteGold replaces AcolyteGold
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteLGreenNew : AcolyteLGreen replaces AcolyteLGreen
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteBlueNew : AcolyteBlue replaces AcolyteBlue
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class AcolyteShadowNew : AcolyteShadow replaces AcolyteShadow
{
	mixin MonsterCollider;
	default
	{
		PainChance 50; // Much less pain chain vs normal Acolytes
		DamageFactor 0.334; // Most general damage is lessened against them
	}
}

class AcolyteToBeNew : AcolyteToBe replaces AcolyteToBe
{
	mixin MonsterCollider;
	default
	{
		PainChance 150;
	}
}

class RebelNew : Rebel replaces Rebel
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel1New : Rebel1 replaces Rebel1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel2New : Rebel2 replaces Rebel2
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel3New : Rebel3 replaces Rebel3
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel4New : Rebel4 replaces Rebel4
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel5New : Rebel5 replaces Rebel5
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class Rebel6New : Rebel6 replaces Rebel6
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
	}
}

class CeilingTurretNew : CeilingTurret replaces CeilingTurret
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		+NOPAIN
	}
}

class StalkerNew : Stalker replaces Stalker
{
	mixin MonsterCollider;
	default
	{
		PainChance 40;
	}
}

class SentinelNew : Sentinel replaces Sentinel
{
	mixin MonsterCollider;
	default
	{
		Painchance 255;
	}
}

class TemplarNew : Templar replaces Templar
{
	mixin MonsterCollider;
	default
	{
		PainChance 100;
	}
}

class ReaverNew : Reaver replaces Reaver
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class CrusaderNew : Crusader replaces Crusader
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
	}
}

class InquisitorNew : Inquisitor replaces Inquisitor
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		+NOPAIN
	}
}

class ProgrammerNew : Programmer replaces Programmer
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 13;
	}
}

class StrifeBishopNew : StrifeBishop replaces StrifeBishop
{
	mixin MonsterCollider;
	default
	{
		PainChance 128;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class OracleNew : Oracle replaces Oracle
{
	mixin MonsterCollider;
	default
	{
		PainChance 0;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 0;
	}
}

class Macil1New : Macil1 replaces Macil1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class Macil2New : Macil2 replaces Macil2
{
	mixin MonsterCollider;
	default
	{
		PainChance 200;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class LoremasterNew : Loremaster replaces Loremaster
{
	mixin MonsterCollider;
	default
	{
		Painchance 50;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 125;
	}
	
	States
	{
		Pain.Suck:
			PDED A 9;
			PDED A 9 A_Pain;
			stop;
		Pain:
			PDED A 3;
			PDED A 3 A_Pain;
			stop;
	}
}

class AlienSpectre1New : AlienSpectre1 replaces AlienSpectre1
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 256;
	}
}

class AlienSpectre2New : AlienSpectre2 replaces AlienSpectre2
{
	mixin MonsterCollider;
	default
	{
		PainChance 50;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre3New : AlienSpectre3 replaces AlienSpectre3
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre4New : AlienSpectre4 replaces AlienSpectre4
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class AlienSpectre5New : AlienSpectre5 replaces AlienSpectre5
{
	mixin MonsterCollider;
	default
	{
		PainChance 250;
		DamageFactor "Suck", 5.0;
		Painchance "Suck", 250;
	}
}

class EntityBossNew : EntityBoss replaces EntityBoss
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

class EntitySecondNew : EntitySecond replaces EntitySecond
{
	mixin MonsterCollider;
	default
	{
		PainChance 255;
		DamageFactor "Suck", 2.5;
		Painchance "Suck", 256;
	}
}

//*******************************************
//* Mapset specific CompatPack Replacements *
//*******************************************
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMasterMindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SSWV A 3 A_Metal();
			SSWV ABB 3 A_Chase();
			SSWV C 3 A_Metal();
			SSWV CDD 3 A_Chase();
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}

// DV2's Balrog
class FlyingBalrog : EECreature
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 30;
		Mass 400;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		Monster;
		SeeSound "keen/pain";
		PainSound "keen/death";
		DeathSound "brain/spit";
		ActiveSound "keen/death";
		Obituary "%o fell to the might of a Balrog.";
	}
	
	States
	{
		Spawn:
			KEEN A 10 Bright A_Look();
			goto Spawn;
		See:
			KEEN ABCD 3 Bright A_Chase();
			goto See;
		Pain:
			KEEN H 8 Bright;
			KEEN A 3 Bright A_Pain();
			KEEN ABCD 3 Bright A_Chase();
			goto See;
		Missile:
			KEEN EF 6 Bright A_FaceTarget();
			KEEN G 1 Bright A_FatAttack1();
			KEEN G 1 Bright A_FatAttack2();
			KEEN G 1 Bright A_FatAttack3();
			KEEN G 1 Bright A_FaceTarget();
			KEEN GG 1 Bright A_SkelMissile();
			KEEN G 8 Bright A_SkelMissile();
			KEEN ABCD 3 Bright A_Chase();
			goto See;
		Death:
			KEEN I 5 Bright;
			KEEN J 5 Bright A_Scream();
			KEEN K 5 Bright;
			KEEN L 5 Bright A_Fall();
			KEEN MNOPQ 5 Bright;
			KEEN R 5 Bright A_BossDeath();
			KEEN R 1 Bright;
			stop;
	}
}

// DV2's Hell Cleric
class HellCleric : EECreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_Chase();
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_Chase();
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_Chase();
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_Chase();
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_Chase();
			goto See;
	}
}


// Aetherius's Version of The Hell Cleric
class HellClericDVDS : EECreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Beats", 1.334;
		DamageFactor "Cricket", 1.334;
		DamageFactor "Lead", 1.334;
		DamageFactor "Zap", 2.5;
		DamageFactor "Dust", 2.667;
		DamageFactor "Breakfast", 1.5;
		DamageFactor "CherryBomb", 0.875;
		DamageFactor "Spinner", 0.875;
		DamageFactor "BRocket", 0.875;
		DamageFactor "Popper", 2.667;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Bonk", 0.4;
		DamageFactor "Chop", 0.4;
		DamageFactor "Suck", 0.4;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 0 NoDelay; 
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			goto Spawn+1;
		See:
			HELC AABBCCDD 2
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 120) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 240) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) { A_Chase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); } else { A_Chase("Melee","Missile"); }
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0;
			HELC E 4 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 180) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 180) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = 15;
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				A_CustomComboAttack(atktype, user_tempvar1, (7+(12*(random(6,12)))/2), "imp/melee", "Melee", true);
				if (exex_monsterlevelenabledflags && user_monsterlevel >= 30)
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= 60)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_Pain(); // A_DVDSPain(1,random(18,22),8,0,0,25)
			goto See;
		Pain.Fist:
			HELC H 2 A_Pain(); // A_DVDSPain(1,random(18,22),8,0,0,50)
			HELC H 1;
			goto See;
		Pain.Kick:
			HELC H 2 A_Pain(); // A_DVDSPain(1,random(18,22),8,0,0,75);
			HELC H 2;
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;

		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}

class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}

// Hell Cleric Shot 1
class HellClericBall : EEProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		scale 1.25;
		Speed 12;
		Fastspeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}

// Hell Cleric Shot 2
class HellClericDarkBall : EEProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}

	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}

class FlyingBalrogDVDS : EECreature
{
	default
	{
		Tag "Flying Balrog";;
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		DamageFactor "Zap", 0.5;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		DamageFactor "Cricket", 1.75;
		DamageFactor "Breakfast", 0.8;
		DamageFactor "Chop", 3.5;
		DamageFactor "Suck", 1.5;
		DamageFactor "Bonk", 0.875;
		DamageFactor "Lead", 1.25;
		DamageFactor "Dust", 0.25;
		DamageFactor "CherryBomb", 0.5625;
		DamageFactor "BRocket", 0.5625;
		DamageFactor "Spinner", 0.5625;
		DamageFactor "Popper", 1.66667;
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMCLASS;
		+BOSSDEATH;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_Look();
			Loop;
		See:
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { bAVOIDMELEE == true; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 120) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) 
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
					A_FloatSetFChaseT(randompick(0,3,6));
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;
			
		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			FRIT EF 6 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 225) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 150) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 180) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 4; // Angle
				user_tempvar3 = 5; // Offset
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*1.5), (user_tempvar3*1.5)); // Partially Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, 0, 0); // Center
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-1.5), (user_tempvar3*-1.5)); // Partially Right
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 180) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 6; // Angle
				user_tempvar3 = 9; // Offset
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, 0, 0);
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
			}
			FRIT G 6 Bright
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 225) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 150) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;

		Death:
			FRIT I 0 Bright 
			{
				bNODAMAGETHRUST = true;
				A_Stop();
				A_NoGravity();
			}
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",CHAN_VOICE);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_BossDeath();
			Stop;
		Ice:
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}

class FlyingBalrogShot1 : EEProjectile // FatShotNew
{
	default
	{
		Tag "Flamer Shot";
		scale 1.25;
		Radius 6;
		Height 8;
		Speed 30; // 50% faster
		DamageFunction (12 * random(1,8)); // 50% stronger
		DamageType "Fire";
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	States
	{
		Spawn:
			MANF AABB 2 Bright;
			Loop;
		Death:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class FlyingBalrogShot2 : EEProjectile // RevenantTracerNew
{
	double user_tracetightness;
	int LevelOfShooter;
	default
	{
		Tag "Tracer Missile";
		scale 1.25;
		Radius 11;
		Height 8;
		Speed 15; // 50% faster
		DamageFunction (15 * random(1,8)); // 50% stronger
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE;
		+RANDOMIZE;
		SeeSound "Imp/Attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FATB AB 2 Bright A_Tracer();
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("skeleton/tracex",CHAN_7);
				A_Quake(1, 8, 0, 192, "nosound/silent");
				A_Quake(3, 8, 0, 96, "nosound/silent");
			}
			FBXP A 8 Bright;
			FBXP B 6 Bright;
			FBXP C 4 Bright;
			Stop;
	}
}

// Suicide Bomber
class SuicideBomber : EECreature 
{
	default
	{
		Tag "Suicide Bomber";
		
		Health 80;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 16;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor "Zap", 1.0;
		Damagefactor "Fire", 0.25;
		Damagefactor "Ice", 1.5;
		DamageFactor "Cricket", 0.5;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Chop", 1.5;
		DamageFactor "Suck", 4.0;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Lead", 1.5;
		DamageFactor "Dust", 4.0;
		DamageFactor "CherryBomb", 0.2;
		DamageFactor "BRocket", 0.2;
		DamageFactor "Spinner", 0.2;
		DamageFactor "Popper", 5.0;

		MONSTER;
		+FLOORCLIP;
		+JUMPDOWN;
		+NOFEAR;
		-NOTARGET;
		-NOTARGETSWITCH;
		-NEVERTARGET;
		-NOINFIGHTING;
		seesound "suicide/sit";
		attacksound "shotguy/death";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		obituary "%o was exploded by a crazy suicide bomber.";
		DamageType "Explosive";
	}

	states
	{
		Spawn:
			BMBE AB 10 A_Look();
			goto Spawn;
		See:
			BMBE AAABBBCCCDDD 2
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 150) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			BMBE A 0 A_StartSound("suicide/scream",CHAN_VOICE);
			Loop;
		Melee:
			TNT1 A 0 A_Die();
			Goto Death;
		Pain:
			BMBE A 3;
			BMBE A 3 A_EEPain();
			goto See;
		
		Death:
			BMBE M 5 bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (user_monsterlevel > 540)
				{
					if (random(1,2) <= 1) 
					{
						if (random(1,4) <= 1) { A_SpawnProjectile("SuicideBombUltra",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
					else 
					{ 
						if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
				}
				else
				if (user_monsterlevel > 135)
				{
					if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
				}
				else
				{
					if (random(1,16) <= 1) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
				}
			}
			BMBE N 5 bright A_XScream();
			BMBE O 5 A_NoBlocking();
			BMBE PQRST 5;
			BMBE U -1;
			stop;
		Ice:
			BMBE D 5 A_GenericFreezeDeath();
			BMBE D 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BMBE T 5 ;
			BMBE SRQPONM 5;
			Goto See;
	}
}

// Suicide Bomber Explosions
class SuicideBomb : EEProjectile
{
	default
	{
		Tag "Suicide Bomb";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		Scale 0.75;
		PROJECTILE;
		RenderStyle "Add";
		DontHurtShooter;
		Obituary "%o was exploded by a crazy suicide bomber.";
		SeeSound "weapons/rocklx";
		DamageType "Explosion";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((64+random(-16,16)), (96+random(-24,24)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

class SuicideBombStrong : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Strong]";
		Alpha 0.925;
		Scale 1.10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((128+random(-64,64)), (128+random(-64,64)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

class SuicideBombUltra : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Ultra]";
		Alpha 0.95;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((256+random(-128,128)), (224+random(-112,112)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

// TBC :V