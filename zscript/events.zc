class DD_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	bool A_CheckUOHYM()
	{
		bool UOHYM = false;
		if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1) UOHYM = true;
		return UOHYM;
	}
	
	bool A_CheckDDGame()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls") || player.CountInv("IsWeddingCake")) return true;
		return false;
	}
	
	int A_GetPlayerLevel(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (exex_expenabled)
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
			else
			{
				if (A_CheckDDGame()) Level = MiscItem.TotalNRPGLvlPts;
			}
		}
		if (dydudebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLevel - EventHandler)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	override void WorldTick()
	{
		// LDL
		ThinkerIterator ldlit = ThinkerIterator.Create("Actor");
		Actor ldlmo;
		while (ldlmo = Actor(ldlit.Next()))
		{
			if (ldlmo.bISMONSTER && ldlmo.health > 0)
			{
				if (ldlmo.CountInv("LDLegendaryMonsterTracker"))
				{
					if (ldlmo.CountInv("LDLegendaryMonsterTransformed"))
					{
						ldlmo.A_GiveInventory("LDLegendaryMonsterVisualEffectMaker",1);
					}
					if (dydudebug_worldtick) Console.Printf("LDL Check [%p, %s]", ldlmo, ldlmo.GetClassName());
				}
			}
		}
		
		// CCards
		if ((level.time >= 3 && level.time <= 35) ||
				(((level.time - 35) % 350) == 0))
		{
			int d = Wads.CheckNumForName("CCARDS", Wads.ns_global, -1, true);
			if (dydudebug_worldtick) Console.Printf("d: %d [time: %d]", d, level.time);
			if (d != -1)
			{
				let globalvars = DDGlobalVariables.Get();
				globalvars.PlayingCCards = true;
				actor player = players[0].mo;
				player.A_SetInventory("PlayingCCards",1);
				Actor mo;
				
				string nm = "CCards_Actor_MonsterDisguise";
				ThinkerIterator it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo.bNORADIUSDMG) mo.bNORADIUSDMG = false; // hahahaha V:<
					if (!mo.bISMONSTER) mo.bISMONSTER = true; // hehehehe >:V
					if (dydudebug_worldtick) Console.Printf("LOLE [%p, %s]", mo, mo.GetClassName());
				}
			}
		}
	}

	override void NewGame()
	{
		let globalvars = DDGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		if (dydudebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (DD_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}
	
	void ProjSetSpeed(actor spawnee)
	{
		double spdfactor, oldspdfactor;
		
		if (Level.MapName != "TITLEMAP")
		{
			if (!spawnee.accuracy)
			{
				if (spawnee)
				{
					if (MiniNote(spawnee) || 
							MiniNote2(spawnee))
					{
					}
					else
					{
						if (spawnee.target)
						{
							if (spawnee.target.bISMONSTER && !PlayerPawn(spawnee.target) && spawnee.target.default.speed != 0)
							{
								spdfactor = spawnee.target.speed / spawnee.target.default.speed;
								oldspdfactor = spdfactor;
								if (spdfactor >= 1.00) 
								{
									spdfactor -= 1.00;
									if (skill <= 0) spdfactor *= 0.25;
									if (skill == 1) spdfactor *= 0.375;
									if (skill == 2) spdfactor *= 0.5;
									if (skill == 3) spdfactor *= 0.625;
									if (skill >= 4) spdfactor *= 0.75;
									spdfactor *= frandom(0.875,1.125);
									spdfactor *= exex_mprojectilevelmulti;
									if (spdfactor < 0.00) spdfactor = 0.00;
									spdfactor += 1.00;
									spawnee.A_ScaleVelocity(spdfactor);
								}
								if (dydudebug_projectilespawns) Console.Printf("(%s) spdfactor: %.8f (%.8f), spawnee.target.speed: %.8f, spawnee.target.default.speed: %.8f", spawnee.GetClassName(), spdfactor, oldspdfactor, spawnee.target.speed, spawnee.target.default.speed);
							}
						}
					}
					spawnee.accuracy++;
				}
			}
		}
	}
	
	actor, int, int SetUpMiracles(actor spawnee, int monsterlevel, int monsterrating)
	{
		EECreature EEC;
		EEC = EECreature(spawnee);
		int miraclecap = 4;
		if (skill <= 0) miraclecap = 2;
		if (skill == 1) miraclecap = 3;
		if (skill == 2) miraclecap = 4;
		if (skill == 3) miraclecap = 5;
		if (skill >= 4) miraclecap = 6;
		
		// Set Up Special Abilities
		int tutlevelmin = 1801;
		int tutlevelmax = 1804;
		if (level.levelnum >= tutlevelmin && level.levelnum <= tutlevelmax) 
		{
		}
		else
		if (A_CheckDDGame())
		{
		}
		else
		{
			int amt;
			if (Delila_BossClone(EEC))
			{
				amt = randompick(1,1,1,1,1,1,1,1,1,2);
				if (monsterlevel >= 20) amt += randompick(1,1,1,1,2);
				if (monsterlevel >= 50) amt += randompick(1,1,1,1,2);
				if (monsterlevel >= 80) amt += randompick(1,1,1,2,2);
				if (monsterlevel >= 110) amt += randompick(1,1,1,2,2);
				if (amt > (miraclecap*2.0)) amt = (miraclecap*2.0);
				spawnee.A_SetInventory("MiracleBoss",amt);
			}
			else
			if (Tempest_BossClone(EEC))
			{
				int amt = randompick(0,0,1,1,1);
				if (monsterlevel >= 25) amt += randompick(0,0,1,1,1);
				if (monsterlevel >= 55) amt += randompick(0,1,1,1,1);
				if (monsterlevel >= 85) amt += randompick(1,1,1,1,1);
				if (monsterlevel >= 115) amt += randompick(1,1,1,1,2);
				if (amt > (miraclecap*1.5)) amt = (miraclecap*1.5);
				spawnee.A_SetInventory("MiracleBoss",amt);
			}
			else
			if (PushyArchAngel(EEC))
			{
				if (random(1,24) <= 1) amt += 1;
				if (monsterlevel >= 15 && random(1,22) <= 1) amt += 1;
				if (monsterlevel >= 30 && random(1,20) <= 1) amt += 1;
				if (monsterlevel >= 45 && random(1,16) <= 1) amt += 1;
				if (monsterlevel >= 60 && random(1,14) <= 1) amt += 1;
				if (monsterlevel >= 75 && random(1,12) <= 1) amt += 1;
				if (monsterlevel >= 90 && random(1,8) <= 1) amt += 1;
				if (monsterlevel >= 105 && random(1,6) <= 1) amt += 1;
				if (monsterlevel >= 120 && random(1,4) <= 1) amt += 1;
				if (monsterlevel >= 135 && random(1,2) <= 1) amt += 1;
				if (monsterlevel >= 150) amt += 1;
				if (amt > (miraclecap*1.25)) amt = (miraclecap*1.25);
				spawnee.A_SetInventory("MiracleMonster",amt);
			}
			else
			if (PushyAngel(EEC))
			{
				if (random(1,28) <= 1) amt += 1;
				if (monsterlevel >= 15 && random(1,26) <= 1) amt += 1;
				if (monsterlevel >= 30 && random(1,22) <= 1) amt += 1;
				if (monsterlevel >= 45 && random(1,20) <= 1) amt += 1;
				if (monsterlevel >= 60 && random(1,16) <= 1) amt += 1;
				if (monsterlevel >= 75 && random(1,14) <= 1) amt += 1;
				if (monsterlevel >= 90 && random(1,10) <= 1) amt += 1;
				if (monsterlevel >= 105 && random(1,8) <= 1) amt += 1;
				if (monsterlevel >= 120 && random(1,4) <= 1) amt += 1;
				if (monsterlevel >= 135 && random(1,2) <= 1) amt += 1;
				if (monsterlevel >= 150) amt += 1;
				if (amt > miraclecap) amt = miraclecap;
				spawnee.A_SetInventory("MiracleMonster",amt);
			}
			else
			if (EvilDinahEE(EEC))
			{
				if (random(1,32) <= 1) amt += 1;
				if (monsterlevel >= 15 && random(1,28) <= 1) amt += 1;
				if (monsterlevel >= 30 && random(1,24) <= 1) amt += 1;
				if (monsterlevel >= 45 && random(1,20) <= 1) amt += 1;
				if (monsterlevel >= 60 && random(1,16) <= 1) amt += 1;
				if (monsterlevel >= 75 && random(1,12) <= 1) amt += 1;
				if (monsterlevel >= 90 && random(1,8) <= 1) amt += 1;
				if (monsterlevel >= 105 && random(1,4) <= 1) amt += 1;
				if (monsterlevel >= 120 && random(1,2) <= 1) amt += 1;
				if (monsterlevel >= 135) amt += 1;
				if (amt > (miraclecap*0.75)) amt = (miraclecap*0.75);
				spawnee.A_SetInventory("MiracleMonster",amt);
			}
			else
			{
				if (monsterlevel > 0)
				{
					if (HadesSphere(EEC)) { }
					else if (HSOverlord(EEC)) { }
					else if (SuicideBomber(EEC)) { }
					else if (QuisFake(EEC)) { }
					else if (QuisFakeClone(EEC)) { }
					else
					{
						if (random(1,128) <= 1) amt += 1;
						if (monsterlevel >= 30 && random(1,112) <= 1) amt += 1;
						if (monsterlevel >= 60 && random(1,96) <= 1) amt += 1;
						if (monsterlevel >= 90 && random(1,80) <= 1) amt += 1;
						if (monsterlevel >= 120 && random(1,64) <= 1) amt += 1;
						if (monsterlevel >= 150 && random(1,48) <= 1) amt += 1;
						if (monsterlevel >= 180 && random(1,32) <= 1) amt += 1;
						if (amt > miraclecap) amt = miraclecap;
						if (spawnee.bBOSS) spawnee.A_SetInventory("MiracleBoss",amt);
													else spawnee.A_SetInventory("MiracleMonster",amt);
					}
				}
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}
	
	actor, int, int AddLevelSpecials(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (exex_monsterlevelenabledflags)
		{
			if (monsterlevel >= (10 * levelmulfact))
			{
				if (HammerDuck(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PlanterBird(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CentaurionSgt(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Vitriola(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Muddernaut(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Jugger(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Juggette(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ReelHeel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SpiderCenser(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (15 * levelmulfact))
			{
				if (SugarSnake(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MiniSugarSnake(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Cyberdemon(spawnee) || CyberdemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SpiderMasterMind(spawnee) || SpiderMastermindNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (UltraMastermind(spawnee)) spawnee.bAVOIDMELEE = true;
		
				if (Minotaur(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (IceGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Korax(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Inquisitor(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Programmer(spawnee)) spawnee.bAVOIDMELEE = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (20 * levelmulfact))
			{
				if (Zombieman(spawnee) || ZombiemanNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PlasmaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (RepeaterZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				if (KarasawaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ShotgunGuy(spawnee) || ShotgunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FemaleRailZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ChaingunGuy(spawnee) || ChaingunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Minigunner(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BFGGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (WolfensteinSS(spawnee) || WolfensteinSSNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FlyingBalrog(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (IronLich(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Snake(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Bishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDMELEE = true;
		
				if (Acolyte(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Rebel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Reaver(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Templar(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDMELEE = true;
				
				// AVOIDHAZARDS
				if (HammerDuck(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PlanterBird(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CentaurionSgt(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Vitriola(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Muddernaut(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Jugger(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Juggette(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ReelHeel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SpiderCenser(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (25 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (NetherDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				// AVOIDMELEE
				if (NetherDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Fatso(spawnee) || MancubusNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Daedabus(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Arachnotron(spawnee) || ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Archvile(spawnee) || ArchvileNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BaronOfHell(spawnee) || BaronOfHellNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Wizard(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Beast(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (FireDemon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Wraith(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Sentinel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Crusader(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (30 * levelmulfact))
			{
				if (Abaddon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Teacher_Quis(spawnee)) spawnee.bAVOIDMELEE = true;
				if (QuisFake(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Teacher_Lauritz(spawnee)) spawnee.bAVOIDMELEE = true;
				if (GameMother(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MossMother(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HandMotherVac(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Hectebus(spawnee)) spawnee.bAVOIDMELEE = true;
				
				// AVOIDHAZARDS
				if (Abaddon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SugarSnake(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MiniSugarSnake(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Cyberdemon(spawnee) || CyberdemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SpiderMasterMind(spawnee) || SpiderMastermindNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (UltraMastermind(spawnee)) spawnee.bAVOIDHAZARDS = true;
		
				if (Minotaur(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (IceGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Korax(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Inquisitor(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Programmer(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (35 * levelmulfact))
			{
				if (DoomImp(spawnee) || DoomImpNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Cacodemon(spawnee) || CacodemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PainElemental(spawnee) || PainElementalNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Revenant(spawnee) || RevenantNew(spawnee)) 
				{
					if (random(1,2) <= 1) spawnee.bAVOIDMELEE = true;
				}
				if (HellKnight(spawnee) || HellKnightNew(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (HereticImpLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Knight(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (40 * levelmulfact))
			{
				if (Teacher_Jorg(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Teacher_Vokter(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HandMotherPhaseA(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HandMotherPhaseB(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HandMotherPhaseC(spawnee)) spawnee.bAVOIDMELEE = true;
				
				// AVOIDHAZARDS
				if (Zombieman(spawnee) || ZombiemanNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PlasmaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (RepeaterZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (KarasawaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ShotgunGuy(spawnee) || ShotgunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FemaleRailZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ChaingunGuy(spawnee) || ChaingunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Minigunner(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BFGGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (WolfensteinSS(spawnee) || WolfensteinSSNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FlyingBalrog(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (IronLich(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Snake(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Bishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
		
				if (Acolyte(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Rebel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Reaver(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Templar(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
		
			if (monsterlevel >= (45 * levelmulfact))
			{
				if (HadesElemental(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HadesOverlord(spawnee)) spawnee.bAVOIDMELEE = true;
			}
		
			if (monsterlevel >= (50 * levelmulfact))
			{
				// AVOIDMELEE
				if (Cacolantern(spawnee)) spawnee.bAVOIDMELEE = true;
				// AVOIDHAZARDS
				if (Cacolantern(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Fatso(spawnee) || MancubusNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Daedabus(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Arachnotron(spawnee) || ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Archvile(spawnee) || ArchvileNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BaronOfHell(spawnee) || BaronOfHellNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Wizard(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Beast(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (FireDemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Wraith(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Sentinel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Crusader(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (60 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (Hectebus(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Teacher_Quis(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (QuisFake(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Teacher_Lauritz(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (GameMother(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MossMother(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HandMotherVac(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (70 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (DoomImp(spawnee) || DoomImpNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Cacodemon(spawnee) || CacodemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PainElemental(spawnee) || PainElementalNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Revenant(spawnee) || RevenantNew(spawnee)) 
				{
					if (spawnee.bAVOIDMELEE) 
					{
						if (random(1,2) <= 1) spawnee.bAVOIDHAZARDS = true;
					}
				}
				if (HellKnight(spawnee) || HellKnightNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (HereticImpLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Knight(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (80 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (Teacher_Jorg(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Teacher_Vokter(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HandMotherPhaseA(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HandMotherPhaseB(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HandMotherPhaseC(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (90 * levelmulfact))
			{
				if (HadesElemental(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HadesOverlord(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			int fastchance = 0;
			if (monsterlevel >= (25 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (50 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (75 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (100 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
					if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bALWAYSFAST = true;
					if (Demon(spawnee) || DemonNew(spawnee)) spawnee.bALWAYSFAST = true;
					if (LostSoul(spawnee) || LostSoulNew(spawnee) || LostSoulAnnoying(spawnee)) spawnee.bALWAYSFAST = true;
					if (HereticImp(spawnee)) spawnee.bALWAYSFAST = true;
					if (Mummy(spawnee)) spawnee.bALWAYSFAST = true;
					if (Clink(spawnee)) spawnee.bALWAYSFAST = true;
					
					if (Ettin(spawnee)) spawnee.bALWAYSFAST = true;
					if (Centaur(spawnee)) spawnee.bALWAYSFAST = true;
					if (Serpent(spawnee)) spawnee.bALWAYSFAST = true;
					
					if (Stalker(spawnee)) spawnee.bALWAYSFAST = true;
				}
			}
			if (monsterlevel >= (50 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (100 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (150 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (200 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
					if (Forsaken(spawnee)) spawnee.bALWAYSFAST = true;
					if (Forsaken_Quisling(spawnee)) spawnee.bALWAYSFAST = true;
					if (Forsaken_Jorgensen(spawnee)) spawnee.bALWAYSFAST = true;
					if (Devil(spawnee)) spawnee.bALWAYSFAST = true;
				}
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}
	
	actor, string, int CheckLevelTweaks(actor spawnee, string spawnname, int LevelCheck)
	{
		// Level Tweaks
		// Micro-Boss
		if (spawnname == "Nurse") LevelCheck += random(0,randompick(1,1,2));
		if (spawnname == "Devil") LevelCheck += random(0,randompick(1,1,2));
		if (spawnname == "Muddernaut") LevelCheck += random(0,randompick(1,1,2));
		if (spawnname == "PushyArchAngel") LevelCheck += random(0,randompick(1,1,2));
		if (spawnname == "KilletanteSoloist") LevelCheck += random(0,randompick(1,1,2));
		
		// Mini-Boss
		if (spawnname == "SpiderMastermindNew") LevelCheck += random(random(1,2),3);
		if (spawnname == "Demolisher") LevelCheck += random(random(1,2),3);
		if (spawnname == "CyberdemonNew") LevelCheck += random(random(1,2),3);
		if (spawnname == "Annihilator") LevelCheck += random(random(1,2),3);
		if (spawnname == "QuisFakeClone") LevelCheck += random(random(1,2),3);
		if (spawnname == "VokterCannon") LevelCheck += random(random(1,2),3);
		if (spawnname == "VokterCannon_Flipped") LevelCheck += random(random(1,2),3);
		
		// Tier 1 Boss
		if (spawnname == "RoseMotherClone") LevelCheck += random(2,4);
		if (spawnname == "GameMotherClone") LevelCheck += random(2,4);
		if (spawnname == "GlobeMotherClone") LevelCheck += random(2,4);
		if (spawnname == "MossMotherClone") LevelCheck += random(2,4);
		if (spawnname == "SphinxMotherClone") LevelCheck += random(2,4);
		if (spawnname == "HandMotherVacClone") LevelCheck += random(2,4);
		if (spawnname == "Teacher_KragClone") LevelCheck += random(2,4);
		if (spawnname == "Teacher_QuisClone") LevelCheck += random(2,4);
		if (spawnname == "Teacher_LauritzClone") LevelCheck += random(2,4);
		if (spawnname == "Teacher_JorgClone") LevelCheck += random(2,4);
		if (spawnname == "JorgSphereCannon") LevelCheck += random(2,4);
		
		// Tier 2 Boss
		if (spawnname == "HandmotherPhaseAClone") LevelCheck += random(3,6);
		if (spawnname == "HandmotherPhaseBClone") LevelCheck += random(3,6);
		if (spawnname == "HandmotherPhaseCClone") LevelCheck += random(3,6);
		if (spawnname == "Teacher_VokterClone") LevelCheck += random(3,6);
		if (spawnname == "Tempest_BossClone") LevelCheck += random(3,6);
		if (spawnname == "Delila_BossClone") LevelCheck += random(3,6);

		if (Peasant(spawnee)) LevelCheck /= 4;
		else
		{
			if (random(1,32) <= 1)
			{
				if (random(1,32) <= 1)
				{
					if (random(1,32) <= 1)
					{
						if (spawnname == "ClayDevilNew") LevelCheck += random(4,6);
						else if (spawnname == "Skeleton") LevelCheck += random(8,12);
						else LevelCheck += random(16,24);
					}
					else
					{
						if (spawnname == "ClayDevilNew") LevelCheck += random(1,2);
						else if (spawnname == "Skeleton") LevelCheck += random(2,3);
						else LevelCheck += random(8,12);
					}
				}
				else
				{
					if (spawnname == "ClayDevilNew") LevelCheck += randompick(0,0,0,0,0,0,0,0,0,1);
					else if (spawnname == "Skeleton") LevelCheck += random(0,1);
					else LevelCheck += random(2,3);
				}
			}
			// Rare Chance for a Level Quadruplication [i.e. Aetherius]
			int basechance = 128;
			if (A_CheckDDGame() && exex_nrpgmonsterlevels) basechance = 1024;
			if (random(1,basechance) <= (1 + (skill * 0.25)))
			{
				if (spawnname == "ClayDevilNew") LevelCheck *= 1.25;
				else if (spawnname == "Skeleton") LevelCheck *= 1.5;
				else LevelCheck *= 2;
				
				basechance = 128;
				if (A_CheckDDGame() && exex_nrpgmonsterlevels) basechance = 1024;
				if (random(1,basechance) <= (1 + (skill * 0.25))) 
				{
					if (spawnname == "ClayDevilNew") LevelCheck *= 1.25;
					else if (spawnname == "Skeleton") LevelCheck *= 1.5;
					else LevelCheck *= 2;
				}
			}
		}
		
		return spawnee, spawnname, LevelCheck;
	}
	
	void MonsterStatsSet(actor spawnee, int basemonsterrating, bool practicetarget, bool specialenemy, bool ispeasant)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = DDGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = 0;
			if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			string spawnname = spawnee.GetClassName();
			string nm, nn, no, np;
			
			double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
			double hpmulti2, atkmulti2, defmulti2, spdmulti2, massmulti2;
			// Monster "Scaling"
			if (spawnee.bISMONSTER && !practicetarget)
			{
				double baselinelevel = 0;
				if (dydudebug_monsterscaling && player) Console.Printf("A_CheckDDGame(): %d, exex_nrpgmonsterlevels: %d, ContinousMode: %d", A_CheckDDGame(), exex_nrpgmonsterlevels, player.CountInv("IsDDContinuous"));
				if (A_CheckDDGame() && exex_nrpgmonsterlevels && (DDOrigCreature(spawnee) || CoSForsaken(spawnee) || DDOrigBoss(spawnee)))
				{
					int randroll = random(1,24);
					double lbase = 1;
					if (randroll == 1) lbase = 0;
					if (randroll == 24) lbase = 2;
					if (level.levelnum == 99 || (level.levelnum >= 21 && level.levelnum <= 30)) // AFD
					{
						if (random(1,4) <= 1) lbase += 1;
					}
					if (level.levelnum >= 41 && level.levelnum <= 50) // CoS
					{
						if (random(1,2) <= 1) lbase += 1;
						if (random(1,4) <= 1) lbase += 1;
					}
					if (DDOrigBoss(spawnee))
					{
						if (skill <= 0) baselinelevel += random(lbase*4,lbase*5);
						if (skill == 1) baselinelevel += random(lbase*6,lbase*random(7,8));
						if (skill == 2) baselinelevel += random(lbase*8,lbase*10);
						if (skill == 3) baselinelevel += random(lbase*10,lbase*random(12,13));
						if (skill >= 4) baselinelevel += random(lbase*12,lbase*15);
					}
					else
					{
						if (skill <= 0) baselinelevel += random(lbase*2,lbase*4);
						if (skill == 1) baselinelevel += random(lbase*3,lbase*6);
						if (skill == 2) baselinelevel += random(lbase*4,lbase*8);
						if (skill == 3) baselinelevel += random(lbase*5,lbase*10);
						if (skill >= 4) baselinelevel += random(lbase*6,lbase*12);
					}
					
					if (player.CountInv("IsDDContinuous"))
					{
						if (level.levelnum == 99 || (level.levelnum >= 21 && level.levelnum <= 30)) // AFD
						{
							randroll = random(1,22);
							lbase = 2;
							if (randroll == 1) lbase = 2;
							if (randroll == 20) lbase = 3;
							if (skill <= 0) baselinelevel += (lbase * 2);
							if (skill == 1) baselinelevel += (lbase * 3);
							if (skill == 2) baselinelevel += (lbase * 4);
							if (skill == 3) baselinelevel += (lbase * 5);
							if (skill >= 4) baselinelevel += (lbase * 6);
						}
						
						if (level.levelnum >= 41 && level.levelnum <= 50) // CoS
						{
							randroll = random(1,20);
							lbase = 4;
							if (randroll == 1) lbase = 3;
							if (randroll == 16) lbase = 5;
							if (skill <= 0) baselinelevel += (lbase * 2);
							if (skill == 1) baselinelevel += (lbase * 3);
							if (skill == 2) baselinelevel += (lbase * 4);
							if (skill == 3) baselinelevel += (lbase * 5);
							if (skill >= 4) baselinelevel += (lbase * 6);
						}
					}
					if (PuddingPup(spawnee)) baselinelevel *= frandompick(0.25,0.375,0.375,0.375,0.375,0.375,0.5);
					if (FractalChick(spawnee)) baselinelevel *= frandompick(0.5,0.75,0.75,0.75,0.75,0.75,1.0);
					if (!DDOrigBoss(spawnee)) baselinelevel *= frandompick(0.5,0.75,0.75,0.75,0.75,0.75,1.0);
															 else baselinelevel *= frandompick(1.25,1.334,1.334,1.334,1.334,1.334,1.5);
					baselinelevel *= exex_nrpgmonlevelscale;
					if (dydudebug_monsterscaling) Console.Printf("\c[gold][MonsterStatsSet] baselinelevel: %d, tic: %d, actor: %p [%s]\c-", baselinelevel, gametic, spawnee, spawnname);
				}
				if (A_CheckUOHYM() && level.mapname == "MAP01") 
				{
					baselinelevel += randompick(0,1,1,1,2,2,2,2,2,2,2,2,3,3,3,4);
					nm = "Blot"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Shadow"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Mite"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Vampyr"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Striga"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Putrefier"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Hemodemon"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Wight1"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "KDiZDNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "MirrorArchvile"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "KevCerberus"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "ChildhoodNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "Hellfish"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "SphinxMotherClone"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "SkinStealer"; if (spawnname == nm) baselinelevel *= random(16,24);
					if (random(1,16) <= 1) baselinelevel *= 2.5;
					else
					{
						if (random(1,8) <= 1) baselinelevel *= 1.75;
						else
						{
							if (random(1,4) <= 1) baselinelevel *= 1.375;
							else
							{
								if (random(1,2) <= 1) baselinelevel *= 1.1875;
							}
						}
					}
				}
				
				
				if (dydudebug_monsterscaling) Console.Printf("\c[gold][MonsterStatsSet], tic: %d, actor: %p [%s]\c-", gametic, spawnee, spawnname);
				int LevelErrorRange;
				int LevelCheck;
				int LevelChecker = 1;
				int MapDifficultyInflation = clamp(exex_mapdifficultyinflation, -2000, 2000);
				int MapDifficultyInflationPercent = clamp(exex_mapdifficultyinflation2,  1, 5000);
				int MapErrorRange;
				int LevelDifficultyInflation = clamp(exex_leveldifficultyinflation, -2000, 2000);
				int LevelDifficultyInflationPercent = clamp(exex_leveldifficultyinflation2, -100, 2000);
				int MapCheck;
				double monsterrating = 0;
				double monsterlevel = 0;
				double leveltemp = 0;
				double luckmult = 0;
				double origSpd = spawnee.Speed;
				double origDmgMul = spawnee.DamageMultiply;
				double origDmgFct = spawnee.DamageFactor;
				double origHealth = spawnee.health;
				double origMass = spawnee.Mass;
				EECreature EEC;
				EEC = EECreature(spawnee);
				
				hpmulti = 0.00;
				atkmulti = 0.00;
				defmulti = 0.00;
				spdmulti = 0.00;
				massmulti = 0.00;
				if (!specialenemy || !ispeasant)
				{
					double mult;
					double mult2;
					double multbase = 1;
					int basedivfactor = 16;
					if (skill <= 0) basedivfactor = 22;
					if (skill == 1) basedivfactor = 19;
					if (skill == 2) basedivfactor = 16;
					if (skill == 3) basedivfactor = 11;
					if (skill >= 4) basedivfactor = 6;

					if (random(1,basedivfactor) <= 8)
					{
						if (random(1,basedivfactor) <= 4)
						{
							if (random(1,basedivfactor) <= 2)
							{
								if (random(1,basedivfactor) <= 1)
								{
									if (random(1,(basedivfactor*1.25)) <= 1)
									{
										if (random(1,(basedivfactor*1.5)) <= 1)
										{
											if (random(1,(basedivfactor*2)) <= 1)
											{
												if (random(1,(basedivfactor*3)) <= 1) monsterrating = 8; // <SSS>
												else monsterrating = 7; // <SS>
											}
											else monsterrating = 6; // [S]
										}
										else monsterrating = 5; // [A]
									}
									else monsterrating = 4; // [B]
								}
								else monsterrating = 3; // [C]
							}
							else monsterrating = 2; // [D]
						}
						else monsterrating = 1; // [E]
					}
					
					if (monsterrating < basemonsterrating) monsterrating = basemonsterrating;
					multbase = 1.0;
					double baseadd = 0.0;
					if (monsterrating == 1) baseadd = 0.5; // [E]
					if (monsterrating == 2) baseadd = 1.125; // [D]
					if (monsterrating == 3) baseadd = 2.2; // [C]
					if (monsterrating == 4) baseadd = 3.25; // [B]
					if (monsterrating == 5) baseadd = 4.334; // [A]
					if (monsterrating == 6) baseadd = 5.4; // [S]
					if (monsterrating == 7) baseadd = 6.5; // <SS>
					if (monsterrating >= 8) baseadd = 7.75; // <SSS>
					if (A_CheckDDGame()) baseadd *= frandompick(0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125);
													else baseadd *= frandompick(0.4375,0.5,0.5,0.5,0.5,0.5,0.5,0.5625);
					multbase += baseadd;
					if (dydudebug_monsterscaling) Console.Printf("multbase: %.8f, monsterrating: %d", multbase, monsterrating);
					
					// Gives the DD Trilogy Enemies bigger stat gains per level than the gamemode's default monsters if the option is enabled
					if (DDOrigCreature(spawnee) && exex_ddmonstersboostedstats)
					{
						double baseextra = frandompick(0.5,0.667,0.667,1.0,1.0,1.0,1.0,1.5,1.5,2);
						if (A_CheckDDGame()) baseextra *= frandompick(0.5,0.667,0.667,0.75,0.75,0.75,0.75,0.8334,0.8334,1.0);
														else baseextra *= 0.5;
						baseextra += 1.0;
						if (DDOrigBoss(spawnee) || spawnee.bBOSS) 
						{
							if (A_CheckDDGame() && DDOrigBoss(spawnee)) baseextra *= 1.25;
																										 else baseextra *= 1.5;
						}
						
						if (EEC) EEC.user_statsbaseextra = baseextra;
						multbase *= baseextra;
						if (dydudebug_monsterscaling) 
						{
							if (DDOrigBoss(spawnee)) Console.Printf("[EEOrigBoss Found! (boost)] multbase: %.8f, baseextra: %.8f", multbase, baseextra);
																	else Console.Printf("[EEOrigCreature Found! (boost)] multbase: %.8f, baseextra: %.8f", multbase, baseextra);
						}
					}
					// This can give the gamemode's DEFAULT monsters boosted stats if the option is enabled
					if (!DDOrigCreature(spawnee) && exex_defaultmonstersboostedstats)
					{
						double baseextra = frandompick(0.25,0.5,1.25,1.25,2,2.25);
						baseextra *= 0.5;
						baseextra += 1.0;
						if (spawnee.bBOSS) baseextra *= 1.5;
						if (EEC) EEC.user_statsbaseextra = baseextra;
						multbase *= baseextra;
						if (dydudebug_monsterscaling) 
						{
							if (DDOrigBoss(spawnee)) Console.Printf("[Default Boss Found! (boost)] multbase: %.8f, baseextra: %.8f", multbase, baseextra);
																	else Console.Printf("[Default Monster Found! (boost)] multbase: %.8f, baseextra: %.8f", multbase, baseextra);
						}
					}
					
					if (random(1,128) <= (monsterrating * 0.25))
					{
						multbase *= 2;
						if (dydudebug_monsterscaling) Console.Printf("Boosted [1] - multbase: %.8f", multbase);
						if (random(1,128) <= (monsterrating * 0.125))
						{
							multbase *= 2;
							if (dydudebug_monsterscaling) Console.Printf("Boosted [2] - multbase: %.8f", multbase);
						}
					}
					
					bool levelee = false;
					if (A_CheckDDGame() && exex_nrpgmonsterlevels)
					{
						//****************************************
						//* DD Trilogy No-RPG Mode Level Scaling *
						//****************************************
						int TruePlayerLevel = baselinelevel;
						LevelCheck += TruePlayerLevel;
						if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [baselinelevel Check]: %d (BaseLvl: +%d)", LevelCheck, TruePlayerLevel);
						
						levelee = true;
					}
					else
					{
						EECreature spawnee2;
						spawnee2 = EECreature(spawnee);
						if (spawnee2)
						{
							int presetlevel = spawnee2.user_presetleveladd + random(spawnee2.user_presetlevelrand1,spawnee2.user_presetlevelrand2);
							if (presetlevel > 0) 
							{
								LevelCheck += presetlevel;
								if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [presetlevel]: %d", presetlevel);
							}
						}
						//***********************
						//* PlayerLevel Scaling *
						//***********************
						if (exex_enemyscalingplevel && globalvars && MiscItem)
						{
							int TruePlayerLevel = A_GetPlayerLevel(1);
							TruePlayerLevel += baselinelevel;
							LevelCheck += TruePlayerLevel;
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [PlayerLevel Check]: %d (PlayLvl: +%d)", LevelCheck, TruePlayerLevel);

							if (EEC)
							{
								LevelCheck += EEC.user_ressurrectstr; // Checks the "Resurrect" strength of a monster [Clay Devils in TCOTD:A get stronger each time they resurrect]
								if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [ResurrectStr Check]: %d (ResStr: +%d)", LevelCheck, EEC.user_ressurrectstr);
							}
							
							LevelCheck += LevelDifficultyInflation;
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d)", LevelCheck, LevelDifficultyInflation);
				
							LevelCheck = LevelCheck * (100 + LevelDifficultyInflationPercent) / 100;
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%)", LevelCheck, (100 + LevelDifficultyInflationPercent));
							
							LevelErrorRange = LevelCheck * 0.1667;
							if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
							LevelCheck += random(-LevelErrorRange,LevelErrorRange);
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [error-range]: %d (Error Range: +-%d)", LevelCheck, LevelErrorRange);

							int PreviousLevelCheck = LevelCheck;

							// Specific Monsters
							if (SpiderMastermind(spawnee) || SpiderMastermindNew(spawnee)) LevelCheck += random(3,6);
							if (Cyberdemon(spawnee) || CyberdemonNew(spawnee)) LevelCheck += random(3,6);
							if (Annihilator(spawnee) || Demolisher(spawnee)) LevelCheck += random(3,6);
							if (Minotaur(spawnee) || MinotaurFriend(spawnee)) LevelCheck += random(3,6);

							// Specific Bosses
							// Tier 1 Boss
							if (Sorcerer1(spawnee) || DSparilMountedNew(spawnee)) LevelCheck += random(9,18);
							if (FighterBoss(spawnee)) LevelCheck += random(9,18);
							if (ClericBoss(spawnee)) LevelCheck += random(9,18);
							if (MageBoss(spawnee)) LevelCheck += random(9,18);
							// Tier 2 Boss
							if (Sorcerer2(spawnee) || DSparilUnmountedNew(spawnee)) LevelCheck += random(15,30);
							if (Korax(spawnee) || KoraxNew(spawnee)) LevelCheck += random(15,30);
							if (spawnname == "ThamuzNew" || spawnname == "TchernobogNew") LevelCheck += random(15,30);
							// Tier 3 Boss
							if (spawnname == "PennywiseBoss" || spawnname == "TchernobogNew") LevelCheck += random(23,45);
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [actor-check: %s]: %d (Previous: %d)", spawnname, LevelCheck, PreviousLevelCheck);
							
							if (gameinfo.GameType == GAME_Doom)
							{
								if (Wads.CheckNumForName("EE-UNFAM", Wads.ns_global, -1, true) != -1 && level.GetChecksum() == "c50823f3e0b0504a403e0574af3f68e3")
								{
									if (spawnee.TID == 251)
									{
										PreviousLevelCheck = LevelCheck;
										LevelCheck *= 2;
										if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [Unfamiliar E3M8 boss]: %d (Previous: %d)", LevelCheck, PreviousLevelCheck);
									}
								}
							}
							PreviousLevelCheck = LevelCheck;
							LevelCheck = clamp(LevelCheck, 0, 2000);
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [final calc]: %d (Previous: %d)", LevelCheck, PreviousLevelCheck);
							levelee = true;
						}
						
						if (Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1)
						{
							int PreviousLevelCheck = LevelCheck;
							
							if (PushyArchAngel(spawnee) && spawnee.tid == 45) // ???07
							{
								LevelCheck *= frandom(2.25,3.25);
								spawnee.A_SetInventory("lolewatdisdo",1);
							}
							if (spawnname == "ChtonBloom") // ???09
							{
								LevelCheck *= frandom(3.0,4.5);
							}
							
							if (level.mapname ~== "BLM08") // ???08
							{
								if (player.CountInv("lolehaiyathar"))
								{
									if (spawnname == "ShialMastermind" ||
											spawnname == "Cyberbog" ||
											spawnname == "HandMastermind" ||
											spawnname == "TchernoDemon")
									{
										spawnee.health *= frandompick(0.625,0.75,0.75,0.75,0.75,0.75,0.875,0.875,0.875,1.0);
										LevelCheck *= frandom(0.625,0.875);
									}
									if (spawnname == "Romerotron" ||
											spawnname == "HandSlavedmind")
									{
										spawnee.health *= frandompick(1.00,1.125,1.125,1.125,1.125,1.125,1.25,1.25,1.25,1.5);
										LevelCheck *= frandom(1.125,1.375);
									}
								}
							}
							
							if (level.mapname ~== "TEST" || 
									level.mapname ~== "BLM08")
							{
								if (Killetante(spawnee) || KilletanteSoloist(spawnee)) 
								{
									if (player.CountInv("lolehaiyathar")) LevelCheck *= frandom(1.1875,1.5625);
									else
									{
										spawnee.health *= frandompick(1.0,1.125,1.125,1.125,1.125,1.125,1.25,1.25,1.25,1.5);
										LevelCheck *= frandom(1.75,2.5);
									}
								}
								if (EvilDinahEE(spawnee)) 
								{
									if (spawnee.TID == 447)
									{
										spawnee.health *= frandompick(1.0,1.5,1.5,1.5,1.5,1.5,2.0,2.0,2.0,3.0);
										LevelCheck *= frandom(1.5,2.25);
										spawnee.A_SetInventory("gimmesacrificelule",1);
									}
									else
									{
										if (player.CountInv("lolehaiyathar")) LevelCheck *= frandom(1.0,2.5);
										else
										{
											spawnee.health *= frandompick(1.0,1.125,1.125,1.125,1.125,1.125,1.25,1.25,1.25,1.5);
											LevelCheck *= frandom(1.375,2.75);
										}
									}
								}
								if (Forsaken_Jorgensen(spawnee)) 
								{
									if (player.CountInv("lolehaiyathar")) LevelCheck *= frandom(1.0,2.5);
									else 
									{
										spawnee.health *= frandompick(1.0,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5,2.0);
										LevelCheck *= frandom(1.75,3.25);
									}
								}
								if (Teacher_JorgClone(spawnee))
								{
									if (spawnee.TID == 447)
									{
										if (player.CountInv("lolehaiyathar")) LevelCheck *= frandom(3.0,4.5);
										else 
										{
											spawnee.health *= frandompick(2.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,6.0);
											LevelCheck *= frandom(4.5,6.0);
										}
										spawnee.A_SetInventory("lolewatdisdo",1);
									}
								}
							}
							if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [surprise]: %d (Previous: %d)", LevelCheck, PreviousLevelCheck);
						}
					}
					
					[spawnee, spawnname, LevelCheck] = CheckLevelTweaks(spawnee,spawnname,LevelCheck);
					
					if (levelee)
					{
						spawnee.A_SetInventory("MonsterLevel",LevelCheck);
						EECreature spawnee2;
						spawnee2 = EECreature(spawnee);
						//
						double truemultbase = multbase *= exex_enemyscalelevelmultiplier;
						if (dydudebug_monsterscaling) Console.Printf("truemultbase: %.8f, exex_enemyscalelevelmultiplier: %.8f", truemultbase, exex_enemyscalelevelmultiplier);
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult = 0.00275;
							if (skill == 1) mult = 0.002625;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002375;
							if (skill >= 4) mult = 0.00225;
						}
						else
						{
							if (skill <= 0) mult = 0.00225;
							if (skill == 1) mult = 0.002375;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002625;
							if (skill >= 4) mult = 0.00275;
						}
						mult *= 0.9;
						mult *= (1.0 + (0.125 * monsterrating));
						mult *= truemultbase;
						if (dydudebug_monsterscaling) Console.Printf("\c[red]mult [pre-attack]: %.8f\c-, FRIENDLY?: %d", mult, spawnee.bFRIENDLY);

						// Attack
						double baseatkmulti = (LevelCheck * mult);
						if (LevelCheck >= 1 && LevelCheck <= 20) baseatkmulti *= frandom(1.0025,1.005);
						if (LevelCheck >= 21 && LevelCheck <= 40) baseatkmulti *= frandom(1.0075,1.015);
						if (LevelCheck >= 41 && LevelCheck <= 60) baseatkmulti *= frandom(1.015,1.03);
						if (LevelCheck >= 61 && LevelCheck <= 80) baseatkmulti *= frandom(1.025,1.05);
						if (LevelCheck >= 81 && LevelCheck <= 100) baseatkmulti *= frandom(1.0375,1.075);
						if (LevelCheck >= 101 && LevelCheck <= 120) baseatkmulti *= frandom(1.0525,1.105);
						if (LevelCheck >= 121 && LevelCheck <= 140) baseatkmulti *= frandom(1.07,1.14);
						if (LevelCheck >= 141 && LevelCheck <= 160) baseatkmulti *= frandom(1.09,1.18);
						if (LevelCheck >= 161 && LevelCheck <= 180) baseatkmulti *= frandom(1.1125,1.225);
						if (LevelCheck >= 181 && LevelCheck <= 199) baseatkmulti *= frandom(1.1375,1.275);
						if (LevelCheck >= 200) baseatkmulti *= frandom(1.165,1.33);
						atkmulti = baseatkmulti;
						//
						if (KilletanteSoloist(spawnee)) atkmulti *= 1.25;
						else if (Killetante(spawnee)) atkmulti *= 1.0625;
						else if (CoSForsaken(spawnee)) atkmulti *= 1.125;
						else if (CremeDeBratte_Torched(spawnee)) atkmulti *= 1.375;
						else if (Hammerduck(spawnee)) atkmulti *= 1.125;
						else if (EvilDinahEE(spawnee)) atkmulti *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("atkmulti: %.8f", atkmulti);
						
						// Defense
						defmulti = 1.0 / (baseatkmulti + 1.0);
						if (Bellefish(spawnee)) defmulti *= 0.8;
						else if (Shillfish(spawnee)) defmulti *= 0.66667;
						else if (CremeDeBratte(spawnee)) defmulti *= 0.727273;
						else if (Hammerduck(spawnee)) defmulti *= 0.888889;
						else if (EvilDinahEE(spawnee)) defmulti *= 0.8;
						else if (Forsaken_Jorgensen(spawnee)) defmulti *= 1.25;
						else if (Forsaken_Quisling(spawnee)) defmulti *= 1.375;
						else if (Forsaken(spawnee)) defmulti *= 1.5;
						defmulti -= 1.0;
						if (dydudebug_monsterscaling) Console.Printf("defmulti: %.8f", defmulti);
						
						// Speed
						spdmulti = (baseatkmulti * 0.25);
						//
						if (KilletanteSoloist(spawnee)) spdmulti *= 1.125;
						else if (Killetante(spawnee)) spdmulti *= 1.0625;
						else if (CoSForsaken(spawnee)) spdmulti *= 1.125;
						else if (Bellefish(spawnee)) spdmulti *= 1.25;
						else if (Shillfish(spawnee)) spdmulti *= 1.125;
						else if (Hammerduck(spawnee)) spdmulti *= 1.25;
						else if (EvilDinahEE(spawnee)) spdmulti *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("spdmulti: %.8f", spdmulti);
							
						// Mass
						massmulti = (baseatkmulti / 1.25);
						if (Bellefish(spawnee)) massmulti *= 1.25;
						else if (Shillfish(spawnee)) massmulti *= 1.5;
						else if (Muddernaut(spawnee)) massmulti *= 1.375;
						else if (Hammerduck(spawnee)) massmulti *= 1.25;
						else if (EvilDinahEE(spawnee)) massmulti *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("massmulti: %.8f", massmulti);
						
						// Health
						hpmulti = (baseatkmulti / 1.25);
						if (KilletanteSoloist(spawnee)) hpmulti *= 1.25;
						else if (Killetante(spawnee)) hpmulti *= 1.125;
						else if (Centaurion(spawnee)) hpmulti *= 1.1875;
						else if (Hammerduck(spawnee)) hpmulti *= 1.125;
						else if (EvilDinahEE(spawnee)) hpmulti *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("hpmulti: %.8f", hpmulti);
					}
					
					//*********************
					//* Map-Based Scaling *
					//*********************
					if (exex_enemyscalingmaps && globalvars && MiscItem && !(A_CheckDDGame() && exex_nrpgmonsterlevels))
					{
						double truemultbase = multbase *= exex_enemyscalemapmultiplier;
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult2 = 0.00275;
							if (skill == 1) mult2 = 0.002625;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002375;
							if (skill >= 4) mult2 = 0.00225;
						}
						else
						{
							if (skill <= 0) mult2 = 0.00225;
							if (skill == 1) mult2 = 0.002375;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002625;
							if (skill >= 4) mult2 = 0.00275;
						}
						mult2 *= (random(2,4) * 0.9);
						mult2 *= (1.0 + ((random(5,10) * 0.0125) * monsterrating));
						mult2 *= truemultbase;
						
						MapCheck = globalvars.MapsFinished;
						
						MapCheck += MapDifficultyInflation;
						if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d)", MapCheck, MapDifficultyInflation);
			
						MapCheck = MapCheck * (100 + MapDifficultyInflationPercent) / 100;
						if (dydudebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%)", MapCheck, (100 + MapDifficultyInflationPercent));

						// Attack
						double baseatkmulti2 = (MapCheck * mult2);
						if (MapCheck >= 1 && MapCheck <= 6) baseatkmulti2 *= 1.0125;
						if (MapCheck >= 7 && MapCheck <= 11) baseatkmulti2 *= 1.025;
						if (MapCheck >= 12 && MapCheck <= 20) baseatkmulti2 *= 1.0375;
						if (MapCheck >= 21 && MapCheck <= 30) baseatkmulti2 *= 1.05;
						if (MapCheck >= 31 && MapCheck <= 40) baseatkmulti2 *= 1.0625;
						if (MapCheck >= 41 && MapCheck <= 50) baseatkmulti2 *= 1.075;
						if (MapCheck >= 51 && MapCheck <= 60) baseatkmulti2 *= 1.0875;
						if (MapCheck >= 61 && MapCheck <= 70) baseatkmulti2 *= 1.10;
						if (MapCheck >= 71 && MapCheck <= 80) baseatkmulti2 *= 1.125;
						if (MapCheck >= 81 && MapCheck <= 90) baseatkmulti2 *= 1.25;
						if (MapCheck >= 91 && MapCheck <= 100) baseatkmulti2 *= 1.375;
						if (MapCheck >= 101 && MapCheck <= 125) baseatkmulti2 *= 1.5;
						if (MapCheck >= 126 && MapCheck <= 150) baseatkmulti2 *= 1.625;
						if (MapCheck >= 151 && MapCheck <= 175) baseatkmulti2 *= 1.75;
						if (MapCheck >= 176 && MapCheck <= 200) baseatkmulti2 *= 1.875;
						if (MapCheck >= 201) baseatkmulti2 *= 2.0;
						atkmulti2 = baseatkmulti2;
						//
						if (KilletanteSoloist(spawnee)) atkmulti2 *= 1.25;
						else if (Killetante(spawnee)) atkmulti2 *= 1.0625;
						else if (CoSForsaken(spawnee)) atkmulti2 *= 1.125;
						else if (CremeDeBratte_Torched(spawnee)) atkmulti2 *= 1.375;
						else if (Hammerduck(spawnee)) atkmulti2 *= 1.125;
						else if (EvilDinahEE(spawnee)) atkmulti2 *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("atkmulti2: %.8f", atkmulti2);
						
						// Defense
						defmulti2 = 1.0 / (atkmulti2 + 1.0);
						if (Bellefish(spawnee)) defmulti2 *= 0.8;
						else if (Shillfish(spawnee)) defmulti2 *= 0.66667;
						else if (CremeDeBratte(spawnee)) defmulti2 *= 0.727273;
						else if (Hammerduck(spawnee)) defmulti2 *= 0.888889;
						else if (EvilDinahEE(spawnee)) defmulti2 *= 0.8;
						else if (Forsaken_Jorgensen(spawnee)) defmulti2 *= 1.25;
						else if (Forsaken_Quisling(spawnee)) defmulti2 *= 1.375;
						else if (Forsaken(spawnee)) defmulti2 *= 1.5;
						defmulti2 -= 1.0;
						if (dydudebug_monsterscaling) Console.Printf("defmulti2: %.8f", defmulti2);
						
						// Speed
						spdmulti2 = (atkmulti2 * 0.3125);
						if (KilletanteSoloist(spawnee)) spdmulti2 *= 1.125;
						else if (Killetante(spawnee)) spdmulti2 *= 1.0625;
						else if (CoSForsaken(spawnee)) spdmulti2 *= 1.125;
						else if (Bellefish(spawnee)) spdmulti2 *= 1.25;
						else if (Shillfish(spawnee)) spdmulti2 *= 1.125;
						else if (Hammerduck(spawnee)) spdmulti2 *= 1.25;
						else if (EvilDinahEE(spawnee)) spdmulti2 *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("spdmulti2: %.8f", spdmulti2);
							
						// Mass
						massmulti2 = atkmulti2 * 0.667;
						if (Bellefish(spawnee)) massmulti2 *= 1.25;
						else if (Shillfish(spawnee)) massmulti2 *= 1.5;
						else if (Muddernaut(spawnee)) massmulti2 *= 1.375;
						else if (Hammerduck(spawnee)) massmulti2 *= 1.25;
						else if (EvilDinahEE(spawnee)) massmulti2 *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("massmulti2: %.8f", massmulti2);
						
						// Health
						hpmulti2 = atkmulti2 * 0.667;
						if (KilletanteSoloist(spawnee)) hpmulti2 *= 1.25;
						else if (Killetante(spawnee)) hpmulti2 *= 1.125;
						else if (Centaurion(spawnee)) hpmulti2 *= 1.1875;
						else if (Hammerduck(spawnee)) hpmulti2 *= 1.125;
						else if (EvilDinahEE(spawnee)) hpmulti2 *= 1.25;
						if (dydudebug_monsterscaling) Console.Printf("hpmulti2: %.8f", hpmulti2);
					}
			
					// Final Calcs
					double tempfinmulti = 1.0;
					if (spdmulti || spdmulti2) 
					{
						tempfinmulti = 1.0;
						double SpeedErrorRange = (spdmulti * 0.125);
						spdmulti += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti);

						SpeedErrorRange = (spdmulti2 * 0.0625);
						spdmulti2 += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti2);

						double maxtempfin = 5.00 + (monsterrating * (1.25 * 0.500));
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						spawnee.Speed *= tempfinmulti;
						
						if (dydudebug_monsterscaling) Console.Printf("\c[lightblue]Speed: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.Speed, origSpd, spdmulti, spdmulti2);
					}
					if (atkmulti || atkmulti2) 
					{
						tempfinmulti = 1.0;
						double AttackErrorRange = (atkmulti * 0.125);
						atkmulti += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti);

						AttackErrorRange = (atkmulti2 * 0.0625);
						atkmulti2 += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti2);
						
						double maxtempfin = 15.0 + (monsterrating * 1.875);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;

						spawnee.DamageMultiply = tempfinmulti;
						if (dydudebug_monsterscaling) Console.Printf("\c[red]DamageMultiply: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageMultiply, origDmgMul, atkmulti, atkmulti2);
					}
					if (defmulti || defmulti2) 
					{
						tempfinmulti = 1.0;
						double DefenseErrorRange = (defmulti * 0.125);
						defmulti += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti);

						DefenseErrorRange = (defmulti2 * 0.0625);
						defmulti2 += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti2);
						double maxtempfin = (0.0667 - (monsterrating * 0.00334));
						if (tempfinmulti < maxtempfin) maxtempfin = maxtempfin;

						spawnee.DamageFactor = tempfinmulti;
						if (dydudebug_monsterscaling) Console.Printf("\c[olive]DamageFactor: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageFactor, origDmgFct, defmulti, defmulti2);
					}
					if (hpmulti || hpmulti2) 
					{
						tempfinmulti = 0;
						double MaxHPErrorRange = (hpmulti * 0.125);
						hpmulti += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti;

						MaxHPErrorRange = (hpmulti2 * 0.0625);
						hpmulti2 += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.SpawnHealth() * maxtempfin)) tempfinmulti = (spawnee.SpawnHealth() * maxtempfin);

						spawnee.health *= (1.0 + tempfinmulti);
						spawnee.Stamina = (spawnee.health - spawnee.SpawnHealth());
						if (dydudebug_monsterscaling) Console.Printf("\c[brick]Health: %d (stam: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.health, spawnee.Stamina, origHealth, hpmulti, hpmulti2);
					}
					if (massmulti || massmulti2) 
					{
						tempfinmulti = 0;
						double MassErrorRange = (massmulti * 0.125);
						massmulti += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti;

						MassErrorRange = (massmulti2 * 0.0625);
						massmulti2 += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.default.mass * maxtempfin)) tempfinmulti = (spawnee.default.mass * maxtempfin);

						spawnee.mass *= (1.0 + tempfinmulti);
						spawnee.Accuracy = (spawnee.mass - spawnee.default.mass);
						if (dydudebug_monsterscaling) Console.Printf("\c[brown]Mass: %d (Acc: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.Mass, spawnee.Accuracy, origMass, massmulti, massmulti2);
					}
				}
				
				if (LevelCheck)
				{
					if (random(1,100) <= random(11,13))
					{
						if (skill <= 0) LevelCheck *= frandompick(1.00,1.0078125,1.0078125,1.0078125,1.0078125,1.0078125,1.015625);
						if (skill == 1) LevelCheck *= frandompick(1.00,1.015625,1.015625,1.015625,1.015625,1.015625,1.03125);
						if (skill == 2) LevelCheck *= frandompick(1.00,1.03125,1.03125,1.03125,1.03125,1.03125,1.0625);
						if (skill == 3) LevelCheck *= frandompick(1.00,1.0625,1.0625,1.0625,1.0625,1.0625,1.125);
						if (skill >= 4) LevelCheck *= frandompick(1.00,1.125,1.125,1.125,1.125,1.125,1.25);
					}

					spawnee.A_SetInventory("MonsterLevel",LevelCheck);
					monsterlevel = spawnee.CountInv("MonsterLevel");
					if (dydudebug_monsterscaling) Console.Printf("Actor's Level: %d [%d], Actor's Rating: %d [%d]", LevelCheck, spawnee.CountInv("MonsterLevel"), monsterrating, spawnee.CountInv("MonsterRating"));
				}
				string montag = spawnee.GetTag();
				montag.AppendFormat(" \c[gold](L%d)\c-", monsterlevel);
				spawnee.SetTag(montag);
				
				EECreature spawnee2;
				spawnee2 = EECreature(spawnee);
				if (spawnee2 && spawnee2.user_rankpreset) 
				{
					spawnee2.A_SetInventory("MonsterRating",spawnee2.user_rankpreset);
					monsterrating = spawnee2.CountInv("MonsterRating");
					monsterrating = spawnee2.user_rankpreset;
				}
				if (monsterrating)
				{
					spawnee.A_SetInventory("MonsterRating",monsterrating);
					string montag = spawnee.GetTag();
					if (monsterrating == 8) montag.AppendFormat(" \c[purple]<SSS>\c-");
					else if (monsterrating == 7) montag.AppendFormat(" \c[fire]<SS>\c-");
					else if (monsterrating == 6) montag.AppendFormat(" \c[red][S]\c-");
					else if (monsterrating == 5) montag.AppendFormat(" \c[brick][A]\c-");
					else if (monsterrating == 4) montag.AppendFormat(" \c[orange][B]\c-");
					else if (monsterrating == 3) montag.AppendFormat(" \c[yellow][C]\c-");
					else if (monsterrating == 2) montag.AppendFormat(" \c[green][D]\c-");
					else if (monsterrating == 1) montag.AppendFormat(" \c[sapphire][E]\c-");
					spawnee.SetTag(montag);
				}
				
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials(spawnee,monsterlevel,monsterrating);
				if (!LD_nomonsters) A_LegendaryCheck(spawnee);
				if (!A_CheckUOHYM()) [spawnee, monsterlevel, monsterrating] = SetUpMiracles(spawnee,monsterlevel,monsterrating);
			}
		}
		EECreature spawnee2;
		spawnee2 = EECreature(spawnee);
		if (spawnee2) 
		{
			spawnee2.A_SetInventory("ActorMaxHP",spawnee2.user_MaxHP);
			if (spawnee2.isasummonedclone)
			{
				spawnee2.user_MaxHP *= 0.25;
				spawnee2.health *= 0.25;
			}
			
			spawnee2.user_MaxHP = spawnee2.SpawnHealth() + spawnee2.Stamina;
			double RangeVar;
			int Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPBuffRange = Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			RangeVar /= 3;
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPLowBuffRange = Temp;

			spawnee2.user_HPXDeathRange = (spawnee2.user_MaxHP * -1.0);
			if (spawnee2.GetClassName() == "BloodZombieNew") spawnee2.user_HPXDeathRange2 = (spawnee2.user_MaxHP * -0.5);
			
			if (skill <= 0) RangeVar = 0.080; // 8.0%
			if (skill == 1) RangeVar = 0.120; // 12.0%
			if (skill == 2) RangeVar = 0.160; // 16.0%
			if (skill == 3) RangeVar = 0.200; // 20.0%
			if (skill >= 4) RangeVar = 0.240; // 24.0%
			spawnee2.user_HPLowRange = (spawnee2.user_MaxHP * RangeVar);
			
			if (skill <= 0) RangeVar = 0.010; // 1.0%
			if (skill == 1) RangeVar = 0.015; // 1.5%
			if (skill == 2) RangeVar = 0.020; // 2.0%
			if (skill == 3) RangeVar = 0.025; // 2.5%
			if (skill >= 4) RangeVar = 0.030; // 3.0%
			spawnee2.user_HPCritRange = (spawnee2.user_MaxHP * RangeVar);
		}
	}
	
	int CountPlayers()
	{
		int count = 0, i;
	
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i]) count++;
		}
		return count;
	}
	
	void A_LegendaryCheck(actor spawnee)
	{
		class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
		string spawnname = spawnee.GetClassName();
		EECreature spawnee2;
		spawnee2 = EECreature(spawnee);
		
		bool NoLegendary;
		bool boo;
		bool LEGENDARIFY;
		bool LEGENDARIFYSuccess;
		bool BOSSTIEM;
		bool BOSSACTIVAAAATE;
		
		if (spawnee)
		{
			String nm = "LDLegendaryMonsterTracker";
			LDLPreload = nm;
			
			if (!(spawnname == "PeasantNew" ||
						spawnname == "Peasant1New" ||
						spawnname == "Peasant2New" ||
						spawnname == "Peasant3New" ||
						spawnname == "Peasant4New" ||
						spawnname == "Peasant5New" ||
						spawnname == "Peasant6New" ||
						spawnname == "Peasant7New" ||
						spawnname == "Peasant8New" ||
						spawnname == "Peasant9New" ||
						spawnname == "Peasant10New" ||
						spawnname == "Peasant11New" ||
						spawnname == "Peasant12New" ||
						spawnname == "Peasant13New" ||
						spawnname == "Peasant14New" ||
						spawnname == "Peasant15New" ||
						spawnname == "Peasant16New" ||
						spawnname == "Peasant17New" ||
						spawnname == "Peasant18New" ||
						spawnname == "Peasant19New" ||
						spawnname == "Peasant20New" ||
						spawnname == "Peasant21New" ||
						spawnname == "Peasant22New" ||
						spawnname == "BeggarNew" ||
						spawnname == "Beggar1New" ||
						spawnname == "Beggar2New" ||
						spawnname == "Beggar3New" ||
						spawnname == "Beggar4New" ||
						spawnname == "Beggar5New" ||
						spawnname == "MerchantNew" ||
						spawnname == "WeaponSmithNew" ||
						spawnname == "BarKeepNew" ||
						spawnname == "ArmorerNew" ||
						spawnname == "MedicNew"))
			{
				String nn;
				if (A_CheckUOHYM())
				{
					nn = "MirrorArchvile"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "ChildhoodNightmare"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "KevCerberus"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "Hellfish"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "SkinStealer"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "BabyFish"; if (spawnname == nn) 
					
					{
						if (random(1,2) == 1) NoLegendary = true;
														 else LEGENDARIFYSuccess = true;
					}
					nn = "BestBuddy"; if (spawnname == nn) NoLegendary = true;
					nn = "BestBuddyLayingDown"; if (spawnname == nn) NoLegendary = true;
				}
				
				if (!NoLegendary && !BOSSACTIVAAAATE && !LEGENDARIFYSuccess)
				{
					EECreature EEC;
					EEC = EECreature(spawnee);
					if (EEC && EEC.user_ldlautolegendary)
					{
						if (EEC.bBOSS) BOSSACTIVAAAATE = true;
						else LEGENDARIFYSuccess = true;
					}
				}
				
				int ldlchance = ((CountPlayers() * 4) + (LD_legendarychance * 5));
				if (exexLDL_newldlchances) // uses the chances from LDL 4.1
				{
					if (skill <= 0) ldlchance = (random(0,4) + (CountPlayers() * 4) + (LD_legendarychance * 5)); // Very Easy
					if (skill == 1) ldlchance = (random(0,6) + (CountPlayers() * 6) + (LD_legendarychance * 5)); // Easy
					if (skill == 2) ldlchance = (random(0,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(0,10) + (CountPlayers() * 10) + (LD_legendarychance * 5)); // Hard
					if (skill == 4) ldlchance = (random(0,20) + (CountPlayers() * 20) + (LD_legendarychance * 5)); // Very Hard
					if (skill == 5) ldlchance = (random(0,25) + (CountPlayers() * 25) + (LD_legendarychance * random(4,6))); // Extreme
					if (skill == 6) ldlchance = (random(0,30) + (CountPlayers() * 30) + (LD_legendarychance * random(4,6))); // Horrible
					if (skill == 7) ldlchance = (random(0,35) + (CountPlayers() * 35) + (LD_legendarychance * random(3,7))); // Impossible
					if (skill >= 8) ldlchance = (random(0,40) + (CountPlayers() * 40) + (LD_legendarychance * random(2,8))); // Omega
				}
				else // uses the older-skool chances of EE/Aetherius [which is based on LDL 3.0]
				{
					if (skill <= 0) ldlchance = (random(2,4) + (CountPlayers() * 4) + (LD_legendarychance * 3)); // Very Easy
					if (skill == 1) ldlchance = (random(3,6) + (CountPlayers() * 6) + (LD_legendarychance * 4)); // Easy
					if (skill == 2) ldlchance = (random(4,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(5,10) + (CountPlayers() * 10) + (LD_legendarychance * 6)); // Hard
					if (skill == 4) ldlchance = (random(7,14) + (CountPlayers() * 14) + (LD_legendarychance * 7)); // Very Hard
					if (skill == 5) ldlchance = (random(8,18) + (CountPlayers() * 18) + (LD_legendarychance * 8)); // Extreme
					if (skill == 6) ldlchance = (random(11,22) + (CountPlayers() * 22) + (LD_legendarychance * 9)); // Horrible
					if (skill == 7) ldlchance = (random(13,27) + (CountPlayers() * 27) + (LD_legendarychance * 10)); // Impossible
					if (skill >= 8) ldlchance = (random(16,32) + (CountPlayers() * 32) + (LD_legendarychance * 11)); // Omega
				}
				if (LD_legendarydebug) Console.Printf("[%s @ %p] chance: %d / 256", spawnname, spawnee, ldlchance);
				
				if (NoLegendary || LEGENDARIFYSuccess || BOSSACTIVAAAATE) { }
				else
				{
					if (LD_nomonsters == 1) 
					{
						if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nomonsters == 1", spawnname, spawnee);
						NoLegendary = true; // NoLegendary
					}
					else
					{
						if (LD_nobosses == 2) // BOSSCheckeroonie
						{
							if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nobosses == 2", spawnname, spawnee);
							if (spawnee.bBOSS) BOSSACTIVAAAATE = true; // BOSSACTIVAAAATE
														else LEGENDARIFY = true; // DifficultyChance
						}
						else
						{
							if (LD_legendarydebug) Console.Printf("\c[darkgreen][%s @ %p] LD_nobosses != 2", spawnname, spawnee);
							if (LD_diemode == 1) LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
															else LEGENDARIFY = true; // DifficultyChance
						}
					}
					
					// bool checks
					if (LEGENDARIFY)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] LEGENDARIFY", spawnname, spawnee);
						if (random(1,256) <= ldlchance) // LEGENDARIFY
						{
							if (spawnee.bSPECIAL) NoLegendary = true;
							else
							{
								if (LD_monstercheck == 0) // Makes it ignore the next check if disabled
								{
									int chance2 = 160;
									if (exexLDL_newldlchances) chance2 = 240;
									if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																					else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
								}
								else boo = true; // Added to stop stuff like legendary trees
							}
						}
					}
					if (BOSSTIEM)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] BOSSTIEM", spawnee.GetClassName(), spawnee);
						if (LD_nobosses == 1) NoLegendary = true; // NoLegendary
						else
						{
							int chance2 = 120;
							if (exexLDL_newldlchances) chance2 = 180;
							if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																			else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
						}
					}
					
					if (boo)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] boo", spawnee.GetClassName(), spawnee);
						if (spawnee.bCOUNTKILL || A_CheckUOHYM()) // Boo
						{
							if (spawnee.bBOSS) BOSSTIEM = true; // BOSSTIEM
							else
							{
								int chance2 = 160;
								if (exexLDL_newldlchances) chance2 = 240;
								if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																				else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
							}
						}
					}
				}
				
				// bool checks
				if (BOSSACTIVAAAATE)
				{
					if (LD_legendarydebug) Console.Printf("\c[sapphire][%s @ %p] BOSSACTIVAAAATE", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterBossMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION); 
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // BRING THE PAIN
					return;
				}
				else
				if (LEGENDARIFYSuccess)
				{
					if (LD_legendarydebug) Console.Printf("\c[gold][%s @ %p] LEGENDARIFYSuccess", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION); 
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // POWER UP TIME
					return;
				}
				else
				if (NoLegendary)
				{
					if (LD_legendarydebug) Console.Printf("\c[red][%s @ %p] NoLegendary", spawnee.GetClassName(), spawnee);
					return;
				}
			}
		}
	}
	
	void A_BloomMonsterNames(actor spawnee)
	{
		let globalvars = DDGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();

		//Console.Printf("@!# [%s]", spawnname);
		if (player.CountInv("PlayingBlooM") || Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1)
		{
			if (spawnname ~== "PlayerBurner") spawnee.SetTag("Being Lit On Fire");

			//Console.Printf("bn24 [%s]", spawnname);
			if (spawnname ~== "Zombieman_") spawnee.SetTag("Zombieman");
			if (spawnname ~== "ShotgunGuy_") spawnee.SetTag("Shotgun Guy");
			if (spawnname ~== "ChaingunGuy_") spawnee.SetTag("Chaingun Guy");
			if (spawnname ~== "DoomImp_") spawnee.SetTag("Imp");
			if (spawnname ~== "Demon_") spawnee.SetTag("Pinky Demon");
			if (spawnname ~== "Spectre_") spawnee.SetTag("Pinky Spectre");
			if (spawnname ~== "LostSoul_") spawnee.SetTag("Lost Soul");
			if (spawnname ~== "Cacodemon_") spawnee.SetTag("Cacodemon");
			if (spawnname ~== "PainElemental_") spawnee.SetTag("Pain Elemental");
			if (spawnname ~== "Arachnotron_") spawnee.SetTag("Arachnotron");
			if (spawnname ~== "Revenant_") spawnee.SetTag("Revenant");
			if (spawnname ~== "Fatso_") spawnee.SetTag("Mancubus");
			if (spawnname ~== "Archvile_") spawnee.SetTag("Archvile");
			if (spawnname ~== "HellKnight_") spawnee.SetTag("Hell Knight");
			if (spawnname ~== "BaronOfHell_") spawnee.SetTag("Baron of Hell");
			if (spawnname ~== "SpiderMastermind_") spawnee.SetTag("Spider Mastermind");
			if (spawnname ~== "Cyberdemon_") spawnee.SetTag("CyberDemon");
			
			if (spawnname ~== "BloodGargoyle") spawnee.SetTag("Flesh Gargoyle");
			if (spawnname ~== "BloatedButcher") spawnee.SetTag("Bloated Butcher");
			if (spawnname ~== "BrownCultist") spawnee.SetTag("Cabal Cultist");
			if (spawnname ~== "GreyCultist") spawnee.SetTag("Cabal Fanatic");
			if (spawnname ~== "GreenCultist") spawnee.SetTag("Cabal Ackolyte");
			if (spawnname ~== "BlueCultist") spawnee.SetTag("Cabal Zealot");
			if (spawnname ~== "RedCultist") spawnee.SetTag("Cabal Priest");
			if (spawnname ~== "BloodZombie") spawnee.SetTag("Axe Zombie");
			if (spawnname ~== "BuriedZombie") spawnee.SetTag("Axe Zombie");
			if (spawnname ~== "GillBeast") spawnee.SetTag("Gill Beast");
			if (spawnname ~== "HellFish") spawnee.SetTag("Bone Eel");
			if (spawnname ~== "ChokingHand") spawnee.SetTag("Hell Hand");
			if (spawnname ~== "Phantasm") spawnee.SetTag("Phantasm");
			if (spawnname ~== "HellHound") spawnee.SetTag("Hellhound");
			if (spawnname ~== "BloodBeast") spawnee.SetTag("Stone Beast");
			if (spawnname ~== "Cheogh") spawnee.SetTag("Cheogh");
			if (spawnname ~== "SpiderMother") spawnee.SetTag("Shial");
			if (spawnname ~== "Cerberus") spawnee.SetTag("Cerberus");
			if (spawnname ~== "Tchernobog") spawnee.SetTag("Tchernobog");
			if (spawnname ~== "ChrysalidPod") spawnee.SetTag("Chrysalid Pod");
			if (spawnname ~== "LavaPod") spawnee.SetTag("Magma Pod");
			if (spawnname ~== "BatFamiliar") spawnee.SetTag("Bat");
			if (spawnname ~== "BloodRat") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatBlack") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatGrey") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatWhite") spawnee.SetTag("Rat");
			if (spawnname ~== "NewSpiderRed") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "NewRedSpider") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "SpiderClimber") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "SpiderGreen") spawnee.SetTag("Spider [Green]");
			if (spawnname ~== "GreenSpider") spawnee.SetTag("Spider [Green]");
			if (spawnname ~== "YellowSpider") spawnee.SetTag("Spider [Yellow]");
			if (spawnname ~== "SpiderYellow") spawnee.SetTag("Spider [Yellow]");
			if (spawnname ~== "BlackSpider") spawnee.SetTag("Spider [Black]");
			if (spawnname ~== "SpiderBlack") spawnee.SetTag("Spider [Black]");
			if (spawnname ~== "BlueSpider") spawnee.SetTag("Spider [Blue]");
			if (spawnname ~== "SpiderBlue") spawnee.SetTag("Spider [Blue]");
			if (spawnname ~== "CyanSpider") spawnee.SetTag("Spider [Cyan]");
			if (spawnname ~== "SpiderCyan") spawnee.SetTag("Spider [Cyan]");
			if (spawnname ~== "PurpleSpider") spawnee.SetTag("Spider [Purple]");
			if (spawnname ~== "SpiderPurple") spawnee.SetTag("Spider [Purple]");
			if (spawnname ~== "WhiteSpider") spawnee.SetTag("Spider [White]");
			if (spawnname ~== "SpiderWhite") spawnee.SetTag("Spider [White]");
			
			A_BloomMonsterNames2(spawnee);

			//Console.Printf("bn24- [%s]", spawnee.GetTag());
		}
	}

	void A_BloomMonsterNames2(actor spawnee)
	{
		let globalvars = DDGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();

		//Console.Printf("@!# [%s]", spawnname);
		if (player.CountInv("PlayingBlooM") || Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1)
		{
			//Console.Printf("bn24 [%s]", spawnname);
			if (spawnname ~== "PossessedZombieMan") spawnee.SetTag("Possessed Zombieman");
			if (spawnname ~== "PossessedShotgunGuy") spawnee.SetTag("Possessed Shotgun Guy");
			if (spawnname ~== "PossessedChaingunGuy") spawnee.SetTag("Possessed Chaingun Guy");
			if (spawnname ~== "Cacoyle") spawnee.SetTag("Cacoyle");
			if (spawnname ~== "Cacoyle_Variant") spawnee.SetTag("Cacoyle");
			if (spawnname ~== "GargoylSoul") spawnee.SetTag("Gargoyle Soul");
			if (spawnname ~== "Elemental_Gargoyle") spawnee.SetTag("Gargoyle Elemental");
			if (spawnname ~== "Gargovile") spawnee.SetTag("Gargovile");
			if (spawnname ~== "Flying_Gargovile") spawnee.SetTag("Gargovile [Flying]");
			if (spawnname ~== "ArchZombie") spawnee.SetTag("ArchZombie");
			
			if (spawnname ~== "KingCacoyle") spawnee.SetTag("Cacoyle King");
			if (spawnname ~== "CyberCheogh") spawnee.SetTag("Cyber-Cheogh");
			if (spawnname ~== "Sloth") spawnee.SetTag("Sloth");
			if (spawnname ~== "Pinkberus") spawnee.SetTag("Pinkberus Demon");
			if (spawnname ~== "TchernoDemon") spawnee.SetTag("Tcherno-Demon");
			if (spawnname ~== "Cyberbog") spawnee.SetTag("Cyber-Bog");
			if (spawnname ~== "HandMastermind") spawnee.SetTag("Hell-Hand Mastermind");
			if (spawnname ~== "HandSlavedmind") spawnee.SetTag("Hand Slavedmind");
			if (spawnname ~== "Cerbcubus") spawnee.SetTag("Cerbcubus");
			if (spawnname ~== "ShialMastermind") spawnee.SetTag("Shial Mothermind");
			if (spawnname ~== "Eeldercubus") spawnee.SetTag("Eeldercubus");
			if (spawnname ~== "Jojo") spawnee.SetTag("Jojo the Idiot Circus Boy");
			if (spawnname ~== "HoundKnightOfHell") spawnee.SetTag("Hound-Knight of Hell");
			if (spawnname ~== "HoundBaronOfHell") spawnee.SetTag("Hound-Baron of Hell");
			if (spawnname ~== "Arachnoid") spawnee.SetTag("Arachnoid");
			if (spawnname ~== "Green_Arachnopod") spawnee.SetTag("Green Arachnopod");
			if (spawnname ~== "Magma_Arachnopod") spawnee.SetTag("Magma Arachnopod");
			if (spawnname ~== "Ice_Arachnopod") spawnee.SetTag("Glacial Arachnopod");
			if (spawnname ~== "RomeroTron") spawnee.SetTag("RomeroTron v0.616");
			if (spawnname ~== "HellButcher") spawnee.SetTag("Butcher of Hell");
			if (spawnname ~== "HellButcherAlt") spawnee.SetTag("Butcher of Hell");
			if (spawnname ~== "ZombaronOfHell") spawnee.SetTag("ZomBaron of Hell");
			if (spawnname ~== "AxeZombaronOfHell") spawnee.SetTag("ZomBaron of Hell [w/ axe]");
			if (spawnname ~== "BuriedZombaronOfHell") spawnee.SetTag("ZomBaron of Hell");
			if (spawnname ~== "BuriedAxeZombaronOfHell") spawnee.SetTag("ZomBaron of Hell [w/ axe]");
			if (spawnname ~== "WereWolfOfHell") spawnee.SetTag("Stone-Beast of Hell");
			if (spawnname ~== "WereWolfOfHellAlt") spawnee.SetTag("Stone-Beast of Hell");
			if (spawnname ~== "Cvltimp") spawnee.SetTag("Imp Cultist");
			if (spawnname ~== "CvltimpAlt") spawnee.SetTag("Imp Cultist");
			if (spawnname ~== "DeepOneShot") spawnee.SetTag("Deelp One [Shotgun]");
			if (spawnname ~== "DeepOneChain") spawnee.SetTag("Deelp One [Chaingun]");
			if (spawnname ~== "DeepOneTri") spawnee.SetTag("Deelp One [Trident]");
			if (spawnname ~== "DemonHound") spawnee.SetTag("Pinky Hellhound");
			if (spawnname ~== "DemonHoundAlt") spawnee.SetTag("Pinky Hellhound");
			if (spawnname ~== "SpectreHoundHound") spawnee.SetTag("Spectre Hellhound");
			if (spawnname ~== "SpectreHoundHoundAlt") spawnee.SetTag("Spectre Hellhound");
			if (spawnname ~== "GargoDemon") spawnee.SetTag("Gargo-Demon");
			if (spawnname ~== "PinkGargoyle") spawnee.SetTag("Pinky Gargoyle");
			if (spawnname ~== "Eelcubus") spawnee.SetTag("Eelcubus");
			if (spawnname ~== "Gillcubus") spawnee.SetTag("Gillcubus");
			if (spawnname ~== "Fanatic_Chaingunner") spawnee.SetTag("Chaingunner Fanatic");
			if (spawnname ~== "Fanatic_ChaingunnerAlt") spawnee.SetTag("Chaingunner Fanatic");
			if (spawnname ~== "Ghost_Revenant") spawnee.SetTag("Phantasmal Revenant");
			if (spawnname ~== "Ghost_Revenant_Alt") spawnee.SetTag("Phantasmal Revenant");
			if (spawnname ~== "Shielded_Ghost_Revenant") spawnee.SetTag("Phantasmal Revenant [Shielded]");
			if (spawnname ~== "Shielded_Ghost_Revenant_Alt") spawnee.SetTag("Phantasmal Revenant [Shielded]");
			if (spawnname ~== "GhostRevenantTerrain") spawnee.SetTag("Ghostly Revenant");
			if (spawnname ~== "GhostRevenantTerrainAlt") spawnee.SetTag("Ghostly Revenant");
			if (spawnname ~== "RevenantMoron") spawnee.SetTag("Revenant??");
			if (spawnname ~== "RevenantMoronAlt") spawnee.SetTag("Revenant??");
			if (spawnname ~== "RevenantMoronAlt2") spawnee.SetTag("Revenant??");
			if (spawnname ~== "Ghoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "RevenantMime") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "RevenantMimeAlt") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "RevenantMimeAlt2") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "Apocalyptic_NeoCvltist") spawnee.SetTag("NeoCultist");
			if (spawnname ~== "NeoCvltist") spawnee.SetTag("NeoCultist");
			if (spawnname ~== "PossessedApocalypticNeoCultist") spawnee.SetTag("NeoCultist [Possessed]");
			if (spawnname ~== "PossessedNeoCultist") spawnee.SetTag("NeoCultist [Possessed]");
			if (spawnname ~== "ShotgunMonk") spawnee.SetTag("Shotgunner Monk");
			if (spawnname ~== "RatDemon_Brown") spawnee.SetTag("Pinky Rat [Brown]");
			if (spawnname ~== "RatDemon_Grey") spawnee.SetTag("Pinky Rat [Grey]");
			if (spawnname ~== "RatDemon_Black") spawnee.SetTag("Pinky Rat [Black]");
			if (spawnname ~== "RatDemon_White") spawnee.SetTag("Pinky Rat [White]");
			if (spawnname ~== "ZombImp1") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp2") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp3") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp4") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp5") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp1") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp2") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp3") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp4") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp5") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ChtonBloom") spawnee.SetTag("Chthon");
			if (spawnname ~== "AberrationMoron") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron2") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron3") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron4") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron5") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "Moron") spawnee.SetTag("Civilian");
			//Console.Printf("bn24- [%s]", spawnee.GetTag());
		}
	}
	
	void A_SetMonsterProjNameTags(actor spawnee)
	{
		let globalvars = DDGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();
		
		A_BloomMonsterNames(spawnee);
		
		if (spawnname == "DoomImpBall") 
		{
			spawnee.SetTag("Imp Fireball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "CacodemonBall") 
		{
			spawnee.SetTag("Lightning Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "RevenantTracer") 
		{
			spawnee.SetTag("Tracer Missile");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArachnotronPlasma")
		{
			spawnee.SetTag("Plasma Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArchvileFire")
		{
			spawnee.SetTag("Vile FireHex");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "BaronBall")
		{
			spawnee.SetTag("HellNoble Plasma");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "FatShot")
		{
			spawnee.SetTag("Flamer Shot");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "Rocket")
		{
			spawnee.SetTag("Rocket");
			ProjSetSpeed(spawnee);
		}
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = DDGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int PLuck;
		if (MiscItem) PLuck = MiscItem.PlayerLUCK;
		EECreature EEC;
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		int user_base = 0;
		string usertype = "";
		double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		if (!EEBaseZSC(spawnee) && spawnee.bISMONSTER) 
		{
			spawnee.A_SetInventory("CompatVulnItem",1);
		}
		
		if (EECreature(spawnee))
		{
			EEC = EECreature(spawnee);
			if (EEC && EEC.bISMONSTER) EEC.ActorRandomBits = random();
		}
		
		if (HellCleric(spawnee))
		{
			spawnee.A_SpawnItemEx("HellClericDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
			spawnee.Destroy();
		}
		
		if (FlyingBalrog(spawnee))
		{
			spawnee.A_SpawnItemEx("FlyingBalrogDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
			spawnee.Destroy();
		}
		
		Inventory IsInv;
		IsInv = Inventory(spawnee);
		if (IsInv) 
		{
			if (!player.CountInv("PlayingBlooM"))
			{
				if (YellowCard(IsInv) || BlueCard(IsInv) || RedCard(IsInv)) IsInv.PickupSound = "getkeycard";
				if (YellowSkull(IsInv) || BlueSkull(IsInv) || RedSkull(IsInv)) IsInv.PickupSound = "getskullkey";
			}
			string nm, nn, no, np, nq, nr;
			nm = "KDIZDGreenKey";
			nn = "KDIZDSilverKey";
			no = "KDIZDOrangeKey";
			np = "KDIZDRedKey";
			nq = "KDIZDBlueKey";
			nr = "KDIZDYellowKey";
			if (IsInv.GetClassName() == nm ||
					IsInv.GetClassName() == nn || 
					IsInv.GetClassName() == no || 
					IsInv.GetClassName() == np || 
					IsInv.GetClassName() == nq || 
					IsInv.GetClassName() == nr) IsInv.PickupSound = "getkeycard";
		}
		
		if (spawnee && 
				!BowlingPin(spawnee) && 
				!DDMiniTank(spawnee) && 
				!DDHoganTarget(spawnee) && 
				!OldPipe(spawnee) && 
				!DDAFDNPC(spawnee) && 
				!Galgoyle_Hide(spawnee) && 
				!Centaurion_Hedge(spawnee) && 
				!GlobeMotherSpawner(spawnee) && 
				!Hammerduck_Hedge(spawnee) && 
				!Killetante_Hedge(spawnee) && 
				!EEProp(spawnee))
		{
			int basemonsterrating = spawnee.CountInv("MonsterRating");
			bool practicetarget;
			if (PracticeTarget(spawnee) || PracticeTarget2(spawnee)) practicetarget = true;

			EECreature NightmareCreature;
			NightmareCreature = EECreature(spawnee);
			if (NightmareCreature)
			{
				// Nightmare Monster Controls
				if (NightmareCentaurion(NightmareCreature) ||
						NightmareCentaurionSgt(NightmareCreature) ||
						NightmareBellefish_Fly(NightmareCreature) ||
						NightmareGalgoyle(NightmareCreature) ||
						NightmareReelHeel(NightmareCreature) ||
						NightmareVitriola(NightmareCreature) ||
						NightmareCremeDeBratte(NightmareCreature) ||
						NightmareCremeDeBratte_Torched(NightmareCreature) ||
						NightmareNurse(NightmareCreature) ||
						NightmareSpectre(NightmareCreature) ||
						NightmareBloodSpectre(NightmareCreature))
				{
					NightmareCreature.nightmarealphatimeroffset = random(-34,34);
					NightmareCreature.nightmarephaserand = random(0,6);
				}
			}
			
			// Tags
			double spdfactor;
			// DD
			if (level.GetChecksum() == 'bc4783b11a3fab06c42ced7a735e02e8' && level.levelnum == 1 && spawnname == "DinahPlayer")
			{
				spawnee.A_SetInventory("IsDynDuchess",1);
			}
			// AFD
			if (level.GetChecksum() == 'e7ece657340b2959a8de0c008c6ec868' && level.levelnum == 99 && spawnname == "DinahPlayer")
			{
				spawnee.A_SetInventory("IsAppetite",1);
				if (spawnee.CountInv("IsDynDuchess")) 
				{
					spawnee.A_SetInventory("IsDDContinuous",1);
					spawnee.A_SetInventory("IsDynDuchess",0);
				}
			}
			// CoS
			if (level.GetChecksum() == '269f69a0de6404c5d1c629f6ed779388' && level.levelnum == 41 && spawnname == "DinahPlayer")
			{
				spawnee.A_SetInventory("IsCarnOfSouls",1);
				if (spawnee.CountInv("IsAppetite"))
				{
					spawnee.A_SetInventory("IsDDContinuous",1);
					spawnee.A_SetInventory("IsAppetite",0);
				}
			}
			
			// Hell Ground
			if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && spawnname == "TechPillar") spawnee.SetTag("Netherhell Imp");

			// BlooM
			if (Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1 && spawnname == "DinahPlayer") spawnee.A_SetInventory("PlayingBlooM",1);
			
			// StrangeAeons
			if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1 && spawnname == "DinahPlayer") spawnee.A_SetInventory("PlayingStrangeAeons",1);

			// SiGiL
			if (level.GetChecksum() == '61b546375618d619ab39eafd28f03c87' ||
					level.GetChecksum() == '0742076f6c57ed4d1174ebf8f0933b76' ||
					level.GetChecksum() == '3417a4859c8fece797c9daa715d14d63' ||
					level.GetChecksum() == 'aebf219bf02aaec549ba3ef8cb3f715b' ||
					level.GetChecksum() == '4e5d482364f6f787cb8efc17bde5d64d' ||
					level.GetChecksum() == '8e3fe80ae1440b38747853dab05dd62d' ||
					level.GetChecksum() == '8c35efba700537035c84f5e1ad35c064' ||
					level.GetChecksum() == '6ead80da1f30b4b3546fa294eef9f87c' ||
					level.GetChecksum() == '2a6b4d277f526bfb3adb122609feead7')
			{
				if (EvilEye(spawnee)) spawnee.bSOLID = false;
			}
			
			A_SetMonsterProjNameTags(spawnee);
			
			if (EEProjectile(spawnee)) ProjSetSpeed(spawnee);
			else if (spawnee.bMISSILE) ProjSetSpeed(spawnee);
			
			// Changes
			int basehealth = spawnee.SpawnHealth();
			double healthmulfactor = 0.01;
			
			nm = "Balloon_Red"; extracheck = nm;
			nn = "Balloon_Red2"; extracheck2 = nn;
			if (spawnname == extracheck || spawnname == extracheck2)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Green";
					if (user_base == 3) usertype = "Balloon_Yellow";
				}
			}
			nm = "Balloon"; extracheck = nm;
			nn = "BallTarg"; extracheck2 = nn;
			if (spawnname == extracheck || spawnname == extracheck2)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallGreen";
					if (user_base == 2) usertype = "BallYel";
				}
			}

			nm = "Balloon_Yellow"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Green";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			nm = "BallYel"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallGreen";
					if (user_base == 2) usertype = "Balloon";
				}
			}

			nm = "Balloon_Green"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Yellow";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			nm = "BallGreen"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallYel";
					if (user_base == 2) usertype = "Balloon";
				}
			}

			nm = "Balloon_Blue"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Green";
					if (user_base == 2) usertype = "Balloon_Yellow";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			if (user_base)
			{
				//Console.Printf("%s [2]", spawnname);
				spawnee.A_SpawnItemEx(usertype,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
				spawnee.Destroy();
			}
			
			bool specialenemy = false;
			bool ispeasant = false;
			// Strife Peasants
			if (Peasant(spawnee)) ispeasant = true;

			// Eviternity's Archangelus Boss
			nm = "ArchangelusA"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.0075;
				if (Skill == 1) healthmulfactor = 0.00875;
				if (Skill == 2) healthmulfactor = 0.01;
				if (Skill == 3) healthmulfactor = 0.01125;
				if (Skill >= 4) healthmulfactor = 0.0125;
				basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 12;
				if (Skill == 1) basehealth *= 14;
				if (Skill == 2) basehealth *= 16;
				if (Skill == 3) basehealth *= 18;
				if (Skill >= 4) basehealth *= 20;
				spawnee.health *= basehealth;
			}
			nn = "ArchangelusB"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.01125;
				if (Skill == 1) healthmulfactor = 0.013125;
				if (Skill == 2) healthmulfactor = 0.015;
				if (Skill == 3) healthmulfactor = 0.016875;
				if (Skill >= 4) healthmulfactor = 0.01875;
				basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 12;
				if (Skill == 1) basehealth *= 14;
				if (Skill == 2) basehealth *= 16;
				if (Skill == 3) basehealth *= 18;
				if (Skill >= 4) basehealth *= 20;
				spawnee.health = basehealth;
			}
			// TUTNT's Source Boss
			nm = "TheSource"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.005625;
				if (Skill == 1) healthmulfactor = 0.0065625;
				if (Skill == 2) healthmulfactor = 0.0075;
				if (Skill == 3) healthmulfactor = 0.0084375;
				if (Skill >= 4) healthmulfactor = 0.009375;
				basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 6;
				if (Skill == 1) basehealth *= 7;
				if (Skill == 2) basehealth *= 8;
				if (Skill == 3) basehealth *= 9;
				if (Skill >= 4) basehealth *= 10;
				spawnee.health = basehealth;
				specialenemy = true;
			}
			
			if (EECardSummon(spawnee)) specialenemy = true;
			// Keeps the Romero Heads in AUGER ZENITH, which can't be attacked directly by the player, from being able to gain extra HP/Stats so they can be killed properly on MAP21
			if (player.CountInv("PlayingAugerZenith") && (BossBrainNew(spawnee))) specialenemy = true;
			// Keeps the Romero Heads in Hell Ground MAP07 from being too strong. :P
			if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && (BossBrainNew(spawnee))) specialenemy = true;
			
			// Going Down's MAP29 "Boss"
			if (player.CountInv("PlayingGoingDown") && (WolfensteinSS(spawnee) || WolfensteinSSNew(spawnee)))
			{
				spawnee.health = 12000;
			}
			
			if (Revenant(spawnee) || RevenantNew(spawnee)) spawnee.ProjectilePassHeight = 84;
			nm = "Revenant_"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "GhostRevenantTerrain"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "GhostRevenantTerrainAlt"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "RevenantMoron"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "RevenantMoronAlt"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "RevenantMime"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "RevenantMimeAlt"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "RevenantMimeAlt2"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 84;
			nm = "HandMastermind"; if (spawnee.GetClassName() == nm) spawnee.ProjectilePassHeight = 128;

			if (Demon1(spawnee) || Demon2(spawnee)) spawnee.ProjectilePassHeight = 104;

			if (ArchvileFire(spawnee))
			{
				spawnee.A_SetRenderStyle(frandom(0.625,0.875),STYLE_Add);
			}

			if (DDOrigCreature(spawnee))
			{
				if (ddafd_actorhealthlevel)
				{
					if (A_CheckDDGame())
					{
						if (skill <= 1) spawnee.health *= 0.5;
					}
				}

				if (!(DDOrigBoss(spawnee) || SugarSnake(spawnee) || MiniSugarSnake(spawnee)))
				{
					if (A_CheckDDGame()) spawnee.bLOOKALLAROUND = false;
				}
			}
			
			// Monster "Scaling"
			MonsterStatsSet(spawnee, basemonsterrating, practicetarget, specialenemy, ispeasant);
			
			if (CroquetBall(spawnee) && (spawnee.target && HammerDuck(spawnee.target)))
			{
				if (exex_monsterlevelenabledflags)
				{
					if (spawnee.target.CountInv("MonsterLevel") > 90) spawnee.Speed *= 2.0;
					else if (spawnee.target.CountInv("MonsterLevel") > 75) spawnee.Speed *= 1.8334;
					else if (spawnee.target.CountInv("MonsterLevel") > 60) spawnee.Speed *= 1.6667;
					else if (spawnee.target.CountInv("MonsterLevel") > 45) spawnee.Speed *= 1.5000;
					else if (spawnee.target.CountInv("MonsterLevel") > 30) spawnee.Speed *= 1.3334;
					else if (spawnee.target.CountInv("MonsterLevel") > 15) spawnee.Speed *= 1.1667;
					
					spawnee.Speed *= (1.0 + (spawnee.target.CountInv("MonsterRating") * 0.0625));
				}
			}
		}
		
		Super.WorldThingSpawned(e);
		
		if (A_CheckUOHYM())
		{
			if (level.mapname == "MAP01" ||
					level.mapname == "20PAM" ||
					level.mapname == "MAP02")
			{
				// Billboarder
				// Written by Nash Muhandes
				bool isProjectile = e.Thing.bMissile;
				bool isPuff = (e.Thing is "BulletPuff" || e.Thing is "StrifePuff");
				bool isBlood = (e.Thing is "Blood");
				bool isSmokeTrail = (e.Thing is "RocketSmokeTrail" || e.Thing is "GrenadeSmokeTrail" || e.Thing is "RocketTrail");
				if (isProjectile || isPuff || isBlood || isSmokeTrail)
				{
					e.Thing.bForceXYBillboard = true;
				}
			}
		}
	}

	override void WorldThingRevived(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = DDGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			actor spawnee = e.thing;
			string spawnname = spawnee.GetClassName();
			int TruePlayerLevel = 0;
			if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			
			if (spawnee)
			{
				DedMonsterFlag dedcheckitem;
				dedcheckitem = DedMonsterFlag(spawnee.FindInventory("DedMonsterFlag"));
				if (dedcheckitem)
				{
					spawnee.A_SetRenderStyle(dedcheckitem.ownerorigalpha,dedcheckitem.ownerorigrender);
					dedcheckitem.Destroy();
				}
				
				nm = "ClayDevilNew"; extracheck = nm;
				if (spawnname == extracheck)
				{
					spawnee.speed = spawnee.default.speed;
					spawnee.DamageMultiply = spawnee.default.DamageMultiply;
					spawnee.DamageFactor = spawnee.default.DamageFactor;
					spawnee.health = spawnee.SpawnHealth();
					spawnee.Mass = spawnee.default.mass;
					spawnee.SetTag(spawnee.default.GetTag());
					MonsterStatsSet(spawnee, 0, false, false, false);
				}
				
				if (spawnee)
				{
					if (dydudebug_ressurrectdisplays) Console.Printf("Res: Max Health - %d (%d + %d)", (spawnee.SpawnHealth() + spawnee.Stamina), spawnee.SpawnHealth(), spawnee.Stamina); 
					if (spawnee.bISMONSTER && spawnee.Stamina > 0)
					{
						ForsakenResBuff ForsakenRes;
						ForsakenRes = ForsakenResBuff(spawnee.FindInventory("ForsakenResBuff"));
						if (ForsakenRes) spawnee.A_SetInventory("JustRevivedByForsaken",1);
												else spawnee.A_SetInventory("JustRevived",1);
					}
				}
			}
		}
		Super.WorldThingRevived(e);
	}

	override void WorldThingDamaged(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			if (dydudebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			let globalvars = DDGlobalVariables.Get();
			int blundebuff = 0;
			int scramblerdebuff = 0;
			actor victim = e.Thing;
			actor source = e.DamageSource;
			actor inflicter = e.inflictor;
			int dmg = e.damage;
			int initdmg = e.damage;
			string mod = e.damagetype;
			int flags = e.DamageFlags;
			int PLuck;
			int TrueLuck;
			int TruePlayerLevel = 0;
			bool isCCardsIllusion = false;
			if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

			if (dydudebug_worlddamaged) 
			{
				string debugmsg = "WorldThingDamaged";
				debugmsg.AppendFormat(" [gametic: %d]:", gametic);
				if (victim) debugmsg.AppendFormat(" %p [%s],", victim, victim.GetClassName());
				if (source) debugmsg.AppendFormat(" source: %p [%s]", source, source.GetClassName()); else debugmsg.AppendFormat("\c[red] no source\c-");
				if (inflicter) debugmsg.AppendFormat(" inflicter: %p [%s]", inflicter, inflicter.GetClassName()); else debugmsg.AppendFormat("\c[orange] no inflicter\c-");
				debugmsg.AppendFormat(", damage: %d, damagetype: %s, flags: %d", dmg, mod, flags);
				Console.Printf(debugmsg);
			}
			
			if (MiscItem) 
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= exex_pluckfactor;
			}
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			if (victim)
			{
				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
						
				if (dydudebug_hitsounds) Console.Printf("hitsounds (victim check)");
				int oldhealth = victim.health;

				string victname = victim.GetTag();
				string atkrname = "(?)";
				int user_type;
				string vict = "NONE";
				string infl = "NONE";
				string sour = "NONE";
				int landdamagebonus;

				if (victim) vict = victim.GetClassName();
				if (inflicter) infl = inflicter.GetClassName();
				if (source) sour = source.GetClassName();

				bool showdmglog;
				bool practicetarget;
				
				int specialtype;
				nm = "CCardGhostMarker";
				if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker";
				if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker";
				if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne";
				if (victim.GetClassName() == nm) specialtype += 8;
				if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1)
				{
					nm = "PurpleTentacle";
					if (victim.GetClassName() == nm) specialtype += 8;
					nm = "Skeleton";
					if (victim.GetClassName() == nm) specialtype += 8;
				}
				if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1)
				{
					nm = "Mite";
					if (victim.GetClassName() == nm) specialtype += 16;
					nm = "SkinStealer";
					if (victim.GetClassName() == nm) specialtype += 32;
					if (victim.bISMONSTER) specialtype += 64;
				}
				if (dydudebug_worlddamaged) Console.Printf("[%s] SpecialType [WorldDamaged]: %d", vict, specialtype);
				
				if (victim.bCOUNTKILL || specialtype) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) 
				{
					practicetarget = true;
					showdmglog = true;
				}
				if (BossBrainNew(victim)) showdmglog = true;
				if (DDPlayerPawn(victim) || BowlingPin(victim) || OldPipe(victim)) showdmglog = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (mod == 'GrowingPains') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (showdmglog)
				{
					//Console.Printf("showdmglog");

					if (dydudebug_worlddamaged) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					
					if (victim.health > 0 && victim.bISMONSTER)
					{
						if (source && DDPlayerPawn(source)) //
						{
							let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
							if (MiscItem) landdamagebonus = MiscItem.landdmgbonus;
							if (dydudebug_worlddamaged) Console.Printf("landdamagebonus: %d", landdamagebonus);
						}
						if (!practicetarget)
						{
							if (infl == "PlayerWhistle")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(13.75,15,16.25);
								force *= 0.25;
								if (inflicter && (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD"))) force *= frandompick(1.5,2,2.5);
								
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-3,-1.5,-1.5,0,0,0,0,0,1.5,1.5,3)));
								}
							}
							if (infl == "UppercutPuff")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.25;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD")) force *= frandompick(1.125,1.25,1.375);
									if (source.CountInv("DinahTrueIPState")) force *= 12.5;
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-6,-3,-3,0,0,0,0,0,3,3,6)));
								}
							}
							if (KickPuff(inflicter) || KickPuffNoThrust(inflicter) || BadKickPuff(inflicter))
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.05;
								if (random(1,2) <= 1) force *= -1;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD")) force *= frandompick(1.125,1.25,1.375);
									if (source.CountInv("DinahTrueIPState")) force *= 12.5;
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.Thrust(force, (ang + (frandompick(-6,-3,-3,0,0,0,0,0,3,3,6) * 0.25)));
								}
							}
						}
						
						if (!victim.bINVULNERABLE || !practicetarget || !isCCardsIllusion)
						{
							// Scrambler = Inflicts confusion/fear on enemies occasionally, causing hestitation in combat
							if (PanPuff(inflicter) || PanPuffIP(inflicter))
							{
								if (!victim.bNOFEAR)
								{
									double basedebuffchance = 25.0;
									int basepoint = 15;
									if (MiscItem)
									{
										if (TruePlayerLevel >= (basepoint * 0.5)) basedebuffchance = 25.625;
										if (TruePlayerLevel >= (basepoint * 1.0)) basedebuffchance = 26.25;
										if (TruePlayerLevel >= (basepoint * 2.0)) basedebuffchance = 27.5;
										if (TruePlayerLevel >= (basepoint * 3.0)) basedebuffchance = 28.75;
										if (TruePlayerLevel >= (basepoint * 4.0)) basedebuffchance = 30.0;
										if (TruePlayerLevel >= (basepoint * 5.0)) basedebuffchance = 31.25;
										if (TruePlayerLevel >= (basepoint * 6.0)) basedebuffchance = 32.5;
										if (TruePlayerLevel >= (basepoint * 7.0)) basedebuffchance = 33.75;
										if (TruePlayerLevel >= (basepoint * 8.0)) basedebuffchance = 35.0;
										if (TruePlayerLevel >= (basepoint * 9.0)) basedebuffchance = 37.5;
									}
									if (PLuck) 
									{
										if (MiscItem)
										{
											if (TruePlayerLevel >= 0) basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
											else if (TruePlayerLevel >= (basepoint * 3.0)) basedebuffchance += (TrueLuck * frandompick(0,0,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
											else if (TruePlayerLevel >= (basepoint * 6.0)) basedebuffchance += (TrueLuck * frandompick(0,0.25,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
											else if (TruePlayerLevel >= (basepoint * 9.0)) basedebuffchance += (TrueLuck * frandompick(0.25,0.25,0.25,0.25,0.5,0.5,0.5,1.0,2.0));
										}
										else basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
									}
									if (HellCleric(victim) || HellClericDVDS(victim) || HellClericSpectral(victim)) basedebuffchance *= 2.5;
									if (Teacher_VokterClone(victim))
									{
										if (victim.CountInv("VokterCloneShield") || victim.CountInv("VokterCloneShield2"))
										{
											basedebuffchance = 0;
										}
										else if (victim.CountInv("VokterCloneStun"))
										{
											basedebuffchance *= 2;
										}
										else
										{
											basedebuffchance *= frandompick(0.625,0.75,0.875);
										}
									}
									if (victim.bBOSS) basedebuffchance *= 0.25;
									if (CyberDemon(victim) || CyberDemonNew(victim)) basedebuffchance *= 0.5;
									if (HellKnight(victim) || HellKnightNew(victim) || BaronOfHell(victim) || BaronOfHellNew(victim) || Belphegor(victim) || BruiserDemon(victim) || Cybruiser(victim) || ArchonOfHell(victim) || PyroDemon(victim)) basedebuffchance *= 0.75;
									if (Cacodemon(victim) || CacodemonNew(victim) || PainElemental(victim) || PainElementalNew(victim)) basedebuffchance *= 0.8;
									if (HadesElemental(victim)) basedebuffchance *= 0.667;
									if (HadesOverlord(victim)) basedebuffchance *= 0.667;
									if (Demon(victim) || DemonNew(victim) || Spectre(victim) || SpectreNew(victim)) basedebuffchance *= 0.8888888888888889;
									if (Arachnotron(victim) || ArachnotronNew(victim) || RailArachnotron(victim) || FusionArachnotron(victim) || ArachnotronMK2(victim) || Fatso(victim) || MancubusNew(victim) || Hectebus(victim) || Daedabus(victim)) basedebuffchance *= 1.3334;
									if (Archvile(victim) || ArchvileNew(victim) || Revenant(victim) || RevenantNew(victim)) basedebuffchance *= 1.5;
									if (SpiderMastermind(victim) || SpiderMastermindNew(victim)) basedebuffchance *= 3;
									if (LostSoul(victim) || LostSoulNew(victim)) basedebuffchance *= 10;
									if (landdamagebonus == 1) basedebuffchance *= 1.142857142857143;
									if (landdamagebonus == 2) basedebuffchance *= 1.428571428571429;
									if (landdamagebonus == 3) basedebuffchance *= 2.105263157894737;
									if (landdamagebonus == 4) basedebuffchance *= 5;
									
									double buffalterchance = 1.0;
									if (source.CountInv("PowerEggBuff") || source.CountInv("PowerEggBuff2")) buffalterchance += (0.16 + (MiscItem.UsedEggHeal * 0.0016));
									if (source.CountInv("PowerFruitBuff") || source.CountInv("PowerFruitBuff2")) buffalterchance += 0.08;
									if (source.CountInv("PowerRoastBuff")) buffalterchance += 0.16;
									if (source.CountInv("PowerMealBuff") || source.CountInv("PowerMealBuff2")) buffalterchance += 0.16;
									if (source.CountInv("PowerMeal2Buff") || source.CountInv("PowerMeal2Buff2")) buffalterchance += 0.16;
									
									if (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD"))
									{
										if (victim.bBOSS) buffalterchance *= 2.5;
																else buffalterchance *= 10;
									}
									basedebuffchance *= buffalterchance;
									if (PanPuffIP(inflicter)) basedebuffchance *= 5;
									if (basedebuffchance < 1) basedebuffchance = 1;
									if (dydudebug_worlddamaged) Console.Printf("basedebuffchance: %.2f / 100", basedebuffchance);
									if (frandom(0.1,100.0) <= basedebuffchance)
									{
										if (ddafd_disablescramblerdebuff && (source.CountInv("IsDynDuchess") || source.CountInv("IsAppetite") || source.CountInv("IsCarnOfSouls") || source.CountInv("IsWeddingCake")))
										{
										}
										else
										{
											victim.A_SetInventory("ScramblerConfusion",1);
										}
									}
								}
							}

							// Blunderaxe = Tears off Armor Scraps at times, and occasionally inflicts a "Helm Splitter" style defense debuff
							if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter))
							{
								double rand = 2.0;
								int baseval = randompick(5,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,9);
								if (!practicetarget)
								{
									if (PLuck) baseval -= (TrueLuck * 0.067);
									if (dydudebug_worlddamaged) Console.Printf("%d", baseval);
									string armortype = "ArmorScrap";
									if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
									if (random(1,(baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
									if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
									if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									if (BlunderPuffIP(inflicter))
									{
										if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
										if (random(1,(baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
										if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										if (random(1,4096) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
										if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
								}
								
								double basedebuffchance = 25.0;
								if (MiscItem)
								{
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 0.5)) basedebuffchance = 25.625;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 1.0)) basedebuffchance = 26.25;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 2.0)) basedebuffchance = 27.5;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 3.0)) basedebuffchance = 28.75;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 4.0)) basedebuffchance = 30.0;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 5.0)) basedebuffchance = 31.25;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 6.0)) basedebuffchance = 32.5;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 7.0)) basedebuffchance = 33.75;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 8.0)) basedebuffchance = 35.0;
									if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 9.0)) basedebuffchance = 37.5;
								}
								if (PLuck) 
								{
									if (MiscItem)
									{
										if (TruePlayerLevel >= 0) basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 3.0)) basedebuffchance += (TrueLuck * frandompick(0,0,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 6.0)) basedebuffchance += (TrueLuck * frandompick(0,0.25,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (TruePlayerLevel >= (MiscItem.axecombolvlrequirement * 9.0)) basedebuffchance += (TrueLuck * frandompick(0.25,0.25,0.25,0.25,0.5,0.5,0.5,1.0,2.0));
									}
									else basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
								}
								
								if (CyberDemon(victim) || CyberDemonNew(victim)) basedebuffchance *= 3;
								if (HellKnight(victim) || HellKnightNew(victim) || BaronOfHell(victim) || BaronOfHellNew(victim) || Belphegor(victim) || BruiserDemon(victim) || Cybruiser(victim) || ArchonOfHell(victim) || PyroDemon(victim)) basedebuffchance *= 2;
								if (Cacodemon(victim) || CacodemonNew(victim) || PainElemental(victim) || PainElementalNew(victim)) basedebuffchance *= 1.6;
								if (HadesElemental(victim)) basedebuffchance *= 1.334;
								if (HadesOverlord(victim)) basedebuffchance *= 1.334;
								if (Demon(victim) || DemonNew(victim) || Spectre(victim) || SpectreNew(victim)) basedebuffchance *= 1.333333333333333;
								if (Arachnotron(victim) || ArachnotronNew(victim) || RailArachnotron(victim) || FusionArachnotron(victim) || ArachnotronMK2(victim) || Fatso(victim) || MancubusNew(victim) || Hectebus(victim) || Daedabus(victim)) basedebuffchance *= 4;
								if (Archvile(victim) || ArchvileNew(victim) || Revenant(victim) || RevenantNew(victim)) basedebuffchance *= 0.75;
								if (SpiderMastermind(victim) || SpiderMastermindNew(victim)) basedebuffchance *= 0.5;
								if (LostSoul(victim) || LostSoulNew(victim)) basedebuffchance *= 0.1;
								if (victim.bBOSS) basedebuffchance *= 0.25;
								if (HellCleric(victim) || HellClericDVDS(victim) || HellClericSpectral(victim)) basedebuffchance *= 2.5;
								if (Teacher_VokterClone(victim))
								{
									if (victim.CountInv("VokterCloneShield") || victim.CountInv("VokterCloneShield2"))
									{
										basedebuffchance = 0;
									}
									else if (victim.CountInv("VokterCloneStun"))
									{
										basedebuffchance *= 2;
									}
									else
									{
										basedebuffchance *= frandompick(0.625,0.75,0.875);
									}
								}
								if (landdamagebonus == 1) basedebuffchance *= 1.142857142857143;
								if (landdamagebonus == 2) basedebuffchance *= 1.428571428571429;
								if (landdamagebonus == 3) basedebuffchance *= 2.105263157894737;
								if (landdamagebonus == 4) basedebuffchance *= 5;
								
								double buffalterchance = 1.0;
								if (source.CountInv("PowerEggBuff") || source.CountInv("PowerEggBuff2")) buffalterchance += (0.32 + (MiscItem.UsedEggHeal * 0.0032));
								if (source.CountInv("PowerFruitBuff") || source.CountInv("PowerFruitBuff2")) buffalterchance += 0.16;
								if (source.CountInv("PowerRoastBuff")) buffalterchance += 0.32;
								if (source.CountInv("PowerMealBuff") || source.CountInv("PowerMealBuff2")) buffalterchance += 0.64;
								if (source.CountInv("PowerMeal2Buff") || source.CountInv("PowerMeal2Buff2")) buffalterchance += 0.64;
								
								if (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD"))
								{
									if (victim.bBOSS) buffalterchance *= 2.5;
															 else buffalterchance *= 10;
								}
								basedebuffchance *= buffalterchance;
								if (BlunderPuffIP(inflicter)) basedebuffchance *= 5;
								if (basedebuffchance < 1) basedebuffchance = 1;
								if (dydudebug_worlddamaged) Console.Printf("basedebuffchance: %.2f / 100", basedebuffchance);
								if (frandom(0.1,100.0) <= basedebuffchance)
								{
									if (ddafd_disableaxedebuff && (source.CountInv("IsDynDuchess") || source.CountInv("IsAppetite") || source.CountInv("IsCarnOfSouls") || source.CountInv("IsWeddingCake")))
									{
									}
									else
									if (!dydudebug_practicetargetsdebuff && (PracticeTarget(victim) || PracticeTarget2(victim)))
									{
									}
									else
									{
										if (victim.CountInv("BlunderHelmSplitter3"))
										{
											blundebuff = 4;
										}
										else
										{
											if (victim.CountInv("BlunderHelmSplitter2"))
											{
												blundebuff = 3;
												victim.A_SetInventory("BlunderHelmSplitter3",1);
												victim.A_SetInventory("BlunderHelmSplitter2",0);
												victim.A_SetInventory("BlunderHelmSplitter",0);
											}
											else
											{
												if (victim.CountInv("BlunderHelmSplitter"))
												{
													victim.A_SetInventory("BlunderHelmSplitter3",0);
													victim.A_SetInventory("BlunderHelmSplitter2",1);
													victim.A_SetInventory("BlunderHelmSplitter",0);
													blundebuff = 2;
												}
												else
												{
													victim.A_SetInventory("BlunderHelmSplitter3",0);
													victim.A_SetInventory("BlunderHelmSplitter2",0);
													victim.A_SetInventory("BlunderHelmSplitter",1);
													blundebuff = 1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				
				if (victim.health <= 0 && mod == 'Ice') victim.bCANTSEEK = true;
				
				string attkernam;
				if (!victim.GetTag()) victname = vict;
				if (source)
				{
					if (source.GetTag()) attkernam = source.GetTag();
													else attkernam = source.GetClassName();
				}
				if (inflicter)
				{
					if (inflicter.GetTag()) atkrname = inflicter.GetTag();
														 else atkrname = inflicter.GetClassName();
				}
				string comblog = "";
				comblog.AppendFormat("\c[red]*\c- ");
				showdmglog = false;
				if (victim.bCOUNTKILL || specialtype || DDAFDNPC(victim)) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) showdmglog = true;
				if (BossBrainNew(victim)) showdmglog = true;
				if (EEProp(victim)) showdmglog = false;
				if (DDPlayerPawn(victim)) showdmglog = false;
				if (BowlingPin(victim) || 
						DDHoganTarget(victim) || 
						Galgoyle_Hide(victim) || 
						GlobeMotherSpawner(victim) || 
						Centaurion_Hedge(victim) || 
						Hammerduck_Hedge(victim) || 
						Killetante_Hedge(victim) || 
						OldPipe(victim)) showdmglog = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (mod == 'GrowingPains') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (exex_combatlog && showdmglog)
				{
					//Console.Printf("showdmglog 2");
					if (mod == 'NONE') mod = 'Typeless';
					if (dmg)
					{
						comblog.AppendFormat("\c[brick]%d\c-", dmg);
						if (victim.CountInv("JustSurprised") > 0) comblog.AppendFormat(" \c[sapphire]SURPRISE\c-");
						if (victim.CountInv("TookCriticalHit") > 0) comblog.AppendFormat(" \c[orange]CRITICAL\c-");
						comblog.AppendFormat(" damage dealt to \c[red]%s\c- by", victname);
						if (source && !inflicter) comblog.AppendFormat(" \c[purple]%s\c-", attkernam);
						else if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's\c-", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
						if (flags & DMG_EXPLOSION) comblog.AppendFormat(" \c[brick][AOE]\c-");
						if (victim.health <= 0) 
						{
							if (DDAFDNPC(victim) && !(VacPuff(inflicter) || VacPuffIP(inflicter))) comblog.AppendFormat(" \c[orange]%s has been knocked senseless!\c-", victname);
							else if (Delila_Boss(victim)) comblog.AppendFormat(" \c[orange]%s has been knocked senseless!\c-", victname);
							else comblog.AppendFormat(" \c[brick]%s dies!\c-", victname);
						}
					}
					else
					{
						comblog.AppendFormat("\c[red]%s\c- took \c[purple]no damage\c- from", victname);
						if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
					}
					if (dydudebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
					
					Console.Printf(comblog);
					if (blundebuff && (victim.health > 0))
					{
						if (blundebuff >= 4) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense has already been dropped as much as it can!", victname);
						if (blundebuff == 3) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by yet another 30%!", victname);
						if (blundebuff == 2) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by another 30%!", victname);
						if (blundebuff == 1) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by 30%!", victname);
						if (blundebuff <= 3 && sour == "DinahPlayer") 
						{
							if (MiscItem && MiscItem.CanTalkUnderwater)
							{
								double maskpitch = 1.00;
								if (source.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
								source.A_StopSound(CHAN_VOICE);
								source.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
							}
						}
					}
				}
				
				if (dydudebug_hitsounds) Console.Printf("hitsounds");
				bool makesound;
				string playedsound = "";
				PlayerPawn playpawn;
				Actor othermon;
				int playweaksound = 0;
				//*******************
				//* Weakness Sounds *
				//*******************
				int tempdmgval = 10000;
				double tempdmgfactor = victim.damagefactor;
				victim.damagefactor = 1.0;
				int moddedDMG = victim.ApplyDamageFactor(mod, tempdmgval);
				let SpecVuln = CompatVulnItem(victim.FindInventory("CompatVulnItem"));
				if (SpecVuln) moddedDMG *= SpecVuln.lastTOTALFactor;
				victim.damagefactor = tempdmgfactor;
				double outputdmgfactor = 1.0;
				outputdmgfactor *= moddedDMG;
				outputdmgfactor /= tempdmgval;
				bool playwsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2" || vict != "BowlingPin" || vict != "OldPipe") playwsounds = true;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playwsounds = false;
				if (BowlingPin(victim) ||
						DDHoganTarget(victim) || 
						Galgoyle_Hide(victim) || 
						GlobeMotherSpawner(victim) || 
						Centaurion_Hedge(victim) || 
						Hammerduck_Hedge(victim) || 
						Killetante_Hedge(victim) || 
						OldPipe(victim)) playwsounds = false;
				if (mod == 'SilentMassacre') playwsounds = false;
				if (mod == 'GrowingPains') playwsounds = false;
				if (isCCardsIllusion) playwsounds = false;
				if (dydudebug_hitsounds) Console.Printf("playwsounds: %d", playwsounds);
				
				if (playwsounds)
				{
					if (initdmg > 0 && !(flags & DMG_NO_FACTOR)) 
					{
						if (!(mod == '' || mod == 'Normal' || mod == 'Crush' || mod == 'Falling' || mod == 'Drowning'))
						{
							if (moddedDMG <= (tempdmgval * 0.25)) playweaksound = -3;
							if (moddedDMG >= (tempdmgval * 0.25) && moddedDMG <= (tempdmgval * 0.3999999)) playweaksound = -2;
							if (moddedDMG >= (tempdmgval * 0.4) && moddedDMG <= (tempdmgval * 0.6666667)) playweaksound = -1;
							if (moddedDMG >= (tempdmgval * 1.5) && moddedDMG <= (tempdmgval * 2.4999999)) playweaksound = 1;
							if (moddedDMG >= (tempdmgval * 2.5) && moddedDMG <= (tempdmgval * 3.9999999)) playweaksound = 2;
							if (moddedDMG >= (tempdmgval * 4.0)) playweaksound = 3;
							if (dydudebug_hitsounds) Console.Printf("moddedDMG: %d (%.8f) (%s), playweaksound: %d, damagefactor: %.8f", moddedDMG, outputdmgfactor, mod, playweaksound, victim.damagefactor);
						}
					}
					if (dydudebug_hitsounds) Console.Printf("playweaksound: %d", playweaksound);

					string weakplayedsound = "";
					if (exex_hitweaksounds && victim.bISMONSTER && playweaksound != 0 && victim.CountInv("TempNoWeakSound") <= 0)
					{
						victim.A_SetInventory("TempNoWeakSound",1);
			
						if (playweaksound == -3) weakplayedsound = "Misc/ResistanceHitHigh";
						if (playweaksound == -2) weakplayedsound = "Misc/ResistanceHitMid";
						if (playweaksound == -1) weakplayedsound = "Misc/ResistanceHit";
						if (playweaksound == 1) weakplayedsound = "Misc/WeaknessHit";
						if (playweaksound == 2) weakplayedsound = "Misc/WeaknessHitMid";
						if (playweaksound == 3) weakplayedsound = "Misc/WeaknessHitHigh";
			
						if (initdmg > 0) makesound = true;
						//if (oldhealth > 0 && oldhealth > health) makesound = true;
						if (makesound)
						{
							if (source) 
							{
								if (dydudebug_hitsounds) Console.Printf("[weaksounds] source: %s", source.GetClassName());
								playpawn = PlayerPawn(source);
								if (victim.bFRIENDLY)
								{
									victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
								}
								else
								if (playpawn) 
								{
									if (dydudebug_hitsounds) Console.Printf("[weaksounds] playpawn: %s", playpawn.GetClassName());
									if (!victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.0);
								}
								else
								{
									othermon = Actor(source);
									if (othermon) 
									{
										if (dydudebug_hitsounds) Console.Printf("[weaksounds] othermon: %s", othermon.GetClassName());
										if (othermon.bFRIENDLY && !victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.5);
									}
								}
							}
						}
					}
				}
				
				bool playdthsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2" || vict != "BowlingPin" || vict != "OldPipe") playdthsounds = true;
				if (EEProp(victim)) playdthsounds = false;
				if (BossBrainNew(victim)) playdthsounds = true;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdthsounds = false;
				if (BowlingPin(victim) || 
						DDHoganTarget(victim) || 
						Galgoyle_Hide(victim) || 
						GlobeMotherSpawner(victim) || 
						Centaurion_Hedge(victim) || 
						Hammerduck_Hedge(victim) || 
						Killetante_Hedge(victim) || 
						OldPipe(victim)) playdthsounds = false;
				if (mod == 'SilentMassacre') playdthsounds = false;
				if (mod == 'GrowingPains') playdthsounds = false;
				if (isCCardsIllusion) playdthsounds = false;
				
				if (playdthsounds)
				{
					if (victim.health <= 0 && exex_q3aqckillsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype || DDAFDNPC(victim)))
					{
						if (source || inflicter)
						{
							if (dydudebug_hitsounds && source) Console.Printf("[deathsound] source: %s", source.GetClassName());
							if (dydudebug_hitsounds && inflicter) Console.Printf("[deathsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (dydudebug_hitsounds) Console.Printf("[deathsound] victim is friendly: %s", victim.GetClassName());
								if (DDAFDNPC(victim))
								{
									if (dydudebug_hitsounds) Console.Printf("[deathsound] victim is DDAFDNPC Type: %s", victim.GetClassName());
									playedsound = "misc/whoops";
									if (exex_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
									}
								}
								else
								{
									if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsndAlly";
									if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDEDAlly";
									if (exex_q3aqckillsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							if (playpawn) 
							{
								if (dydudebug_hitsounds) Console.Printf("[deathsound] playpawn: %s", playpawn.GetClassName());
								if (DDAFDNPC(victim))
								{
									playedsound = "misc/whoops";
									if (exex_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(1.25,1.5));
									}
								}
								else
								if (!victim.bFRIENDLY)
								{
									if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsnd";
									if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED";
									if (exex_q3aqckillsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon) 
								{
									if (dydudebug_hitsounds) Console.Printf("[deathsound] othermon: %s", othermon.GetClassName());
									if (DDAFDNPC(victim))
									{
										playedsound = "misc/whoops";
										if (exex_q3aqchitsoundtype >= 0) 
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
										}
									}
									else
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (dydudebug_hitsounds) Console.Printf("[deathsound] othermon: %s kills %s (ally kills)", othermon.GetClassName(), victim.GetClassName());
										if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsnd2";
										if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED2";
										if (exex_q3aqckillsoundtype >= 0) 
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && exex_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.334,1.0);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										playedsound = "misc/killinfight"; //"misc/killsndduck";
										if (dydudebug_hitsounds) Console.Printf("[deathsound ('%s': %.8f)] othermon: %s kills %s (full infighting)", playedsound, rndpitch, othermon.GetClassName(), victim.GetClassName());
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandompick(1.5,2.5)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}
				
				bool playdmgsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2" || vict != "BowlingPin" || vict != "OldPipe") playdmgsounds = true;
				if (EEProp(victim)) playdmgsounds = false;
				if (BossBrainNew(victim)) playdmgsounds = true;
				if (BowlingPin(victim) || DDHoganTarget(victim) || OldPipe(victim)) playdmgsounds = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdmgsounds = false;
				if (mod == 'SilentMassacre') playdmgsounds = false;
				if (mod == 'GrowingPains') playdmgsounds = false;
				if (isCCardsIllusion) playdmgsounds = false;
				
				if (playdmgsounds)
				{
					if (exex_q3aqchitsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype || DDAFDNPC(victim) || BossBrainNew(victim)) && victim.CountInv("TempNoHitSound") <= 0)
					{
						victim.A_SetInventory("TempNoHitSound",1);
						
						if (source || inflicter) 
						{
							if (dydudebug_hitsounds && source) Console.Printf("[hitsound] source: %s", source.GetClassName());
							if (dydudebug_hitsounds && inflicter) Console.Printf("[hitsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hitally";
								if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpally";
								if (exex_q3aqchitsoundtype >= 0) 
								{
									victim.A_StopSound(13);
									victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
								}
							}
							else
							if (playpawn) 
							{
								if (dydudebug_hitsounds) Console.Printf("[hitsound] playpawn: %s", playpawn.GetClassName());
								if (!victim.bFRIENDLY)
								{
									if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hit";
									if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch";
									if (exex_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon) 
								{
									if (dydudebug_hitsounds) Console.Printf("[hitsound] othermon: %s", othermon.GetClassName());
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hit2";
										if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch2";
										if (exex_q3aqchitsoundtype >= 0) 
										{
											victim.A_StopSound(13);
											victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && exex_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.50,1.00);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										if (random(1,2) <= 1) playedsound = "misc/hitmine2";
																		 else playedsound = "misc/hitmine";
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_hitsoundsvol * frandompick(0.75,1.25)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}
			}
			
			// Adding in Argv's SingleDamageRipper code :V
			if (inflicter is "SingleDamageRipper")
			{
				SingleDamageRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageRipper(inflicter).timesrippedoverall++;
				if (SingleDamageRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}

			if (inflicter is "SingleDamageFastRipper")
			{
				SingleDamageFastRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageFastRipper(inflicter).timesrippedoverall++;
				if (SingleDamageFastRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}
		}
		Super.WorldThingDamaged(e);
	}
	
	int A_DropCheckMiscGames(int basechance)
	{
		if (A_CheckDDGame()) 
		{
			if (exex_nrpgmonsterlevels) basechance *= 4;
														 else basechance *= 8;
		}
		if (A_CheckUOHYM()) basechance *= 4;
		return basechance;
	}
	
	int A_UOHYMDropCheck(int droptimes)
	{
		if (A_CheckUOHYM() && random(1,6) <= 1 && droptimes > 1) 
		{
			droptimes *= 0.25;
			if (droptimes < 1 && random(1,6) <= 5) droptimes = 1;
		}
		return droptimes;
	}
	
	int, int, actor, actor, actor, actor, actor, int, int, bool, bool A_KillDropTables(int PLuck, int TrueLuck, actor victim, actor inflicter, actor source, actor mastor, actor IPAttack, int specialtype, int monsterrating, bool playerkill, bool allykill)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		if (inflicter && inflicter.target) source = inflicter.target;
		if (inflicter && inflicter.master) mastor = inflicter.master;
		string mod = "NONE";
		if (victim && victim.damagetype) 
		{
			mod = victim.damagetype; // = e.damagetype;
			if (dydudebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
		}
		else
		{
			if (inflicter)
			{
				mod = inflicter.damagetype; // = e.damagetype;
				if (dydudebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (source)
				{
					mod = source.damagetype; // = e.damagetype;
					if (dydudebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
				}
			}
		}
		string vict = "NONE";
		string infl = "NONE";
		string sour = "NONE";
		string mast = "NONE";
		if (victim) vict = victim.GetClassName();
		if (inflicter) infl = inflicter.GetClassName();
		if (source) sour = source.GetClassName();
		if (mastor) mast = mastor.GetClassName();
		let globalvars = DDGlobalVariables.Get();
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		int user_type;
		EECreature EECVict;
		bool waslegendary = false;
		if (victim) 
		{
			let LDLItem = LDLegendaryMonsterTracker(victim.FindInventory("LDLegendaryMonsterTracker"));
			if (LDLItem)
			{
				waslegendary = true;
				LDLItem.condemned = true;
			}
			EECVict = EECreature(victim);
		}
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		
		int Kills = Player.CountInv("KillsCount");
		// Drop Tables
		string dropname;
		int baseIPLuckMul = frandompick(1.5,1.5,1.5,1.5,1.5,2.0);
		int baseIPLvlDivider = frandompick(0.8,0.925,0.925,0.925,0.925,0.925);
		int baseIPBaseChanceMul = frandompick(0.8,0.925,0.925,0.925,0.925,0.925);
		int basedropdiv;
		double luckbase;
		double skillmult = 1;
		if (skill <= 0) skillmult = 0.667;
		if (skill == 1) skillmult = 0.8;
		if (skill == 2) skillmult = 1;
		if (skill == 3) skillmult = 1.25;
		if (skill >= 4) skillmult = 1.5;
		int droptimes;
		int lvldivider;
		int basechance;
		int maxchance;
		int scraprolls;
		int tearolls;
		int bossdropmulti = randompick(randompick(1,2,2),3,3,3,3,3,3,3,3,randompick(4,4,5));
		if (specialtype & 8) // CCards' Ancient One Boss V:
		{
			bossdropmulti *= 4;
			skillmult *= 0.25;
		}
		if (waslegendary) skillmult *= frandom(0.667,0.917);
		bool candropitems = false;
		if (specialtype) candropitems = true;
		if (!victim.bFRIENDLY && (victim.bCOUNTKILL || specialtype)) candropitems = true;
		if (PracticeTarget(victim) || 
				PracticeTarget2(victim) || 
				DDAFDNPC(victim) || 
				EEProp(victim) || 
				BowlingPin(victim) || 
				DDMiniTank(victim) || 
				DDHoganTarget(victim) || 
				Galgoyle_Hide(victim) || 
				GlobeMotherSpawner(victim) || 
				Centaurion_Hedge(victim) || 
				Hammerduck_Hedge(victim) || 
				Killetante_Hedge(victim) || 
				OldPipe(victim) || 
				Delila_Boss(victim) ||
				Computer(victim) ||
				ExplosiveBarrel(victim) ||
				Pod(victim) ||
				Piston(victim) ||
				Pottery1(victim) ||
				Pottery2(victim) ||
				Pottery3(victim) ||
				PowerCoupling(victim) ||
				PowerCrystal(victim) ||
				TreeDestructible(victim) ||
				WoodenBarrel(victim) ||
				ZCorpseSitting(victim) ||
				ZSuitOfArmor(victim) ||
				ZShrub1(victim) ||
				ZShrub2(victim) ||
				ZXmasTree(victim) ||
				ZPoisonShroom(victim)) candropitems = false;
		nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) candropitems = false;
		nm = "ClayDevilNew"; extracheck = nm; if (vict == extracheck) candropitems = false;
		if (dydudebug_worlddied) Console.Printf("candropitems: %d", candropitems);
		if (!playerkill || !allykill)
		{
			if (random(1,256) <= 1) candropitems = true;
												 else candropitems = false;
		}
		int tutlevelmin = 1801;
		int tutlevelmax = 1804;
		if (level.levelnum >= tutlevelmin && level.levelnum <= tutlevelmax) candropitems = false;
		if (A_CheckUOHYM() && random(1,6) <= 1) candropitems = false;
		
		if (candropitems)
		{
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			
			if (A_CheckDDGame())
			{
				basedropdiv = 16384;
				basedropdiv *= skillmult;
				luckbase = 1.0 + (monsterrating * 0.25);
				if (IPAttack)
				{
					basedropdiv *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				// ~1/16384 chance for an enemy to drop a Palace Key in DD Trilogy (absurdly rare, do NOT count on it :U)
				if (random(1,basedropdiv) <= 1) 
				{
					double rand = 2.0;
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					victim.A_SpawnItemEx("PalaceKey",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
			}

			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 35;
			if (IPAttack) 
			{
				luckbase *= baseIPLuckMul;
				lvldivider *= baseIPLvlDivider;
			}
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
			if (inflicter && ((source && DDPlayerPawn(source))))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && DDPlayerPawn(inflicter))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Specific Drops from Specific Monsters
				let monsterp = Actor(victim);
				
				// Doom Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				if (A_CheckDDGame()) basechance *= 16;
				if (A_CheckUOHYM()) basechance *= 4;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (IPAttack) 
				{
					basedropdiv *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));

				double rand = 2.0;
				// Add Specific Monsters Below :V
				if (vict == "Zombieman" ||
						vict == "ZombiemanNew" ||
						vict == "Zombieman_" || 
						vict == "PossessedZombieMan")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "PlasmaGuy")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "RocketLauncherGuy")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "RepeaterZombie")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "KarasawaGuy")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "ShotgunGuy" ||
						vict == "ShotgunGuyNew" ||
						vict == "ShotgunGuy_" || 
						vict == "PossessedShotgunGuy" ||
						vict == "BrownCultist")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "SuperShotgunGuy")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "FemaleRailZombie")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				
				if (vict == "ChaingunGuy" || 
						vict == "ChaingunGuyNew" ||
						vict == "ChaingunGuy_" || 
						vict == "PossessedChaingunGuy" ||
						vict == "GreyCultist" ||
						vict == "Fanatic_Chaingunner" || 
						vict == "Fanatic_ChaingunnerAlt") 
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Minigunner") 
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "BFGGuy") 
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "WolfensteinSS" || 
						vict == "WolfensteinSSNew")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "HellKnight" ||
						vict == "HellKnightNew" ||
						vict == "HellKnight_")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.25)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "BaronOfHell" ||
						vict == "BaronOfHellNew" ||
						vict == "BaronOfHell_")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.125)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Belphegor" ||
						vict == "BelphegorClone")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.0625)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "BruiserDemon")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.05)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Cybruiser")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.05)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "ArchonOfHell")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.05)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "PyroDemon")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.05)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "FlyingBalrogDVDS" ||
						vict == "FlyingBalrog")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("BerserkNew",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.0334)) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Cacodemon" ||
						vict == "CacodemonNew" ||
						vict == "CacoDemon_")
				{
					if (random(1,basedropdiv) <= random(2,3)) victim.A_SpawnItemEx("DoubleSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Cacolantern")
				{
					if (random(1,(basedropdiv*0.75)) <= random(2,3)) victim.A_SpawnItemEx("DoubleSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Abaddon")
				{
					if (random(1,(basedropdiv*0.625)) <= random(2,3)) victim.A_SpawnItemEx("DoubleSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Demon" ||
						vict == "DemonNew" ||
						vict == "Demon_" ||
						vict == "Spectre" ||
						vict == "SpectreNew" ||
						vict == "Spectre_")
				{
					if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("GuardSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (vict == "Archvile" ||
						vict == "ArchvileNew" ||
						vict == "Archvile_")
				{
					if (random(1,basedropdiv) <= random(4,5)) victim.A_SpawnItemEx("HasteSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				
				// Heretic Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				if (A_CheckDDGame()) basechance *= 16;
				if (A_CheckUOHYM()) basechance *= 4;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				if (IPAttack) 
				{
					basedropdiv *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				// Add Specific Monsters Below :V
				
				
				// Hexen Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				if (A_CheckDDGame()) basechance *= 16;
				if (A_CheckUOHYM()) basechance *= 4;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				if (IPAttack) 
				{
					basedropdiv *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				// Add Specific Monsters Below :V
				if (monsterp = FireDemon(victim))
				{
					if (random(1,basedropdiv) <= 8) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 1) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Ettin(victim))
				{
					if (random(1,basedropdiv) <= 32) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 4) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Centaur(victim))
				{
					if (random(1,basedropdiv) <= 24) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 3) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = CentaurLeader(victim))
				{
					if (random(1,basedropdiv) <= 48) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 6) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Serpent(victim))
				{
					if (random(1,basedropdiv) <= 32) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 4) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = SerpentLeader(victim))
				{
					if (random(1,basedropdiv) <= 48) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 6) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Bishop(victim))
				{
					if (random(1,basedropdiv) <= 16) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 2) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Wraith(victim))
				{
					if (random(1,basedropdiv) <= 24) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 3) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Demon1(victim))
				{
					if (random(1,basedropdiv) <= 32) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 4) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = Demon2(victim))
				{
					if (random(1,basedropdiv) <= 32) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 4) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (monsterp = IceGuy(victim))
				{
					if (random(1,basedropdiv) <= 80) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,basedropdiv) <= 10) 
					{
						user_type = random(1,4);
						if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				
				
				// Strife Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				if (A_CheckDDGame()) basechance *= 16;
				if (A_CheckUOHYM()) basechance *= 4;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				if (IPAttack) 
				{
					basedropdiv *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				// Add Specific Monsters Below :V
			}
			
			// Ammo/Weapons
			string droptype;
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 50;
			if (IPAttack) 
			{
				luckbase *= baseIPLuckMul;
				lvldivider *= baseIPLvlDivider;
			}
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
			if (inflicter && ((source && DDPlayerPawn(source))))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && DDPlayerPawn(inflicter))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Weapons/Satchels [Type 6]
				basechance = exex_inventorydroprate6;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.75;
				
				if (A_CheckDDGame())
				{
					if (exex_nrpgmonsterlevels) basechance *= 8;
																 else basechance *= 16;
				}
				if (A_CheckUOHYM()) basechance *= 8;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (random(1,maxchance) <= 1) // Main Drop Chance
				{
					int temp = 1;
					let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
					if (MiscItem) temp = (1 + (TrueLuck * 0.08334));
					if (random(1,16) <= temp) // Weapons
					{
						double rand = 1.0;
						user_type = random(1,8);
						int temp2 = random(1,16);
						if (A_CheckDDGame())
						{
							if (temp2 >= 1 && temp2 <= 5) user_type = random(1,9);
							if (temp2 >= 6 && temp2 <= 16) user_type = random(1,8);
						}
						else
						{
							if (temp2 >= 1 && temp2 <= 3) user_type = random(1,11);
							if (temp2 >= 4 && temp2 <= 7) user_type = random(1,10);
							if (temp2 >= 8 && temp2 <= 11) user_type = random(1,9);
							if (temp2 >= 12 && temp2 <= 16) user_type = random(1,8);
						}
						droptype = "ItemSatchel";
						if (random(1,32) <= 1) droptype = "MegaSatchel";
						if (user_type == 1) 
						{
							droptype = "CricketBat";
							if (player.CountInv(droptype)) 
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 2) 
						{
							droptype = "AppleJack";
							if (player.CountInv(droptype)) 
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 3) 
						{
							droptype = "BlunderAxe";
							if (player.CountInv(droptype)) 
							{
								if (random(1,64) <= 1 && player.CountInv("BlunderShotUpgrade") < 3) droptype = "BlunderAxeSchematic";
								else
								{
									droptype = "ItemSatchel";
									if (random(1,32) <= 1) droptype = "MegaSatchel";
								}
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 4) 
						{
							droptype = "CandleWhip";
							if (player.CountInv(droptype)) 
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 5) 
						{
							droptype = "Scrambler";
							if (player.CountInv(droptype)) 
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 6) 
						{
							droptype = "WizardPike";
							if (player.CountInv(droptype)) 
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							}
						}
						if (user_type == 7) 
						{
							droptype = "Grimophone";
							if (player.CountInv(droptype)) 
							{
								if (random(1,64) <= 1 && player.CountInv("GrimophoneUpgrade") < 3)
								{
									droptype = "GrimophoneMicrochip";
									double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
									double raredropsndvol = frandom(1.75,2.25);
									int raredropsndchannel = randompick(191,192,222,223,264,265);
									victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								}
								else
								{
									droptype = "ItemSatchel";
									if (random(1,32) <= 1) droptype = "MegaSatchel";
									double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
									double raredropsndvol = frandom(1.75,2.25);
									int raredropsndchannel = randompick(191,192,222,223,264,265);
									victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								}
							}
						}
						if (user_type == 8)
						{
							droptype = "SuperVac";
							if (player.CountInv(droptype)) 
							{
								if (random(1,64) <= 1 && player.CountInv("SuperVacUpgrade") < 3)
								{
									droptype = "SuperVacSchematic";
									double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
									double raredropsndvol = frandom(1.75,2.25);
									int raredropsndchannel = randompick(191,192,222,223,264,265);
									victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								}
								else
								{
									droptype = "ItemSatchel";
									if (random(1,32) <= 1) droptype = "MegaSatchel";
									double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
									double raredropsndvol = frandom(1.75,2.25);
									int raredropsndchannel = randompick(191,192,222,223,264,265);
									victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								}
							}
						}
						if (user_type == 9)
						{
							droptype = "CrazyBallDD";
						}
						if (user_type == 10) 
						{
							droptype = "SigilPickup";
							if (player.CountInv("SigilPieces") >= 5)
							{
								droptype = "ItemSatchel";
								if (random(1,32) <= 1) droptype = "MegaSatchel";
							}
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(191,192,222,223,264,265);
							victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						}
						if (user_type == 11) 
						{
							droptype = "FosnianCandle";
							if (player.CountInv(droptype)) droptype = "FCandleAmmo";
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(191,192,222,223,264,265);
							victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						}
						
						if (droptype == "ItemSatchel" && random(1,128) <= 1)
						{
							droptype = "PortalSatchel";
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(191,192,222,223,264,265);
							victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						}
						if (droptype == "MegaSatchel" && random(1,32) <= 1) droptype = "PortalSatchel";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					else // Ammo
					{
						double rand = 3.0;
						int temp = 48;
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem) temp = (48 + (TrueLuck * 0.25));
						if (random(1,256) <= temp) 
						{
							user_type = random(1,8);
							if (user_type == 1) droptype = "MalletAmmoBig";
							if (user_type == 2) droptype = "JackAmmoBig";
							if (user_type == 3) droptype = "BlunderAmmoBig";
							if (user_type == 4) droptype = "CandleAmmoBig";
							if (user_type == 5) droptype = "EggAmmoBig";
							if (user_type == 6) droptype = "PikeAmmoBig";
							if (user_type == 7) droptype = "MusicAmmoBig";
							if (user_type == 8) droptype = "VacAmmoBig";
						}
						else
						{
							user_type = random(1,8);
							if (user_type == 1) droptype = "MalletAmmo";
							if (user_type == 2) droptype = "JackAmmo";
							if (user_type == 3) droptype = "BlunderAmmo";
							if (user_type == 4) droptype = "CandleAmmo";
							if (user_type == 5) droptype = "EggAmmo";
							if (user_type == 6) droptype = "PikeAmmo";
							if (user_type == 7) droptype = "MusicAmmo";
							if (user_type == 8) droptype = "VacAmmo";
						}
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
			}
			
			// Arcade Tokens/Heavenly Ducats [DDT Only]
			if (player.CountInv("IsDynDuchess") || player.CountInv("IsCarnOfSouls"))
			{
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				lvldivider = 35;
				if (IPAttack) 
				{
					luckbase *= baseIPLuckMul;
					lvldivider *= baseIPLvlDivider;
				}
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && DDPlayerPawn(source))))
				{
					let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && DDPlayerPawn(inflicter))
				{
					let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= (bossdropmulti * 2);
				for (int i; i < droptimes; i++)
				{
					double rand = 4.0;
					// Tokens/Ducats [Type 11]
					basechance = exex_inventorydroprate11;
					basechance *= skillmult;
					if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
					luckbase = 0.5 + (monsterrating * 0.125);
					if (IPAttack) 
					{
						basechance *= baseIPBaseChanceMul;
						luckbase *= baseIPLuckMul;
					}
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
					if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
					if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
					if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
					if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
					else
					{
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
					}
					string cointype = "ArcadeChip";
					if (player.CountInv("IsDynDuchess")) cointype = "ArcadeChip";
					if (player.CountInv("IsCarnOfSouls")) cointype = "Money_Ducat";
					if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx(cointype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx(cointype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(maxchance*16)) == 1) victim.A_SpawnItemEx(cointype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [wrath chest]: %d (%d)", maxchance, basechance);
				}
			}
			
			// Wrath Chests [Main Mod or Carnival of Souls only]
			if (!A_CheckDDGame() || player.CountInv("IsCarnOfSouls"))
			{
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				lvldivider = 35;
				if (IPAttack) 
				{
					luckbase *= baseIPLuckMul;
					lvldivider *= baseIPLvlDivider;
				}
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && DDPlayerPawn(source))))
				{
					let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && DDPlayerPawn(inflicter))
				{
					let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= (bossdropmulti * 2);
				for (int i; i < droptimes; i++)
				{
					double rand = 4.0;
					// Wrath Chests [Type 9]
					basechance = exex_inventorydroprate9;
					basechance *= skillmult;
					if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
					if (player.CountInv("PlayingBlooM")) basechance *= 0.5;
					if (player.CountInv("IsCarnOfSouls")) basechance *= 2.0;
					
					basechance = A_DropCheckMiscGames(basechance);
					luckbase = 0.5 + (monsterrating * 0.125);
					if (IPAttack) 
					{
						basechance *= baseIPBaseChanceMul;
						luckbase *= baseIPLuckMul;
					}
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
					if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
					if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
					if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
					if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
					else
					{
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
					}
					if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("WrathChest",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("WrathChest",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(maxchance*16)) == 1) victim.A_SpawnItemEx("WrathChest",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [wrath chest]: %d (%d)", maxchance, basechance);
				}
			}
			
			// Heal Items
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 35;
			if (IPAttack) 
			{
				luckbase *= baseIPLuckMul;
				lvldivider *= baseIPLvlDivider;
			}
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
			if (inflicter && ((source && DDPlayerPawn(source))))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && DDPlayerPawn(inflicter))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= (bossdropmulti * 2);
			for (int i; i < droptimes; i++)
			{
				double rand = 2.0;
				// Health Items [Type 7]
				basechance = exex_inventorydroprate7;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (A_CheckDDGame()) 
				{
					if (exex_nrpgmonsterlevels) basechance *= 0.5;
				}
				if (A_CheckUOHYM()) basechance *= 2;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.875;
				
				luckbase = 0.5 + (monsterrating * 0.125);
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("GalaApple",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("FoodPlateFruit",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*2)) == 1) victim.A_SpawnItemEx("AppleWine",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("TurkeyDinner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("PigRoastDishExtra",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*4)) == 1) 
				{
					string bname = "BerserkNew";
					if (A_CheckDDGame()) bname = "BerserkSphere";
					victim.A_SpawnItemEx(bname,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [heal]: %d (%d)", maxchance, basechance);
			}

			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 70;
			if (IPAttack) 
			{
				luckbase *= baseIPLuckMul;
				lvldivider *= baseIPLvlDivider;
			}
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
			if (inflicter && ((source && DDPlayerPawn(source))))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && DDPlayerPawn(inflicter))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				double rand = 2.0;
				// Armor Items [Type 8]
				basechance = exex_inventorydroprate8;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.625;
				if (A_CheckDDGame()) 
				{
					if (exex_nrpgmonsterlevels) basechance *= 1;
																 else basechance *= 2;
				}
				if (A_CheckUOHYM()) basechance *= 2;
				luckbase = 1.0 + (monsterrating * 0.25);
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = (basechance * 16);
				if (RecordShot(inflicter)) maxchance = (basechance * 4);
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 8);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 8);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [armor]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					//Full Armor Drops
					user_type = random(1,100);
					if (A_CheckDDGame())
					{
						if (user_type >= 1 && user_type <= 90) { victim.A_SpawnItemEx("KnightGown",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 91 && user_type <= 96) { victim.A_SpawnItemEx("KnightGown2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 97 && user_type <= 98) { victim.A_SpawnItemEx("KnightGown3",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 99) { victim.A_SpawnItemEx("KnightGown4",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					}
					else
					{
						if (user_type >= 1 && user_type <= 67) { victim.A_SpawnItemEx("KnightGown",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 68 && user_type <= 89) { victim.A_SpawnItemEx("KnightGown2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 90 && user_type <= 98) { victim.A_SpawnItemEx("KnightGown3",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 99) { victim.A_SpawnItemEx("KnightGown4",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					}
				}
				else
				{
					scraprolls = 1;
					if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) 
					{
						scraprolls += randompick(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,3);
						if (BlunderPuffIP(inflicter)) scraprolls += randompick(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,3);
						if (random(1,32) <= (3 + ((TruePlayerLevel * 0.0075))))
						{
							if (Zombieman(victim) || ZombiemanNew(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (PlasmaGuy(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (RepeaterZombie(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (KarasawaGuy(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (RocketLauncherGuy(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (ShotgunGuy(victim) || ShotgunGuyNew(victim)) scraprolls += randompick(0,1,1,1,1,2,2,2);
							if (SuperShotgunGuy(victim)) scraprolls += randompick(0,1,1,1,1,2,2,2);
							if (FemaleRailZombie(victim)) scraprolls += randompick(0,1,1,1,1,2,2,2);
							if (ChaingunGuy(victim) || ChaingunGuyNew(victim)) scraprolls += randompick(1,1,2,2,2,2,3,3);
							if (Minigunner(victim)) scraprolls += randompick(1,1,2,2,2,2,3,3);
							if (BFGGuy(victim)) scraprolls += randompick(1,1,2,2,2,2,3,3);
							if (SuicideBomber(victim)) scraprolls += randompick(0,1,1,1,2,2,3,3);
							if (DoomImp(victim) || DoomImpNew(victim)) scraprolls += randompick(0,0,0,0,0,1,1,2);
							if (DarkImp(victim) || STDarkImp(victim) || VoidDarkImp(victim)) scraprolls += randompick(0,0,0,0,0,1,1,2);
							if (NetherDarkImp(victim)) scraprolls += randompick(1,1,2,2,2,3,3,4);
							if (Demon(victim) || DemonNew(victim) || Spectre(victim) || SpectreNew(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							if (BloodDemon(victim) || BloodSpectre(victim)) scraprolls += randompick(1,1,2,2,2,3,4,4);
							if (Cacodemon(victim) || CacodemonNew(victim)) scraprolls += randompick(0,1,1,2,2,2,2,3);
							if (Cacolantern(victim)) scraprolls += randompick(1,2,2,2,3,3,3,4);
							if (Abaddon(victim)) scraprolls += randompick(2,3,3,4,4,5,5,6);
							if (BruiserDemon(victim) || Cybruiser(victim) || ArchonOfHell(victim)) scraprolls += randompick(2,2,3,3,3,4,4,5);
							if (PyroDemon(victim)) scraprolls += randompick(3,4,4,4,5,5,5,6);
							if (Belphegor(victim)) scraprolls += randompick(1,1,2,2,2,3,3,4);
							if (BaronOfHell(victim) || BaronOfHellNew(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							if (HellKnight(victim) || HellKnightNew(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							if (PainElemental(victim) || PainElementalNew(victim)) scraprolls += randompick(1,1,2,2,2,2,3,3);
							if (HadesElemental(victim)) scraprolls += randompick(2,2,2,2,3,3,3,3);
							if (HadesOverlord(victim)) scraprolls += randompick(5,5,5,6,6,6,7,7);
							if (LostSoul(victim) || LostSoulNew(victim) || LostSoulAnnoying(victim) || BetaLostSoul(victim)) scraprolls += randompick(0,0,0,0,0,0,0,1);
							if (Revenant(victim) || RevenantNew(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
							if (DeathIncarnate(victim)) scraprolls += randompick(4,4,4,4,5,5,6,6);
							if (Arachnotron(victim) || ArachnotronNew(victim) || RailArachnotron(victim) || FusionArachnotron(victim) || ArachnotronMK2(victim)) scraprolls += randompick(1,1,1,2,2,2,2,3);
							if (Fatso(victim) || MancubusNew(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
							if (Hectebus(victim)) scraprolls += randompick(0,0,1,1,1,1,2,2);
							if (Daedabus(victim)) scraprolls += randompick(0,1,1,1,1,2,2,2);
							if (Archvile(victim) || ArchvileNew(victim)) scraprolls += randompick(1,1,1,2,2,2,2,3);
							if (Diabloist(victim)) scraprolls += randompick(3,3,3,3,4,4,5,5);
							if (Cyberdemon(victim) || CyberdemonNew(victim)) scraprolls += randompick(2,2,3,3,3,3,4,4);
							if (Annihilator(victim)) scraprolls += randompick(3,4,4,5,5,6,6,7);
							if (SpiderMastermind(victim) || SpiderMastermindNew(victim)) scraprolls += randompick(3,4,4,4,5,5,5,6);
							if (Demolisher(victim)) scraprolls += randompick(3,4,4,5,5,6,6,7);
							if (HellClericDVDS(victim)) scraprolls += randompick(1,1,2,2,2,2,3,4);
							if (FlyingBalrog(victim)) scraprolls += randompick(3,3,4,4,4,5,5,5);
							
							if (Knight(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							if (IronLich(victim)) scraprolls += randompick(8,8,9,9,9,9,10,10);
							if (Minotaur(victim)) scraprolls += randompick(2,2,3,3,3,3,4,4);
							if (Beast(victim)) scraprolls += randompick(1,1,1,2,2,2,2,3);
							if (Clink(victim)) scraprolls += randompick(1,1,2,2,2,2,3,3);
							if (Snake(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							
							if (Ettin(victim)) scraprolls += randompick(0,0,1,1,1,2,2,3);
							if (Centaur(victim)) scraprolls += randompick(1,1,1,2,2,2,2,3);
							if (CentaurLeader(victim)) scraprolls += randompick(0,0,0,0,0,1,1,2);
							if (Demon1(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
							if (Demon2(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
							if (Serpent(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
							if (SerpentLeader(victim)) scraprolls += randompick(0,0,0,0,0,1,1,2);
							if (FighterBoss(victim)) scraprolls += randompick(4,4,4,5,5,5,5,6);
							if (ClericBoss(victim)) scraprolls += randompick(2,2,2,3,3,3,3,4);
							if (MageBoss(victim)) scraprolls += randompick(0,0,0,1,1,1,1,2);
						}
					}
					if (RecordShot(inflicter)) scraprolls += randompick(0,0,0,1,1,1,1,1,2,2,2);
					if (VacPuff(inflicter) || VacPuffIP(inflicter))
					{
						scraprolls /= randompick(1,2,2,2,2,2,2,2,2,3);
						scraprolls += (randompick(0,0,0,0,1,1,1,1,2,2,2) - 2);
					}
					else
					{
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck') scraprolls += (randompick(0,0,0,0,1,1,1,1,2,2,2) - 2);
					}
					// If Spawned via Fractal Chooks, Pain Elementals
					if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned))
					{
						if (EECVict.isfractalspawned) scraprolls /= 4;
																		 else scraprolls /= 2;
						if (scraprolls < 1)
						{
							if (random(1,4) <= 1) scraprolls = 1;
															 else scraprolls = 0;
						}
					}
					// Scrap Drops
					if (scraprolls > 0)
					{
						double rand = 2.0;
						int baseval = randompick(2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3);
						for (int i = 0; i < scraprolls; i++)
						{
							string armortype = "ArmorScrap";
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if ((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) && i == 0) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if ((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) && random(1,(baseval)) == 1 && i == 0) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if ((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) && random(1,(baseval*baseval)) == 1 && i == 0) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if ((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) && random(1,(baseval*baseval*baseval)) == 1 && i == 0) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if ((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) && random(1,(baseval*baseval*baseval*baseval)) == 1 && i == 0) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if (random(1,(baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorScrapKit"; else armortype = "ArmorScrap";
							if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (dydudebug_worlddiedmonsterdrops) Console.Printf("ScrapRolls: %d / %d", i, scraprolls);
						}
					}
				}
				
				if (MiscItem && MiscItem.IsDDTrilogy) tearolls = (randompick(0,0,0,0,0,0,1,1) + (TruePlayerLevel * 0.0078125));
																				 else tearolls = (randompick(0,0,0,1,1,1,1,2) + (TruePlayerLevel * 0.03125));
				if (!((BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) || VacPuff(inflicter) || VacPuffIP(inflicter))) 
				{
					if (MiscItem && MiscItem.IsDDTrilogy) tearolls += randompick(0,0,0,0,0,0,0,0,1,1,1,1,1);
																					 else tearolls += randompick(0,0,0,0,1,1,1,1,1,1,2,2,2);
				}
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) 
				{
					tearolls /= randompick(1,2,2,2,2,2,2,2,2,3);
					tearolls -= 2;
				}
				// If Spawned via Fractal Chooks, Pain Elementals
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned))
				{
					if (EECVict.isfractalspawned) tearolls /= 4;
																	 else tearolls /= 2;
					if (tearolls < 1)
					{
						if (random(1,4) <= 1) tearolls = 1;
														 else tearolls = 0;
					}
				}
				// Tea Drops
				if (tearolls > 0)
				{
					double rand = 3.0;
					int baseval2 = randompick(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4);
					for (int i = 0; i < tearolls; i++)
					{
						string teatype = "CupOfTea";
						if (random(1,(baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (random(1,(baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (random(1,(baseval2*baseval2*baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (player.CountInv("ExpeditionHat"))
						{
							if (random(1,(baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
					}
				}
			}
			
			// Cup of Rage Drops [Level and Kills Dependant Drop]
			int killmod1 = randompick(50,75,75,75,75,75,75,75,75,100);
			if (MiscItem)
			{
				if (TruePlayerLevel >= 125) killmod1 = randompick(10,25,25,25,25,25,25,25,25,50);
				else if (TruePlayerLevel >= random(62,63)) killmod1 = randompick(25,50,50,50,50,50,50,50,50,75);
				else if (TruePlayerLevel >= 0) killmod1 = randompick(50,75,75,75,75,75,75,75,75,100);
			}
			int killmod2 = int(killmod1 * 0.5);
			if (kills % killmod1 == killmod2) 
			{
				double rand = 2.0;
				victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,8) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,32) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,128) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,512) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
			}
			else
			{
				int basechance = 1;
				if (MiscItem)
				{
					if (TruePlayerLevel >= 125) basechance = 4;
					if (TruePlayerLevel >= random(62,63)) basechance = 2;
					if (TruePlayerLevel >= 0) basechance = 1;
				}
				if (random(1,100) <= basechance)
				{
					double rand = 2.0;
					victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,8) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,32) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,128) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,512) <= 1) victim.A_SpawnItemEx("CupOfRageSpawner",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
			}
			
			// Random Inventory Item Drops
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 70;
			if (IPAttack) 
			{
				luckbase *= baseIPLuckMul;
				lvldivider *= baseIPLvlDivider;
			}
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
			if (inflicter && ((source && DDPlayerPawn(source))))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && DDPlayerPawn(inflicter))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Primary [Type 1]
				basechance = exex_inventorydroprate1;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.5;
				
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 0.0625 + (monsterrating * 0.015625); // (512)
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [primaryinv]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("misc/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					user_type = random(1,145);
					if (user_type >= 1 && user_type <= 60) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 61 && user_type <= 100) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 101 && user_type <= 125) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 126 && user_type <= 140) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 141 && user_type <= 144) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					if (user_type >= 145) { victim.A_SpawnItemEx("KilletanteEffigy",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
				}

				// Secondary [Type 2]
				basechance = exex_inventorydroprate2;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.75;
				
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 0.5 + (monsterrating * 0.125); // (512)
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					user_type = random(1,401);
					if (user_type >= 1 && user_type <= 140) 
					{
						victim.A_SpawnItemEx("FuryPotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); 
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 141 && user_type <= 256)
					{
						victim.A_SpawnItemEx("CrazyBallDD",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 257 && user_type <= 320) 
					{
						victim.A_SpawnItemEx("TimePotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); 
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 321 && user_type <= 336) 
					{
						victim.A_SpawnItemEx("BirdPotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); 
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 337 && user_type <= 352) 
					{
						victim.A_SpawnItemEx("BlunderAxeSchematic",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 353 && user_type <= 368) 
					{
						victim.A_SpawnItemEx("CherryBombSchematic",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 369 && user_type <= 384) 
					{
						victim.A_SpawnItemEx("GrimophoneMicrochip",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 385 && user_type <= 400) 
					{
						victim.A_SpawnItemEx("SuperVacSchematic",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
					if (user_type >= 401) 
					{
						victim.A_SpawnItemEx("DoorBell",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); 
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					}
				}

				// Rare Powerup Drop [Type 3]
				basechance = exex_inventorydroprate3;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.8;
				
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 2.0 + (monsterrating * 0.5); // (512) 
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					string raredropsndname = "rareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					if (gameinfo.gametype & 1) // Doom Mode
					{
						user_type = random(1,25);
						if (user_type >= 1 && user_type <= 7) victim.A_SpawnItemEx("BlurSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 8 && user_type <= 13) victim.A_SpawnItemEx("Infrared",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 14 && user_type <= 19) victim.A_SpawnItemEx("RadSuit",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 20 && user_type <= 22) victim.A_SpawnItemEx("InvulnerabilitySphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 23 && user_type <= 25) victim.A_SpawnItemEx("HarmonySphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 2) // Heretic Mode
					{
						user_type = random(1,20);
						if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("ArtiInvisibility",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("ArtiTomeOfPower",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 13 && user_type <= 18) victim.A_SpawnItemEx("BerserkSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 19) victim.A_SpawnItemEx("ArtiInvulnerability",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 4) // Hexen Mode
					{
						user_type = random(1,20);
						if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("TimePotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("PortalSatchel",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 13 && user_type <= 18) victim.A_SpawnItemEx("BerserkSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 19) victim.A_SpawnItemEx("ArtiInvulnerability2",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 8) // Strife Mode
					{
					}
				}

				// Diving Helm [Type 4]
				basechance = exex_inventorydroprate4;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.9;
				
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 0.25 + (monsterrating * 0.0625); // (512)
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1 && victim.waterlevel >= 3)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					string raredropsndname = "rareitem/spawn";
					victim.A_SpawnItemEx("DivingHelm",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
				}

				// Extremely Rare Drops [Type 5]
				basechance = exex_inventorydroprate5;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 8;
				if (player.CountInv("PlayingBlooM")) basechance *= 0.8;
				
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 3.0 + (monsterrating * 0.75); // (682.66667)
				if (IPAttack) 
				{
					basechance *= baseIPBaseChanceMul;
					luckbase *= baseIPLuckMul;
				}
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) maxchance = (basechance * 0.5);
				if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
				if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
				if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
				if (VacPuff(inflicter) || VacPuffIP(inflicter)) maxchance = (basechance * 16);
				else
				{
					nm = "CCards_Actor_BorrowedTimeBuff";
					if (victim.CountInv(nm) && mod == 'Suck') maxchance = (basechance * 16);
				}
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [extremerare]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(193,194,224,225,266,267);
					string raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

					if (exex_extraatkdefspd)
					{
						user_type = random(1,101);
						if (user_type >= 1 && user_type <= 34) victim.A_SpawnItemEx("GoldApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 35 && user_type <= 39) victim.A_SpawnItemEx("PlatinumApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type == 40) victim.A_SpawnItemEx("PrismaApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 41 && user_type <= 60) victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 61 && user_type <= 80) victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 81 && user_type <= 100) victim.A_SpawnItemEx("SigilPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 101) victim.A_SpawnItemEx("StrangeCrystalBall",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					else
					{
						user_type = random(1,101);
						if (user_type >= 1 && user_type <= 40) victim.A_SpawnItemEx("GoldApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 39 && user_type <= 48) victim.A_SpawnItemEx("PlatinumApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 49 && user_type <= 50) victim.A_SpawnItemEx("PrismaApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 51 && user_type <= 75) victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 76 && user_type <= 100) victim.A_SpawnItemEx("SigilPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 101) victim.A_SpawnItemEx("StrangeCrystalBall",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
				}

				// ?? [Type 10]
				basechance = exex_inventorydroprate10;
				basechance *= skillmult;
				if (EECVict && (EECVict.isfractalspawned || EECVict.isPEspawned || EECVict.isHEspawned || EECVict.isHOspawned)) basechance *= 2;
				basechance = A_DropCheckMiscGames(basechance);
				luckbase = 1.25 + (monsterrating * 0.3125);
				// Weapons and IP Attacks do not effect drop rates here V:
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [ultimarare]: %d (%d)", maxchance, basechance);
				if (random(1,maxchance) <= 1)
				{
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(193,194,224,225,266,267);
					string raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(293,294,324,325,366,367);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(393,394,424,425,466,467);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(493,494,524,525,566,567);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(593,594,624,625,666,667);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					
					if (random(1,3) <= 1)
					{
						if (player.CountInv("MAManual"))
						{
							victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							if (random(1,4) <= 1)
							{
								victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
								victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
								if (random(1,4) <= 1)
								{
									victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									if (random(1,4) <= 1)
									{
										victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
										victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									}
								}
							}
						}
						else
						{
							victim.A_SpawnItemEx("MAManual",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						}
					}
					else
					{
						if (player.CountInv("ExpeditionHat") && player.CountInv("ClassyRibbon"))
						{
							victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							if (random(1,4) <= 1)
							{
								victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
								victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
								if (random(1,4) <= 1)
								{
									victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									if (random(1,4) <= 1)
									{
										victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
										victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
									}
								}
							}
						}
						else
						{
							user_type = random(1,2);
							if (user_type == 1) 
							{
								if (player.CountInv("ExpeditionHat")) victim.A_SpawnItemEx("ClassyRibbon",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
																								 else victim.A_SpawnItemEx("ExpeditionHat",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
							if (user_type == 2) 
							{
								if (player.CountInv("ClassyRibbon")) victim.A_SpawnItemEx("ExpeditionHat",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
																								else victim.A_SpawnItemEx("ClassyRibbon",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
						}
					}
				}
				
				//
				if (vict == "KilletanteSoloist")
				{
					dropname = "GalaApple";
					if (random(1,2) == 1) dropname = "AppleWine";
					victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
					if (random(1,2) == 1)
					{
						dropname = "GalaApple";
						if (random(1,2) == 1) dropname = "AppleWine";
						victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
						
						if (random(1,4) == 1)
						{
							dropname = "GalaApple";
							if (random(1,2) == 1) dropname = "AppleWine";
							victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
							
							if (random(1,8) == 1)
							{
								dropname = "GalaApple";
								if (random(1,2) == 1) dropname = "AppleWine";
								victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
							}
						}
					}
				}
			}
		}
		
		// Special Actor Conditions
		if (vict == "ZBell")
		{
			int typesdrop = 1;
			if ((victim.Stamina <= 0) || (victim.Stamina <= 2 && ((inflicter && (BatPuff(inflicter))))))
			{
				victim.Stamina++;
				if (inflicter && (BatPuff(inflicter)) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) typesdrop = random(2,5);
				
				for (int i = 0; i < typesdrop; i++)
				{
					user_type = random(1,2);
					//Console.Printf("#1: %d", user_type);
					if (user_type == 1) // Weapons
					{
						user_type = random(1,29);
						//Console.Printf("#2a: %d", user_type);
						if (user_type >= 1 && user_type <= 4) dropname = "CricketBat";
						if (user_type >= 5 && user_type <= 8) dropname = "AppleJack";
						if (user_type >= 9 && user_type <= 12) dropname = "BlunderAxe";
						if (user_type >= 13 && user_type <= 16) dropname = "Scrambler";
						if (user_type >= 17 && user_type <= 20) dropname = "WizardPike";
						if (user_type >= 21 && user_type <= 24) dropname = "SuperVac";
						if (user_type >= 24 && user_type <= 28) dropname = "CandleWhip";
						if (user_type == 29) dropname = "Grimophone";
					}
					else
					if (user_type == 2) // Health
					{
						user_type = random(1,29);
						//Console.Printf("#2b: %d", user_type);
						if (user_type >= 1 && user_type <= 12) dropname = "GalaApple";
						if (user_type >= 13 && user_type <= 18) dropname = "FoodPlateFruit";
						if (user_type >= 19 && user_type <= 22) dropname = "AppleWine";
						if (user_type >= 23 && user_type <= 25) dropname = "PigRoastDish";
						if (user_type >= 26 && user_type <= 28) dropname = "TurkeyDinner";
						if (user_type == 29) dropname = "GourmetMeal";
					}
					victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
				}
			}
		}
		
		// Mapset Specific Things
		nm = "Balloon_Black"; extracheck = nm; 
		if (vict == extracheck)
		{
		}
		nm = "Balloon"; extracheck = nm; 
		nn = "BallTarg"; extracheck2 = nn; 
		no = "Balloon_Red"; extracheck3 = no; 
		np = "Balloon_Red2"; extracheck4 = np; 
		if (vict == extracheck || vict == extracheck2 || vict == extracheck3 || vict == extracheck4)
		{
		}
		nm = "Balloon_Yellow"; extracheck = nm; 
		nn = "BallYel"; extracheck2 = nn; 
		if (vict == extracheck || vict == extracheck2)
		{
		}
		nm = "Balloon_Green"; extracheck = nm; 
		nn = "BallGreen"; extracheck2 = nn; 
		if (vict == extracheck || vict == extracheck2)
		{
		}
		nm = "Balloon_Blue"; extracheck = nm; 
		if (vict == extracheck)
		{
		}
		
		return PLuck, TrueLuck, victim, inflicter, source, mastor, IPAttack, specialtype, monsterrating, playerkill, allykill;
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			actor victim = e.Thing;
			actor inflicter = e.inflictor;
			string mod = "NONE";
			actor source;
			actor mastor;
			if (inflicter && inflicter.target) source = inflicter.target;
																		else source = e.Thing.target;
			if (inflicter && inflicter.master) mastor = inflicter.master;
																		else mastor = e.Thing.target;
			if (victim && victim.damagetype) 
			{
				mod = victim.damagetype; // = e.damagetype;
				if (dydudebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (inflicter)
				{
					mod = inflicter.damagetype; // = e.damagetype;
					if (dydudebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
				}
				else
				{
					if (source)
					{
						mod = source.damagetype; // = e.damagetype;
						if (dydudebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
					}
				}
			}
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			string mast = "NONE";
			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();
			if (mastor) mast = mastor.GetClassName();
			int PLuck;
			int TrueLuck;
			let globalvars = DDGlobalVariables.Get();
			int TruePlayerLevel = 0;
			if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			int user_type;
			bool giveexp;
			bool playerkill;
			bool allykill;
			bool waslegendary = false;
			EECreature EEC;
			EEC = EECreature(victim);
			
			bool isCCardsIllusion = false;
			if (victim)
			{
				victim.SetInventory("LDLegendaryMonsterTransformed", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectMaker", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectAlternator", 0);
				if (victim.CountInv("LDLegendaryMonsterTracker") > 0)
				{
					waslegendary = true;
					victim.A_SetInventory("LDLegendaryMonsterTracker",0);
				}

				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
			}
			
			if (FractalChicken(victim) || FractalChick(victim) || FractalHen(victim))
			{
				if (A_CheckDDGame() && level.levelnum == 45) // CoS
				{
					int numfound = 0;
					EEBaseZSC check;
					check = EEBaseZSC(victim);
		
					ThinkerIterator ChickFinder = ThinkerIterator.Create("FractalChick");
					Actor mo;
					FractalChick mo2;
					while (mo = Actor(ChickFinder.Next()))
					{
						mo2 = FractalChick(mo);
						if (mo2 && mo2.health > 0) numfound++;
					}
					ThinkerIterator ChickenFinder = ThinkerIterator.Create("FractalChicken");
					FractalChicken mo3;
					while (mo = Actor(ChickenFinder.Next()))
					{
						mo3 = FractalChicken(mo);
						if (mo3 && mo3.health > 0) numfound++;
					}
					
					ThinkerIterator HenFinder = ThinkerIterator.Create("FractalHen");
					FractalHen mo4;
					while (mo = Actor(HenFinder.Next()))
					{
						mo4 = FractalHen(mo);
						if (mo4 && mo4.health > 0) numfound++;
					}
					
					if (numfound <= 0)
					{
						if (MiscItem && !MiscItem.CoS_FractalHens)
						{
							MiscItem.CoS_FractalHens += 1;
							check.A_PrintPowerupDDTNoRPG(0);
						}
					}
				}
			}

			if (HandMotherVac(victim))
			{
				if (A_CheckDDGame())
				{
					int numfound = 0;
					EEBaseZSC check;
					check = EEBaseZSC(victim);
					
					ThinkerIterator HandFinder = ThinkerIterator.Create("HandMotherVac");
					Actor mo;
					HandMotherVac mo2;
					while (mo = Actor(HandFinder.Next()))
					{
						mo2 = HandMotherVac(mo);
						if (mo2 && mo2.health > 0) numfound++;
					}
					
					if (numfound <= 0)
					{
						if (level.levelnum == 4) // DD
						{
							if (MiscItem && !MiscItem.DD_HandMother1)
							{
								MiscItem.DD_HandMother1 += 1;
								check.A_PrintPowerupDDTNoRPG(0);
							}
						}
						else
						if (level.levelnum == 7) // DD
						{
							if (MiscItem && !MiscItem.DD_HandMother2)
							{
								MiscItem.DD_HandMother2 += 1;
								check.A_PrintPowerupDDTNoRPG(0);
							}
						}
						else
						if (level.levelnum == 46) // CoS
						{
							if (MiscItem && !MiscItem.CoS_HandMothers)
							{
								MiscItem.CoS_HandMothers += 1;
								check.A_PrintPowerupDDTNoRPG(0);
							}
						}
					}
				}
			}
			
			if (MiscItem)
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= exex_pluckfactor;
			}
			if (dydudebug_worlddied) Console.Printf("[%p (%s)] WorldThingDied", victim, vict);
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			
			if (victim && 
					!BowlingPin(victim) && 
					!EECustomGib(victim) && 
					!OldPipe(victim) && 
					!DDMiniTank(victim) && 
					!DDHoganTarget(victim) && 
					!Galgoyle_Hide(victim) && 
					!GlobeMotherSpawner(victim) && 
					!Centaurion_Hedge(victim) && 
					!Hammerduck_Hedge(victim) && 
					!Killetante_Hedge(victim) && 
					!isCCardsIllusion)
			{
				int specialtype;
				nm = "CCardGhostMarker";
				if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker";
				if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker";
				if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne";
				if (victim.GetClassName() == nm) specialtype += 8;
				if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1)
				{
					nm = "PurpleTentacle";
					if (victim.GetClassName() == nm) specialtype += 8;
					nm = "Skeleton";
					if (victim.GetClassName() == nm) specialtype += 8;
				}
				if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1)
				{
					nm = "Mite";
					if (victim.GetClassName() == nm) specialtype += 16;
					nm = "SkinStealer";
					if (victim.GetClassName() == nm) specialtype += 32;
					if (victim.bISMONSTER) specialtype += 64;
				}
				if (dydudebug_worlddied) Console.Printf("[%s] SpecialType [WorldDied]: %d", vict, specialtype);

				actor IPAttack;
				if (!(DDPlayerPawn(victim)) || (victim.bCOUNTKILL || specialtype))
				{
					int monsterrating = victim.CountInv("MonsterRating");
					if (!victim.CountInv("DedMonsterFlag") && !sv_monsterrespawn) victim.A_SetInventory("DedMonsterFlag",1);
					
					if (dydudebug_worlddied) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					if ((victim.bCOUNTKILL || specialtype) && !victim.bFRIENDLY && (inflicter || source))
					{
						if (inflicter) 
						{
							if (PlayerPawn(inflicter)) playerkill = true;
							if (inflicter.bFRIENDLY) allykill = true;
							if (inflicter.bFRIENDLY || DDPlayerPawn(inflicter))
							{
								if (IPAttack == null) IPAttack = EEProjectile(inflicter);
								giveexp = true;
							}
							if (dydudebug_worlddied) Console.Printf("inflictor: %s [%d]", infl, inflicter.bFRIENDLY);
						}
						else
						if (source) 
						{
							if (PlayerPawn(source)) playerkill = true;
							if (source.bFRIENDLY) allykill = true;
							if (source.bFRIENDLY || DDPlayerPawn(source)) 
							{
								if (IPAttack == null) IPAttack = EEProjectile(source);
								giveexp = true;
							}
							if (dydudebug_worlddied) Console.Printf("source: %s [%d]", sour, source.bFRIENDLY);
						}
						if (mastor) 
						{
							if (PlayerPawn(mastor)) playerkill = true;
							if (mastor.bFRIENDLY) allykill = true;
							if (IPAttack == null) IPAttack = EEProjectile(mastor);
							if (mastor.bFRIENDLY || DDPlayerPawn(mastor)) giveexp = true;
							if (dydudebug_worlddied) Console.Printf("mastor: %s [%d]", mast, mastor.bFRIENDLY);
						}
						if (EvilWarriorShieldBall(inflicter) && playerkill && MiscItem)
						{
							MiscItem.EWShieldKills++;
							if (dydudebug_worlddied) Console.Printf("MiscItem.EWShieldKills: %d [inflicter]", MiscItem.EWShieldKills);
						}
						nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) giveexp = false;
						if (Delila_Boss(victim)) giveexp = false;
						
						if ((playerkill || allykill) && MiscItem)
						{
							if (MiscItem.IPDissipateTimer > 0)
							{
								double factor1 = frandompick(0.625,0.667,0.667,0.75,0.75,0.75,0.75,0.8334,0.8334,0.875);
								if (random(1,8) <= 1) 
								{
									factor1 *= 0.5;
									if (random(1,8) <= 1) 
									{
										factor1 *= 0.5;
										if (random(1,8) <= 1) factor1 *= 0.5;
									}
								}
								MiscItem.IPDissipateTimer *= factor1;
							}
						}
						
						int ExpGain = (victim.SpawnHealth() + victim.Stamina);
						if (waslegendary) ExpGain *= 1.25;
						if (A_CheckUOHYM()) 
						{
									 if (specialtype & 32) ExpGain *= (frandom(3.2,4.8) * frandompick(0.875,1.0,1.0,1.0,1.125));
							else if (specialtype & 16) ExpGain *= (frandom(0.8,1.2) * frandompick(0.875,1.0,1.0,1.0,1.125));
																		else ExpGain *= (frandom(0.3,0.45) * frandompick(0.75,0.875,1.0,1.125,1.25));
						}
						
						if ((source && source.CountInv("PlayingBlooM")) || 
								(inflicter && inflicter.CountInv("PlayingBlooM"))) 
						{
							if (vict == "ChtonBloom") ExpGain *= random(8,12);
							ExpGain *= frandompick(1.25,1.375,1.375,1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);
						}
						
						if (monsterrating)
						{
							if (waslegendary)
							{
								if (monsterrating == 1) ExpGain *= 1.05;
								if (monsterrating == 2) ExpGain *= 1.1;
								if (monsterrating == 3) ExpGain *= 1.2;
								if (monsterrating == 4) ExpGain *= 1.4;
								if (monsterrating == 5) ExpGain *= 1.8;
								if (monsterrating == 6) ExpGain *= 2.6;
								if (monsterrating == 7) ExpGain *= 4.2;
								if (monsterrating >= 8) ExpGain *= 7.4;
							}
							else
							{
								if (monsterrating == 1) ExpGain *= 1.0125;
								if (monsterrating == 2) ExpGain *= 1.025;
								if (monsterrating == 3) ExpGain *= 1.05;
								if (monsterrating == 4) ExpGain *= 1.1;
								if (monsterrating == 5) ExpGain *= 1.2;
								if (monsterrating == 6) ExpGain *= 1.4;
								if (monsterrating == 7) ExpGain *= 1.8;
								if (monsterrating >= 8) ExpGain *= 2.6;
							}
						}
						if (specialtype & 1) ExpGain *= 0.5;
						if (specialtype & 2) ExpGain *= frandompick(1.8,2.2);
						if (specialtype & 4) ExpGain *= frandompick(0.625,0.875);
						if (specialtype & 8) ExpGain *= frandompick(1.75,2.5);
						if (victim.CountInv("MiraclesUsed") && exex_monstershavemiracles) ExpGain *= (1.0 + (victim.CountInv("MiraclesUsed") * 0.625));
						if ((source && source.CountInv("DinahTrueIPState")) || (inflicter && inflicter.CountInv("DinahTrueIPState"))) ExpGain *= 0.2;
						if (VacPuff(inflicter) || VacPuffIP(inflicter)) 
						{
							if (waslegendary) ExpGain *= frandom(1.0625,1.25);
							ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
						}
						else
						{
							nm = "CCards_Actor_BorrowedTimeBuff";
							if (victim.CountInv(nm) && mod == 'Suck') 
							{
								if (waslegendary) ExpGain *= frandom(1.0625,1.25);
								ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
							}
						}
						if (EvilDinah(victim))
						{
							if (waslegendary) ExpGain *= frandom(1.75,2.5);
							if (IPAttack) ExpGain *= frandom(0.25,0.5);
											 else ExpGain *= frandom(0.125,0.25);
						}
						else
						{
							if (waslegendary) ExpGain *= frandom(1.0925,1.185);
							if (IPAttack) ExpGain *= frandom(0.125,0.25);
											 else ExpGain *= frandom(0.05,0.125);
						}

						if ((source && source.bFRIENDLY) || (inflicter && inflicter.bFRIENDLY) || (mastor && mastor.bFRIENDLY)) ExpGain *= frandom(0.65,0.90);
						if (DDPlayerPawn(source) && infl == "PlayerWhistle") ExpGain *= frandom(1.1875,1.3125);
						if (vict == "KilletanteSoloist") ExpGain *= frandom(3.5,4.0);
						if (DDOrigBoss(victim)) ExpGain *= frandom(5.25,6.0);
						
						double alterchance = 1.0;
						if (source)
						{
							if (source.CountInv("PowerEggBuff") || source.CountInv("PowerEggBuff2")) alterchance += (0.08 + (MiscItem.UsedEggHeal * 0.0008));
							if (source.CountInv("PowerFruitBuff") || source.CountInv("PowerFruitBuff2")) alterchance += 0.04;
							if (source.CountInv("PowerRoastBuff")) alterchance += 0.08;
							if (source.CountInv("PowerMealBuff") || source.CountInv("PowerMealBuff2")) alterchance += 0.16;
							if (source.CountInv("PowerMeal2Buff") || source.CountInv("PowerMeal2Buff2")) alterchance += 0.16;
						}
						else
						if (inflicter)
						{
							if (inflicter.CountInv("PowerEggBuff") || inflicter.CountInv("PowerEggBuff2")) alterchance += (0.08 + (MiscItem.UsedEggHeal * 0.0008));
							if (inflicter.CountInv("PowerFruitBuff") || inflicter.CountInv("PowerFruitBuff2")) alterchance += 0.04;
							if (inflicter.CountInv("PowerRoastBuff")) alterchance += 0.08;
							if (inflicter.CountInv("PowerMealBuff") || inflicter.CountInv("PowerMealBuff2")) alterchance += 0.16;
							if (inflicter.CountInv("PowerMeal2Buff") || inflicter.CountInv("PowerMeal2Buff2")) alterchance += 0.16;
						}
						else
						if (mastor)
						{
							if (mastor.CountInv("PowerEggBuff") || mastor.CountInv("PowerEggBuff2")) alterchance += (0.08 + (MiscItem.UsedEggHeal * 0.0008));
							if (mastor.CountInv("PowerFruitBuff") || mastor.CountInv("PowerFruitBuff2")) alterchance += 0.04;
							if (mastor.CountInv("PowerRoastBuff")) alterchance += 0.08;
							if (mastor.CountInv("PowerMealBuff") || mastor.CountInv("PowerMealBuff2")) alterchance += 0.16;
							if (mastor.CountInv("PowerMeal2Buff") || mastor.CountInv("PowerMeal2Buff2")) alterchance += 0.16;
						}
						ExpGain *= alterchance;
						
						If (PLuck)
						{
							int PLevel = Player.CountInv("PlayerLevel");
									 if (PLevel <= 11) ExpGain *= (1.00 + (TrueLuck * frandompick(0,0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02)));
							else if (PLevel <= 26) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.01,0.02,0.02)));
							else if (PLevel <= 66) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04)));
							else if (PLevel <= 101) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04)));
							else if (PLevel <= 201) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04)));
						}
						if (MiscItem)
						{
							int OExpGain = ExpGain;
							double tallyextra;
							tallyextra = (MiscItem.totalallkills * 0.005) + (MiscItem.totalallitems * 0.0025) + (MiscItem.totalallsecrets * 0.0025) + (MiscItem.totalcompleted * 0.01);
							ExpGain *= (1.00 + tallyextra);
							if (dydudebug_worlddied) Console.Printf("[tallyextra] x%.4f, ExpGain: %d [%d]", 1.00+tallyextra, ExpGain, OExpGain);
							if (MiscItem.KillComboCount > 0)
							{
								double combomultiplieramt;
								double based = 0.001;
								tallyextra = MiscItem.KillComboCount;
								if (tallyextra < 11) based = 0.0016;
								if (tallyextra > 10 && tallyextra < 21) based = 0.0017;
								if (tallyextra > 20 && tallyextra < 36) based = 0.0020;
								if (tallyextra > 35 && tallyextra < 61) based = 0.0024;
								if (tallyextra > 60 && tallyextra < 101) based = 0.0028;
								if (tallyextra > 100 && tallyextra < 201) based = 0.0034;
								if (tallyextra > 200 && tallyextra < 501) based = 0.0040;
								if (tallyextra > 500) based = 0.0052;
								based *= 1.334;
								combomultiplieramt = (tallyextra * based);
								combomultiplieramt += 1.00;
								OExpGain = ExpGain;
								ExpGain = (ExpGain * combomultiplieramt);
								if (dydudebug_worlddied) Console.Printf("[combomultiplieramt] x%.4f, ExpGain: %d [%d]", combomultiplieramt, ExpGain, OExpGain);
							}
						}
						EXPGain *= exex_expmultiplier;
						
						EECreature EEC;
						EEC = EECreature(victim);
						if ((EEC && EEC.expshare >= 0.001) && !(playerkill || allykill)) 
						{
							int OExpGain = ExpGain;
							ExpGain *= (EEC.expshare * frandom(0.667,1.000));
							if (ExpGain < 1) ExpGain = 1;
							if (dydudebug_worlddied && ExpGain) Console.Printf("[EEC.expshare] x%.4f, ExpGain: %d [%d]", EEC.expshare, ExpGain, OExpGain);
						}
					
	
						if (giveexp && exex_expenabled && Level.MapName != "TITLEMAP")
						{
							if (ExpGain < 1) ExpGain = 1;

							let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
							if (MiscItem && MiscItem.NumOfAfasDrops) 
							{
								ExpGain *= (1.0 + (MiscItem.NumOfAfasDrops * 0.0625));
								if (DDPlayerPawn(source) && infl == "PlayerWhistle")
								{
									ExpGain += (MiscItem.NumOfAfasDrops * randompick(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3) * frandom(6.0,7.5));
								}
								else
								{
									ExpGain += (MiscItem.NumOfAfasDrops * randompick(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3) * 2);
								}
							}
							
							int tutlevelmin = 1801;
							int tutlevelmax = 1804;
							if (level.levelnum >= tutlevelmin && level.levelnum <= tutlevelmax) 
							{
								expgain = 0;
							}

							Actor player = players[0].mo;
							if (player.health > 0 || !player.CountInv("PlayerIsDead"))
							{
								int EXPPrevReq = 0;
								if (MiscItem.PlayerLevel > 0) EXPPrevReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel-1)];
								int EXPCurrReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel)];
								int EXPFullReq = (EXPCurrReq-EXPPrevReq);
								//Console.Printf("%d / %d (%d)", EXPPrevReq, EXPCurrReq, EXPFullReq);
								Player.A_GiveInventory("KillsCount",1);
								Player.A_GiveInventory("ExpPts",ExpGain);
								int Kills = Player.CountInv("KillsCount");
								int ExpNew = Player.CountInv("ExpPts");
								int ExpNeeded = Player.CountInv("ExpPtsNeeded");
								int PlayerLevel = Player.CountInv("PlayerLevel");
								if (exex_showexpgains) Console.Printf("\c[green]+%d EXP! \c[darkgreen][Have: %d / %d (Lvl: %d)] \c[red](Kills: %d)", ExpGain, ExpNew, ExpNeeded, PlayerLevel, Kills);
								if (exex_showexpgains)
								{
									MiscItem.KillComboCount += 1;
									MiscItem.EXPGainHUDAmt += ExpGain;
									if (MiscItem.EXPGainHUDTimer <= 0) MiscItem.EXPGainHUDTimer = 105;
									else
									{
										MiscItem.EXPGainHUDTimer += 35;
										if (MiscItem.EXPGainHUDTimer < 105 && ExpGain > (EXPFullReq * 0.05)) MiscItem.EXPGainHUDTimer = 105;
										if (MiscItem.EXPGainHUDTimer < 175 && ExpGain > (EXPFullReq * 0.10)) MiscItem.EXPGainHUDTimer = 175;
										if (MiscItem.EXPGainHUDTimer < 245 && ExpGain > (EXPFullReq * 0.25)) MiscItem.EXPGainHUDTimer = 245;
										if (MiscItem.EXPGainHUDTimer > 280) MiscItem.EXPGainHUDTimer = 280;
									}
								}
							}
						}
						else
						{
							Actor player = players[0].mo;
							if (player.health > 0 || !player.CountInv("PlayerIsDead"))
							{
								Player.A_GiveInventory("KillsCount",1);
								int Kills = Player.CountInv("KillsCount");
							}
						}
						
						// BUILD-style oneliner for kills [optional]
						bool playoneliner = false;
						if (inflicter == player || source == player || mastor == player) playoneliner = true;
						if (PracticeTarget(victim) || 
								PracticeTarget2(victim) || 
								BowlingPin(victim) || 
								DDAFDNPC(victim) || 
								EEProp(victim) || 
								DDMiniTank(victim) || 
								DDHoganTarget(victim) || 
								Galgoyle_Hide(victim) || 
								GlobeMotherSpawner(victim) || 
								Centaurion_Hedge(victim) || 
								Hammerduck_Hedge(victim) || 
								Killetante_Hedge(victim) || 
								OldPipe(victim)) playoneliner = false;
						nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playoneliner = false;
						
						if (playoneliner && player.GetClassName() == "DinahPlayer" && MiscItem)
						{
							if (dydudebug_worlddied) Console.Printf("Voice Check");
							if (exex_dinahextravoices && exex_dinahoneliners && !MiscItem.OneLinerCooldown)
							{
								int basechance = exex_dinahonelinerbasechance; // 8
								if (basechance < 0) basechance = 0;
								if (basechance > 0)
								{
									if (MiscItem) basechance += (MiscItem.ItemPoints * (basechance * 0.01));
									if (IPAttack) basechance *= frandompick(1.125,1.167,1.25,1.334);
									if (player.CountInv("DecentHealth")) basechance *= 1.25;
									if (player.CountInv("LowHealth")) basechance *= 1.5;
									if (player.CountInv("CriticalHealth")) basechance *= 1.875;
									if (MiscItem)
									{
										if (MiscItem.WineDefTier == 1 || MiscItem.WineDefTier == -1) basechance *= 1.125;
										if (MiscItem.WineDefTier == 2 || MiscItem.WineDefTier == -2) basechance *= 1.375;
										if (MiscItem.WineDefTier == 3 || MiscItem.WineDefTier == -3) basechance *= 1.75;
										if (MiscItem.WineDefTier == 4 || MiscItem.WineDefTier == -4) basechance *= 2.5;
										if (MiscItem.WineDefTier == 5 || MiscItem.WineDefTier == -5) basechance *= 4.0;
									}
									if (infl == "FistPuff" || infl == "UppercutPuff" || infl == "KickPuff" || infl == "KickPuffNoThrust") basechance *= frandompick(3.5,4,4.5);
									if (BatPuff(inflicter) || BatSpinPuff(inflicter) || BatPuffIP(inflicter) || BatSpinPuffIP(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
									if (ApplePuff(inflicter) || ApplePuffIP(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
									if (BlunderPuff(inflicter) || BlunderPuffIP(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
									if (WhipPuff(inflicter) || WhipPuffIP(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
									if (VacPuff(inflicter) || VacPuffIP(inflicter)) basechance *= frandompick(1.125,1.25,1.375);
									else
									{
										nm = "CCards_Actor_BorrowedTimeBuff";
										if (victim.CountInv(nm) && mod == 'Suck') basechance *= frandompick(1.125,1.25,1.375);
									}
									if (victim.bBOSS) basechance *= 8;
									if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
									if (dydudebug_worlddied) Console.Printf("%d / 256", basechance);
									if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
									{
										double maskpitch = 1.00;
										if (player.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
										string voicenm;
										double voicevol = frandom(1.25,1.75);
										if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
										int randvoice = random(1,17);
										if (randvoice == 1) 
										{
											voicenm = "Dinah/didthathurt";
											Console.Printf("\c[gold]'Did that hurt?!'\c-");
										}
										if (randvoice == 2) 
										{
											voicenm = "Dinah/ithinknot";
											Console.Printf("\c[gold]'I think not!'\c-");
										}
										if (randvoice == 3) 
										{
											voicenm = "Dinah/nownow";
											Console.Printf("\c[gold]'Now now...'\c-");
										}
										if (randvoice == 4) 
										{
											voicenm = "Dinah/thatleaveamark";
											Console.Printf("\c[gold]'That will leave a mark!'\c-");
										}
										if (randvoice == 5) 
										{
											voicenm = "Dinah/howsavage";
											Console.Printf("\c[gold]'How savage!'\c-");
										}
										if (randvoice == 6) 
										{
											voicenm = "Dinah/Gotcha";
											Console.Printf("\c[gold]'GOTCHA!'\c-");
										}
										if (randvoice == 7)
										{
											voicenm = "Dinah/IWinG";
											Console.Printf("\c[gold]'I WIN!'\c-");
										}
										if (randvoice == 8)
										{
											voicenm = "Dinah/BitOfALetdown";
											Console.Printf("\c[gold]'A bit of a let-down...'\c-");
										}
										if (randvoice == 9)
										{
											voicenm = "Dinah/NahAhAh";
											Console.Printf("\c[gold]'Nah-ah-ah!'\c-");
										}
										if (randvoice == 10)
										{
											voicenm = "Dinah/OverSoSoon";
											Console.Printf("\c[gold]'Over so soon!?'\c-");
										}
										if (randvoice == 11)
										{
											voicenm = "Dinah/HowRude";
											Console.Printf("\c[gold]'How rude!'\c-");
										}
										if (randvoice == 12)
										{
											voicenm = "dinah/OhWell";
											Console.Printf("\c[gold]'Oh well...!' *shrugs*\c-");
										}
										if (randvoice == 13)
										{
											voicenm = "dinah/ThatsAShame";
											Console.Printf("\c[gold]'That's a Shame...!'\c-");
										}
										if (randvoice == 14)
										{
											voicenm = "dinah/OhMy";
											Console.Printf("\c[gold]'Oh my...!'\c-");
										}
										if (randvoice == 15)
										{
											voicenm = "dinah/YourMine";
											Console.Printf("\c[gold]'You're Mine!!'\c-");
										}
										if (randvoice == 16)
										{
											voicenm = "dinah/TakeCareT";
											Console.Printf("\c[gold](sarcastically) 'Take care!'\c-");
										}
										if (randvoice == 17)
										{
											voicenm = "dinah/NoEscape";
											Console.Printf("\c[gold]'No escape!!'\c-");
										}
										if (randvoice > 0)
										{
											player.A_StopSound(CHAN_VOICE);
											player.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
											MiscItem.OneLinerCooldown += (frandom(1.75,3.0) * TICRATE);
										}
									}
								}
							}
						}
					}
					
					// Item Drop Action
					if (EEC && EEC.user_dontdroprandomstuff) { }
					else
					{
						[PLuck, TrueLuck, victim, inflicter, source, mastor, IPAttack, specialtype, monsterrating, playerkill, allykill] = A_KillDropTables(PLuck, TrueLuck, victim, inflicter, source, mastor, IPAttack, specialtype, monsterrating, playerkill, allykill);
					}
					
					//*******************************
					//* Killed With Certain Weapons *
					//*******************************
					if (source && (DDPlayerPawn(source) || source.GetClassName() == "DinahPlayer") && (victim.bCOUNTKILL || specialtype))
					{
						// SuperVac
						bool vackill = false;
						if (inflicter && (VacPuff(inflicter) || VacPuffIP(inflicter))) vackill = true;
						else
						{
							nm = "CCards_Actor_BorrowedTimeBuff";
							if (victim.CountInv(nm) && mod == 'Suck') vackill = true;
						}
						if (dydudebug_worlddied) Console.Printf("vackill: %d", vackill);
						// SuperVac
						if (vackill)
						{
							bool erase = true;
							int vactype = 0;
							nm = "KevCerberus"; nn = "BestBuddy"; no = "Hellfish"; if (victim.GetClassName() == nm || victim.GetClassName() == nn || victim.GetClassName() == no) erase = false;
							if (DeathIncarnate(victim)) erase = false; // Death Incarnates CANNOT be erased by the Vac. Nopity Nope Nope! V:
							if (Tempest_Boss(victim) || Tempest_BossClone(victim)) erase = false; // Tempest can't be erased either V:
							if (Delila_Boss(victim) || Delila_BossClone(victim)) erase = false; // Delila also can't be erased V:
							if (LadyHasselstrand(victim) || LadyHasselstrandSit(victim)) erase = false; // Hasselstrand's proper actor can't be erased by the Vac, sorry LOLE V:
							if (KidSwordEx1(victim)) erase = false; // >.>
							if (Haig(victim) || Haig_Heaven(victim)) erase = false; // Nah V:
							if (Frieda(victim) || Frieda_Heaven(victim)) erase = false; // Sorry nu :P
							if (Delila(victim) || Delila_Angry(victim)) erase = false; // Nopenope :D
							if (Mother_Spirit(victim) || Father_Spirit(victim)) erase = false; // LUL why would you even WANT to? XD
							if (Peter(victim)) erase = false; // nah, Heaven kinda needs him there V:
							if (Quisling_Ghost(victim) || Krag_Ghost(victim) || Lauritz_Ghost(victim)) erase = false; // It would be a better fate than what they deserve LOLE :V
							if (Tempest_Ghost(victim) || Tempest_Forsaken(victim)) erase = false; // Unfortunately, no >:V
							if (Stauf(victim)) erase = false; // No, Delila kinda needs him around LUL
							if (Juggette(victim) && A_CheckDDGame() && victim.TID == 10 && level.levelnum == 42) erase = false; // Prevents the "Strongwoman" from being erased, since she has to transform into the Doll Memory V:
							if (erase)
							{
								if (DDOrigCreature(victim) || DDOrigBoss(victim) || DDAFDNPC(victim) || CoSForsaken(victim))
								{
									if (ddafd_originalsupervacamts && (A_CheckDDGame())) vactype = 1;
									if (vactype == 1)
									{
										if (Hammerduck(victim) ||
												Planter(victim) ||
												Manchineel(victim) ||
												Manchineel_Ceiling(victim) ||
												Centaurion(victim) ||
												PuddingDog(victim) ||
												PuddingPup(victim) ||
												Vitriola(victim) ||
												Killetante(victim) ||
												KilletanteSoloist(victim) ||
												Muddernaut(victim) ||
												Jugger(victim) ||
												Juggette(victim) ||
												ReelHeel(victim) ||
												SpiderCenser(victim) ||
												Galgoyle(victim) ||
												KnuckleHead(victim) ||
												Shillfish(victim) ||
												Bellefish(victim) ||
												Nurse(victim) ||
												FractalChicken(victim) ||
												FractalChick(victim) ||
												FractalHen(victim) ||
												CremeDeBratte(victim) ||
												CremeDeBratte_Torched(victim) ||
												Reaper(victim) ||
												Devil(victim) ||
												PushyAngel(victim) ||
												PushyArchAngel(victim) ||
												Forsaken(victim) ||
												Forsaken_Prop(victim) ||
												Forsaken_Quisling(victim) ||
												Forsaken_Jorgensen(victim) ||
												Chef1(victim) ||
												Lady1(victim) ||
												Lady2(victim) ||
												Lady3(victim) ||
												Lady1Sit(victim) ||
												DudePipe(victim) ||
												DudeCape(victim) ||
												LadyNun(victim) ||
												DudeBeret(victim) ||
												DudeStick(victim) ||
												DudePaper(victim) ||
												KidWashGirl1(victim) ||
												KidWashGirl2(victim) ||
												KidWashBoy1(victim) ||
												KidWashBoy2(victim) ||
												KidSweep1(victim) ||
												KidSweep2(victim) ||
												KidBoy1(victim) ||
												KidBoy2(victim) ||
												KidPaper1(victim) ||
												KidPaper2(victim) ||
												KidSword(victim) ||
												KidSwordFat(victim) ||
												KidPaint(victim) ||
												KidMagic(victim) ||
												Dragon_Chatty(victim)) vactype = 1; else vactype = 0;
									}
								}
								actor IPPuff;
								if (inflicter) IPPuff = EEProjectile(inflicter);
								int vacgive;
								if (vactype == 1)
								{
									if (Hammerduck(victim)) vacgive = 3;
									if (Planter(victim)) vacgive = 4;
									if (Manchineel(victim)) vacgive = 6;
									if (Manchineel_Ceiling(victim)) vacgive = 6;
									if (Centaurion(victim)) vacgive = 6;
									if (PuddingDog(victim)) vacgive = 6;
									if (PuddingPup(victim)) vacgive = 1;
									if (Vitriola(victim)) vacgive = 4;
									if (Killetante(victim)) vacgive = 4;
									if (KilletanteSoloist(victim)) vacgive = 5;
									if (Muddernaut(victim)) vacgive = 12;
									if (Jugger(victim)) vacgive = 12;
									if (Juggette(victim)) vacgive = 6;
									if (ReelHeel(victim)) vacgive = 4;
									if (SpiderCenser(victim)) vacgive = 4;
									if (Galgoyle(victim)) vacgive = 4;
									if (KnuckleHead(victim)) vacgive = 12;
									if (Shillfish(victim)) vacgive = 6;
									if (Bellefish(victim)) vacgive = 2;
									if (Nurse(victim)) vacgive = 4;
									if (FractalChicken(victim)) vacgive = 4;
									if (FractalChick(victim)) vacgive = 1;
									if (FractalHen(victim)) vacgive = 12;
									if (CremeDeBratte(victim)) vacgive = 4;
									if (CremeDeBratte_Torched(victim)) vacgive = 4;
									if (Reaper(victim)) vacgive = 4;
									if (Devil(victim)) vacgive = 12;
									if (PushyAngel(victim)) vacgive = 12;
									if (PushyArchAngel(victim)) vacgive = 60;
									if (Forsaken(victim) || Forsaken_Prop(victim))
									{
										vacgive = 3;
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
									}
									if (Forsaken_Quisling(victim)) 
									{
										vacgive = 3;
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
									}
									if (Forsaken_Jorgensen(victim)) 
									{
										vacgive = 3;
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										victim.A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
										if (player.CountInv("IsCarnOfSouls"))
										{
											EEBaseZSC check;
											check = EEBaseZSC(victim);
											if (victim.tid == 994 && level.levelnum == 44 && MiscItem && !MiscItem.CoS_ForsakenJorg) // CoS
											{
												MiscItem.CoS_ForsakenJorg += 1;
												if (check) check.A_PrintPowerupDDTNoRPG(0);
											}
										}
									}
									if (Dragon_Chatty(victim))
									{
										vacgive = 12;
										if (player.CountInv("IsCarnOfSouls"))
										{
											EEBaseZSC check;
											check = EEBaseZSC(victim);
											if (victim.tid == 21 && level.levelnum == 45 && MiscItem && !MiscItem.CoS_Fafnir) // CoS
											{
												MiscItem.CoS_Fafnir += 1;
												if (check) check.A_PrintPowerupDDTNoRPG(0);
											}
										}
									}
									if (Chef1(victim)) vacgive = 3;
									if (Lady1(victim)) vacgive = 3;
									if (Lady2(victim)) vacgive = 3;
									if (Lady3(victim)) vacgive = 3;
									if (Lady1Sit(victim)) vacgive = 3;
									if (DudePipe(victim)) vacgive = 3;
									if (DudeCape(victim)) vacgive = 3;
									if (LadyNun(victim)) vacgive = 3;
									if (DudeBeret(victim)) vacgive = 3;
									if (DudeStick(victim)) vacgive = 3;
									if (DudePaper(victim)) vacgive = 3;
									if (KidWashGirl1(victim)) vacgive = 3;
									if (KidWashGirl2(victim)) vacgive = 3;
									if (KidWashBoy1(victim)) vacgive = 3;
									if (KidWashBoy2(victim)) vacgive = 3;
									if (KidSweep1(victim)) vacgive = 3;
									if (KidSweep2(victim)) vacgive = 3;
									if (KidBoy1(victim)) vacgive = 3;
									if (KidBoy2(victim)) vacgive = 3;
									if (KidPaper1(victim)) vacgive = 3;
									if (KidPaper2(victim)) vacgive = 3;
									if (KidSword(victim)) vacgive = 3;
									if (KidSwordFat(victim)) vacgive = 3;
									if (KidPaint(victim)) vacgive = 3;
									if (KidMagic(victim)) vacgive = 3;
									// End of List
									if (MiscItem) vacgive *= MiscItem.SuperVacBagSize;
								}
								else
								if (vactype <= 0)
								{
									vacgive = victim.spawnhealth() + victim.Stamina;
									if (Shillfish(victim)) vacgive *= 8;
									vacgive *= frandompick(0.6667,0.8334,1.000,1.1667,1.3334);
									if (IPPuff) vacgive *= frandompick(0.75,0.75,0.75,0.75,0.875); 
												 else vacgive *= 0.5;
									
									nm = "ClayDevilNew"; extracheck = nm;
									if (vict == extracheck) vacgive *= 8;
								}
								source.A_GiveInventory("VacAmmoCounter",vacgive);
								source.A_StartSound("VacDed",210,CHANF_DEFAULT,frandom(0.75,0.90),ATTN_NORM,frandom(1.8,2.7));
								if (vict == "CommanderKeen") victim.A_KeenDie(); // I forgot to consider Keens use a different "death action" than the other monsters. >.>
								victim.A_BossDeath(); // Makes sure certain monsters do their hardcoded E1M8/MAP07 type effects on death
								if (vict == "Korax" || vict == "KoraxNew") ACS_Execute(255, 0); // Ensures Korax calls Script 255 is he's somehow absorbed by the Vac [though he should be unable to be killed by it :P]
								let SubEntity = EntitySecond(victim);
								if (SubEntity) SubEntity.A_SubEntityDeath(); // makes sure Strife's game ends once all SubEntities die. V:

								nm = "ArchangelusA"; extracheck = nm;
								nn = "ArchangelusB"; extracheck2 = nn;
								if (vict == extracheck) victim.A_SpawnItemEx(extracheck2, 8, 0, 0, 0, 0, 0, 0.0, SXF_NOCHECKPOSITION);
								if (vict == extracheck2) victim.A_BrainDie();
								victim.A_StopSound(CHAN_VOICE);
								victim.A_FadeOut(1.0,FTF_REMOVE);

								vacgive *= exex_supervacbagunitmulti;
								if (victim) Console.Printf("\c[sapphire]+%d\c- Vacuum Bag Units from \c[orange]%s\c-", vacgive, victim.GetTag());
							}
						}
						
						// Soul Scepter [SA]
						bool soulskill = false;
						if (inflicter && 
								(inflicter.GetClassName() == "SoulScepterPuff" ||
								 inflicter.GetClassName() == "DualSoulScepterPuff" ||
								 inflicter.GetClassName() == "SoulScepterPuff2" ||
								 inflicter.GetClassName() == "SoulScepterPowerPuff" ||
								 inflicter.GetClassName() == "DualSoulScepterPowerPuff"))
						{
							soulskill = true;
						}
						else
						{
							nm = "CCards_Actor_BorrowedTimeBuff";
							if (victim.CountInv(nm) && mod == 'Eldritch') soulskill = true;
						}
						if (dydudebug_worlddied) Console.Printf("soulskill: %d", soulskill);
						if (soulskill && MiscItem)
						{
							EEPuff soulpuff;
							soulpuff = EEPuff(inflicter);
							int maxheal = (MiscItem.MaxHealthTrue * 3);
							//Console.Printf("soulskill");
							if (source)
							{
								DDPlayerPawn PlyPwn;
								PlyPwn = DDPlayerPawn(source);
								if (PlyPwn)
								{
									//Console.Printf("PlyPwn");
									int tempheal = PlyPwn.health;
									double basechunk = 0.20;
									if (skill <= 0) basechunk = 0.30;
									if (skill == 1) basechunk = 0.25;
									if (skill == 2) basechunk = 0.20;
									if (skill == 3) basechunk = 0.15;
									if (skill >= 4) basechunk = 0.10;
									if (soulpuff)
									{
										Console.Printf("soulpuff");
										if (soulpuff.IPAttack) basechunk *= frandompick(1.25,1.25,2.5,2.5,2.5,2.5,2.5,2.5,3.75,3.75);
																			else basechunk *= frandompick(0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.5,1.5);
									}
									int healamt = (MiscItem.MaxHealthTrue * basechunk);
									//Console.Printf("healamt: %d", healamt);
									if (healamt < 1) healamt = 1;
									if (tempheal < maxheal)
									{
										tempheal += healamt;
										if (tempheal > maxheal) tempheal = maxheal;
										PlyPwn.health = tempheal;
										PlyPwn.A_SetBlend("ff ee ee",0.09375,random(10,15));
										PlyPwn.A_StopSound(17);
										PlyPwn.A_StartSound("player/hpdrain",17,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(1.35,1.65));
										MiscItem.A_RecoverHUD(healamt, 0, true);
										
										if (exex_combatlog)
										{
											string comblog = "";
											comblog.AppendFormat("\c[red]*\c- ");
											comblog.AppendFormat("\c[brick]%d\c- HP \c[green]drained\c-", healamt);
											comblog.AppendFormat(" from \c[red]%s\c-", victim.GetTag());
											string tempsr = "DualScepterOfSouls";
											if (plypwn.player.ReadyWeapon is tempsr) comblog.AppendFormat(" by \c[brick]Dual Soul Scepters\c-");
																													else comblog.AppendFormat(" by the \c[brick]Soul Scepter\c-");
											
											comblog.AppendFormat("!");
											if (dydudebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
											
											Console.Printf(comblog);
										}
									}
								}
							}
						}
					}
					
					EECreature BossVict;
					BossVict = EECreature(victim);
					if (BossVict)
					{
						if (dydudebug_scriptdisplays) Console.Printf("BossVict");
						BossVict.bossdeathactivate++;
					}
				}
			}
		}
		Super.WorldThingDied(e);
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (dydudebug_checksumprintout) Console.Printf("\cyMapCheckSum:\cx %s", level.GetChecksum());
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		bool BatGuardCheck = true;
		int levelnums = level.levelnum;
		if (e.IsSaveGame) BatGuardCheck = false;
		
		// DynMus Reset
		if (MiscItem)
		{
			int tempdynmusictype = exex_dynamicmusic;
			if (level.levelnum >= 1801 && level.levelnum <= 1802) tempdynmusictype = 3;
			
			if (tempdynmusictype == 3 && !e.IsReopen && !e.IsSaveGame) MiscItem.DynMusSetUsed = randompick(random(0,23),random(101,122),random(1001,1005));
			if (MiscItem.DynMusFightTimer > 0 || MiscItem.DynMusCalmTimer > 0 || MiscItem.DynMusActCall || MiscItem.randmusroll > -1) 
			{
				MiscItem.DynMusActCall = false;
				MiscItem.DynMusFightTimer = -1;
				MiscItem.DynMusCalmTimer = -1;
				MiscItem.randmusroll = -1;
				MiscItem.playeractiontimer = 0;
				MiscItem.playeractiontimerfrag = 0;
			}
		}
		
		if (!e.IsReopen)
		{
			bool addmapcounttrue = true;
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (globalvars.MapNum[i] == levelnums)
				{
					addmapcounttrue = false;
					break;
				}
			}
			// Check for certain MAPs that are more of intermission maps [PSX Doom TC's "D[#]END". KDIZD'S "INTERMAP", etc]
			if (addmapcounttrue)
			{
				let IsPSXDoom = PlayingPSXDoom(player.FindInventory("PlayingPSXDoom"));
				if (IsPSXDoom)
				{
					if (dydudebug_mapfinishcheck) Console.Printf("\c[orange]Playing PSX Doom");
					if (level.GetChecksum() == '95d8e4afa07a7e3330997a6aa5d0318d') addmapcounttrue = false;
					if (level.GetChecksum() == '17e16b88bf7f163f05a6a5c45f0dfeb6') addmapcounttrue = false;
					if (level.GetChecksum() == '39f6b93101248e39ae1af7c751647ea1') addmapcounttrue = false;
					if (level.GetChecksum() == '058234c82963c80b99a58081f829dead') addmapcounttrue = false;
					if (level.GetChecksum() == '77e33d393cb8386a13fe74391e053cd6') addmapcounttrue = false;
					if (level.GetChecksum() == '7364394e3b113aea8490d8b0b89c7e05') addmapcounttrue = false;
				}
				if (!addmapcounttrue)
				{
					if (dydudebug_mapfinishcheck) Console.Printf("\c[brick]IS AN INTERMISSION MAP (do not add to the queue)");
				}
			}
			if (addmapcounttrue)
			{
				globalvars.MapsFinished++;
				globalvars.MapNum.push(globalvars.MapsFinished);
				globalvars.MapNum[globalvars.MapsFinished] = level.levelnum;
				globalvars.NumKills.push(globalvars.MapsFinished);
				globalvars.MaxKills.push(globalvars.MapsFinished);
				globalvars.AllKills.push(globalvars.MapsFinished);
				globalvars.AllKills[globalvars.MapsFinished] = false;
				globalvars.AllKillsSound.push(globalvars.MapsFinished);
				globalvars.AllKillsSound[globalvars.MapsFinished] = false;
				globalvars.AllKillsTimer.push(globalvars.MapsFinished);
				globalvars.AllKillsTimer[globalvars.MapsFinished];
				
				globalvars.NumItems.push(globalvars.MapsFinished);
				globalvars.MaxItems.push(globalvars.MapsFinished);
				globalvars.AllItems.push(globalvars.MapsFinished);
				globalvars.AllItems[globalvars.MapsFinished] = false;
				globalvars.AllItemsSound.push(globalvars.MapsFinished);
				globalvars.AllItemsSound[globalvars.MapsFinished] = false;
				globalvars.AllItemsTimer.push(globalvars.MapsFinished);
				globalvars.AllItemsTimer[globalvars.MapsFinished];
				
				globalvars.NumSecrets.push(globalvars.MapsFinished);
				globalvars.MaxSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets[globalvars.MapsFinished] = false;
				globalvars.AllSecretsSound.push(globalvars.MapsFinished);
				globalvars.AllSecretsSound[globalvars.MapsFinished] = false;
				globalvars.AllSecretsTimer.push(globalvars.MapsFinished);
				globalvars.AllSecretsTimer[globalvars.MapsFinished];
				
				globalvars.AllCompletion.push(globalvars.MapsFinished);
				globalvars.AllCompletion[globalvars.MapsFinished] = false;
				globalvars.AllCompletionSound.push(globalvars.MapsFinished);
				globalvars.AllCompletionSound[globalvars.MapsFinished] = false;
				globalvars.AllCompletionTimer.push(globalvars.MapsFinished);
				globalvars.AllCompletionTimer[globalvars.MapsFinished];
				if (dydudebug_mapfinishcheck) Console.Printf("\c[blue]Not Reopen\c- [maps in queue: %d]", globalvars.MapsFinished);
			}
			else
			{
				if (dydudebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (non-hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
			}
		}
		else
		{
			if (!e.IsSaveGame) if (dydudebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
		}

		string giveitem = "";
		// Post LevelPostProcess Compatibility Stuff >_>
		if (gameinfo.gametype == 1) // Doom GameMode
		{
			giveitem = "PlayingDoom1";
			if (level.GetChecksum() == 'b49f7a6c519757d390d52667db7d8793' || // doom.wad e1m1
					level.GetChecksum() == '81a4cc5136cbfa49345654190a626c09' || // doom.wad e1m2
					level.GetChecksum() == 'c7ff2282bc606ffb28ddcb90357094e6' || // doom.wad e1m3
					level.GetChecksum() == '5B26545FF21B051CA06D389CE535684C' || // doom.wad e1m4
					level.GetChecksum() == '66d8e54b173041f981a11cce766c4215' || // doom.wad e1m5
					level.GetChecksum() == '5faa25f5a6aab3409cae0af87f910341' || // doom.wad e1m6
					level.GetChecksum() == '9007f68e7f351a5758198933336f6b9f' || // doom.wad e1m7
					level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1' || // doom.wad e1m8
					level.GetChecksum() == '1dbf91738492fb0e29836a2d66406cf1' || // doom.wad e1m9
					level.GetChecksum() == '65455ac523799f8dce19f3d1968776a2' || // doom.wad e2m1
					level.GetChecksum() == 'A24FE135D5B6FD427FE27BEF89717A65' || // doom.wad e2m2
					level.GetChecksum() == '918436b3c2d0ad4f2c108183414b4612' || // doom.wad e2m3
					level.GetChecksum() == '1BC04D646B32D3A3E411DAF3C1A38FF8' || // doom.wad e2m4
					level.GetChecksum() == '99C580AD8FABE923CAB485CB7F3C5E5D' || // doom.wad e2m5
					level.GetChecksum() == '3838AB29292587A7EE3CA71E7040868D' || // doom.wad e2m6
					level.GetChecksum() == '8590F489879870C098CD7029C3187159' || // doom.wad e2m7
					level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' || // doom.wad e2m8
					level.GetChecksum() == '8A6399FAAA2E68649D4E4B16642074BE' || // doom.wad e2m9
					level.GetChecksum() == 'c4a89a481a32bfeddeb82e818f2bdec5' || // doom.wad e3m1
					level.GetChecksum() == 'BBDC4253AE277DA5FCE2F19561627496' || // doom.wad e3m2
					level.GetChecksum() == 'f951882cb5a8def910f0ed966a1054c5' || // doom.wad e3m3
					level.GetChecksum() == '2B65CB046EA40D2E44576949381769CA' || // doom.wad e3m4
					level.GetChecksum() == '100106C75157B7DECB0DCAD2A59C1919' || // doom.wad e3m5
					level.GetChecksum() == '2baf49b4cc36155b60b5330660ac0976' || // doom.wad e3m6
					level.GetChecksum() == '5AC51CA9F1B57D4538049422A5E37291' || // doom.wad e3m7
					level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' || // doom.wad e3m8
					level.GetChecksum() == 'FE97DCB9E6235FB3C52AE7C143160D73' || // doom.wad e3m9
					level.GetChecksum() == 'DA0C8281AC70EEC31127C228BCD7FE2C' || // doom.wad e4m1
					level.GetChecksum() == '771092812F38236C9DF2CB06B2D6B24F' || // doom.wad e4m2
					level.GetChecksum() == 'F6EE16F770AD309D608EA0B1F1E249FC' || // doom.wad e4m3
					level.GetChecksum() == 'AAECADD4D97970AFF702D86FAFAC7D17' || // doom.wad e4m4
					level.GetChecksum() == 'C2E09AB0BDD03925305A48AE935B71CA' || // doom.wad e4m5
					level.GetChecksum() == 'CBBFF61A8C231DFFC8E8A2A2BAEB77FF' || // doom.wad e4m6
					level.GetChecksum() == '94D4C869A0C02EF4F7375022B36AAE45' || // doom.wad e4m7
					level.GetChecksum() == '2DC939E508AB8EB68AF79D5B60568711' || // doom.wad e4m8
					level.GetChecksum() == '78556d238ffec8058cacc48b847e1fab') // doom.wad e4m9
			{
				if (!player.FindInventory(giveitem)) player.A_SetInventory(giveitem,1);
			}
			giveitem = "PlayingDoom2";
			if (level.GetChecksum() == '3c9902e376cca1e9c3be8763bdc21df5' || // doom2.wad map01
					level.GetChecksum() == 'AB24AE6E2CB13CBDD04600A4D37F9189' || // doom2.wad map02
					level.GetChecksum() == '5e8679670469f92e15cf4219b5b98fef' || // doom2.wad map03
					level.GetChecksum() == 'CEC791136A83EEC4B91D39718BDF9D82' || // doom2.wad map04
					level.GetChecksum() == '9E061AD7FBCD7FAD968C976CB4AA3B9D' || // doom2.wad map05
					level.GetChecksum() == '434575dcb650b4efc912efc0782c7acc' || // doom2.wad map06
					level.GetChecksum() == '291F24417FB3DD411339AE82EF9B3597' || // doom2.wad map07
					level.GetChecksum() == '66C46385EB1A23D60839D1532522076B' || // doom2.wad map08
					level.GetChecksum() == '82256f04136adb2413bfc604b5f6adf3' || // doom2.wad map09
					level.GetChecksum() == '6C620F43705BEC0ABBABBF46AC3E62D2' || // doom2.wad map10
					level.GetChecksum() == '73d9e03cee7bf1a97efd2ead86688ef8' || // doom2.wad map11
					level.GetChecksum() == '1AF4DEC2627360A55B3EB397BC15C39D' || // doom2.wad map12
					level.GetChecksum() == 'FBA6547B9FD44E95671A923A066E516F' || // doom2.wad map13
					level.GetChecksum() == '5BDA34DA60C0530794CC1EA2DA017976' || // doom2.wad map14
					level.GetChecksum() == '1A540BA717BF9EC85F8522594C352F2A' || // doom2.wad map15
					level.GetChecksum() == '6B60F37B91309DFF1CDF02E5E476210D' || // doom2.wad map16
					level.GetChecksum() == 'E1CFD5C6E60C3B6C30F8B95FC287E9FE' || // doom2.wad map17
					level.GetChecksum() == '0D491365C1B88B7D1B603890100DD03E' || // doom2.wad map18
					level.GetChecksum() == 'B5506B1E8F2FC272AD0C77B9E0DF5491' || // doom2.wad map19
					level.GetChecksum() == '8898f5ec9cbdcd98019a1bc1bf892a8a' || // doom2.wad map20
					level.GetChecksum() == 'EBDAC00E9D25D884B2C8F4B1F0390539' || // doom2.wad map21
					level.GetChecksum() == '4AA9B3CE449FB614497756E96509F096' || // doom2.wad map22
					level.GetChecksum() == '63f25c97d5b1cc174efea7f6af499960' || // doom2.wad map23
					level.GetChecksum() == '3eff15c64a03b36e8e47926c6df9ef70' || // doom2.wad map24
					level.GetChecksum() == '94893A0DC429A22ADC4B3A73DA537E16' || // doom2.wad map25
					level.GetChecksum() == '1037366026AAB4B0CF11BAB27DB90E4E' || // doom2.wad map26
					level.GetChecksum() == '110F84DE041052B59307FAF0293E6BC0' || // doom2.wad map27
					level.GetChecksum() == '84BB2C8ED2343C91136B87F1832E7CA5' || // doom2.wad map28
					level.GetChecksum() == '20251EDA21B2F2ECF6FF5B8BBC00B26C' || // doom2.wad map29
					level.GetChecksum() == '5eecd88f4491f516d590ce4bbf45f532' || // doom2.wad map30
					level.GetChecksum() == '3ff94e27423f91c1585b3396f0c03459' || // doom2.wad map31
					level.GetChecksum() == 'aa4ca3fc891d13821accabd836e29eb5') // doom2.wad map32
			{
				if (!player.FindInventory(giveitem)) player.A_SetInventory(giveitem,1);
			}
		}
		
		giveitem = "PlayingRAMP";
		if (level.GetChecksum() == '8e1d1b012a817bb8828d7096dd1ecc28' && !player.FindInventory(giveitem)) // ramp.pk3 map01
		{
			player.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to R.A.M.P., Kiddo! :V");
		}
		giveitem = "PlayingGoingDown";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !player.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			player.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to Going Down, Kiddo! :V");
		}
		giveitem = "PlayingPSXDoom";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !player.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			player.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to PSX Doom TC, Kiddo! V:<");
		}
		giveitem = "PlayingAugerZenith";
		if (level.GetChecksum() == 'a130224617d892e5023ab43392f4000d' && !player.FindInventory(giveitem)) // DBP37_AUGZEN.wad [AUGER ZENITH] map01
		{
			player.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to AUGER ZENITH, Kiddo! V:<");
		}
		
		if (!Player.CountInv("EWShieldDefendMode") && Player.bREFLECTIVE) Player.bREFLECTIVE = false;
		if (!Player.CountInv("EWShieldDefendMode") && Player.bSHIELDREFLECT) Player.bSHIELDREFLECT = false;
		
		if (BatGuardCheck)
		{
			actor Player = players[0].mo;
			let IsPlayer = PlayerPawn(Player);
			if (IsPlayer)
			{
				let weapon = IsPlayer.Player.ReadyWeapon;
				// Resets the Cricket Bat guardstate and cooldown to neutral, so the first time
				// you attempt to guard after a level transition doesn't immediately UNGUARD after
				// the initial animation. V:
				if (weapon is "CricketBat")
				{
					let DDWeap = CricketBat(weapon);
					if (DDWeap)
					{
						if (DDWeap.guardstate) DDWeap.guardstate = 0;
						if (DDWeap.guardcooldown) DDWeap.guardcooldown = 0;
						if (dydudebug_worldloaded) Console.Printf("BatGuard Check - GuardState: %d, Cooldown: %d", DDWeap.guardstate, DDWeap.guardcooldown);
					}
				}
			}
		}
		
		Super.WorldLoaded(e);
	}
	
	override void PlayerDied(PlayerEvent e) 
	{
		PlayerPawn player = PlayerPawn(players[consoleplayer].mo);
		if (player)
		{
			bool check1 = true;
			let eeplayer = DDPlayerPawn(player);
			if (eeplayer)
			
			if (A_CheckUOHYM())
			{
				if (level.mapname == "MAP01" ||
						level.mapname == "20PAM" ||
						level.mapname == "MAP02")
				{
					check1 = false;
					int randsong = random(1,2);
					if (eeplayer) 
					{
						eeplayer.deathsongused = randsong;
						if (eeplayer.deathsongused <= 1) S_ChangeMusic("GAMOVR", 0, false, true);
						if (eeplayer.deathsongused >= 2) S_ChangeMusic("GAMOVR2", 0, false, true);
					}
				}
			}
			
			if (check1)
			{
				actor Player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.IsDDTrilogy)
				{
					if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite")) S_ChangeMusic("GAMOVR", 0, false, true);
					else if (player.CountInv("IsCarnOfSouls")) S_ChangeMusic("GAMOVR2", 0, false, true);
				}
				else
				{
					if (exex_deathmusic)
					{
						if (exex_deathmusic == 1) S_ChangeMusic("GAMOVR", 0, false, true);
						if (exex_deathmusic == 2) S_ChangeMusic("GAMOVR2", 0, false, true);
						if (exex_deathmusic == 3) S_ChangeMusic("RoReDead", 0, false, true);
						if (exex_deathmusic == 4) S_ChangeMusic("GaOvYe", 0, false, true);
						if (exex_deathmusic == 5) S_ChangeMusic("DRQUDEAD", 0, false, true);
						if (exex_deathmusic == 6) S_ChangeMusic("MiRiBuTi", 0, false, true);
						if (exex_deathmusic == 7) S_ChangeMusic("ToDiYoAD", 0, false, true);
						if (exex_deathmusic == 8) S_ChangeMusic("MGS2GMOV", 0, false, true);
						if (exex_deathmusic == 9) S_ChangeMusic("ShGYaheh", 0, false, true);
						if (exex_deathmusic == 10) S_ChangeMusic("AH3GMOVR", 0, false, true);
						if (exex_deathmusic == 11) S_ChangeMusic("JURPRKP2", 0, false, true);
						if (exex_deathmusic == 12) S_ChangeMusic("CUYOENTH", 0, false, true);
						if (exex_deathmusic == 13) S_ChangeMusic("", 0, false, true);
					}
				}
			}
		}
		Super.PlayerDied(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) 
	{
		S_ChangeMusic("*", 0, true, true);
		Super.PlayerRespawned(e);
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		Actor player = players[consoleplayer].mo;
		int buttons = player.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")   
		{
			int key1, key2;

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_monsters += 1;
													 else level.total_monsters -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_items += 1;
													 else level.total_items -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_secrets += 1;
													 else level.total_secrets -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest4");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (level.mapname == "E1M8") Floor_LowerToLowest(666, 8);
			}

			[key1, key2] = Bindings.GetKeysForCommand("UseArmorIP");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (player.CountInv("KnightGownItem"))
				{
					player.A_SetInventory("KnightGown1IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem2"))
				{
					player.A_SetInventory("KnightGown2IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem3"))
				{
					player.A_SetInventory("KnightGown3IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem4"))
				{
					player.A_SetInventory("KnightGown4IPItem",1);
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("Whistl");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (player.health > 0 && MiscItem.whistlecooldown == 0)
					{
						player.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) MiscItem.whistlecooldown = random(28,33);
																																									 else MiscItem.whistlecooldown = random(42,49);
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("RecallAll");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = DDPlayerPawn(player);
				if (DDPlayerPawn(player))
				{
					if (!automapactive) MiscItem.recalledall = true;
				}
			}
		}
	}
	
	override void UiTick()
	{
		int ChangedMusicDefault;
		if (Level.MapName == "TITLEMAP" && level.GetCheckSum() == "61c6789c85c32479cc09d84685813272")
		{
			int d;
			
			d = Wads.CheckNumForName("smooshed", Wads.ns_global, -1, true);
			//Console.Printf("d: %d", d);
			if (d == -1)
			{
				//Console.Printf("UiTick");
				if (exex_titlemusic >= 1)
				{
					if (exex_titlemusic == 1)
					{
						S_ChangeMusic("EE-TITLE",0,true,true); // The unused theme played in the original Dynamite Duchess trailer on Youtube is the mod's "main" theme
						SetMusicVolume(4.5);
					}
					if (exex_titlemusic == 2)
					{
						S_ChangeMusic("BGMTHEME",0,true,true); // The titlemusic for Dynamite Duchess
						SetMusicVolume(2.25);
					}
					if (exex_titlemusic == 3)
					{
						S_ChangeMusic("BGMTHEMA",0,true,true); // The titlemusic for Appetite for Detention
						SetMusicVolume(2.25);
					}
					if (exex_titlemusic == 4)
					{
						S_ChangeMusic("COS-TITL",0,true,true); // The titlemusic for ??????? ?? ?????
						SetMusicVolume(2.25);
					}
				}
				else
				if (exex_titlemusic == 0) // Use the default title music for the gamemode/mapset if viable
				{
					SetMusicVolume(1.25);
					if (gameinfo.GameType == GAME_Doom)
					{
						if (Wads.CheckNumForName("EE-UNFAM", Wads.ns_global, -1, true) != -1)
						{
							S_ChangeMusic("$MUSIC_INTRO", 0, true, true);
						}
						else
						{
							if (Wads.CheckNumForName("MAP01", Wads.ns_global, -1, false)) S_ChangeMusic("$MUSIC_DM2TTL", 0, true, true);
							if (Wads.CheckNumForName("E1M1", Wads.ns_global, -1, false)) S_ChangeMusic("$MUSIC_INTRO", 0, true, true);
						}
					}
					if (gameinfo.GameType == GAME_Heretic) S_ChangeMusic("MUS_TITL", 0, true, true);
					if (gameinfo.GameType == GAME_Hexen) S_ChangeMusic("HEXEN", 0, true, true);
					if (gameinfo.GameType == GAME_Strife) S_ChangeMusic("D_LOGO", 0, true, true);
					ChangedMusicDefault = 0;
				}
				else
				if (exex_titlemusic <= -1)
				{
					if (!ChangedMusicDefault)
					{
						S_ChangeMusic("*", 0, true, true);
						ChangedMusicDefault = 0;
					}
				}
			}
		}
		super.UiTick();
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		// 55c72622920cbabcb1a2ec26e03bc3d0 = KDIZD TITLEMAP
		if (Level.MapName == "TITLEMAP" && level.GetCheckSum() == "61c6789c85c32479cc09d84685813272")
		{
			//Console.Printf("RenderOverlay: level.time - %d", level.time);
			textureid titleimg;
			string titlenm;
			int visi;
			int timer = level.time % 716;
			if (exex_titlescreen >= 0)
			{
				textureid titlepic = TexMan.checkForTexture("DEFTITLE");
				if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
				if (exex_titlescreen >= 1)
				{
					// Background
					textureid titlepic = TexMan.checkForTexture("EXEXTILB");
					if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
					// Title Image
					titleimg = TexMan.checkForTexture("EXEXT3XS");
					if (titleimg) Screen.DrawTexture(titleimg, false, 360, 360, DTA_KeepRatio, true);
					// Dinah
					titleimg = TexMan.checkForTexture("EXEXDINH");
					if (titleimg) Screen.DrawTexture(titleimg, false, 800, 180, DTA_KeepRatio, true);
					// ???
					visi = 0;
					if (timer >= 351)
					{
						if (timer >= 351 && timer <= 358) visi = 5;
						if (timer >= 359 && timer <= 366) visi = 10;
						if (timer >= 367 && timer <= 374) visi = 15;
						if (timer >= 375 && timer <= 382) visi = 20;
						if (timer >= 383 && timer <= 390) visi = 25;
						if (timer >= 391 && timer <= 398) visi = 30;
						if (timer >= 399 && timer <= 406) visi = 35;
						if (timer >= 407 && timer <= 414) visi = 40;
						if (timer >= 415 && timer <= 422) visi = 45;
						if (timer >= 423 && timer <= 430) visi = 50;
						if (timer >= 431 && timer <= 438) visi = 55;
						if (timer >= 439 && timer <= 446) visi = 60;
						if (timer >= 447 && timer <= 454) visi = 65;
						if (timer >= 455 && timer <= 462) visi = 70;
						if (timer >= 463 && timer <= 470) visi = 75;
						if (timer >= 471 && timer <= 478) visi = 80;
						if (timer >= 479 && timer <= 486) visi = 85;
						if (timer >= 487 && timer <= 494) visi = 90;
						if (timer >= 495 && timer <= 502) visi = 95;
						if (timer >= 503 && timer <= 677) visi = 100;
						if (timer >= 678 && timer <= 679) visi = 95;
						if (timer >= 680 && timer <= 681) visi = 90;
						if (timer >= 682 && timer <= 683) visi = 85;
						if (timer >= 684 && timer <= 685) visi = 80;
						if (timer >= 686 && timer <= 687) visi = 75;
						if (timer >= 688 && timer <= 689) visi = 70;
						if (timer >= 690 && timer <= 691) visi = 65;
						if (timer >= 692 && timer <= 693) visi = 60;
						if (timer >= 694 && timer <= 695) visi = 55;
						if (timer >= 696 && timer <= 697) visi = 50;
						if (timer >= 698 && timer <= 699) visi = 45;
						if (timer >= 700 && timer <= 701) visi = 40;
						if (timer >= 702 && timer <= 703) visi = 35;
						if (timer >= 704 && timer <= 705) visi = 30;
						if (timer >= 706 && timer <= 707) visi = 25;
						if (timer >= 708 && timer <= 709) visi = 20;
						if (timer >= 710 && timer <= 711) visi = 15;
						if (timer >= 712 && timer <= 713) visi = 10;
						if (timer >= 714 && timer <= 715) visi = 5;
					}
					titlenm = "EXTID";
					if (visi >= 100) titlenm.AppendFormat("%d", visi);
					if (visi < 100) titlenm.AppendFormat("0%d", visi);
					if (visi < 10) titlenm.AppendFormat("00%d", visi);
					titleimg = TexMan.checkForTexture(titlenm);
					if (titleimg) Screen.DrawTexture(titleimg, false, 1258, 481, DTA_KeepRatio, true);
				}
				else
				if (exex_titlescreen == 0)
				{
					if (gameinfo.GameType == GAME_Doom) titlepic = TexMan.checkForTexture("TITLEPIC");
					if (gameinfo.GameType == GAME_Heretic) titlepic = TexMan.checkForTexture("TITLE");
					if (gameinfo.GameType == GAME_Hexen) titlepic = TexMan.checkForTexture("TITLE");
					if (gameinfo.GameType == GAME_Strife) titlepic = TexMan.checkForTexture("TITLEPIC");
					if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
				}
			}
		}
		
		if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1 &&
				level.mapname == "MAP01")
		{
			PlayerPawn player = PlayerPawn(players[consoleplayer].mo);
			if (player)
			{
				let eeplayer = DDPlayerPawn(player);
				if (eeplayer)
				{
					if (eeplayer.whitehot > 0)
					{
						double alpha = double(eeplayer.whitehot) / double(15 * 1);
						Screen.dim(Color(0xFFFFFF), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
					}
					
					int fadepoint = eeplayer.deathtimerthres1;
					if (eeplayer.deathsongused == 1) fadepoint = 545;
					if (eeplayer.deathsongused == 2) fadepoint = 615;
					if (eeplayer.deathtimer >= (fadepoint-3) && 
							eeplayer.deathtimer <= (fadepoint+3)) 
					{
						S_ChangeMusic("D_SILENT", 0, false, true);
						if (dydudebug_deathtimerdisplays) Console.Printf("Music Silencing [%d]", eeplayer.deathtimer);
					}
					
					double alpha = 0.0;
					if (eeplayer.deathtimer < eeplayer.deathtimerthres4)
					{
						if (eeplayer.CountInv("UOHEnd4")) 
						{
							alpha = double(eeplayer.dimtimer) / double(175);
							//Console.Printf("[ending 4] alpha: %.8f", alpha);
							Screen.dim(Color(0), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
						}
					}
					else
					{
						//10 seconds to fade to black
						if (eeplayer.deathfadetimebase > 0) 
						{
							alpha = double(eeplayer.deathtimer_b) / double(eeplayer.deathfadetimebase);
							//Console.Printf("[deathfadetimebase] alpha: %.8f", alpha);
							Screen.dim(Color(0), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
						}
					}
				}
			}
		}
		
		super.RenderOverlay(e);
	}
}

class ItemData
{
	Inventory savedItem;
	bool wasUndroppable;
	bool wasUntossable;
	int hadAmount;
}

class DD_StaticEventHandler : StaticEventHandler
{
	// So I don't forget, a lot of the code in this for keeping things on Resets is from DevilBlackDeath's "Inventory Keeper" minimod. A lot of the comments below are his on the effects. :V
	struct PlayerInvData
	{
		Inventory invFirst;
		Inventory invSel;
		Inventory ReadyWeapon;
	}

	private bool isNewGame; // This is a new game, nothing should be done in this situation !
	private PlayerInvData[MAXPLAYERS] savedInventory; // Inventory backup for players
	// Items set to undroppable and untossable, once the world is loaded they should go back to their original state
	private Array<ItemData> dropBlockers;
	private int[MAXPLAYERS] playerNeedsRestore; // List of players to restore (players in game)
	private Array<int> playersToResurrect; // List of players to resurrect from a death exit
	private int prevhealthval; // added by Misfit V:

	private void ResurrectPlayers()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResurrectPlayers() activated");
		for (int i = 0; i < playersToResurrect.Size(); i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [2], i: %d", i);
			PlayerInfo pi = players[playersToResurrect[i]];
			PlayerPawn p = PlayerPawn(pi.mo);

			/* Resurrect the player, this is the only way to keep their inventory intact
			   during intermission - DBD*/
			if (playeringame[playersToResurrect[i]] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [3], i: %d", i);
				pi.Resurrect();
			}
		}
	}

	private void ManageKeys()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageKeys() activated");
		bool keepKeys = false; // Defaulting to false if no value is found 
						
		if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();
		
		if (!keepKeys)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [2 - KeepKeys is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [3 - Player#]:\c- %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [4 - playersToResurrect]");
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [5 - Item Check]:\c- %s", item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Key') 
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [6a - Key Type Found]:\c- %s", item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
				}
			}
		}
	}

	/* ManageHealth is my own personal addition to the ResetInventory check stuff for the mod, 
	for future purposes, so no code yet - Misfit :V */
	private void ManageHealth()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageHealth() activated");
		bool keepHealth = true; // Defaulting to false if no value is found 
						
		if (CVar.FindCVar("exex_deathexitkeephealth") != null)
			keepHealth = CVar.FindCVar("exex_deathexitkeephealth").GetBool();
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [2 - Player#], i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);
			
			if (playeringame[i] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [3 - playeringame]:\c- i: %d", i);
				if (keepHealth)
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4a - keepHealth is \c[gold]ON\c[green]]");
					if (p.health > 0)
					{
						prevhealthval = p.health;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5a - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
					else
					{
						prevhealthval = 1;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5b - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
				}
				else
				{
					prevhealthval = p.health;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4b - keepHealth is \c[red]OFF\c[green]\c]");
				}
			}
		}
	}

	private void ManageWeapons()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageWeapons() activated");
		bool keepWeapons = true; // Defaulting to true if no value is found 
		bool keepBackpacks = true; // Defaulting to true if no value is found 
		bool keepWeaponupgrades = true; // Defaulting to true if no value is found 
		bool keepSigil = true; // Defaulting to true if no value is found 

		if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();

		if (CVar.FindCVar("exex_deathexitkeepbackpacks") != null)
			keepBackpacks = CVar.FindCVar("exex_deathexitkeepbackpacks").GetBool();

		if (CVar.FindCVar("exex_deathexitkeepweaponupgrades") != null)
			keepWeaponupgrades = CVar.FindCVar("exex_deathexitkeepweaponupgrades").GetBool();

		if (CVar.FindCVar("exex_deathexitkeepsigil") != null)
			keepSigil = CVar.FindCVar("exex_deathexitkeepsigil").GetBool();

		if (!keepWeapons)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [2 - KeepWeapons is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [3 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [4 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [5 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Weapon' ||
								item is 'BasicArmor' ||
								item is 'KGArmor' ||
								item is 'HexenArmor' ||
								item is 'Ammo' ||
								item is 'VacAmmoCounter')
						{
							if (keepSigil && 
									(Item is 'SigilDD' ||
									 Item is 'SigilPieces' ||
									 Item is 'SigilModeType'))
							{
								if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6ba - Sigil Found and Kept]: i: %d, %s", i, item.GetClassName());
								item = item.Inv;
							}
							else
							{
								if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
								p.RemoveInventory(item);
								item = p.Inv;
							}
						}
						else
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6bb - Weapon Found and Kept]: i: %d, %s", i, item.GetClassName());
							item = item.Inv;
						}
					}
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [7 - GiveDefaultInventory]: i: %d", i);
					p.GiveDefaultInventory(); // Give the default inventory 
				}
			}
		}
		
		if (!keepBackpacks)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [2 - keepBackpacks is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [3 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [4 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [5 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Backpack' ||
								item is 'BackpackTier1' ||
								item is 'BackpackTier2')
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6a - 'Backpack' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6bb - Weapon Found and Kept]: i: %d, %s", i, item.GetClassName());
							item = item.Inv;
						}
					}
				}
			}
		}

		if (!KeepWeaponUpgrades)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [8 - KeepWeaponsUpgrades is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [9 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [10 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [11 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'BlunderShotUpgrade' || 
								item is 'CBombUpgrade' || 
								item is 'SuperVacUpgrade' || 
								item is 'GrimophoneUpgrade' || 
								item is 'ArmorScavengerKit' || 
								item is 'HellWarriorShieldLevel')
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [12a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
					//if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [13 - GiveDefaultInventory]: i: %d", i);
					//p.GiveDefaultInventory(); // Give the default inventory 
				}
			}
		}

		if (!keepSigil)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [13 - KeepSigil is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [14 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [15 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [16 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'SigilDD' ||
								item is 'SigilPieces' ||
								item is 'SigilModeType')
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [17a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
				}
			}
		}
	}

	private void RestorePlayerInvState(int pNum)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestorePlayerInvState() activated");
		PlayerInfo pi = players[pNum];
		PlayerPawn p = PlayerPawn(pi.mo);

		if (playeringame[pNum] && p != null && playerNeedsRestore[pNum])
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [2 - playeringame]:\c- pnum: %d", pnum);
			bool keepWeapons = true; // Defaulting to true if no value is found 

			if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
				keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();

			if (p.CountInv("ResetInventory") || p.CountInv("PlayerIsDead"))
			{
				if (prevhealthval > 0)
				{
					p.health = prevhealthval;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3a - resetting health to previous]:\c- pNum: %d, %d", pNum, p.health);
				}
				else
				{
					let MiscItem = PlayerStatItem(p.FindInventory("PlayerStatItem"));
					if (MiscItem) p.health = MiscItem.MaxHealthTrue;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3b - resetting health to current max:\c- pNum: %d, %d", pNum, p.health);
				}
			}

			/* We restore the player's inventory state
			   This is not to give the player back their inventory, they technically
			   still have it after the resurrection, this is mostly to make sure
			   the selected inventory item and equipped weapons remain the same
			   (from tests, these seem to reset on death+resurrect) */
			p.InvFirst = savedInventory[pNum].invFirst;
			p.InvSel = savedInventory[pNum].invSel;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [4 - savedinventory]:\c- pNum: %d", pNum);

			/* We restore the readied weapon only if weapons are kept, otherwise,
			   the game changing the readied weapons is the effect of losing them on purpose ! */
			if (keepWeapons)
			{
				pi.PendingWeapon = Weapon(savedInventory[pNum].readyWeapon);
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [5 - keepWeapons on]:\c- pNum: %d", pNum);
			}
		}
	}

	void BackupInventories()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- BackupInventories() activated");
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [2 - player#]:\c- i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);

			if (playeringame[i] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [3 - playeringame]: i: %d", i);
				// This player needs to be restored
				playerNeedsRestore[i] = true;

				/* Save all important inventory informations (what item was
				   selected, and what weapon was equipped, these may get unequipped on death) */
				savedInventory[i].invFirst = p.InvFirst;
				savedInventory[i].invSel = p.InvSel;
				savedInventory[i].readyWeapon = pi.ReadyWeapon;
			}
		}
	}

	private void RestoreItemsState() 
	{
		bool keepWeapons = true; // Defaulting to true if no value is found
		bool keepBackpacks = true; // Defaulting to true if no value is found
		bool keepWeaponUpgrades = true; // Defaulting to true if no value is found
		bool keepSigil = true; // Defaulting to true if no value is found 
		bool keepInvBarItems = true; // Defaulting to true if no value is found
		bool keepKeys = false; // Defaulting to false if no value is found

		if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();
		
		if (CVar.FindCVar("exex_deathexitkeepbackpacks") != null)
			keepBackpacks = CVar.FindCVar("exex_deathexitkeepbackpacks").GetBool();
		
		if (CVar.FindCVar("exex_deathexitkeepweaponupgrades") != null)
			keepWeaponUpgrades = CVar.FindCVar("exex_deathexitkeepweaponupgrades").GetBool();

		if (CVar.FindCVar("exex_deathexitkeepsigil") != null)
			keepSigil = CVar.FindCVar("exex_deathexitkeepsigil").GetBool();
			
		if (CVar.FindCVar("exex_deathexitkeepinventoryitems") != null)
			keepInvBarItems = CVar.FindCVar("exex_deathexitkeepinventoryitems").GetBool();
			
		if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();

		ResetInventory ResetItem;
		PlayerIsDead DeadItem;
		int ResetItemAmt;
		int DeadItemAmt;
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			ResetItem = ResetInventory(dropBlockers[i].savedItem);
			DeadItem = PlayerIsDead(dropBlockers[i].savedItem);
			if (ResetItem) ResetItemAmt = ResetItem.Amount;
			if (DeadItem) DeadItemAmt = DeadItem.Amount;
			if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt)) break;
		}
		if (dydudebug_resetinventorydebug) 
		{
					if (ResetItem && ResetItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found ResetInventory Item!");
			else if (DeadItem && DeadItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found PlayerIsDead Item!");
										else Console.Printf("\c[green]ResetInventory:\c- Did NOT find ResetInventory or PlayerIsDead Items!");
		}

		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestoreItemsState() activated");
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [2 - dropblockers]:\c- i: %d / %d", i, dropBlockers.Size());
			Inventory item = dropBlockers[i].savedItem;
			if (item != null) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [3 - item check]:\c- i: %d, %s", i, item.GetClassName());
				item.bUndroppable = dropBlockers[i].wasUndroppable;
				item.bUntossable = dropBlockers[i].wasUntossable;

				/* We don't restore weapons, armors and ammos amount, otherwise on an
				   inventory reset, the player won't be actually in a pistol start state */
				bool keepinv = true;
				if (!keepWeapons &&
						(item is 'Weapon' || 
						 item is 'BasicArmor' || 
						 item is 'KGArmor' || 
						 item is 'HexenArmor' || 
						 item is 'Ammo' || 
						 item is 'VacAmmoCounter'))
				{
					if (keepSigil &&
							(item is 'SigilDD' || item is 'SigilPieces' || item is 'SigilModeType'))
					{
						keepinv = true;
					}
					else
					{
						keepinv = false;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Check [!keepWeapons]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					}
				}
				if (!keepBackpacks &&
						(item is 'Backpack' ||
						 item is 'BackpackTier1' ||
						 item is 'BackpackTier2'))
				{
					keepinv = false;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Check [!keepBackpacks]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepWeaponUpgrades &&
						(item is 'BlunderShotUpgrade' || 
						item is 'CBombUpgrade' || 
						item is 'SuperVacUpgrade' || 
						item is 'GrimophoneUpgrade' || 
						item is 'ArmorScavengerKit' || 
						item is 'HellWarriorShieldLevel'))
				{
					keepinv = false;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Upgrade Check  [!keepWeaponUpgrades]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepSigil &&
					  (item is 'SigilDD' || item is 'SigilPieces' || item is 'SigilModeType'))
				{
					keepinv = false;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Sigil Check  [!keepSigil]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepInvBarItems && 
						(item is 'ExExInvBarItem' || item is 'KilletanteEffigy'))
				{
					if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt))
					{
						item.Amount = 0;
						keepinv = false;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4ca - EEInvItem Check: \c[red]not saved (death/reset)\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					}
					else
					{
						keepinv = true;
					}
				}
				//
				//
				if (keepinv)
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [5 - \c[gold]Item Saved\c[blue]]:\c- i: %d, %s (hadamount: %d)", i, item.GetClassName(), dropBlockers[i].hadAmount);
					item.Amount = dropBlockers[i].hadAmount;
				}
			}
		}

		dropBlockers.Clear();
	}

	private void MakeInventoryUndroppable() 
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- MakeInventoryUndroppable() activated");
		for (int i = 0; i < MAXPLAYERS; i++) 
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [2 - player#]: i: %d", i);
			if (playeringame[i] && players[i].mo != null) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [3 - playeringame]: i: %d", i);
				for (Inventory item = players[i].mo.Inv; item != null; item = item.Inv) 
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [4 - item check]: i: %d, %s", i, item.GetClassName());
					bool keepWeapons = true; // Defaulting to true if no value is found
					bool keepBackpacks = true; // Defaulting to true if no value is found
					bool keepWeaponupgrades = true; // Defaulting to true if no value is found 
					bool keepSigil = true; // Defaulting to true if no value is found 
					bool keepInvBarItems = true; // Defaulting to true if no value is found
					bool keepKeys = false; // Defaulting to false if no value is found

					if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
						keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();
					
					if (CVar.FindCVar("exex_deathexitkeepbackpacks") != null)
						keepBackpacks = CVar.FindCVar("exex_deathexitkeepbackpacks").GetBool();
					
					if (CVar.FindCVar("exex_deathexitkeepweaponupgrades") != null)
						keepWeaponUpgrades = CVar.FindCVar("exex_deathexitkeepweaponupgrades").GetBool();
					
					if (CVar.FindCVar("exex_deathexitkeepsigil") != null)
						keepSigil = CVar.FindCVar("exex_deathexitkeepsigil").GetBool();
					
					if (CVar.FindCVar("exex_deathexitkeepinventoryitems") != null)
						keepInvBarItems = CVar.FindCVar("exex_deathexitkeepinventoryitems").GetBool();
						
					if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
						keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();
					
					// Save the item's actual UNDROPPABLE and UNTOSSABLE tags
					ItemData id = new('ItemData');
					id.savedItem = item;
					id.wasUndroppable = item.bUndroppable;
					id.wasUntossable = item.bUntossable;
					id.hadAmount = item.Amount;
					dropBlockers.Push(id);

					if (!keepWeapons && 
							(item is 'Weapon' ||
							 item is 'BasicArmor' ||
							 item is 'KGArmor' ||
							 item is 'HexenArmor' ||
							 item is 'Ammo' ||
							 item is 'VacAmmoCounter'))
					{
						// Make the weapon/armor/ammo droppable so it will be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						// This is done so you actually do a Pistol Start when intended if you decided to not keep weapons !
						if (keepSigil &&
								(item is 'SigilDD' || 
								item is 'SigilPieces' || 
								item is 'SigilModeType'))
						{
							// Make the items undroppable so it won't be removed during a map-initiated
							// inventory reset, we'll restore their actual values at the beginning of the next level
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5g - make item undroppable/untossable (Sigil Found)]: \c-%s", item.GetClassName());
							item.bUndroppable = true;
							item.bUntossable = true;
						}
						else
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5a - KeepWeapons off]: \c-%s", item.GetClassName());
							item.bUndroppable = false;
							item.bUntossable = false;
						}
					}
					else
					if (!keepBackPacks &&
							(item is 'Backpack' ||
							 item is 'BackpackTier1' ||
							 item is 'BackpackTier2'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5b - keepBackPacks off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!keepWeaponUpgrades &&
							(item is 'BlunderShotUpgrade' || 
							 item is 'CBombUpgrade' || 
							 item is 'SuperVacUpgrade' || 
							 item is 'GrimophoneUpgrade' || 
							 item is 'ArmorScavengerKit' || 
							 item is 'HellWarriorShieldLevel'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5c - keepWeaponUpgrades off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!keepSigil &&
							(item is 'SigilDD' || 
							 item is 'SigilPieces' || 
							 item is 'SigilModeType'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5d - KeepSigil off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else 
					if (!keepInvBarItems && 
							(item is 'ExExInvBarItem' || 
							 item is 'KilletanteEffigy'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5e - KeepInvBarItems off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else 
					if (!KeepKeys &&
							(item is 'Key'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5f - KeepKeys off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					{
						// Make the items undroppable so it won't be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5g - make item undroppable/untossable]: \c-%s", item.GetClassName());
						item.bUndroppable = true;
						item.bUntossable = true;
					}
				}
			}
		}
	}
    
	private void ResetResurrectionQueue(int i) 
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResetResurrectionQueue(%d) activated", i);
		if (playeringame[i] && players[i].mo != null)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [2 - playeringame]\c-: %d", i);
			int delIndex = playersToResurrect.Find(i);

			if (delIndex < playersToResurrect.Size())
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [3 - delIndex (\c-i: %d\c[green])\c-: %d", i, delindex);
				playersToResurrect.Delete(delIndex);
				playersToResurrect.ShrinkToFit();
			}
		}
	}

	// Event functions override
	override void OnRegister()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- OnRegister() activated");
		isNewGame=true;
		dropBlockers.Clear();
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [1 - isNewGame]:\c- : %d", isNewGame);
 
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [2 - playerNeedsRestore to false]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}
	
	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e) 
	{
		actor player = players[0].mo;
		array<int> fs_textures;
		array<string> fs_sndinfo;
		string defaultSndinfo;

		array<string> allSF;
		StringTable.Localize("$STEP_FLATS").Split(allSF,":");
		Console.Printf("Default Footsteps TXT Loaded");
		StringTable.Localize("$STEP_FLATSOTEX").Split(allSF,":");
		Console.Printf("OTex Footsteps TXT Loaded");
		// Trilogy-Specific
		StringTable.Localize("$STEP_FLATSDDT").Split(allSF,":");
		Console.Printf("DDT Footsteps TXT Loaded");
		// Other CompatPacks
		if (Wads.CheckNumForName("EE-AUGZEN", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSAUGZEN").Split(allSF,":");
			Console.Printf("AUGER;ZENITH Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSBLOOM").Split(allSF,":");
			Console.Printf("BlooM Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-CIRCUS2", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSCIRCUS2").Split(allSF,":");
			Console.Printf("Circus2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-KDIZD", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSKDIZD").Split(allSF,":");
			Console.Printf("KDIZD Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-TCOTDA", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSTCOTDA").Split(allSF,":");
			Console.Printf("TCOTDA Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-TUTNT", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSTUTNT").Split(allSF,":");
			Console.Printf("Ultimate Torment and Torture Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-UNFAM", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSUNFAM").Split(allSF,":");
			Console.Printf("Unfamiliar Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSSTAEONS").Split(allSF,":");
			Console.Printf("Strange Aeons Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-EPIC2", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSEPIC2").Split(allSF,":");
			Console.Printf("Epic2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-HELLG", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSHELLG").Split(allSF,":");
			Console.Printf("Hell Ground Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSUOHYM").Split(allSF,":");
			Console.Printf("UOHYM TXT Loaded");
		}
		
		for (int j = allSF.Size() - 1; j >= 0; j -= 1)
		{
			string s = StringTable.Localize(String.Format("$STEP_%s", allSF[j]));
			//Console.Printf("[EVENT] j: %d, %s, string: %s [Length: %d]", j, allSF[j], s, s.Length());
			
			if (s.Length() != 0)
			{
				textureid t = TexMan.CheckForTexture(allSF[j], TexMan.TYPE_ANY);
				if (t.Exists())
				{
					//Console.Printf("[EVENT 2] j: %d, %s", j, allSF[j]);
					fs_textures.Push(int(t));
					
					fs_sndinfo.Push(s);
				}
			}
		}
		defaultSndinfo = StringTable.Localize("$STEP_DEFAULT");
		
		int nofsttxts = 0;
		int nofsttxts2 = 0;
		for (let i = 0, l = level.Sectors.Size(); i < l; i++)
		{
			int idx;
			int textfound = 0;
			string texname;
			/*
			Console.Printf("centfloor [%d]: %.4f", i, level.Sectors[i].CenterFloor());
			Console.Printf("centceiling [%d]: %.4f", i, level.Sectors[i].CenterCeiling());
			Console.Printf("centerspot [%d]: %.4f x %.4f", i, level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y);
			let p = SectorChecker(Actor.Spawn("SectorChecker", (level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y, level.Sectors[i].CenterFloor()), ALLOW_REPLACE));
			if (p)
			{
				p.place = i;
				texname = texman.GetName(p.floorpic);
				idx = fs_textures.Find(int(p.floorpic));
				if (idx == fs_textures.Size()) textfound = false;
																	else textfound = true;
				//Console.Printf("x: %.4f, y: %.4f, z: %.4f, floorpic: %d [%s] [idx: %d]", p.pos.x, p.pos.y, p.pos.z, int(p.floorpic), texname, idx);
			}
			*/
			
			texname = texman.GetName(level.Sectors[i].GetTexture(sector.floor));
			idx = fs_textures.Find(int(level.Sectors[i].GetTexture(sector.floor)));
			if (idx != fs_textures.Size()) textfound = 1;
			else 
			{
				if (texname == "" || 
						texname == "-NOFLAT-") textfound = -1;
				if (texname == "DOPE2 R") textfound = -1;
				if (texname == "STEP1" || 
						texname == "STEP2" || 
						texname == "STEP3" ||
					texname == "A-DAN1" ||
					texname == "A-DAN2" ||
					texname == "A-DAN3" ||
					texname == "A-DAN4" ||
					texname == "A-DAN5" ||
					texname == "GRNROCK") textfound = -1;
				else nofsttxts++;
			}
			
			if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava') level.Sectors[i].damagetype = 'Magma';
			if (level.Sectors[i].damagetype == 'Ice') level.Sectors[i].damagetype = 'IceWater';
			if (dydudebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
			
			int damageamt = level.Sectors[i].damageamount;
			int damageint = level.Sectors[i].damageinterval;
			int leakdam = level.Sectors[i].leakydamage;
			string damagetyp = level.Sectors[i].damagetype;
			double sectgrav = level.Sectors[i].gravity;
			
			if (dydudebug_footsteps || dydudebug_footsteps2)
			{
				String SecPrint = "Sector #: ";
				SecPrint.AppendFormat("%d, ", i);
				if (textfound > 0) SecPrint.AppendFormat("\c[green]-floorpic: %s\c-", texname);
				else if (textfound < 0) SecPrint.AppendFormat("\c[yellow]=floorpic: %s\c-", texname);
				else SecPrint.AppendFormat("\c[red]~floorpic: %s\c-", texname);
				if (sectgrav != 1.0) SecPrint.AppendFormat("\c[green]gravity: %.4f\c-, ", sectgrav);
				if (damagetyp != 'None' || damageamt > 0 || damageint) SecPrint.AppendFormat(", \c[brick]damagetype: %s, damageamount: %d, damageinterval: %d, leakydamage: %d / 256", damagetyp, damageamt, damageint, leakdam);
				Console.Printf(SecPrint);
			}
		}
		if (nofsttxts > 0)
		{
			if (dydudebug_footsteps || dydudebug_footsteps2) player.A_StartSound("step/squeaky1",1002);
			Console.Printf("# of textures found with no footstep definitions [\cy%s\c-]: \c[red]%d\c-", level.mapname, nofsttxts);
		}
		
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldLoaded() activated");
		// This will be done only by the first player entering
		// Restoring undroppable and untossable stats for all inventory items !
		// VERY IMPORTANT to keep the intended behaviour of all items/weapons/...
		RestoreItemsState();

		// Once we're done loading a level, regardless of what happened beforehand,
		// this is not a new game anymore ! Also we're done restoring anything, so clear arrays
		isNewGame = false;
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [2 - isNewGame to false]\c-: %d", isNewGame);

		// World is loaded, everything is done, no players to restore, safe cleanup in prevision of next level
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			playerNeedsRestore[i] = false;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [3 - playerNeedsRestore to false]\c-: i: %d", i);
		}
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldUnloaded() activated");
		// World is unloaded from save, we don't restore inventory, and this is not a new game
		if (e.IsSaveGame)
		{
			isNewGame = false;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2a - IsSaveGame to false]\c-: %d", isNewGame);
			
			// Try to reset the resurrection queue on a save reload (after dying) to circumvent a major issue with the base Universal Keeper mod. - Misfit
			for (int i = 0; i < MAXPLAYERS; i++) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded (clear resurrect queue) [3 - player#]\c-: %d", i);
				ResetResurrectionQueue(i);
			}
		}
		/* This is a new game, all future world loads are level exits except for saves (above)
		 and new games (in which case isNewGame will be true again) */
		else if (!isNewGame) 
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2b - !isNewGame]\c-");
			/* We manually remove all weapons and give back a default inventory
			   Later on we give back the correct amount of said inventory, as some mods'
			   default inventories may include inventory item that will get stacked here */
			ManageWeapons();

			/* Key Checking - Misfit Added :V */
			ManageKeys();
			
			/* Manage Health - Misfit Added :V */
			ManageHealth();

			// We make all inventory undroppable so ResetInventory can't do its job
			MakeInventoryUndroppable();

			/* We resurrect dead players no matter what (EVEN if we did get here from
			   a new game or savegame the player entity would be replaced by a new one
			   after the load ! */
			ResurrectPlayers();
			BackupInventories();
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerEntered() activated");
		RestorePlayerInvState(e.playerNumber);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerRespawned() activated");
		ResetResurrectionQueue(e.playerNumber);
	}

	override void PlayerDied(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerDied() activated");
		if (playeringame[e.playerNumber] && players[e.playerNumber].mo != null)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]PlayerDied [2 - playersToResurrect]\c: %d", e.playerNumber);
			playersToResurrect.Push(e.playerNumber);
		}
	}
	
	override void NewGame()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- NewGame() activated");
		isNewGame = true;
		dropBlockers.Clear();
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]NewGame [2 - isNewGame]\c-: %d", isNewGame);

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]NewGame [3 - playerNeedsRestore]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}
}

class EEWaterHandler : StaticEventHandler 
{
	override void RenderOverlay(RenderEvent e)
	{
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		PPShader.SetUniform1f("EEwatershader", "timer", gametic + e.FracTic);
		int playbloom = Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true);
		int winetics;
		int maxwinetics;
		double winefactor;
		
		bool chasecam = false;
		if (p.cheats & CF_CHASECAM) chasecam = true;
		if (!chasecam)
		{
			if ((playbloom == -1 && p.mo.waterlevel >= 3) || (MiscItem && MiscItem.WineDefTier != 0))
			{
				if (dydudebug_shader)
				{
					PPShader.SetEnabled("EEwatershader", false);
					PPShader.SetEnabled("EEwatershader", false);
				}
				else
				{
					PPShader.SetEnabled("EEwatershader", true);
					PPShader.SetEnabled("EEwatershader", true);
					double effectSize = CVar.GetCVar("exex_uweffectsize", p).GetFloat();
					//Console.Printf("effectSize: %.8f", effectSize);
					if (MiscItem)
					{
						if (MiscItem.WineDefTier == 1) maxwinetics = 5;
						if (MiscItem.WineDefTier == -1) maxwinetics = 10;
						if (MiscItem.WineDefTier == 2) maxwinetics = 7;
						if (MiscItem.WineDefTier == -2) maxwinetics = 14;
						if (MiscItem.WineDefTier == 3) maxwinetics = 9;
						if (MiscItem.WineDefTier == -3) maxwinetics = 18;
						if (MiscItem.WineDefTier == 4) maxwinetics = 12;
						if (MiscItem.WineDefTier == -4) maxwinetics = 24;
						if (MiscItem.WineDefTier == 5) maxwinetics = 20;
						if (MiscItem.WineDefTier == -5) maxwinetics = 40;
						maxwinetics *= 17.5;
						/*
						let iitem = p.mo.Inv;
						let item = PowerWine(iitem);
						if (item != null) 
						{
							winetics = item.EffectTics;
							winefactor = double((winetics * 1.0) / (maxwinetics * 1.0));
							if (winefactor > 1.00) winefactor = 1.00;
							Console.Printf("winetics: %d, maxwinetics: %d, winefactor: %.4f [tic: %d]", winetics, maxwinetics, winefactor, gametic);
						}
						*/
						
						double tempeffectsize = 1.0;
						if (MiscItem.isDDTrilogy)
						{
							if (MiscItem.DDChapter == 1) // 10-11y
							{
								if (MiscItem.WineDefTier > 0) tempeffectsize = (MiscItem.WineDefTier * 0.9);
								else if (MiscItem.WineDefTier < 0) tempeffectsize = (MiscItem.WineDefTier * -0.45);
							}
							else
							if (MiscItem.DDChapter == 2) // 11-13y
							{
								if (MiscItem.WineDefTier > 0) tempeffectsize = (MiscItem.WineDefTier * 0.72);
								else if (MiscItem.WineDefTier < 0) tempeffectsize = (MiscItem.WineDefTier * -0.36);
							}
							else
							if (MiscItem.DDChapter == 3) // 16y
							{
								if (MiscItem.WineDefTier > 0) tempeffectsize = (MiscItem.WineDefTier * 0.42);
								else if (MiscItem.WineDefTier < 0) tempeffectsize = (MiscItem.WineDefTier * -0.21);
							}
						}
						else
						{
							if (MiscItem.WineDefTier > 0) tempeffectsize = (MiscItem.WineDefTier * 0.5);
							else if (MiscItem.WineDefTier < 0) tempeffectsize = (MiscItem.WineDefTier * -0.25);
						}
						
						if (MiscItem.WineDefTier != 0)
						{
							if (MiscItem.isDDTrilogy) 
							{
								if (MiscItem.DDChapter == 1) tempeffectsize *= (1.0 - (MiscItem.TruePlayerLevel * 0.022));
								else if (MiscItem.DDChapter == 2) tempeffectsize *= (1.0 - (MiscItem.TruePlayerLevel * 0.0275));
								else if (MiscItem.DDChapter == 3) tempeffectsize *= (1.0 - (MiscItem.TruePlayerLevel * 0.048));
							}
							else tempeffectsize *= (1.0 - (MiscItem.TruePlayerLevel * 0.04));
							//tempeffectsize *= winefactor;
							if (tempeffectsize <= 0.0) tempeffectsize = 0.0;
						}
						
						if (playbloom == -1 && p.mo.waterlevel >= 3) tempeffectsize += 1.0;
						effectSize *= tempeffectsize;
					}
					if ((playbloom == -1 && p.mo.waterlevel >= 3) && p.mo.CountInv("PowerNoDrown")) effectSize *= frandom(0.045,0.055);
					//Console.Printf("effectSize: %.8f, zoom: %.8f [tic: %d]", effectSize, (1 - (effectSize * 2)), gametic);
					PPShader.SetUniform1f("EEwatershader", "waterFactor", effectSize);
					PPShader.SetUniform1f("EEwatershader", "zoomFactor", 1 - (effectSize * 2));
				}
			}
			else 
			{
				PPShader.SetEnabled("EEwatershader", false);
				PPShader.SetEnabled("EEwatershader", false);
			}
		}
		else 
		{
			PPShader.SetEnabled("EEwatershader", false);
			PPShader.SetEnabled("EEwatershader", false);
		}
	}
}

class EVP_FootstepsInit : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			int numfound;
			ThinkerIterator FStepFinder = ThinkerIterator.Create("EVP_Footsteps");
			EVP_Footsteps mo;
			while (mo = EVP_Footsteps(FStepFinder.Next()))
			{
				mo.Destroy();
				numfound++;
				if (dydudebug_footsteps) Console.Printf("Destroying Old EVP_Footsteps Item #%d", numfound);
			}
			if (e.playerNumber == 0)
			{
				let fs = EVP_Footsteps(Actor.Spawn("EVP_Footsteps"));
				if (fs) fs.Init(players[0].mo);
				if (dydudebug_footsteps) Console.Printf("Adding New EVP_Footsteps Item");
			}
		}
	}
}