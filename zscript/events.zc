class DD_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	override void NewGame()
	{
		let globalvars = DDGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		if (dydudebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (DD_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = DDGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int PLuck;
		if (MiscItem) PLuck = MiscItem.PlayerLUCK;
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		int user_base = 0;
		string usertype = "";
		double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
		
		if (spawnee)
		{
			// Tags
			if (spawnname == "DoomImpBall") spawnee.SetTag("Imp Fireball");
			if (spawnname == "CacodemonBall") spawnee.SetTag("Lightning Ball");
			if (spawnname == "RevenantTracer") spawnee.SetTag("Tracer Missile");
			if (spawnname == "ArachnotronPlasma") spawnee.SetTag("Plasma Ball");
			if (spawnname == "ArchvileFire") spawnee.SetTag("Vile FireHex");
			if (spawnname == "BaronBall") spawnee.SetTag("HellNoble Plasma");
			if (spawnname == "FatShot") spawnee.SetTag("Flamer Shot");
			if (spawnname == "Rocket") spawnee.SetTag("Rocket");

			// Changes
			int basehealth = spawnee.SpawnHealth();
			double healthmulfactor = 0.01;
			
			nm = "Balloon_Red"; extracheck = nm;
			nn = "Balloon_Red2"; extracheck2 = nn;
			if (spawnname == extracheck || spawnname == extracheck2)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Green";
					if (user_base == 3) usertype = "Balloon_Yellow";
				}
			}
			nm = "Balloon"; extracheck = nm;
			nn = "BallTarg"; extracheck2 = nn;
			if (spawnname == extracheck || spawnname == extracheck2)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallGreen";
					if (user_base == 2) usertype = "BallYel";
				}
			}

			nm = "Balloon_Yellow"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Green";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			nm = "BallYel"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallGreen";
					if (user_base == 2) usertype = "Balloon";
				}
			}

			nm = "Balloon_Green"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Blue";
					if (user_base == 2) usertype = "Balloon_Yellow";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			nm = "BallGreen"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,2);
					if (user_base == 1) usertype = "BallYel";
					if (user_base == 2) usertype = "Balloon";
				}
			}

			nm = "Balloon_Blue"; extracheck = nm; 
			if (spawnname == extracheck)
			{
				if (random(1,16) <= 1)
				{
					user_base = random(1,3);
					if (user_base == 1) usertype = "Balloon_Green";
					if (user_base == 2) usertype = "Balloon_Yellow";
					if (user_base == 3) usertype = "Balloon_Red";
				}
			}
			if (user_base)
			{
				//Console.Printf("%s [2]", spawnname);
				spawnee.A_SpawnItemEx(usertype,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
				spawnee.Destroy();
			}
			
			bool specialenemy = false;
			bool ispeasant = false;
			// Strife Peasants
			if (Peasant(spawnee)) ispeasant = true;

			// Eviternity's Archangelus Boss
			nm = "ArchangelusA"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.0075;
				if (Skill == 1) healthmulfactor = 0.00875;
				if (Skill == 2) healthmulfactor = 0.01;
				if (Skill == 3) healthmulfactor = 0.01125;
				if (Skill >= 4) healthmulfactor = 0.0125;
				basehealth *= (1.0 * (MiscItem.PlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 12;
				if (Skill == 1) basehealth *= 14;
				if (Skill == 2) basehealth *= 16;
				if (Skill == 3) basehealth *= 18;
				if (Skill >= 4) basehealth *= 20;
				spawnee.health *= basehealth;
				specialenemy = true;
			}
			nn = "ArchangelusB"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.01125;
				if (Skill == 1) healthmulfactor = 0.013125;
				if (Skill == 2) healthmulfactor = 0.015;
				if (Skill == 3) healthmulfactor = 0.016875;
				if (Skill >= 4) healthmulfactor = 0.01875;
				basehealth *= (1.0 * (MiscItem.PlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 12;
				if (Skill == 1) basehealth *= 14;
				if (Skill == 2) basehealth *= 16;
				if (Skill == 3) basehealth *= 18;
				if (Skill >= 4) basehealth *= 20;
				spawnee.health = basehealth;
				specialenemy = true;
			}
			// TUTNT's Source Boss
			nm = "TheSource"; extracheck = nm;
			if (spawnname == extracheck) 
			{
				if (Skill <= 0) healthmulfactor = 0.005625;
				if (Skill == 1) healthmulfactor = 0.0065625;
				if (Skill == 2) healthmulfactor = 0.0075;
				if (Skill == 3) healthmulfactor = 0.0084375;
				if (Skill >= 4) healthmulfactor = 0.009375;
				basehealth *= (1.0 * (MiscItem.PlayerLevel * healthmulfactor));
				if (Skill <= 0) basehealth *= 6;
				if (Skill == 1) basehealth *= 7;
				if (Skill == 2) basehealth *= 8;
				if (Skill == 3) basehealth *= 9;
				if (Skill >= 4) basehealth *= 10;
				spawnee.health = basehealth;
				specialenemy = true;
			}
			
			// Going Down's MAP29 "Boss"
			if (player.CountInv("PlayingGoingDown") && WolfensteinSS(spawnee))
			{
				//Console.Printf("24523");
				spawnee.health = 12000;
				specialenemy = true;
			}

			if (Revenant(spawnee)) spawnee.ProjectilePassHeight = 84;
			if (Demon1(spawnee) || Demon2(spawnee)) spawnee.ProjectilePassHeight = 104;

			if (ArchvileFire(spawnee))
			{
				spawnee.A_SetRenderStyle(frandom(0.625,0.875),STYLE_Add);
			}

			// Monster "Scaling"
			if (spawnee.bISMONSTER)
			{
				double origSpd = spawnee.Speed;
				double origDmgMul = spawnee.DamageMultiply;
				double origDmgFct = spawnee.DamageFactor;
				double origHealth = spawnee.health;
				double origMass = spawnee.Mass;

				hpmulti = 0.00;
				atkmulti = 0.00;
				defmulti = 0.00;
				spdmulti = 0.00;
				massmulti = 0.00;
				if (!specialenemy || !ispeasant)
				{
					double mult;
					double multbase = 1;
					int basedivfactor = 16;
					// PlayerLevel Scaling
					if (random(1,basedivfactor) <= 1)
					{
						if (random(1,basedivfactor) <= 1)
						{
							if (random(1,basedivfactor) <= 1)
							{
								if (random(1,basedivfactor) <= 1)
								{
									if (random(1,basedivfactor) <= 1)
									{
										if (random(1,basedivfactor) <= 1)
										{
											if (random(1,basedivfactor) <= 1)
											{
												if (random(1,basedivfactor) <= 1)
												{
													if (random(1,basedivfactor) <= 1)
													{
														multbase = 8;
													}
													else
													{
														multbase = 7;
													}
												}
												else
												{
													multbase = 6;
												}
											}
											else
											{
												multbase = 5;
											}
										}
										else
										{
											multbase = 4;
										}
									}
									else
									{
										multbase = 3;
									}
								}
								else
								{
									multbase = 2;
								}
							}
							else
							{
								multbase = 1.5;
							}
						}
						else
						{
							multbase = 1.25;
						}
					}
					if (DDOrigCreature(spawnee)) multbase *= frandompick(1.5,2.25,3);
					if (DDOrigBoss(spawnee)) multbase *= frandompick(3,4.5,6);
					if (random(1,64) <= 1) multbase *= 4;
					if (random(1,256) <= 1) multbase *= 4;
					if (random(1,1024) <= 1) multbase *= 4;
					multbase *= exex_enemyscalelevelmultiplier;
					
					if (exex_enemyscalingplevel && globalvars && MiscItem)
					{
						if (spawnee.bFRIENDLY)
						{
							// Speed
							if (skill <= 0) mult = 0.00275;
							if (skill == 1) mult = 0.002625;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002375;
							if (skill >= 4) mult = 0.00225;
							mult *= multbase;
							if (MiscItem) spdmulti += ((MiscItem.PlayerLevel * mult) - (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2))));
							
							// Attack
							if (skill <= 0) mult = 0.0055;
							if (skill == 1) mult = 0.00525;
							if (skill == 2) mult = 0.005;
							if (skill == 3) mult = 0.00475;
							if (skill >= 4) mult = 0.0045;
							mult *= multbase;
							if (MiscItem) atkmulti += ((MiscItem.PlayerLevel * mult) - (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2))));
							
							// Defense
							if (skill <= 0) mult = 0.001375;
							if (skill == 1) mult = 0.0013125;
							if (skill == 2) mult = 0.00125;
							if (skill == 3) mult = 0.0011875;
							if (skill >= 4) mult = 0.001125;
							mult *= multbase;
							if (MiscItem) defmulti += ((MiscItem.PlayerLevel * mult) - (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2))));
							
							// Health
							if (skill <= 0) mult = 0.0022;
							if (skill == 1) mult = 0.0021;
							if (skill == 2) mult = 0.0020;
							if (skill == 3) mult = 0.0019;
							if (skill >= 4) mult = 0.0018;
							mult *= multbase;
							if (MiscItem) hpmulti += floor(origHealth * ((MiscItem.PlayerLevel * mult) + (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)))));
							
							// Mass
							if (skill <= 0) mult = 0.0055;
							if (skill == 1) mult = 0.00525;
							if (skill == 2) mult = 0.005;
							if (skill == 3) mult = 0.00475;
							if (skill >= 4) mult = 0.0045;
							mult *= multbase;
							if (MiscItem) massmulti += floor(spawnee.mass * ((MiscItem.PlayerLevel * mult) + (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)))));
						}
						else
						{
							int LuckRoll;
							if (MiscItem)
							{
								if (skill <= 0) LuckRoll = random((MiscItem.PlayerLevel*0.25),MiscItem.PlayerLevel);
								if (skill == 1) LuckRoll = random((MiscItem.PlayerLevel*0.375),MiscItem.PlayerLevel);
								if (skill == 2) LuckRoll = random((MiscItem.PlayerLevel*0.5),MiscItem.PlayerLevel);
								if (skill == 3) LuckRoll = random((MiscItem.PlayerLevel*0.625),MiscItem.PlayerLevel);
								if (skill >= 4) LuckRoll = random((MiscItem.PlayerLevel*0.75),MiscItem.PlayerLevel);
							}
							if (dydudebug_monsterscaling) Console.Printf("\c[fire]%s\c- PLevel: [multbase: %.8f, LuckRoll: %d]", spawnname, multbase, LuckRoll);
							
							// Speed
							if (skill <= 0) mult = 0.0015;
							if (skill == 1) mult = 0.0016875;
							if (skill == 2) mult = 0.001875;
							if (skill == 3) mult = 0.0020625;
							if (skill >= 4) mult = 0.00225;
							mult *= multbase;
							spdmulti += (LuckRoll * mult);
							
							// Attack
							if (skill <= 0) mult = 0.0020;
							if (skill == 1) mult = 0.00225;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.00275;
							if (skill >= 4) mult = 0.0030;
							mult *= multbase;
							atkmulti += (LuckRoll * mult);
							
							// Defense
							if (skill <= 0) mult = 0.0005;
							if (skill == 1) mult = 0.0005625;
							if (skill == 2) mult = 0.000625;
							if (skill == 3) mult = 0.0006875;
							if (skill >= 4) mult = 0.00075;
							mult *= multbase;
							defmulti += (LuckRoll * mult);
							
							// Health
							if (skill <= 0) mult = 0.0010;
							if (skill == 1) mult = 0.001125;
							if (skill == 2) mult = 0.00125;
							if (skill == 3) mult = 0.001375;
							if (skill >= 4) mult = 0.0015;
							mult *= multbase;
							hpmulti += ceil(origHealth * (LuckRoll * mult));
							
							// Mass
							if (skill <= 0) mult = 0.0025;
							if (skill == 1) mult = 0.0028125;
							if (skill == 2) mult = 0.003125;
							if (skill == 3) mult = 0.0034375;
							if (skill >= 4) mult = 0.00375;
							mult *= multbase;
							massmulti += ceil(spawnee.mass * (LuckRoll * mult));
						}
					}
					
					// Map Scaling
					multbase = 1;
					basedivfactor = 16;
					if (random(1,basedivfactor) <= 1)
					{
						if (random(1,basedivfactor) <= 1)
						{
							if (random(1,basedivfactor) <= 1)
							{
								if (random(1,basedivfactor) <= 1)
								{
									if (random(1,basedivfactor) <= 1)
									{
										if (random(1,basedivfactor) <= 1)
										{
											if (random(1,basedivfactor) <= 1)
											{
												if (random(1,basedivfactor) <= 1)
												{
													if (random(1,basedivfactor) <= 1)
													{
														multbase = 8;
													}
													else
													{
														multbase = 7;
													}
												}
												else
												{
													multbase = 6;
												}
											}
											else
											{
												multbase = 5;
											}
										}
										else
										{
											multbase = 4;
										}
									}
									else
									{
										multbase = 3;
									}
								}
								else
								{
									multbase = 2;
								}
							}
							else
							{
								multbase = 1.5;
							}
						}
						else
						{
							multbase = 1.25;
						}
					}
					if (random(1,64) <= 1) multbase *= 4;
					if (random(1,256) <= 1) multbase *= 4;
					if (random(1,1024) <= 1) multbase *= 4;
					multbase *= exex_enemyscalemapmultiplier;
					
					if (exex_enemyscalingmaps)
					{
						if (spawnee.bFRIENDLY)
						{
							if (dydudebug_monsterscaling) Console.Printf("\c[sapphire]%s\c- Maps:  [multbase: %.8f]", spawnname, multbase);
							// Speed
							if (skill <= 0) mult = 0.0055;
							if (skill == 1) mult = 0.00525;
							if (skill == 2) mult = 0.005;
							if (skill == 3) mult = 0.00475;
							if (skill >= 4) mult = 0.0045;
							mult *= multbase;
							if (globalvars) spdmulti += (globalvars.MapsFinished * mult);
							
							// Attack
							if (skill <= 0) mult = 0.011;
							if (skill == 1) mult = 0.0105;
							if (skill == 2) mult = 0.010;
							if (skill == 3) mult = 0.0095;
							if (skill >= 4) mult = 0.009;
							mult *= multbase;
							if (globalvars) atkmulti += (globalvars.MapsFinished * mult);
							
							// Defense
							if (skill <= 0) mult = 0.00275;
							if (skill == 1) mult = 0.002625;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002375;
							if (skill >= 4) mult = 0.00225;
							mult *= multbase;
							if (globalvars && MiscItem) defmulti += ((globalvars.MapsFinished * mult) - (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2))));
							
							// Health
							if (skill <= 0) mult = 0.0044;
							if (skill == 1) mult = 0.0042;
							if (skill == 2) mult = 0.0040;
							if (skill == 3) mult = 0.0038;
							if (skill >= 4) mult = 0.0036;
							mult *= multbase;
							if (globalvars && MiscItem) hpmulti += floor(origHealth * ((globalvars.MapsFinished * mult) + (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)))));
							
							// Mass
							if (skill <= 0) mult = 0.011;
							if (skill == 1) mult = 0.0105;
							if (skill == 2) mult = 0.010;
							if (skill == 3) mult = 0.0095;
							if (skill >= 4) mult = 0.009;
							mult *= multbase;
							if (globalvars && MiscItem) massmulti += floor(spawnee.mass * ((globalvars.MapsFinished * mult) + (MiscItem.PlayerLUCK * frandompick(0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)))));
						}
						else
						{
							int LuckRoll;
							if (globalvars)
							{
								if (skill <= 0) LuckRoll = random((globalvars.MapsFinished*0.25),globalvars.MapsFinished);
								if (skill == 1) LuckRoll = random((globalvars.MapsFinished*0.375),globalvars.MapsFinished);
								if (skill == 2) LuckRoll = random((globalvars.MapsFinished*0.5),globalvars.MapsFinished);
								if (skill == 3) LuckRoll = random((globalvars.MapsFinished*0.625),globalvars.MapsFinished);
								if (skill >= 4) LuckRoll = random((globalvars.MapsFinished*0.75),globalvars.MapsFinished);
							}
							if (dydudebug_monsterscaling) Console.Printf("\c[fire]%s\c- Maps: [multbase: %.8f, LuckRoll: %d]", spawnname, multbase, LuckRoll);
							
							// Speed
							if (skill <= 0) mult = 0.0030;
							if (skill == 1) mult = 0.003375;
							if (skill == 2) mult = 0.00375;
							if (skill == 3) mult = 0.004125;
							if (skill >= 4) mult = 0.0045;
							mult *= multbase;
							spdmulti += (LuckRoll * mult);
							
							// Attack
							if (skill <= 0) mult = 0.0040;
							if (skill == 1) mult = 0.0045;
							if (skill == 2) mult = 0.005;
							if (skill == 3) mult = 0.0055;
							if (skill >= 4) mult = 0.0060;
							mult *= multbase;
							atkmulti += (LuckRoll * mult);
							
							// Defense
							if (skill <= 0) mult = 0.0010;
							if (skill == 1) mult = 0.001125;
							if (skill == 2) mult = 0.00125;
							if (skill == 3) mult = 0.001375;
							if (skill >= 4) mult = 0.0015;
							mult *= multbase;
							defmulti += (LuckRoll * mult);
							
							// Health
							if (skill <= 0) mult = 0.0020;
							if (skill == 1) mult = 0.00225;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.00275;
							if (skill >= 4) mult = 0.0030;
							mult *= multbase;
							hpmulti += ceil(origHealth * (LuckRoll * mult));
							
							// Mass
							if (skill <= 0) mult = 0.0050;
							if (skill == 1) mult = 0.005625;
							if (skill == 2) mult = 0.00625;
							if (skill == 3) mult = 0.006875;
							if (skill >= 4) mult = 0.0075;
							mult *= multbase;
							massmulti += ceil(spawnee.mass * (LuckRoll * mult));
						}
					}
					// Final Calcs
					if (spdmulti) 
					{
						if (spdmulti >= 5) spdmulti = 5;
						spawnee.Speed *= (1.0 + spdmulti);
					}
					if (dydudebug_monsterscaling) Console.Printf("Speed: %.8f [old: %.8f, multi: %.8f]", spawnee.Speed, origSpd, spdmulti);
					if (atkmulti) 
					{
						if (atkmulti >= 9.0) atkmulti = 9.0;
						spawnee.DamageMultiply *= (1.0 + atkmulti);
					}
					if (dydudebug_monsterscaling) Console.Printf("DamageMultiply: %.8f [old: %.8f, multi: %.8f]", spawnee.DamageMultiply, origDmgMul, atkmulti);
					if (defmulti) 
					{
						if (defmulti >= 0.9) defmulti = 0.9;
						spawnee.DamageFactor *= (1.0 - defmulti);
					}
					if (dydudebug_monsterscaling) Console.Printf("DamageFactor: %.8f [old: %.8f, multi: %.8f]", spawnee.DamageFactor, origDmgFct, defmulti);
					if (hpmulti) 
					{
						spawnee.health += hpmulti;
						spawnee.Stamina = hpmulti;
					}
					if (dydudebug_monsterscaling) Console.Printf("Health: %d [old: %d, diff: %d]", spawnee.health, origHealth, hpmulti);
					if (massmulti) 
					{
						spawnee.mass += massmulti;
						spawnee.Accuracy = massmulti;
					}
					if (dydudebug_monsterscaling) Console.Printf("Mass: %d [old: %d, diff: %d]", spawnee.Mass, origMass, massmulti);
				}
			}
		}
		Super.WorldThingSpawned(e);
	}

	override void WorldThingRevived(WorldEvent e)
	{
		actor spawnee = e.thing;
		string spawnname = spawnee.GetClassName();
		if (spawnee)
		{
			DedMonsterFlag dedcheckitem;
			dedcheckitem = DedMonsterFlag(spawnee.FindInventory("DedMonsterFlag"));
			if (dedcheckitem)
			{
				spawnee.A_SetRenderStyle(dedcheckitem.ownerorigalpha,dedcheckitem.ownerorigrender);
				dedcheckitem.Destroy();
			}
			
			if (spawnee)
			{
				spawnee.A_SetInventory("JustRevived",1);
				if (dydudebug_ressurrectdisplays) Console.Printf("Res: Max Health - %d (%d + %d)", (spawnee.SpawnHealth() + spawnee.Stamina), spawnee.SpawnHealth(), spawnee.Stamina); 
				if (spawnee.bISMONSTER && spawnee.Stamina > 0)
				{
					spawnee.health = spawnee.SpawnHealth() + spawnee.Stamina;
				}
			}
		}
		Super.WorldThingRevived(e);
	}

	override void WorldThingDamaged(WorldEvent e)
	{
		if (dydudebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int blundebuff = 0;
		int scramblerdebuff = 0;
		actor victim = e.Thing;
		actor source = e.DamageSource;
		actor inflicter = e.inflictor;
		int dmg = e.damage;
		int initdmg = e.damage;
		string mod = e.damagetype;
		int flags = e.DamageFlags;
		int PLuck;
		int TrueLuck;
		let globalvars = DDGlobalVariables.Get();
		if (MiscItem) 
		{
			PLuck = MiscItem.PlayerLUCK;
			if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
			if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
			if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
			if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
			if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
		}
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		
		if (victim)
		{
			if (dydudebug_hitsounds) Console.Printf("hitsounds (victim check)");
			int oldhealth = victim.health;

			string victname = victim.GetTag();
			string atkrname = "(?)";
			int user_type;
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			int landdamagebonus;

			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();

			bool showdmglog;
			bool practicetarget;
			
			int specialtype;
			nm = "CCardGhostMarker";
			if (victim.CountInv(nm)) specialtype += 1;
			nm = "CCardAssassinMarker";
			if (victim.CountInv(nm)) specialtype += 2;
			nm = "CCardRespawnedMarker";
			if (victim.CountInv(nm)) specialtype += 4;
			if (dydudebug_worlddamaged) Console.Printf("[%s] SpecialType [WorldDamaged]: %d", vict, specialtype);

			/*
			// Ally Check
			actor IsRebel;
			if (!DDPlayerPawn(victim) && DDPlayerPawn(source))
			{
				if (victim.bFRIENDLY)
				{
					if (victim.master && DDPlayerPawn(victim.master))
					{
						if (e.damage)
						{
							e.damage = 0;
							if (dydudebug_worlddamaged) Console.Printf("Victim is Player's ally! No Damage inflicted!");
							Super.WorldThingDamaged(e);
							return;
						}
					}
					else
					{
						if (IsRebel = Rebel(victim) && e.damage)
						{
							e.damage = 0;
							if (dydudebug_worlddamaged) Console.Printf("Victim is Strife Rebel! No Damage inflicted!");
							Super.WorldThingDamaged(e);
							return;
						}
					}
				}
			}
			*/
			
			if (victim.bCOUNTKILL || specialtype) showdmglog = true;
			if (vict == "PracticeTarget" || vict == "PracticeTarget2") 
			{
				practicetarget = true;
				showdmglog = true;
			}
			if (vict == "BossBrainNew") showdmglog = true;
			if (DDPlayerPawn(victim)) showdmglog = false;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
			if (showdmglog)
			{
				//Console.Printf("showdmglog");

				if (dydudebug_worlddamaged) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
				
				if (victim.health > 0 && victim.bISMONSTER)
				{
					if (source && DDPlayerPawn(source)) //
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem) landdamagebonus = MiscItem.landdmgbonus;
						if (dydudebug_worlddamaged) Console.Printf("landdamagebonus: %d", landdamagebonus);
					}
					if (!practicetarget)
					{
						if (infl == "PlayerWhistle")
						{
							double ang;
							if (source) ang = source.angle;
							else if (inflicter) ang = inflicter.angle;
							double force = frandompick(13.75,15,16.25);
							force *= 0.25;
							if (inflicter && (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD"))) force *= frandompick(1.5,2,2.5);

							victim.Vel.Z += force;
							victim.thrust(force, (ang + frandompick(-3,-1.5,-1.5,0,0,0,0,0,1.5,1.5,3)));
						}
						if (infl == "UppercutPuff")
						{
							double ang;
							if (source) ang = source.angle;
							else if (inflicter) ang = inflicter.angle;
							double force = frandompick(27.5,30,32.5);
							force *= 0.25;
							if (inflicter)
							{
								if (source.CountInv("PowerStrength") || source.CountInv("PowerStrengthDD")) force *= frandompick(1.125,1.25,1.375);
								if (source.CountInv("DinahTrueIPState")) force *= 12.5;
							}

							if (random(1,8) <= 1) force *= 1.5;
							victim.Vel.Z += force;
							victim.thrust(force, (ang + frandompick(-6,-3,-3,0,0,0,0,0,3,3,6)));
						}
					}

					if (!victim.bINVULNERABLE || !practicetarget)
					{
						// Scrambler = Inflicts confusion/fear on enemies occasionally, causing hestitation in combat
						if (PanPuff(inflicter))
						{
							if (!victim.bNOFEAR)
							{
								double basedebuffchance = 25.0;
								int basepoint = 15;
								if (MiscItem)
								{
									if (MiscItem.PlayerLevel >= (basepoint * 0.5)) basedebuffchance = 25.625;
									if (MiscItem.PlayerLevel >= (basepoint * 1.0)) basedebuffchance = 26.25;
									if (MiscItem.PlayerLevel >= (basepoint * 2.0)) basedebuffchance = 27.5;
									if (MiscItem.PlayerLevel >= (basepoint * 3.0)) basedebuffchance = 28.75;
									if (MiscItem.PlayerLevel >= (basepoint * 4.0)) basedebuffchance = 30.0;
									if (MiscItem.PlayerLevel >= (basepoint * 5.0)) basedebuffchance = 31.25;
									if (MiscItem.PlayerLevel >= (basepoint * 6.0)) basedebuffchance = 32.5;
									if (MiscItem.PlayerLevel >= (basepoint * 7.0)) basedebuffchance = 33.75;
									if (MiscItem.PlayerLevel >= (basepoint * 8.0)) basedebuffchance = 35.0;
									if (MiscItem.PlayerLevel >= (basepoint * 9.0)) basedebuffchance = 37.5;
								}
								if (PLuck) 
								{
									if (MiscItem)
									{
										if (MiscItem.PlayerLevel >= 0) basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (MiscItem.PlayerLevel >= (basepoint * 3.0)) basedebuffchance += (TrueLuck * frandompick(0,0,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (MiscItem.PlayerLevel >= (basepoint * 6.0)) basedebuffchance += (TrueLuck * frandompick(0,0.25,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
										else if (MiscItem.PlayerLevel >= (basepoint * 9.0)) basedebuffchance += (TrueLuck * frandompick(0.25,0.25,0.25,0.25,0.5,0.5,0.5,1.0,2.0));
									}
									else basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
								}
								if (Teacher_VokterClone(victim))
								{
									if (victim.CountInv("VokterCloneShield") || victim.CountInv("VokterCloneShield2"))
									{
										basedebuffchance = 0;
									}
									else if (victim.CountInv("VokterCloneStun"))
									{
										basedebuffchance *= 2;
									}
									else
									{
										basedebuffchance *= frandompick(0.625,0.75,0.875);
									}
								}
								if (victim.bBOSS) basedebuffchance *= 0.25;
								if (vict == "Cyberdemon") basedebuffchance *= 0.5;
								if (vict == "HellKnight" || vict == "BaronOfHell") basedebuffchance *= 0.75;
								if (vict == "Cacodemon" || vict == "PainElemental") basedebuffchance *= 0.8;
								if (vict == "Demon" || vict == "Spectre") basedebuffchance *= 0.8888888888888889;
								if (vict == "Arachnotron" || vict == "Mancubus") basedebuffchance *= 1.3334;
								if (vict == "Archvile" || vict == "Revenant") basedebuffchance *= 1.5;
								if (vict == "SpiderMastermind") basedebuffchance *= 3;
								if (vict == "LostSoul") basedebuffchance *= 10;
								if (landdamagebonus == 1) basedebuffchance *= 1.142857142857143;
								if (landdamagebonus == 2) basedebuffchance *= 1.428571428571429;
								if (landdamagebonus == 3) basedebuffchance *= 2.105263157894737;
								if (landdamagebonus == 4) basedebuffchance *= 5;
								if (source.CountInv("PowerStrength") || 
										source.CountInv("PowerStrengthDD"))
								{
									if (victim.bBOSS) basedebuffchance *= 10;
																else basedebuffchance *= 2.5;
								}
								if (basedebuffchance < 1) basedebuffchance = 1;
								if (dydudebug_worlddamaged) Console.Printf("basedebuffchance: %.2f / 100", basedebuffchance);
								if (frandom(0.1,100.0) <= basedebuffchance) victim.A_SetInventory("ScramblerConfusion",1);
							}
						}

						// Blunderaxe = Tears off Armor Scraps at times, and occasionally inflicts a "Helm Splitter" style defense debuff
						if (BlunderPuff(inflicter))
						{
							int baseval = randompick(5,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,9);
							if (PLuck) baseval -= (TrueLuck * 0.067);
							if (dydudebug_worlddamaged) Console.Printf("%d", baseval);
							if (random(1,(baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							if (random(1,(baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							if (random(1,(baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							if (random(1,(baseval*baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							
							double basedebuffchance = 25.0;
							if (MiscItem)
							{
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 0.5)) basedebuffchance = 25.625;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 1.0)) basedebuffchance = 26.25;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 2.0)) basedebuffchance = 27.5;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 3.0)) basedebuffchance = 28.75;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 4.0)) basedebuffchance = 30.0;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 5.0)) basedebuffchance = 31.25;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 6.0)) basedebuffchance = 32.5;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 7.0)) basedebuffchance = 33.75;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 8.0)) basedebuffchance = 35.0;
								if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 9.0)) basedebuffchance = 37.5;
							}
							if (PLuck) 
							{
								if (MiscItem)
								{
									if (MiscItem.PlayerLevel >= 0) basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
									else if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 3.0)) basedebuffchance += (TrueLuck * frandompick(0,0,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
									else if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 6.0)) basedebuffchance += (TrueLuck * frandompick(0,0.25,0.25,0.25,0.25,0.5,0.5,1.0,2.0));
									else if (MiscItem.PlayerLevel >= (exex_axecombolvlrequirement * 9.0)) basedebuffchance += (TrueLuck * frandompick(0.25,0.25,0.25,0.25,0.5,0.5,0.5,1.0,2.0));
								}
								else basedebuffchance += (TrueLuck * frandompick(0,0,0,0.25,0.25,0.5,0.5,1.0,2.0));
							}
							if (vict == "LostSoul") basedebuffchance *= 0.1;
							if (vict == "Spidermastermind") basedebuffchance *= 0.5;
							if (vict == "Archvile" || vict == "Revenant") basedebuffchance *= 0.75;
							if (vict == "Demon" || vict == "Spectre") basedebuffchance *= 1.333333333333333;
							if (vict == "Cacodemon" || vict == "PainElemental") basedebuffchance *= 1.6;
							if (vict == "HellKnight" || vict == "BaronOfHell") basedebuffchance *= 2;
							if (vict == "Arachnotron" || vict == "Mancubus") basedebuffchance *= 4;
							if (vict == "Cyberdemon") basedebuffchance *= 3;
							if (victim.bBOSS) basedebuffchance *= 0.25;
							if (Teacher_VokterClone(victim))
							{
								if (victim.CountInv("VokterCloneShield") || victim.CountInv("VokterCloneShield2"))
								{
									basedebuffchance = 0;
								}
								else if (victim.CountInv("VokterCloneStun"))
								{
									basedebuffchance *= 2;
								}
								else
								{
									basedebuffchance *= frandompick(0.625,0.75,0.875);
								}
							}
							if (landdamagebonus == 1) basedebuffchance *= 1.142857142857143;
							if (landdamagebonus == 2) basedebuffchance *= 1.428571428571429;
							if (landdamagebonus == 3) basedebuffchance *= 2.105263157894737;
							if (landdamagebonus == 4) basedebuffchance *= 5;
							if (source.CountInv("PowerStrength") ||
									source.CountInv("PowerStrengthDD"))
							{
								if (victim.bBOSS) basedebuffchance *= 10;
														 else basedebuffchance *= 2.5;
							}
							if (basedebuffchance < 1) basedebuffchance = 1;
							if (dydudebug_worlddamaged) Console.Printf("basedebuffchance: %.2f / 100", basedebuffchance);
							if (frandom(0.1,100.0) <= basedebuffchance) 
							{
								if (victim.CountInv("BlunderHelmSplitter3"))
								{
									blundebuff = 4;
								}
								else
								{
									if (victim.CountInv("BlunderHelmSplitter2"))
									{
										blundebuff = 3;
										victim.A_SetInventory("BlunderHelmSplitter3",1);
										victim.A_SetInventory("BlunderHelmSplitter2",0);
										victim.A_SetInventory("BlunderHelmSplitter",0);
									}
									else
									{
										if (victim.CountInv("BlunderHelmSplitter"))
										{
											victim.A_SetInventory("BlunderHelmSplitter3",0);
											victim.A_SetInventory("BlunderHelmSplitter2",1);
											victim.A_SetInventory("BlunderHelmSplitter",0);
											blundebuff = 2;
										}
										else
										{
											victim.A_SetInventory("BlunderHelmSplitter3",0);
											victim.A_SetInventory("BlunderHelmSplitter2",0);
											victim.A_SetInventory("BlunderHelmSplitter",1);
											blundebuff = 1;
										}
									}
								}
							}
						}
					}
				}
			}
			
			if (victim.health <= 0 && mod == 'Ice') victim.bCANTSEEK = true;
			
			string attkernam;
			if (!victim.GetTag()) victname = vict;
			if (source)
			{
				if (source.GetTag()) attkernam = source.GetTag();
												else attkernam = source.GetClassName();
			}
			if (inflicter)
			{
				if (inflicter.GetTag()) atkrname = inflicter.GetTag();
													 else atkrname = inflicter.GetClassName();
			}
			string comblog = "";
			comblog.AppendFormat("\c[red]*\c- ");
			showdmglog = false;
			if (victim.bCOUNTKILL || specialtype) showdmglog = true;
			if (vict == "PracticeTarget" || vict == "PracticeTarget2") showdmglog = true;
			if (vict == "BossBrainNew") showdmglog = true;
			if (DDPlayerPawn(victim)) showdmglog = false;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
			if (exex_combatlog && showdmglog)
			{
				//Console.Printf("showdmglog 2");
				if (mod == 'NONE') mod = 'Typeless';
				if (dmg)
				{
					comblog.AppendFormat("\c[brick]%d\c-", dmg);
					comblog.AppendFormat(" damage dealt to \c[red]%s\c- by", victname);
					if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
					if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
					comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
					if (flags & DMG_EXPLOSION) comblog.AppendFormat(" \c[brick][AOE]\c-");
					if (victim.health <= 0) comblog.AppendFormat(" \c[brick]%s dies!\c-", victname);

					//if (victim.health <= 0) Console.Printf("\c[brick]%d\c- damage dealt to \c[red]%s\c- by \c[gold]%s\c-! [\c[lightblue]%s\c-] \c[brick]%s dies!", dmg, victname, atkrname, mod, victname);
					//else Console.Printf("\c[brick]%d\c- damage dealt to \c[red]%s\c- by \c[gold]%s\c-! [\c[lightblue]%s\c-]", dmg, victname, atkrname, mod);
				}
				else
				{
					comblog.AppendFormat("\c[red]%s\c- took \c[purple]no damage\c- from", victname);
					if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
					if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
					comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
				}
				if (dydudebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
				
				Console.Printf(comblog);
				if (blundebuff && (victim.health > 0))
				{
					if (blundebuff >= 4) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense has already been dropped as much as it can!", victname);
					if (blundebuff == 3) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by yet another 30%!", victname);
					if (blundebuff == 2) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by another 30%!", victname);
					if (blundebuff == 1) Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense dropped by 30%!", victname);
					if (blundebuff <= 3 && sour == "DinahPlayer") 
					{
						source.A_StopSound(CHAN_VOICE);
						source.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
					}
				}
			}
			
			if (dydudebug_hitsounds) Console.Printf("hitsounds");
			bool makesound;
			string playedsound = "";
			PlayerPawn playpawn;
			Actor othermon;
			int playweaksound = 0;
			//*******************
			//* Weakness Sounds *
			//*******************
			int tempdmgval = 10000;
			double tempdmgfactor = victim.damagefactor;
			victim.damagefactor = 1.0;
			int moddedDMG = victim.ApplyDamageFactor(mod, tempdmgval);
			victim.damagefactor = tempdmgfactor;
			double outputdmgfactor = 1.0;
			outputdmgfactor *= moddedDMG;
			outputdmgfactor /= tempdmgval;
			bool playwsounds = false;
			if (vict != "PracticeTarget" || vict != "PracticeTarget2") playwsounds = true;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playwsounds = false;
			
			if (playwsounds)
			{
				if (initdmg > 0 && !(flags & DMG_NO_FACTOR)) 
				{
					if (!(mod == '' || mod == 'Normal' || mod == 'Crush' || mod == 'Falling' || mod == 'Drowning'))
					{
						if (moddedDMG <= (tempdmgval * 0.25)) playweaksound = -3;
						if (moddedDMG >= (tempdmgval * 0.25) && moddedDMG <= (tempdmgval * 0.3999999)) playweaksound = -2;
						if (moddedDMG >= (tempdmgval * 0.4) && moddedDMG <= (tempdmgval * 0.6666667)) playweaksound = -1;
						if (moddedDMG >= (tempdmgval * 1.5) && moddedDMG <= (tempdmgval * 2.4999999)) playweaksound = 1;
						if (moddedDMG >= (tempdmgval * 2.5) && moddedDMG <= (tempdmgval * 3.9999999)) playweaksound = 2;
						if (moddedDMG >= (tempdmgval * 4.0)) playweaksound = 3;
						//if (playweaksound > 0) victim.A_SetInventory("TookWeaknessHit",playweaksound);
						//else if (playweaksound < 0) victim.A_SetInventory("TookResistanceHit",(playweaksound*-1));
						if (dydudebug_hitsounds) Console.Printf("moddedDMG: %d (%.8f) (%s), playweaksound: %d, damagefactor: %.8f", moddedDMG, outputdmgfactor, mod, playweaksound, victim.damagefactor);
					}
				}
				if (dydudebug_hitsounds) Console.Printf("playweaksound: %d", playweaksound);

				string weakplayedsound = "";
				if (exex_hitweaksounds && victim.bISMONSTER && playweaksound != 0 && level.time >= victim.args[3] && vict != "HeresiarchNew")
				{
					victim.args[3] = (level.time + exex_q3aqchitsounddelay);
					if (dydudebug_hitsounds) Console.Printf("ws - %d [%d]", victim.args[3], level.time);
		
					if (playweaksound == -3) weakplayedsound = "Misc/ResistanceHitHigh";
					if (playweaksound == -2) weakplayedsound = "Misc/ResistanceHitMid";
					if (playweaksound == -1) weakplayedsound = "Misc/ResistanceHit";
					if (playweaksound == 1) weakplayedsound = "Misc/WeaknessHit";
					if (playweaksound == 2) weakplayedsound = "Misc/WeaknessHitMid";
					if (playweaksound == 3) weakplayedsound = "Misc/WeaknessHitHigh";
		
					if (initdmg > 0) makesound = true;
					//if (oldhealth > 0 && oldhealth > health) makesound = true;
					if (makesound)
					{
						if (source) 
						{
							if (dydudebug_hitsounds) Console.Printf("[weaksounds] source: %s", source.GetClassName());
							playpawn = PlayerPawn(source);
							if (victim.bFRIENDLY)
							{
								victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
							}
							else
							if (playpawn) 
							{
								if (dydudebug_hitsounds) Console.Printf("[weaksounds] playpawn: %s", playpawn.GetClassName());
								if (!victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.0);
							}
							else
							{
								othermon = Actor(source);
								if (othermon) 
								{
									if (dydudebug_hitsounds) Console.Printf("[weaksounds] othermon: %s", othermon.GetClassName());
									if (othermon.bFRIENDLY && !victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (exex_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.5);
								}
							}
						}
					}
				}
			}

			bool playdmgsounds = false;
			if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdmgsounds = true;
			if (vict == "BossBrainNew") playdmgsounds = true;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdmgsounds = false;
			if (playdmgsounds)
			{
				if (victim.health <= 0 && exex_q3aqckillsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype))
				{
					if (source || inflicter)
					{
						if (dydudebug_hitsounds && source) Console.Printf("[deathsound] source: %s", source.GetClassName());
						if (dydudebug_hitsounds && inflicter) Console.Printf("[deathsound] inflicter: %s", inflicter.GetClassName());
						if (source) playpawn = PlayerPawn(source);
						if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
						if (victim.bFRIENDLY)
						{
							if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsndAlly";
							if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDEDAlly";
							if (exex_q3aqckillsoundtype >= 0) 
							{
								victim.A_StopSound(12);
								victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
							}
						}
						else
						if (playpawn) 
						{
							if (dydudebug_hitsounds) Console.Printf("[deathsound] playpawn: %s", playpawn.GetClassName());
							if (!victim.bFRIENDLY)
							{
								if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsnd";
								if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED";
								if (exex_q3aqckillsoundtype >= 0) 
								{
									victim.A_StopSound(12);
									victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
								}
							}
						}
						else
						{
							if (source) othermon = Actor(source);
							if (othermon == null && inflicter) othermon = Actor(inflicter);
							if (othermon) 
							{
								if (dydudebug_hitsounds) Console.Printf("[deathsound] othermon: %s", othermon.GetClassName());
								if (othermon.bFRIENDLY && !victim.bFRIENDLY)
								{
									if (exex_q3aqckillsoundtype == 0) playedsound = "misc/killsnd2";
									if (exex_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED2";
									if (exex_q3aqckillsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (exex_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
						}
					}
				}
			}
			bool playdthsounds = false;
			if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdthsounds = true;
			if (vict == "BossBrainNew") playdthsounds = true;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdthsounds = false;
			if (playdthsounds)
			{
				if (exex_q3aqchitsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype || vict == "BossBrainNew") && level.time >= victim.args[4] && vict != "HeresiarchNew")
				{
					victim.args[4] = (level.time + exex_q3aqchitsounddelay);
					if (dydudebug_hitsounds) Console.Printf("hs - %d [%d]", victim.args[4], level.time);
					
					if (source || inflicter) 
					{
						if (dydudebug_hitsounds && source) Console.Printf("[hitsound] source: %s", source.GetClassName());
						if (dydudebug_hitsounds && inflicter) Console.Printf("[hitsound] inflicter: %s", inflicter.GetClassName());
						if (source) playpawn = PlayerPawn(source);
						if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
						if (victim.bFRIENDLY)
						{
							if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hitally";
							if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpally";
							if (exex_q3aqchitsoundtype >= 0) 
							{
								victim.A_StopSound(13);
								victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
							}
						}
						else
						if (playpawn) 
						{
							if (dydudebug_hitsounds) Console.Printf("[hitsound] playpawn: %s", playpawn.GetClassName());
							if (!victim.bFRIENDLY)
							{
								if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hit";
								if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch";
								if (exex_q3aqchitsoundtype >= 0) 
								{
									victim.A_StopSound(13);
									victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
								}
							}
						}
						else
						{
							if (source) othermon = Actor(source);
							if (othermon == null && inflicter) othermon = Actor(inflicter);
							if (othermon) 
							{
								if (dydudebug_hitsounds) Console.Printf("[hitsound] othermon: %s", othermon.GetClassName());
								if (othermon.bFRIENDLY && !victim.bFRIENDLY)
								{
									if (exex_q3aqchitsoundtype == 0) playedsound = "misc/hit2";
									if (exex_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch2";
									if (exex_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
								else
								if (!othermon.bFRIENDLY && !victim.bFRIENDLY && exex_hitsoundsmisc >= 0)
								{
									double rndpitch = frandom(0.50,1.00);
									if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

									if (random(1,2) <= 1) playedsound = "misc/hitmine2";
																	 else playedsound = "misc/hitmine";
									victim.A_StopSound(13);
									victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (exex_hitsoundsvol * frandompick(0.75,0.875,1.0,1.125,1.25)), ATTN_NONE, rndpitch);
								}
							}
						}
					}
				}
			}
		}
		
		// Adding in Argv's SingleDamageRipper code :V
		if (inflicter is "SingleDamageRipper")
		{
			SingleDamageRipper(inflicter).ActorsAlreadyHit.Push(victim);
			SingleDamageRipper(inflicter).timesrippedoverall++;
			if (SingleDamageRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
		}

		if (inflicter is "SingleDamageFastRipper")
		{
			SingleDamageFastRipper(inflicter).ActorsAlreadyHit.Push(victim);
			SingleDamageFastRipper(inflicter).timesrippedoverall++;
			if (SingleDamageFastRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
		}

		Super.WorldThingDamaged(e);
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		actor victim = e.Thing;
		actor inflicter = e.inflictor;
		actor source;
		actor mastor;
		if (inflicter && inflicter.target) source = inflicter.target;
		if (inflicter && inflicter.master) mastor = inflicter.master;
		string vict = "NONE";
		string infl = "NONE";
		string sour = "NONE";
		string mast = "NONE";
		if (victim) vict = victim.GetClassName();
		if (inflicter) infl = inflicter.GetClassName();
		if (source) sour = source.GetClassName();
		if (mastor) mast = mastor.GetClassName();
		int PLuck;
		int TrueLuck;
		let globalvars = DDGlobalVariables.Get();
		if (MiscItem)
		{
			PLuck = MiscItem.PlayerLUCK;
			if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
			if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
			if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
			if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
			if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
		}
		if (dydudebug_worlddied) Console.Printf("[%s] WorldThingDied", vict);
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		
		if (victim)
		{
			int specialtype;
			nm = "CCardGhostMarker";
			if (victim.CountInv(nm)) specialtype += 1;
			nm = "CCardAssassinMarker";
			if (victim.CountInv(nm)) specialtype += 2;
			nm = "CCardRespawnedMarker";
			if (victim.CountInv(nm)) specialtype += 4;
			if (dydudebug_worlddied) Console.Printf("[%s] SpecialType [WorldDied]: %d", vict, specialtype);

			actor IPAttack;
			if (!(DDPlayerPawn(victim)) || (victim.bCOUNTKILL || specialtype))
			{
				if (!victim.CountInv("DedMonsterFlag") && !sv_monsterrespawn) victim.A_SetInventory("DedMonsterFlag",1);
				actor Player = players[0].mo;
				bool giveexp;
				bool playerkill;
				bool allykill;
				int user_type;
				
				if (dydudebug_worlddied) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
				if ((victim.bCOUNTKILL || specialtype) && !victim.bFRIENDLY && inflicter)
				{
					if (inflicter) 
					{
						if (PlayerPawn(inflicter)) playerkill = true;
						if (inflicter.bFRIENDLY) allykill = true;
						if (inflicter.bFRIENDLY || DDPlayerPawn(inflicter))
						{
							if (IPAttack == null) IPAttack = DDProjectile(inflicter);
							giveexp = true;
						}
						//Console.Printf("inflictor: %s  [%d]", infl, inflicter.bFRIENDLY);
					}
					if (source) 
					{
						if (PlayerPawn(source)) playerkill = true;
						if (source.bFRIENDLY) allykill = true;
						if (source.bFRIENDLY || DDPlayerPawn(source)) 
						{
							if (IPAttack == null) IPAttack = DDProjectile(source);
							giveexp = true;
						}
						//Console.Printf("inflictor.target: %s [%d]", sour, source.bFRIENDLY);
					}
					if (mastor) 
					{
						if (PlayerPawn(mastor)) playerkill = true;
						if (mastor.bFRIENDLY) allykill = true;
						if (IPAttack == null) IPAttack = DDProjectile(mastor);
						if (mastor.bFRIENDLY || DDPlayerPawn(mastor)) giveexp = true;
						//Console.Printf("inflictor.master: %s [%d]", mast, mastor.bFRIENDLY);
					}
					nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) giveexp = false;

					int ExpGain = (victim.spawnhealth() + victim.Stamina);
					if (specialtype & 1) ExpGain *= 0.5;
					if (specialtype & 2) ExpGain *= frandompick(1.8,2.2);
					if (specialtype & 4) ExpGain *= frandompick(0.625,0.875);
					if ((source && source.CountInv("DinahTrueIPState")) || (inflicter && inflicter.CountInv("DinahTrueIPState"))) ExpGain *= 0.2;
					if (VacPuff(inflicter)) ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
					if (IPAttack) ExpGain *= frandom(0.125,0.25);
									 else ExpGain *= frandom(0.05,0.125);

					if ((source && source.bFRIENDLY) || (inflicter && inflicter.bFRIENDLY) || (mastor && mastor.bFRIENDLY)) ExpGain *= frandom(0.65,0.90);
					if (DDPlayerPawn(source) && infl == "PlayerWhistle") ExpGain *= frandom(1.1875,1.3125);
					if (vict == "KilletanteSoloist") ExpGain *= frandom(3.5,4.0);
					if (DDOrigBoss(victim)) ExpGain *= frandom(5.25,6.0);
					If (PLuck)
					{
						int PLevel = Player.CountInv("PlayerLevel");
								 if (PLevel <= 11) ExpGain *= (1.00 + (TrueLuck * frandompick(0,0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02)));
						else if (PLevel <= 26) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.01,0.02,0.02)));
						else if (PLevel <= 66) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04)));
						else if (PLevel <= 101) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04)));
						else if (PLevel <= 201) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04)));
					}
					if (MiscItem)
					{
						double tallyextra;
						tallyextra = (MiscItem.totalallkills * 0.005) + (MiscItem.totalallitems * 0.0025) + (MiscItem.totalallsecrets * 0.0025) + (MiscItem.totalcompleted * 0.01);
						ExpGain *= (1.00 + tallyextra);
						if (dydudebug_worlddied) Console.Printf("x%.4f", 1.00+tallyextra);
					}
					EXPGain *= exex_expmultiplier;
					
					if (giveexp && exex_expenabled)
					{
						if (ExpGain < 1) ExpGain = 1;

						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.NumOfAfasDrops) 
						{
							ExpGain *= (1.0 + (MiscItem.NumOfAfasDrops * 0.0625));
							if (DDPlayerPawn(source) && infl == "PlayerWhistle")
							{
								ExpGain += (MiscItem.NumOfAfasDrops * randompick(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3) * frandom(2.0,2.5));
							}
							else
							{
								ExpGain += MiscItem.NumOfAfasDrops * randompick(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3);
							}
						}
						
						Actor player = players[0].mo;
						
						if (player.health > 0 || !player.CountInv("PlayerIsDead"))
						{
							Player.A_GiveInventory("KillsCount",1);
							Player.A_GiveInventory("ExpPts",ExpGain);
							int Kills = Player.CountInv("KillsCount");
							int ExpNew = Player.CountInv("ExpPts");
							int ExpNeeded = Player.CountInv("ExpPtsNeeded");
							int PlayerLevel = Player.CountInv("PlayerLevel");
							if (exex_showexpgains) Console.Printf("\c[green]+%d EXP! \c[darkgreen][Have: %d / %d (Lvl: %d)] \c[red](Kills: %d)", ExpGain, ExpNew, ExpNeeded, PlayerLevel, Kills);
						}
					}
					
					// BUILD-style oneliner for kills [optional]
					bool playoneliner = false;
					if (inflicter == player || source == player || mastor == player) playoneliner = true;
					if (vict == "PracticeTarget" || vict == "PracticeTarget2") playoneliner = false;
					nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playoneliner = false;
					
					if (playoneliner && player.GetClassName() == "DinahPlayer")
					{
						if (dydudebug_worlddied) Console.Printf("Voice Check");
						if (exex_dinahextravoices && exex_dinahoneliners)
						{
							int basechance = exex_dinahonelinerbasechance; // 8
							if (basechance < 0) basechance = 0;
							if (basechance > 0)
							{
								if (MiscItem) basechance += (MiscItem.ItemPoints * (basechance * 0.01));
								if (IPAttack) basechance *= frandompick(1.125,1.167,1.25,1.334);
								if (player.CountInv("DecentHealth")) basechance *= 1.25;
								if (player.CountInv("LowHealth")) basechance *= 1.5;
								if (player.CountInv("CriticalHealth")) basechance *= 1.875;
								if (MiscItem)
								{
									if (MiscItem.WineDefTier == 1 || MiscItem.WineDefTier == -1) basechance *= 1.125;
									if (MiscItem.WineDefTier == 2 || MiscItem.WineDefTier == -2) basechance *= 1.375;
									if (MiscItem.WineDefTier == 3 || MiscItem.WineDefTier == -3) basechance *= 1.75;
									if (MiscItem.WineDefTier == 4 || MiscItem.WineDefTier == -4) basechance *= 2.5;
									if (MiscItem.WineDefTier == 5 || MiscItem.WineDefTier == -5) basechance *= 4.0;
								}
								if (infl == "FistPuff" || infl == "UppercutPuff" || infl == "KickPuff") basechance *= frandompick(3.5,4,4.5);
								if (BatPuff(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
								if (ApplePuff(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
								if (BlunderPuff(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
								if (WhipPuff(inflicter)) basechance *= frandompick(2.25,2.5,2.75);
								if (VacPuff(inflicter)) basechance *= frandompick(1.125,1.25,1.375);
								if (victim.bBOSS) basechance *= 8;
								if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
								if (dydudebug_worlddied) Console.Printf("%d / 256", basechance);
								if (random(1,256) <= basechance)
								{
									string voicenm;
									double voicevol = frandom(1.25,1.75);
									if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
									int randvoice = random(1,11);
									if (randvoice == 1) 
									{
										voicenm = "Dinah/didthathurt";
										Console.Printf("\c[gold]'Did that hurt?!'\c-");
									}
									if (randvoice == 2) 
									{
										voicenm = "Dinah/ithinknot";
										Console.Printf("\c[gold]'I think not!'\c-");
									}
									if (randvoice == 3) 
									{
										voicenm = "Dinah/nownow";
										Console.Printf("\c[gold]'Now now...'\c-");
									}
									if (randvoice == 4) 
									{
										voicenm = "Dinah/thatleaveamark";
										Console.Printf("\c[gold]'That will leave a mark!'\c-");
									}
									if (randvoice == 5) 
									{
										voicenm = "Dinah/howsavage";
										Console.Printf("\c[gold]'How savage!'\c-");
									}
									if (randvoice == 6) 
									{
										voicenm = "Dinah/Gotcha";
										Console.Printf("\c[gold]'GOTCHA!'\c-");
									}
									if (randvoice == 7) 
									{
										voicenm = "Dinah/IWinG";
										Console.Printf("\c[gold]'I WIN!'\c-");
									}
									if (randvoice == 8)
									{
										voicenm = "Dinah/BitOfALetdown";
										Console.Printf("\c[gold]'A bit of a let-down...'\c-");
									}
									if (randvoice == 9)
									{
										voicenm = "Dinah/NahAhAh";
										Console.Printf("\c[gold]'Nah-ah-ah!'\c-");
									}
									if (randvoice == 10)
									{
										voicenm = "Dinah/OverSoSoon";
										Console.Printf("\c[gold]'Over so soon!?'\c-");
									}
									if (randvoice == 11)
									{
										voicenm = "Dinah/HowRude";
										Console.Printf("\c[gold]'How rude!'\c-");
									}
									player.A_StopSound(CHAN_VOICE);
									player.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol); 
								}
							}
						}
					}
				}
				
				// Drop Tables
				string dropname;
				int baseIPLuckMul = frandompick(1.5,1.5,1.5,1.5,1.5,2.0);
				int baseIPLvlDivider = frandompick(0.8,0.925,0.925,0.925,0.925,0.925);
				int baseIPBaseChanceMul = frandompick(0.8,0.925,0.925,0.925,0.925,0.925);
				int basedropdiv;
				double luckbase;
				int droptimes;
				int lvldivider;
				int basechance;
				int maxchance;
				int scraprolls;
				bool candropitems = false;
				if (specialtype) candropitems = true;
				if (!victim.bFRIENDLY && (victim.bCOUNTKILL || specialtype)) candropitems = true;
				if (vict == "PracticeTarget" || vict == "PracticeTarget2") candropitems = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) candropitems = false;
				if (!playerkill)
				{
					if (!allykill)
					{
						if (random(1,64) <= 1) candropitems = true;
															else candropitems = false;
					}
				}
				if (candropitems)
				{
					droptimes = 1;
					luckbase = 0.0625;
					lvldivider = 35;
					if (IPAttack) 
					{
						luckbase *= baseIPLuckMul;
						lvldivider *= baseIPLvlDivider;
					}
					if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
					if (inflicter && ((source && DDPlayerPawn(source))))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					else
					if (inflicter && DDPlayerPawn(inflicter))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					if (victim.bBOSS) droptimes *= 4;
					for (int i; i < droptimes; i++)
					{
						// Specific Drops from Specific Monsters
						let monsterp = Actor(victim);
						
						
						// Doom Monsters
						basedropdiv = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basedropdiv *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						// Add Specific Monsters Below :V
						
						
						// Heretic Monsters
						basedropdiv = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basedropdiv *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						// Add Specific Monsters Below :V
						
						
						// Hexen Monsters
						basedropdiv = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basedropdiv *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						// Add Specific Monsters Below :V
						if (monsterp = FireDemon(victim))
						{
							if (random(1,basedropdiv) <= 8) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 1) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Ettin(victim))
						{
							if (random(1,basedropdiv) <= 32) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 4) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Centaur(victim))
						{
							if (random(1,basedropdiv) <= 24) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 3) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = CentaurLeader(victim))
						{
							if (random(1,basedropdiv) <= 48) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 6) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Serpent(victim))
						{
							if (random(1,basedropdiv) <= 32) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 4) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = SerpentLeader(victim))
						{
							if (random(1,basedropdiv) <= 48) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 6) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Bishop(victim))
						{
							if (random(1,basedropdiv) <= 16) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 2) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Wraith(victim))
						{
							if (random(1,basedropdiv) <= 24) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 3) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Demon1(victim))
						{
							if (random(1,basedropdiv) <= 32) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 4) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = Demon2(victim))
						{
							if (random(1,basedropdiv) <= 32) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 4) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						if (monsterp = IceGuy(victim))
						{
							if (random(1,basedropdiv) <= 80) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							if (random(1,basedropdiv) <= 10) 
							{
								user_type = random(1,4);
								if (user_type == 1) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 2) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 3) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								if (user_type == 4) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
						}
						
						
						// Strife Monsters
						basedropdiv = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basedropdiv *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						// Add Specific Monsters Below :V
					}
					
					// Ammo/Weapons
					string droptype;
					droptimes = 1;
					luckbase = 0.0625;
					lvldivider = 50;
					if (IPAttack) 
					{
						luckbase *= baseIPLuckMul;
						lvldivider *= baseIPLvlDivider;
					}
					if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
					if (inflicter && ((source && DDPlayerPawn(source))))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					else
					if (inflicter && DDPlayerPawn(inflicter))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					if (victim.bBOSS) droptimes *= 4;
					for (int i; i < droptimes; i++)
					{
						basechance = 128;
						luckbase = 0.5;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (random(1,maxchance) <= 1) // Main Drop Chance
						{
							int temp = 1;
							let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
							if (MiscItem) temp = (1 + (TrueLuck * 0.08334));
							if (random(1,16) <= temp) // Weapons
							{
								user_type = random(1,8);
								int temp2 = random(1,16);
								if (temp2 == 1) user_type = random(1,10);
								if (temp2 >= 2 && temp2 <= 4) user_type = random(1,9);
								if (temp2 >= 5 && temp2 <= 16) user_type = random(1,8);
								droptype = "ItemSatchel";
								if (user_type == 1) 
								{
									droptype = "CricketBat";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 2) 
								{
									droptype = "AppleJack";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 3) 
								{
									droptype = "BlunderAxe";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 4) 
								{
									droptype = "CandleWhip";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 5) 
								{
									droptype = "Scrambler";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 6) 
								{
									droptype = "WizardPike";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 7) 
								{
									droptype = "Grimophone";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 8)
								{
									droptype = "SuperVac";
									if (player.CountInv(droptype)) droptype = "ItemSatchel";
								}
								if (user_type == 9)
								{
									droptype = "CrazyBallDD";
								}
								if (user_type == 10) 
								{
									droptype = "SigilPickup";
								}
								
								if (droptype == "ItemSatchel" && random(1,128) <= 1) droptype = "PortalSatchel";
								victim.A_SpawnItemEx(droptype,frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
							}
							else // Ammo
							{
								int temp = 48;
								let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
								if (MiscItem) temp = (48 + (TrueLuck * 0.25));
								if (random(1,256) <= temp) 
								{
									user_type = random(1,8);
									if (user_type == 1) victim.A_SpawnItemEx("MalletAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 2) victim.A_SpawnItemEx("JackAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 4) victim.A_SpawnItemEx("CandleAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 5) victim.A_SpawnItemEx("EggAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 6) victim.A_SpawnItemEx("PikeAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 7) victim.A_SpawnItemEx("MusicAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 8) victim.A_SpawnItemEx("VacAmmoBig",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								}
								else
								{
									user_type = random(1,8);
									if (user_type == 1) victim.A_SpawnItemEx("MalletAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 2) victim.A_SpawnItemEx("JackAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 3) victim.A_SpawnItemEx("BlunderAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 4) victim.A_SpawnItemEx("CandleAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 5) victim.A_SpawnItemEx("EggAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 6) victim.A_SpawnItemEx("PikeAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 7) victim.A_SpawnItemEx("MusicAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (user_type == 8) victim.A_SpawnItemEx("VacAmmo",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
								}
							}
						}
					}
					
					// Heal Items
					droptimes = 1;
					luckbase = 0.0625;
					lvldivider = 35;
					if (IPAttack) 
					{
						luckbase *= baseIPLuckMul;
						lvldivider *= baseIPLvlDivider;
					}
					if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
					if (inflicter && ((source && DDPlayerPawn(source))))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					else
					if (inflicter && DDPlayerPawn(inflicter))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					if (victim.bBOSS) droptimes *= 8;
					for (int i; i < droptimes; i++)
					{
						basechance = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("GalaApple",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("FoodPlateFruit",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (random(1,(maxchance*2)) == 1) victim.A_SpawnItemEx("AppleWine",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("TurkeyDinner",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("PigRoastDishExtra",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (random(1,(maxchance*4)) == 1) victim.A_SpawnItemEx("Berserk",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [heal]: %d (%d)", maxchance, basechance);
					}

					droptimes = 1;
					luckbase = 0.0625;
					lvldivider = 70;
					if (IPAttack) 
					{
						luckbase *= baseIPLuckMul;
						lvldivider *= baseIPLvlDivider;
					}
					if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
					if (inflicter && ((source && DDPlayerPawn(source))))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					else
					if (inflicter && DDPlayerPawn(inflicter))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					if (victim.bBOSS) droptimes *= 4;
					for (int i; i < droptimes; i++)
					{
						// Armor Items
						basechance = 512;
						luckbase = 0.375;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = (basechance * 16);
						if (RecordShot(inflicter)) maxchance = (basechance * 4);
						if (VacPuff(inflicter)) maxchance = (basechance * 8);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [armor]: %d (%d)", maxchance, basechance);
						if (random(1,maxchance) <= 1)
						{
							//Full Armor Drops
							user_type = random(1,100);
							if (user_type >= 1 && user_type <= 67) { victim.A_SpawnItemEx("KnightGown",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION); }
							else if (user_type >= 68 && user_type <= 89) { victim.A_SpawnItemEx("KnightGown2",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION); }
							else if (user_type >= 90 && user_type <= 98) { victim.A_SpawnItemEx("KnightGown3",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION); }
							else if (user_type >= 99) { victim.A_SpawnItemEx("KnightGown4",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION); }
						}
						else
						{
							scraprolls = 1;
							if (BlunderPuff(inflicter)) 
							{
								scraprolls += randompick(0,0,0,0,0,1,1,1,1,1,1,1,2,2,3);
								if (random(1,32) <= (6 + ((MiscItem.PlayerLevel * 0.015))))
								{
									if (Zombieman(victim)) scraprolls += randompick(1,1,2,2);
									if (ShotgunGuy(victim)) scraprolls += randompick(1,2,2,2);
									if (ChaingunGuy(victim)) scraprolls += randompick(2,2,3,3);
									if (DoomImp(victim)) scraprolls += randompick(0,0,1,1);
									if (Demon(victim)) scraprolls += randompick(1,2,2,3);
									if (Cacodemon(victim)) scraprolls += randompick(2,2,2,3);
									if (BaronOfHell(victim)) scraprolls += randompick(1,2,2,3);
									if (PainElemental(victim)) scraprolls += randompick(2,2,2,3);
									if (LostSoul(victim)) scraprolls += randompick(0,0,0,1);
									if (Revenant(victim)) scraprolls += randompick(1,1,1,2);
									if (Arachnotron(victim)) scraprolls += randompick(2,2,2,3);
									if (Fatso(victim)) scraprolls += randompick(1,1,1,2);
									if (Cyberdemon(victim)) scraprolls += randompick(3,3,4,4);
									if (SpiderMastermind(victim)) scraprolls += randompick(5,5,5,6);
									
									if (Knight(victim)) scraprolls += randompick(1,2,2,3);
									if (IronLich(victim)) scraprolls += randompick(9,9,10,10);
									if (Minotaur(victim)) scraprolls += randompick(3,3,4,4);
									if (Beast(victim)) scraprolls += randompick(2,2,2,3);
									if (Clink(victim)) scraprolls += randompick(2,2,3,3);
									if (Snake(victim)) scraprolls += randompick(1,2,2,3);
									
									if (Ettin(victim)) scraprolls += randompick(1,2,2,3);
									if (Centaur(victim)) scraprolls += randompick(2,2,2,3);
									if (CentaurLeader(victim)) scraprolls += randompick(0,0,1,1);
									if (Demon1(victim)) scraprolls += randompick(1,1,1,2);
									if (Demon2(victim)) scraprolls += randompick(1,1,1,2);
									if (Serpent(victim)) scraprolls += randompick(1,1,1,2);
									if (SerpentLeader(victim)) scraprolls += randompick(0,0,1,1);
									if (FighterBoss(victim)) scraprolls += randompick(5,5,5,6);
									if (ClericBoss(victim)) scraprolls += randompick(3,3,3,4);
									if (MageBoss(victim)) scraprolls += randompick(1,1,1,2);
								}
							}
							if (RecordShot(inflicter)) scraprolls += randompick(0,0,0,1,1,1,1,1,2,2,2);
							if (VacPuff(inflicter)) scraprolls += (randompick(0,0,0,0,1,1,1,1,2,2,2) - 2);
							//Scrap Drops
							if (scraprolls > 0)
							{
								int baseval = randompick(2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3);
								for (int i = 0; i < scraprolls; i++)
								{
									if (BlunderPuff(inflicter) && i == 0) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (random(1,(baseval*baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx("ArmorScrap",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),SXF_NOCHECKPOSITION);
									if (dydudebug_worlddiedmonsterdrops) Console.Printf("ScrapRolls: %d / %d", i, scraprolls);
								}
							}
						}
					}
					
					// Random Inventory Item Drops
					// Primary
					droptimes = 1;
					luckbase = 0.0625;
					lvldivider = 70;
					if (IPAttack) 
					{
						luckbase *= baseIPLuckMul;
						lvldivider *= baseIPLvlDivider;
					}
					if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
					if (inflicter && ((source && DDPlayerPawn(source))))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					else
					if (inflicter && DDPlayerPawn(inflicter))
					{
						let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
						if (MiscItem && MiscItem.PlayerLevel >= lvldivider) droptimes += (MiscItem.PlayerLevel / lvldivider);
					}
					if (victim.bBOSS) droptimes *= 4;
					for (int i; i < droptimes; i++)
					{
						basechance = 32;
						luckbase = 0.015625;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [primaryinv]: %d (%d)", maxchance, basechance);
						if (random(1,maxchance) == 1)
						{
							user_type = random(1,32);
							if (user_type == 1) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 2) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 3) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 4) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 5) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 6) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 7) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 8) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 9) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 10) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 11) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 12) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 13) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 14) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 15) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 16) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 17) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 18) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 19) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 20) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 21) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 22) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 23) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 24) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 25) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 26) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 27) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 28) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 29) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 30) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 31) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 32) { victim.A_SpawnItemEx("KilletanteEffigy",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type == 30) { victim.A_SpawnItemEx("KilletanteEffigy",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
						}

						// Secondary
						basechance = 256;
						luckbase = 0.25;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);
						if (random(1,maxchance) == 1)
						{
							user_type = random(1,336);
							if (user_type >= 1 && user_type <= 140) { victim.A_SpawnItemEx("FuryPotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type >= 141 && user_type <= 256) { victim.A_SpawnItemEx("CrazyBallDD",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type >= 257 && user_type <= 320) { victim.A_SpawnItemEx("TimePotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type >= 321 && user_type <= 334) { victim.A_SpawnItemEx("BlunderAxeSchematic",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
							if (user_type >= 335) { victim.A_SpawnItemEx("DoorBell",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
						}

						// Rare Powerup Drop
						basechance = 1024;
						luckbase = 1.00;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);
						if (random(1,maxchance) == 1)
						{
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(191,192,222,223,264,265);
							string raredropsndname = "rareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							if (gameinfo.gametype & 1) // Doom Mode
							{
								user_type = random(1,20);
								if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("BlurSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("Infrared",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 13 && user_type <= 18) victim.A_SpawnItemEx("RadSuit",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 19) victim.A_SpawnItemEx("InvulnerabilitySphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
							if (gameinfo.gametype & 2) // Heretic Mode
							{
								user_type = random(1,20);
								if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("ArtiInvisibility",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("ArtiTomeOfPower",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 13 && user_type <= 18) victim.A_SpawnItemEx("BerserkSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 19) victim.A_SpawnItemEx("ArtiInvulnerability",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
							if (gameinfo.gametype & 4) // Hexen Mode
							{
								user_type = random(1,20);
								if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("TimePotion",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("PortalSatchel",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 13 && user_type <= 18) victim.A_SpawnItemEx("BerserkSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 19) victim.A_SpawnItemEx("ArtiInvulnerability2",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
							if (gameinfo.gametype & 8) // Strife Mode
							{
							}
						}

						// Extremely Rare Drops
						basechance = 2048;
						luckbase = 2.5;
						if (IPAttack) 
						{
							basechance *= baseIPBaseChanceMul;
							luckbase *= baseIPLuckMul;
						}
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						if (BatPuff(inflicter)) maxchance = (basechance * 0.5);
						if (ApplePuff(inflicter)) maxchance = randompick((basechance * 0.375),(basechance * 0.4375),(basechance * 0.5),(basechance * 0.5625),(basechance * 0.625));
						if (BlunderPuff(inflicter)) maxchance = randompick((basechance * 0.75),(basechance * 0.875),(basechance),(basechance * 1.125),(basechance * 1.25));
						if (RecordShot(inflicter)) maxchance = randompick((basechance * 1.5),(basechance * 1.75),(basechance * 2),(basechance * 2.25),(basechance * 2.5));
						if (VacPuff(inflicter)) maxchance = (basechance * 16);
						if (dydudebug_worlddiedmonsterdrops) Console.Printf("maxchance [extremerare]: %d (%d)", maxchance, basechance);
						if (random(1,maxchance) == 1)
						{
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(193,194,224,225,266,267);
							string raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

							if (exex_extraatkdefspd)
							{
								user_type = random(1,100);
								if (user_type >= 1 && user_type <= 20) victim.A_SpawnItemEx("GoldApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 21 && user_type <= 40) victim.A_SpawnItemEx("PlatinumApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 41 && user_type <= 60) victim.A_SpawnItemEx("AfasDrop",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 61 && user_type <= 80) victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 81 && user_type <= 100) victim.A_SpawnItemEx("SigilPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
							else
							{
								user_type = random(1,100);
								if (user_type >= 1 && user_type <= 25) victim.A_SpawnItemEx("GoldApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 26 && user_type <= 50) victim.A_SpawnItemEx("PlatinumApple",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 51 && user_type <= 75) victim.A_SpawnItemEx("LegendaryMedicine",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (user_type >= 76 && user_type <= 100) victim.A_SpawnItemEx("SigilPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							}
						}
						
						//
						if (vict == "KilletanteSoloist")
						{
							dropname = "GalaApple";
							if (random(1,2) == 1) dropname = "AppleWine";
							victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
							if (random(1,2) == 1)
							{
								dropname = "GalaApple";
								if (random(1,2) == 1) dropname = "AppleWine";
								victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
								
								if (random(1,4) == 1)
								{
									dropname = "GalaApple";
									if (random(1,2) == 1) dropname = "AppleWine";
									victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
									
									if (random(1,8) == 1)
									{
										dropname = "GalaApple";
										if (random(1,2) == 1) dropname = "AppleWine";
										victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
									}
								}
							}
						}
					}
				}
				
				// Special Actor Conditions
				if (vict == "ZBell")
				{
					int typesdrop = 1;
					if ((victim.Stamina <= 0) || (victim.Stamina <= 2 && ((inflicter && (BatPuff(inflicter))))))
					{
						victim.Stamina++;
						if (inflicter && (BatPuff(inflicter))) typesdrop = random(2,5);
						
						for (int i = 0; i < typesdrop; i++)
						{
							user_type = random(1,2);
							//Console.Printf("#1: %d", user_type);
							if (user_type == 1) // Weapons
							{
								user_type = random(1,29);
								//Console.Printf("#2a: %d", user_type);
								if (user_type >= 1 && user_type <= 4) dropname = "CricketBat";
								if (user_type >= 5 && user_type <= 8) dropname = "AppleJack";
								if (user_type >= 9 && user_type <= 12) dropname = "BlunderAxe";
								if (user_type >= 13 && user_type <= 16) dropname = "Scrambler";
								if (user_type >= 17 && user_type <= 20) dropname = "WizardPike";
								if (user_type >= 21 && user_type <= 24) dropname = "SuperVac";
								if (user_type >= 24 && user_type <= 28) dropname = "CandleWhip";
								if (user_type == 29) dropname = "Grimophone";
							}
							else
							if (user_type == 2) // Health
							{
								user_type = random(1,29);
								//Console.Printf("#2b: %d", user_type);
								if (user_type >= 1 && user_type <= 12) dropname = "GalaApple";
								if (user_type >= 13 && user_type <= 18) dropname = "FoodPlateFruit";
								if (user_type >= 19 && user_type <= 22) dropname = "AppleWine";
								if (user_type >= 23 && user_type <= 25) dropname = "PigRoastDish";
								if (user_type >= 26 && user_type <= 28) dropname = "TurkeyDinner";
								if (user_type == 29) dropname = "GourmetMeal";
							}
							victim.A_SpawnItemEx(dropname,frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-5,5),SXF_NOCHECKPOSITION);
						}
					}
				}
				
				// Mapset Specific Things
				nm = "Balloon_Black"; extracheck = nm; 
				if (vict == extracheck)
				{
				}
				nm = "Balloon"; extracheck = nm; 
				nn = "BallTarg"; extracheck2 = nn; 
				no = "Balloon_Red"; extracheck3 = no; 
				np = "Balloon_Red2"; extracheck4 = np; 
				if (vict == extracheck || vict == extracheck2 || vict == extracheck3 || vict == extracheck4)
				{
				}
				nm = "Balloon_Yellow"; extracheck = nm; 
				nn = "BallYel"; extracheck2 = nn; 
				if (vict == extracheck || vict == extracheck2)
				{
				}
				nm = "Balloon_Green"; extracheck = nm; 
				nn = "BallGreen"; extracheck2 = nn; 
				if (vict == extracheck || vict == extracheck2)
				{
				}
				nm = "Balloon_Blue"; extracheck = nm; 
				if (vict == extracheck)
				{
				}
				
				// Killed With Certain Weapons
				if (inflicter && DDPlayerPawn(source) && (victim.bCOUNTKILL || specialtype))
				{
					if (VacPuff(inflicter))
					{
						let IPPuff = DDProjectile(inflicter);
						int vacgive = victim.spawnhealth() + victim.Stamina;
						vacgive *= frandompick(0.6667,0.8334,1.000,1.1667,1.3334);
						if (IPPuff) vacgive *= frandompick(0.75,0.75,0.75,0.75,0.875); 
									 else vacgive *= 0.5;
						source.A_GiveInventory("VacAmmoCounter",vacgive);
						source.A_StartSound("VacDed",210,CHANF_DEFAULT,frandom(0.75,0.90),ATTN_NORM,frandom(1.8,2.7));
						if (vict == "CommanderKeen") victim.A_KeenDie(); // I forgot to consider Keens use a different "death action" than the other monsters. >.>
						victim.A_BossDeath(); // Makes sure certain monsters do their hardcoded E1M8/MAP07 type effects on death
						if (vict == "Korax" || vict == "KoraxNew") ACS_Execute(255, 0); // Ensures Korax calls Script 255 is he's somehow absorbed by the Vac [though he should be unable to be killed by it :P]
						let SubEntity = EntitySecond(victim);
						if (SubEntity) SubEntity.A_SubEntityDeath(); // makes sure Strife's game ends once all SubEntities die. V:

						nm = "ArchangelusA"; extracheck = nm;
						nn = "ArchangelusB"; extracheck2 = nn;
						if (vict == extracheck) victim.A_SpawnItemEx(extracheck2, 8, 0, 0, 0, 0, 0, 0.0, SXF_NOCHECKPOSITION);
						if (vict == extracheck2) victim.A_BrainDie();
						victim.A_StopSound(CHAN_VOICE);
						victim.A_FadeOut(1.0,FTF_REMOVE);

						Console.Printf("+%d Vacuum Bag Units", vacgive);
					}
				}
			}
		}
		
		Super.WorldThingDied(e);
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		bool BatGuardCheck = true;
		int levelnums = level.levelnum;
		if (e.IsSaveGame) BatGuardCheck = false;
		if (!e.IsReopen)
		{
			bool addmapcounttrue = true;
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (globalvars.MapNum[i] == levelnums) 
				{
					addmapcounttrue = false;
					break;
				}
			}
			if (addmapcounttrue)
			{
				globalvars.MapsFinished++;
				globalvars.MapNum.push(globalvars.MapsFinished);
				globalvars.MapNum[globalvars.MapsFinished] = level.levelnum;
				globalvars.NumKills.push(globalvars.MapsFinished);
				globalvars.MaxKills.push(globalvars.MapsFinished);
				globalvars.AllKills.push(globalvars.MapsFinished);
				globalvars.AllKills[globalvars.MapsFinished] = false;
				globalvars.NumItems.push(globalvars.MapsFinished);
				globalvars.MaxItems.push(globalvars.MapsFinished);
				globalvars.AllItems.push(globalvars.MapsFinished);
				globalvars.AllItems[globalvars.MapsFinished] = false;
				globalvars.NumSecrets.push(globalvars.MapsFinished);
				globalvars.MaxSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets[globalvars.MapsFinished] = false;
				globalvars.AllCompletion.push(globalvars.MapsFinished);
				globalvars.AllCompletion[globalvars.MapsFinished] = false;
				if (dydudebug_mapfinishcheck) Console.Printf("\c[blue]Not Reopen\c- [maps in queue: %d]", globalvars.MapsFinished);
			}
			else
			{
				if (dydudebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (non-hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
			}
		}
		else
		{
			if (!e.IsSaveGame) if (dydudebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
		}

		// Post LevelPostProcess Compatibility Stuff >_>
		string giveitem = "PlayingGoingDown";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !player.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			player.A_SetInventory("PlayingGoingDown",1);
			Console.Printf("LOLE Welcome to Going Down, Kiddo! :V");
		}

		if (BatGuardCheck)
		{
			actor Player = players[0].mo;
			let IsPlayer = PlayerPawn(Player);
			if (IsPlayer)
			{
				let weapon = IsPlayer.Player.ReadyWeapon;
				// Resets the Cricket Bat guardstate and cooldown to neutral, so the first time
				// you attempt to guard after a level transition doesn't immediately UNGUARD after
				// the initial animation. V:
				if (weapon is "CricketBat")
				{
					let DDWeap = CricketBat(weapon);
					if (DDWeap)
					{
						if (DDWeap.guardstate) DDWeap.guardstate = 0;
						if (DDWeap.guardcooldown) DDWeap.guardcooldown = 0;
						if (dydudebug_worldloaded) Console.Printf("BatGuard Check - GuardState: %d, Cooldown: %d", DDWeap.guardstate, DDWeap.guardcooldown);
					}
				}
			}
		}

		Super.WorldLoaded(e);
	}
	
	override void PlayerDied(PlayerEvent e) 
	{
		if (exex_deathmusic) 
		{
			if (exex_deathmusic == 1) S_ChangeMusic("GAMOVR", 0, false, true);
			if (exex_deathmusic == 2) S_ChangeMusic("RoReDead", 0, false, true);
			if (exex_deathmusic == 3) S_ChangeMusic("GaOvYe", 0, false, true);
			if (exex_deathmusic == 4) S_ChangeMusic("DRQUDEAD", 0, false, true);
			if (exex_deathmusic == 5) S_ChangeMusic("MiRiBuTi", 0, false, true);
			if (exex_deathmusic == 6) S_ChangeMusic("ToDiYoAD", 0, false, true);
			if (exex_deathmusic == 7) S_ChangeMusic("MGS2GMOV", 0, false, true);
			if (exex_deathmusic == 8) S_ChangeMusic("ShGYaheh", 0, false, true);
			if (exex_deathmusic == 9) S_ChangeMusic("AH3GMOVR", 0, false, true);
			if (exex_deathmusic == 10) S_ChangeMusic("JURPRKP2", 0, false, true);
			if (exex_deathmusic == 11) S_ChangeMusic("CUYOENTH", 0, false, true);
		}
		Super.PlayerDied(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) 
	{
		S_ChangeMusic("*", 0, true, true);
		Super.PlayerRespawned(e);
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		Actor player = players[consoleplayer].mo;
		int buttons = player.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")   
		{
			int key1, key2;

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_monsters += 1;
													 else level.total_monsters -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_items += 1;
													 else level.total_items -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_secrets += 1;
													 else level.total_secrets -= 1;
			}

			[key1, key2] = Bindings.GetKeysForCommand("UseArmorIP");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (player.CountInv("KnightGownItem"))
				{
					player.A_SetInventory("KnightGown1IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem2"))
				{
					player.A_SetInventory("KnightGown2IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem3"))
				{
					player.A_SetInventory("KnightGown3IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem4"))
				{
					player.A_SetInventory("KnightGown4IPItem",1);
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("Whistl");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (MiscItem.whistlecooldown == 0)
					{
						player.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						if (player.CountInv("PowerStrength") || player.CountInv("PowerStrengthDD")) MiscItem.whistlecooldown = random(28,33);
																																									 else MiscItem.whistlecooldown = random(42,49);
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("RecallAll");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = DDPlayerPawn(player);
				if (DDPlayerPawn(player))
				{
					if (!automapactive) MiscItem.recalledall = true;
				}
			}
		}
	}
	
	override void UiTick()
	{
		if (Level.MapName == "TITLEMAP")
		{
			//Console.Printf("UiTick");
			if (exex_titlemusic >= 1)
			{
				if (exex_titlemusic == 1)
				{
					S_ChangeMusic("EE-TITLE",0,true,true); // The unused theme played in the original Dynamite Duchess trailer on Youtube is the mod's "main" theme
					SetMusicVolume(4.5);
				}
				if (exex_titlemusic == 2)
				{
					S_ChangeMusic("BGMTHEME",0,true,true); // The titlemusic for Dynamite Duchess
					SetMusicVolume(2.25);
				}
				if (exex_titlemusic >= 3)
				{
					S_ChangeMusic("BGMTHEMA",0,true,true); // The titlemusic for Appetite for Detention
					SetMusicVolume(2.25);
				}
			}
			else
			if (exex_titlemusic <= 0) // Use the default title music for the gamemode/mapset if viable
			{
				SetMusicVolume(1.25);
				if (gameinfo.GameType == GAME_Doom) 
				{
					if (Wads.CheckNumForName("MAP01", Wads.ns_global, -1, false)) S_ChangeMusic("$MUSIC_DM2TTL",0,true,true);
					if (Wads.CheckNumForName("E1M1", Wads.ns_global, -1, false)) S_ChangeMusic("$MUSIC_INTRO",0,true,true);
				}
				if (gameinfo.GameType == GAME_Heretic) S_ChangeMusic("MUS_TITL",0,true,true);
				if (gameinfo.GameType == GAME_Hexen) S_ChangeMusic("HEXEN",0,true,true);
				if (gameinfo.GameType == GAME_Strife) S_ChangeMusic("D_LOGO",0,true,true);
			}
		}
		super.UiTick();
	}

	override void RenderOverlay(RenderEvent e)
	{
		if (Level.MapName == "TITLEMAP")
		{
			//Console.Printf("RenderOverlay: level.time - %d", level.time);
			textureid titleimg;
			string titlenm;
			int visi;
			int timer = level.time % 716;
			if (exex_titlescreen >= 0)
			{
				textureid titlepic = TexMan.checkForTexture("DEFTITLE");
				if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
				if (exex_titlescreen >= 1)
				{
					// Background
					textureid titlepic = TexMan.checkForTexture("EXEXTILB");
					if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
					// Title Image
					titleimg = TexMan.checkForTexture("EXEXT3XS");
					if (titleimg) Screen.DrawTexture(titleimg, false, 360, 360, DTA_KeepRatio, true);
					// Dinah
					titleimg = TexMan.checkForTexture("EXEXDINH");
					if (titleimg) Screen.DrawTexture(titleimg, false, 800, 180, DTA_KeepRatio, true);
					// ???
					visi = 0;
					if (timer >= 351)
					{
						if (timer >= 351 && timer <= 358) visi = 5;
						if (timer >= 359 && timer <= 366) visi = 10;
						if (timer >= 367 && timer <= 374) visi = 15;
						if (timer >= 375 && timer <= 382) visi = 20;
						if (timer >= 383 && timer <= 390) visi = 25;
						if (timer >= 391 && timer <= 398) visi = 30;
						if (timer >= 399 && timer <= 406) visi = 35;
						if (timer >= 407 && timer <= 414) visi = 40;
						if (timer >= 415 && timer <= 422) visi = 45;
						if (timer >= 423 && timer <= 430) visi = 50;
						if (timer >= 431 && timer <= 438) visi = 55;
						if (timer >= 439 && timer <= 446) visi = 60;
						if (timer >= 447 && timer <= 454) visi = 65;
						if (timer >= 455 && timer <= 462) visi = 70;
						if (timer >= 463 && timer <= 470) visi = 75;
						if (timer >= 471 && timer <= 478) visi = 80;
						if (timer >= 479 && timer <= 486) visi = 85;
						if (timer >= 487 && timer <= 494) visi = 90;
						if (timer >= 495 && timer <= 502) visi = 95;
						if (timer >= 503 && timer <= 677) visi = 100;
						if (timer >= 678 && timer <= 679) visi = 95;
						if (timer >= 680 && timer <= 681) visi = 90;
						if (timer >= 682 && timer <= 683) visi = 85;
						if (timer >= 684 && timer <= 685) visi = 80;
						if (timer >= 686 && timer <= 687) visi = 75;
						if (timer >= 688 && timer <= 689) visi = 70;
						if (timer >= 690 && timer <= 691) visi = 65;
						if (timer >= 692 && timer <= 693) visi = 60;
						if (timer >= 694 && timer <= 695) visi = 55;
						if (timer >= 696 && timer <= 697) visi = 50;
						if (timer >= 698 && timer <= 699) visi = 45;
						if (timer >= 700 && timer <= 701) visi = 40;
						if (timer >= 702 && timer <= 703) visi = 35;
						if (timer >= 704 && timer <= 705) visi = 30;
						if (timer >= 706 && timer <= 707) visi = 25;
						if (timer >= 708 && timer <= 709) visi = 20;
						if (timer >= 710 && timer <= 711) visi = 15;
						if (timer >= 712 && timer <= 713) visi = 10;
						if (timer >= 714 && timer <= 715) visi = 5;
					}
					titlenm = "EXTID";
					if (visi >= 100) titlenm.AppendFormat("%d", visi);
					if (visi < 100) titlenm.AppendFormat("0%d", visi);
					if (visi < 10) titlenm.AppendFormat("00%d", visi);
					titleimg = TexMan.checkForTexture(titlenm);
					if (titleimg) Screen.DrawTexture(titleimg, false, 1258, 481, DTA_KeepRatio, true);
				}
				else
				if (exex_titlescreen == 0)
				{
					if (gameinfo.GameType == GAME_Doom) titlepic = TexMan.checkForTexture("TITLEPIC");
					if (gameinfo.GameType == GAME_Heretic) titlepic = TexMan.checkForTexture("TITLE");
					if (gameinfo.GameType == GAME_Hexen) titlepic = TexMan.checkForTexture("TITLE");
					if (gameinfo.GameType == GAME_Strife) titlepic = TexMan.checkForTexture("TITLEPIC");
					if (titlepic) Screen.DrawTexture(titlepic, false, 0, 0, DTA_FullScreen, true);
				}
			}
		}
		super.RenderOverlay(e);
	}
}

class ItemData
{
	Inventory savedItem;
	bool wasUndroppable;
	bool wasUntossable;
	int hadAmount;
}

class DD_StaticEventHandler : StaticEventHandler
{
	// So I don't forget, a lot of the code in this for keeping things on Resets is from DevilBlackDeath's "Inventory Keeper" minimod. A lot of the comments below are his on the effects. :V
	struct PlayerInvData
	{
		Inventory invFirst;
		Inventory invSel;
		Inventory ReadyWeapon;
	}

	private bool isNewGame; // This is a new game, nothing should be done in this situation !
	private PlayerInvData[MAXPLAYERS] savedInventory; // Inventory backup for players
	// Items set to undroppable and untossable, once the world is loaded they should go back to their original state
	private Array<ItemData> dropBlockers;
	private int[MAXPLAYERS] playerNeedsRestore; // List of players to restore (players in game)
	private Array<int> playersToResurrect; // List of players to resurrect from a death exit
	private int prevhealthval; // added by Misfit V:

	private void ResurrectPlayers()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResurrectPlayers() activated");
		for (int i = 0; i < playersToResurrect.Size(); i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [2], i: %d", i);
			PlayerInfo pi = players[playersToResurrect[i]];
			PlayerPawn p = PlayerPawn(pi.mo);

			/* Resurrect the player, this is the only way to keep their inventory intact
			   during intermission - DBD*/
			if (playeringame[playersToResurrect[i]] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [3], i: %d", i);
				pi.Resurrect();
			}
		}
	}

	private void ManageKeys()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageKeys() activated");
		bool keepKeys = false; // Defaulting to false if no value is found 
						
		if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();
		
		if (!keepKeys)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [2 - KeepKeys is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [3 - Player#]:\c- %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [4 - playersToResurrect]");
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [5 - Item Check]:\c- %s", item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Key') 
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [6a - Key Type Found]:\c- %s", item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
				}
			}
		}
	}

	/* ManageHealth is my own personal addition to the ResetInventory check stuff for the mod, 
	for future purposes, so no code yet - Misfit :V */
	private void ManageHealth()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageHealth() activated");
		bool keepHealth = true; // Defaulting to false if no value is found 
						
		if (CVar.FindCVar("exex_deathexitkeephealth") != null)
			keepHealth = CVar.FindCVar("exex_deathexitkeephealth").GetBool();
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [2 - Player#], i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);
			
			if (playeringame[i] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [3 - playeringame]:\c- i: %d", i);
				if (keepHealth)
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4a - keepHealth is \c[gold]ON\c[green]]");
					if (p.health > 0)
					{
						prevhealthval = p.health;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5a - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
					else
					{
						prevhealthval = 1;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5b - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
				}
				else
				{
					prevhealthval = p.health;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4b - keepHealth is \c[red]OFF\c[green]\c]");
				}
			}
		}
	}

	private void ManageWeapons()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageWeapons() activated");
		bool keepWeapons = true; // Defaulting to true if no value is found 

		if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();

		if (!keepWeapons)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [2 - KeepWeapons is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [3 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [4 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [5 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Weapon' || item is 'BasicArmor' || item is 'HexenArmor' || item is 'Ammo' || item is 'VacAmmoCounter' ||
								item is 'Backpack' || item is 'BlunderShotUpgrade' || item is 'SigilPieces' || item is 'SigilModeType')
						{
							if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [7 - GiveDefaultInventory]: i: %d", i);
					p.GiveDefaultInventory(); // Give the default inventory 
				}
			}
		}
	}

	private void RestorePlayerInvState(int pNum)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestorePlayerInvState() activated");
		PlayerInfo pi = players[pNum];
		PlayerPawn p = PlayerPawn(pi.mo);

		if (playeringame[pNum] && p != null && playerNeedsRestore[pNum])
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [2 - playeringame]:\c- pnum: %d", pnum);
			bool keepWeapons = true; // Defaulting to true if no value is found 

			if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
				keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();

			if (p.CountInv("ResetInventory") || p.CountInv("PlayerIsDead"))
			{
				if (prevhealthval > 0)
				{
					p.health = prevhealthval;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3a - resetting health to previous]:\c- pNum: %d, %d", pNum, p.health);
				}
				else
				{
					let MiscItem = PlayerStatItem(p.FindInventory("PlayerStatItem"));
					if (MiscItem) p.health = MiscItem.MaxHealthTrue;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3b - resetting health to current max:\c- pNum: %d, %d", pNum, p.health);
				}
			}

			/* We restore the player's inventory state
			   This is not to give the player back their inventory, they technically
			   still have it after the resurrection, this is mostly to make sure
			   the selected inventory item and equipped weapons remain the same
			   (from tests, these seem to reset on death+resurrect) */
			p.InvFirst = savedInventory[pNum].invFirst;
			p.InvSel = savedInventory[pNum].invSel;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [4 - savedinventory]:\c- pNum: %d", pNum);

			/* We restore the readied weapon only if weapons are kept, otherwise,
			   the game changing the readied weapons is the effect of losing them on purpose ! */
			if (keepWeapons)
			{
				pi.PendingWeapon = Weapon(savedInventory[pNum].readyWeapon);
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [5 - keepWeapons on]:\c- pNum: %d", pNum);
			}
		}
	}

	void BackupInventories()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- BackupInventories() activated");
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [2 - player#]:\c- i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);

			if (playeringame[i] && p != null)
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [3 - playeringame]: i: %d", i);
				// This player needs to be restored
				playerNeedsRestore[i] = true;

				/* Save all important inventory informations (what item was
				   selected, and what weapon was equipped, these may get unequipped on death) */
				savedInventory[i].invFirst = p.InvFirst;
				savedInventory[i].invSel = p.InvSel;
				savedInventory[i].readyWeapon = pi.ReadyWeapon;
			}
		}
	}

	private void RestoreItemsState() 
	{
		bool keepWeapons = true; // Defaulting to true if no value is found
		bool keepInvBarItems = true; // Defaulting to true if no value is found
		bool keepKeys = false; // Defaulting to false if no value is found

		if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();
			
		if (CVar.FindCVar("exex_deathexitkeepinventoryitems") != null)
			keepInvBarItems = CVar.FindCVar("exex_deathexitkeepinventoryitems").GetBool();
			
		if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();

		ResetInventory ResetItem;
		PlayerIsDead DeadItem;
		int ResetItemAmt;
		int DeadItemAmt;
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			ResetItem = ResetInventory(dropBlockers[i].savedItem);
			DeadItem = PlayerIsDead(dropBlockers[i].savedItem);
			if (ResetItem) ResetItemAmt = ResetItem.Amount;
			if (DeadItem) DeadItemAmt = DeadItem.Amount;
			if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt)) break;
		}
		if (dydudebug_resetinventorydebug) 
		{
					if (ResetItem && ResetItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found ResetInventory Item!");
			else if (DeadItem && DeadItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found PlayerIsDead Item!");
										else Console.Printf("\c[green]ResetInventory:\c- Did NOT find ResetInventory or PlayerIsDead Items!");
		}

		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestoreItemsState() activated");
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [2 - dropblockers]:\c- i: %d / %d", i, dropBlockers.Size());
			Inventory item = dropBlockers[i].savedItem;
			if (item != null) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [3 - item check]:\c- i: %d, %s", i, item.GetClassName());
				item.bUndroppable = dropBlockers[i].wasUndroppable;
				item.bUntossable = dropBlockers[i].wasUntossable;

				/* We don't restore weapons, armors and ammos amount, otherwise on an
				   inventory reset, the player won't be actually in a pistol start state */
				bool keepinv = true;
				if (!keepWeapons &&
					  (item is 'Weapon' || item is 'BasicArmor' || item is 'HexenArmor' || item is 'Ammo' || item is 'VacAmmoCounter' ||
						item is 'Backpack' || item is 'BlunderShotUpgrade' || item is 'SigilPieces' || item is 'SigilModeType'))
				{
					keepinv = false;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Check: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepInvBarItems && 
						(item is 'ExExInvBarItem' || item is 'KilletanteEffigy'))
				{
					keepinv = false;
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4c - EEInvItem Check: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt))
					{
						item.Amount = 0;
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4cb - EEInvItem Check: \c[brick]amount cleared\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					}
				}
				//
				//
				if (keepinv)
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [5 - \c[gold]Item Saved\c[blue]]:\c- i: %d, %s (hadamount: %d)", i, item.GetClassName(), dropBlockers[i].hadAmount);
					item.Amount = dropBlockers[i].hadAmount;
				}
			}
		}

		dropBlockers.Clear();
	}

	private void MakeInventoryUndroppable() 
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- MakeInventoryUndroppable() activated");
		for (int i = 0; i < MAXPLAYERS; i++) 
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [2 - player#]: i: %d", i);
			if (playeringame[i] && players[i].mo != null) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [3 - playeringame]: i: %d", i);
				for (Inventory item = players[i].mo.Inv; item != null; item = item.Inv) 
				{
					if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [4 - item check]: i: %d, %s", i, item.GetClassName());
					bool keepWeapons = true; // Defaulting to true if no value is found
					bool keepInvBarItems = true; // Defaulting to true if no value is found
					bool keepKeys = false; // Defaulting to false if no value is found

					if (CVar.FindCVar("exex_deathexitkeepweapons") != null)
						keepWeapons = CVar.FindCVar("exex_deathexitkeepweapons").GetBool();
						
					if (CVar.FindCVar("exex_deathexitkeepinventoryitems") != null)
						keepInvBarItems = CVar.FindCVar("exex_deathexitkeepinventoryitems").GetBool();
						
					if (CVar.FindCVar("exex_deathexitkeepkeys") != null)
						keepKeys = CVar.FindCVar("exex_deathexitkeepkeys").GetBool();
						
					// Save the item's actual UNDROPPABLE and UNTOSSABLE tags
					ItemData id = new('ItemData');
					id.savedItem = item;
					id.wasUndroppable = item.bUndroppable;
					id.wasUntossable = item.bUntossable;
					id.hadAmount = item.Amount;
					dropBlockers.Push(id);

					if (!keepWeapons && (item is 'Weapon' || item is 'BasicArmor' || item is 'HexenArmor' || item is 'Ammo' || item is 'VacAmmoCounter' ||
															 item is 'Backpack' || item is 'BlunderShotUpgrade' || item is 'SigilPieces' || item is 'SigilModeType')) 
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5a - KeepWeapons off]: \c-%s", item.GetClassName());
						// Make the weapon/armor/ammo droppable so it will be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						// This is done so you actually do a Pistol Start when intended if you decided to not keep weapons !
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else if (!keepInvBarItems && (item is 'ExExInvBarItem' || item is 'KilletanteEffigy'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5b - KeepInvBarItems off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else if (!KeepKeys && (item is 'Key'))
					{
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5c - KeepKeys off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					{
						// Make the items undroppable so it won't be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						if (dydudebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5d - make item undroppable/untossable]: \c-%s", item.GetClassName());
						item.bUndroppable = true;
						item.bUntossable = true;
					}
				}
			}
		}
	}
    
	private void ResetResurrectionQueue(int i) 
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResetResurrectionQueue(%d) activated", i);
		if (playeringame[i] && players[i].mo != null)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [2 - playeringame]\c-: %d", i);
			int delIndex = playersToResurrect.Find(i);

			if (delIndex < playersToResurrect.Size())
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [3 - delIndex (\c-i: %d\c[green])\c-: %d", i, delindex);
				playersToResurrect.Delete(delIndex);
				playersToResurrect.ShrinkToFit();
			}
		}
	}

	// Event functions override
	override void OnRegister()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- OnRegister() activated");
		isNewGame=true;
		dropBlockers.Clear();
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [1 - isNewGame]:\c- : %d", isNewGame);
 
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [2 - playerNeedsRestore to false]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}

	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e) 
	{
		if (gameinfo.gametype & GAME_Raven)
		{
			for (let i = 0, l = level.Sectors.Size(); i < l; i++)
			{
				if (dydudebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
				if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava')
						level.Sectors[i].damagetype = 'Magma';
			}
		}
		
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldLoaded() activated");
		// This will be done only by the first player entering
		// Restoring undroppable and untossable stats for all inventory items !
		// VERY IMPORTANT to keep the intended behaviour of all items/weapons/...
		RestoreItemsState();

		// Once we're done loading a level, regardless of what happened beforehand,
		// this is not a new game anymore ! Also we're done restoring anything, so clear arrays
		isNewGame = false;
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [2 - isNewGame to false]\c-: %d", isNewGame);

		// World is loaded, everything is done, no players to restore, safe cleanup in prevision of next level
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			playerNeedsRestore[i] = false;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [3 - playerNeedsRestore to false]\c-: i: %d", i);
		}
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldUnloaded() activated");
		// World is unloaded from save, we don't restore inventory, and this is not a new game
		if (e.IsSaveGame)
		{
			isNewGame = false;
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2a - IsSaveGame to false]\c-: %d", isNewGame);
			
			// Try to reset the resurrection queue on a save reload (after dying) to circumvent a major issue with the base Universal Keeper mod. - Misfit
			for (int i = 0; i < MAXPLAYERS; i++) 
			{
				if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded (clear resurrect queue) [3 - player#]\c-: %d", i);
				ResetResurrectionQueue(i);
			}
		}
		/* This is a new game, all future world loads are level exits except for saves (above)
		 and new games (in which case isNewGame will be true again) */
		else if (!isNewGame) 
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2b - !isNewGame]\c-");
			/* We manually remove all weapons and give back a default inventory
			   Later on we give back the correct amount of said inventory, as some mods'
			   default inventories may include inventory item that will get stacked here */
			ManageWeapons();

			/* Key Checking - Misfit Added :V */
			ManageKeys();
			
			/* Manage Health - Misfit Added :V */
			ManageHealth();

			// We make all inventory undroppable so ResetInventory can't do its job
			MakeInventoryUndroppable();

			/* We resurrect dead players no matter what (EVEN if we did get here from
			   a new game or savegame the player entity would be replaced by a new one
			   after the load ! */
			ResurrectPlayers();
			BackupInventories();
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerEntered() activated");
		RestorePlayerInvState(e.playerNumber);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerRespawned() activated");
		ResetResurrectionQueue(e.playerNumber);
	}

	override void PlayerDied(PlayerEvent e)
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerDied() activated");
		if (playeringame[e.playerNumber] && players[e.playerNumber].mo != null)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]PlayerDied [2 - playersToResurrect]\c: %d", e.playerNumber);
			playersToResurrect.Push(e.playerNumber);
		}
	}
	
	override void NewGame()
	{
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- NewGame() activated");
		isNewGame = true;
		dropBlockers.Clear();
		if (dydudebug_resetinventorydebug) Console.Printf("\c[green]NewGame [2 - isNewGame]\c-: %d", isNewGame);

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[green]NewGame [3 - playerNeedsRestore]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}
}