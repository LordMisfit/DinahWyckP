class SoundWaterfall1 : SoundWaterfall replaces SoundWaterfall {}
class SoundWind1 : SoundWind replaces SoundWind {}

class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB
		+NOTIMEFREEZE
		-BLOCKEDBYSOLIDACTORS
	}
}

class CustomInventoryExt : CustomInventory
{
	int user_type;
	mixin IPCostCheck;
	mixin InvWeaponShare;
	mixin HUDRecovery;
	
	bool PickupUseVoice;
	bool PickupUseVoice2;
	string PickupSnd2;
	property PickUpVoice: PickupUseVoice;
	property PickUpVoice2: PickupUseVoice2;
	property PickupSound2: PickupSnd2;
	
	override String PickupMessage()
	{
		return PickupMsg;
	}
	
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (toucher != NULL && toucher.CheckLocalView())
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
		}
		else
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_MAYBE_LOCAL;
		}
		//Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			}
		}
		toucher.A_StopSound(chan);
		toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		
		if (PickupSnd2 != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			//Console.Printf("Channel: %d [PUV2: %d]", chan, PickupUseVoice2);
			
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
			double maskpitch = 1.00;
			if (PickupUseVoice2) 
			{
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
			}
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
		}
	}

	action void A_UseTurkeyDinner()
	{
		if (player.mo.CountInv("TurkeyDinner"))
		{
			let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
			let globalvars = DDGlobalVariables.Get();
			
			bool wutthis = false;
			if (exex_ikaripointsenabled && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
			{
				double cost = invoker.A_GetIPCost(10);
				if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
				If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
				{
					MiscItem.ItemPoints -= cost;
					globalvars.ItemPoints -= cost;
					invoker.A_IPUseHUD(cost);
					if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
					wutthis = true;
					//if (wutthis) invoker.A_IPDinahVoiceSelect(0,4,11);
				}
			}

			int temp1 = player.mo.health;
			int oldhealth = player.mo.health;
			int temp4 = player.mo.CountInv("PlayerMaxHP");
			int temp2 = (temp4 * 3.0);

			int temp3 = temp4;
			if (wutthis) 
			{
				temp3 *= (random(47,53) * 0.01);
				temp3 *= 2.0;
			}
			else
			{
				temp3 *= (random(45,55) * 0.01);
			}
			
			temp1 += temp3;
			if (temp1 > temp2) temp1 = temp2;
			player.mo.health = player.health = temp1;
			int healdiff = player.mo.health - oldhealth;
			if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
			if (MiscItem) 
			{
				if (wutthis) MiscItem.HPRegenBoostTimer += (random(75,108) * 25);
								else MiscItem.HPRegenBoostTimer += (random(75,108) * 2.5);
			}
			
			int timegive = 15 * TICRATE;
			if (wutthis) timegive *= 3;
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				double maskpitch = 1.00;
				if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				A_StopSound(CHAN_VOICE);
				A_StartSound("Dinah/eat",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
			}
			player.mo.A_TakeInventory("TurkeyDinner",1);
			A_SetBlend("f1 ff f1",0.1,random(6,9));
			if (!player.mo.CountInv("PowerMeal2Buff")) 
			{
				player.mo.SetInventory("PowerMeal2Buff",1);
				let Buff1Item = PowerMeal2Buff(player.mo.FindInventory("PowerMeal2Buff"));
				if (Buff1Item) Buff1Item.EffectTics = timegive;
			}
			else
			{
				let Buff1Item = PowerMeal2Buff(player.mo.FindInventory("PowerMeal2Buff"));
				if (Buff1Item) Buff1Item.EffectTics += timegive;
			}
			if (!player.mo.CountInv("PowerMeal2Buff2")) 
			{
				player.mo.SetInventory("PowerMeal2Buff2",1);
				let Buff2Item = PowerMeal2Buff2(player.mo.FindInventory("PowerMeal2Buff2"));
				if (Buff2Item) Buff2Item.EffectTics = timegive;
			}
			else
			{
				let Buff2Item = PowerMeal2Buff2(player.mo.FindInventory("PowerMeal2Buff2"));
				if (Buff2Item) Buff2Item.EffectTics += timegive;
			}
			Console.Printf("\c[red]Ate a delicious Turkey Dinner! \c[green]+%d (Over)HP", temp3);
		}
	}

	action void A_UseAppleWine()
	{
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		int currenthealth = player.mo.health;
		int oldhealth = player.mo.health;
		int MaxHealthTrue = player.mo.CountInv("PlayerMaxHP");
		bool willheal;
		bool useitem;
		
		bool wutthis = false;
		if (exex_ikaripointsenabled && MiscItem && globalvars && (player.mo && player.mo.CountInv("IPUseMode")))
		{
			double cost = invoker.A_GetIPCost(9);
			if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
			If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
			{
				MiscItem.ItemPoints -= cost;
				globalvars.ItemPoints -= cost;
				invoker.A_IPUseHUD(cost);
				if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
				wutthis = true;
				//if (wutthis) invoker.A_IPDinahVoiceSelect(0,4,11);
			}
		}

		if (player.mo.CountInv("AppleWine") && MiscItem)
		{
			if (MiscItem.WineDefTier == 4)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPMaximum",1);
					A_Log("\c[purple]Defense Expertly Buffed (-99.5% damage taken for 40 seconds)!");
					MiscItem.WineDefTier = -5;
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					willheal = true;
					useitem = true;
				}
			}
			else
			if (MiscItem.WineDefTier == 3)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrongestEven",1);
					A_Log("\c[purple]Defense Immensely Buffed (-87.5% damage taken for 24 seconds)!");
					MiscItem.WineDefTier = -4;
				}
				else
				{
					player.mo.A_SetInventory("PowerWineBuffStrongestEven",1);
					A_Log("\c[purple]Defense Immensely Buffed (-75% damage taken for 12 seconds)!");
					MiscItem.WineDefTier = 4;
				}
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				willheal = true;
				useitem = true;
			}
			else
			if (MiscItem.WineDefTier == 2)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrongest",1);
					A_Log("\c[purple]Defense Immensely Buffed (-78.125% damage taken for 18 seconds)!");
					MiscItem.WineDefTier = -3;
				}
				else
				{
					player.mo.A_SetInventory("PowerWineBuffStrongest",1);
					A_Log("\c[purple]Defense Greatly Buffed (-56.25% damage taken for 9 seconds)!");
					MiscItem.WineDefTier = 3;
				}
				if (random(1,4) <= 3) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
				}
				willheal = true;
				useitem = true;
			}
			else
			if (MiscItem.WineDefTier == 1)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrong",1);
					A_Log("\c[purple]Defense Moderately Buffed (-68.75% damage taken for 14 seconds)!");
					MiscItem.WineDefTier = -2;
				}
				else
				{
					player.mo.A_SetInventory("PowerWineBuffStrong",1);
					A_Log("\c[purple]Defense Moderately Buffed (-37.5% damage taken for 7 seconds)!");
					MiscItem.WineDefTier = 2;
				}
				if (random(1,4) <= 2) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
				}
				willheal = true;
				useitem = true;
			}
			else
			if (MiscItem.WineDefTier == 0)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPWeak",1);
					A_Log("\c[purple]Defense Weakly Buffed (-59.375% damage taken for 10 seconds)!");
					MiscItem.WineDefTier = -1;
				}
				else
				{
					player.mo.A_SetInventory("PowerWineBuffWeak",1);
					A_Log("\c[purple]Defense Weakly Buffed (-18.75% damage taken for 5 seconds)!");
					MiscItem.WineDefTier = 1;
				}
				if (random(1,4) <= 1) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
				}
				willheal = true;
				useitem = true;
			}
			else
			if (MiscItem.WineDefTier == -1)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrong",1);
					A_Log("\c[purple]Defense Moderately Buffed (-68.75% damage taken for 14 seconds)!");
					if (random(1,4) <= 1) 
					{
						if (MiscItem && MiscItem.CanTalkUnderwater)
						{
							double maskpitch = 1.00;
							if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
							A_StopSound(CHAN_VOICE);
							A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						}
					}
					MiscItem.WineDefTier = -2;
					willheal = true;
					useitem = true;
				}
			}
			else
			if (MiscItem.WineDefTier == -2)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrongest",1);
					A_Log("\c[purple]Defense Immensely Buffed (-78.125% damage taken for 18 seconds)!");
					if (random(1,4) <= 3) 
					{
						if (MiscItem && MiscItem.CanTalkUnderwater)
						{
							double maskpitch = 1.00;
							if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
							A_StopSound(CHAN_VOICE);
							A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						}
					}
					MiscItem.WineDefTier = -3;
					willheal = true;
					useitem = true;
				}
			}
			else
			if (MiscItem.WineDefTier == -3)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPStrongestEven",1);
					A_Log("\c[purple]Defense Immensely Buffed (-87.5% damage taken for 24 seconds)!");
					MiscItem.WineDefTier = -4;
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					willheal = true;
					useitem = true;
				}
			}
			else
			if (MiscItem.WineDefTier == -4)
			{
				if (wutthis)
				{
					player.mo.A_SetInventory("PowerWineBuffIPMaximum",1);
					A_Log("\c[purple]Defense Expertly Buffed (-99.5% damage taken for 40 seconds)!");
					MiscItem.WineDefTier = -5;
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						A_StartSound("Dinah/giggle",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					willheal = true;
					useitem = true;
				}
			}
			
			if (useitem)
			{
				player.mo.A_SetInventory("PowerWineBuffIPMaximum",0);
				player.mo.A_SetInventory("PowerWineBuffIPStrongestEven",0);
				player.mo.A_SetInventory("PowerWineBuffIPStrongest",0);
				player.mo.A_SetInventory("PowerWineBuffIPStrong",0);
				player.mo.A_SetInventory("PowerWineBuffIPWeak",0);
				player.mo.A_SetInventory("PowerWineBuffStrongestEven",0);
				player.mo.A_SetInventory("PowerWineBuffStrongest",0);
				player.mo.A_SetInventory("PowerWineBuffStrong",0);
				player.mo.A_SetInventory("PowerWineBuffWeak",0);
				if (MiscItem.WineDefTier == -5) player.mo.A_SetInventory("PowerWineBuffIPMaximum",1);
				if (MiscItem.WineDefTier == -4) player.mo.A_SetInventory("PowerWineBuffIPStrongestEven",1);
				if (MiscItem.WineDefTier == -3) player.mo.A_SetInventory("PowerWineBuffIPStrongest",1);
				if (MiscItem.WineDefTier == -2) player.mo.A_SetInventory("PowerWineBuffIPStrong",1);
				if (MiscItem.WineDefTier == -1) player.mo.A_SetInventory("PowerWineBuffIPWeak",1);
				if (MiscItem.WineDefTier == 1) player.mo.A_SetInventory("PowerWineBuffWeak",1);
				if (MiscItem.WineDefTier == 2) player.mo.A_SetInventory("PowerWineBuffStrong",1);
				if (MiscItem.WineDefTier == 3) player.mo.A_SetInventory("PowerWineBuffStrongest",1);
				if (MiscItem.WineDefTier == 4) player.mo.A_SetInventory("PowerWineBuffStrongestEven",1);

				if (willheal)
				{
					int healamt = (MaxHealthTrue * frandom(0.18,0.22));
					if (currenthealth < MaxHealthTrue)
					{
						healamt = (MaxHealthTrue * frandom(0.18,0.22));
						if (wutthis) 
						{
							healamt = (MaxHealthTrue * frandom(0.195,0.205));
							healamt *= 1.5;
						}
						currenthealth += healamt;
						if (currenthealth > MaxHealthTrue) currenthealth = MaxHealthTrue;
						player.health = player.mo.health = currenthealth;
						int healdiff = player.mo.health - oldhealth;
						if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
						if (MiscItem && globalvars)
						{
							if (MiscItem.ItemPoints)
							{
								if (MiscItem.IPDissipateTimer < 0) MiscItem.IPDissipateTimer *= 0.5;
								else MiscItem.IPDissipateTimer += ((2100 - MiscItem.IPDissipateTimer) * frandompick(0.02,0.02,0.02,0.05,0.05,0.10));
							}
						}
					}
					else
					{
						healamt = (MaxHealthTrue * frandom(0.045,0.055));
						if (wutthis) 
						{
							healamt = (MaxHealthTrue * frandom(0.04975,0.05125));
							healamt *= 1.5;
						}
						currenthealth += healamt;
						if (currenthealth > (MaxHealthTrue*3)) currenthealth = (MaxHealthTrue*3);
						player.health = player.mo.health = currenthealth;
						int healdiff = player.mo.health - oldhealth;
						if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
						if (MiscItem && globalvars)
						{
							if (MiscItem.ItemPoints)
							{
								if (MiscItem.IPDissipateTimer < 0) MiscItem.IPDissipateTimer *= 0.875;
								else MiscItem.IPDissipateTimer += ((2100 - MiscItem.IPDissipateTimer) * frandompick(0.005,0.005,0.005,0.0125,0.0125,0.025));
							}
						}
					}
					
					let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) 
					{
						if (wutthis) MiscItem.HPRegenBoostTimer += (randompick(50,55,60,65) * 25);
										else MiscItem.HPRegenBoostTimer += (randompick(50,55,60,65) * 2.5);
					}
				}
				
				// Restore Some Armor
				if (wutthis)
				{
					int rand = random(22,28);
					for (int i; i < rand; i++)
					{
						player.mo.A_GiveInventory("ArmorScrap",1);
					}
				}
				
				double maskpitch = 1.00;
				if (player.mo.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				player.mo.A_StartSound("Dinah/drink",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				player.mo.A_TakeInventory("AppleWine",1);
			}
			else
			{
				if (MiscItem.WineDefTier <= -4 || MiscItem.WineDefTier >= 4) A_Log("\c[red]You can't drink any more Apple Wine for now!");
				else A_Log("\c[red]You can't drink any more Apple Wine without using IP as you're currently using the IP Buffs!");
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (player.mo.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					player.mo.A_StopSound(CHAN_VOICE);
					player.mo.A_StartSound("Dinah/what",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
			}
		}
	}
}

// Used for a base item for all the items that don't do anything themselves but are used for/as detecting flags.
class PlaceholderItem : CustomInventoryExt
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 1;
		+INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemDepletable : PlaceholderItem
{
	default
	{
		-INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}


class PlaceholderItemUndrop : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.HUBPOWER
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemMax : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class TempDefenseBuff : PowerProtection
{
	default
	{
		Inventory.Icon "";
		Powerup.Duration 2147483646; // 8
		Powerup.Color "00 00 00", 0.00;
	}
}

class CricketBatGuard : TempDefenseBuff
{
	default
	{
		Inventory.Icon "SPBTA0";
	}
	string texname;
	
	override void Tick()
	{
		Super.Tick();
		if (dydudebug_showbufficons) 
		{
			texname = "SPBTA0";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
		else 
		{
			texname = "";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.625;
			if (damageType == 'Melee' ||
					damageType == 'Bonk' ||
					damageType == 'Bap' ||
					damageType == 'BFGSplash' ||
					damageType == 'Suck' ||
					damageType == 'Fist' ||
					damageType == 'Kick' ||
					damageType == 'Stomp' ||
					damageType == 'Trample' ||
					damageType == 'Chainsaw' ||
					damageType == 'Dashing' ||
					damageType == 'DashingBG' ||
					damageType == 'DashingSD' ||
					damageType == 'Chop') TOTALFactor = 0.125;
			if (damageType == 'Dust') TOTALFactor = 0.8125;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class CricketBatGuard2 : TempDefenseBuff
{
	default
	{
		Inventory.Icon "SPBTA0";
	}
	string texname;
	
	override void Tick()
	{
		Super.Tick();
		if (dydudebug_showbufficons) 
		{
			texname = "SPBTA0";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
		else 
		{
			texname = "";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.125;
			if (damageType == 'Melee' ||
					damageType == 'Bonk' ||
					damageType == 'Bap' ||
					damageType == 'BFGSplash' ||
					damageType == 'Suck' ||
					damageType == 'Fist' ||
					damageType == 'Kick' ||
					damageType == 'Stomp' ||
					damageType == 'Trample' ||
					damageType == 'Chainsaw' ||
					damageType == 'Dashing' ||
					damageType == 'DashingBG' ||
					damageType == 'DashingSD' ||
					damageType == 'Chop') TOTALFactor = 0.025;
			if (damageType == 'Dust') TOTALFactor = 0.5625;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class CricketBatGuard3 : TempDefenseBuff
{
	default
	{
		Inventory.Icon "SPBTA0";
	}
	string texname;
	
	override void Tick()
	{
		Super.Tick();
		if (dydudebug_showbufficons) 
		{
			texname = "SPBTA0";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
		else 
		{
			texname = "";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.025;
			if (damageType == 'Melee' ||
					damageType == 'Bonk' ||
					damageType == 'Bap' ||
					damageType == 'BFGSplash' ||
					damageType == 'Suck' ||
					damageType == 'Fist' ||
					damageType == 'Kick' ||
					damageType == 'Stomp' ||
					damageType == 'Trample' ||
					damageType == 'Chainsaw' ||
					damageType == 'Dashing' ||
					damageType == 'DashingBG' ||
					damageType == 'DashingSD' ||
					damageType == 'Chop') TOTALFactor = 0.005;
			if (damageType == 'Dust') TOTALFactor = 0.5125;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class CricketBatSwingDEF : TempDefenseBuff
{
	default
	{
		Inventory.Icon "SPBTA0";
	}
	string texname;
	
	override void Tick()
	{
		Super.Tick();
		if (dydudebug_showbufficons) 
		{
			texname = "SPBTA0";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
		else 
		{
			texname = "";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.8125;
			if (damageType == 'Melee' ||
					damageType == 'Bonk' ||
					damageType == 'Bap' ||
					damageType == 'BFGSplash' ||
					damageType == 'Suck' ||
					damageType == 'Fist' ||
					damageType == 'Kick' ||
					damageType == 'Stomp' ||
					damageType == 'Trample' ||
					damageType == 'Chainsaw' ||
					damageType == 'Dashing' ||
					damageType == 'DashingBG' ||
					damageType == 'DashingSD' ||
					damageType == 'Chop') TOTALFactor = 0.5625;
			if (damageType == 'Dust') TOTALFactor = 1.00;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}


class CricketBatSwingDEF2 : TempDefenseBuff
{
	default
	{
		Inventory.Icon "SPBTA0";
	}
	string texname;
	
	override void Tick()
	{
		Super.Tick();
		if (dydudebug_showbufficons) 
		{
			texname = "SPBTA0";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
		else 
		{
			texname = "";
			icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.5625;
			if (damageType == 'Melee' ||
					damageType == 'Bonk' ||
					damageType == 'Bap' ||
					damageType == 'BFGSplash' ||
					damageType == 'Suck' ||
					damageType == 'Fist' ||
					damageType == 'Kick' ||
					damageType == 'Stomp' ||
					damageType == 'Trample' ||
					damageType == 'Chainsaw' ||
					damageType == 'Dashing' ||
					damageType == 'DashingBG' ||
					damageType == 'DashingSD' ||
					damageType == 'Chop') TOTALFactor = 0.1875;
			if (damageType == 'Dust') TOTALFactor = 0.78125;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}


// Placeholder for Armor Class :V
class NoKnightGownItem : PlaceHolderItem 
{
	default
	{
		Inventory.Icon "KGWNY0";
		Inventory.MaxAmount 1; 
	} 
}
class KnightGownItem : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem2 : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem3 : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem4 : PlaceHolderItem { default { Inventory.MaxAmount 1; } }

class PowerWine : PowerProtection
{
	string texname;
	int timer;
	double ticpiece;
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
}
class PowerWineBuffWeak : PowerWine
{
	default
	{
		DamageFactor "Normal", 0.8125;
		DamageFactor "Melee", 0.8125;
		DamageFactor "Bonk", 0.8125;
		DamageFactor "Cricket", 0.8125;
		DamageFactor "Chop", 0.8125;
		DamageFactor "Lead", 0.8125;
		DamageFactor "Breakfast", 0.8125;
		DamageFactor "Zap", 0.8125;
		DamageFactor "Suck", 0.8125;
		DamageFactor "Dust", 0.8125;
		DamageFactor "Beats", 0.8125;
		DamageFactor "Cherrybomb", 0.8125;
		DamageFactor "BRocket", 0.8125;
		DamageFactor "Spinner", 0.8125;
		DamageFactor "Popper", 0.8125;
		DamageFactor "Dashing", 0.8125;
		DamageFactor "DashingBG", 0.8125;
		DamageFactor "DashingSD", 0.8125;
		DamageFactor "Bap", 0.8125;
		DamageFactor "Fire", 0.8125;
		DamageFactor "Boiling", 0.8125;

		Inventory.Icon "GBL1A0";
		Powerup.Duration -5;
		Powerup.Color "70 2c 52", 0.250;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerWineBuffIPWeak : PowerWineBuffWeak
{
	default
	{
		DamageFactor "Normal", 0.40625;
		DamageFactor "Melee", 0.40625;
		DamageFactor "Bonk", 0.40625;
		DamageFactor "Cricket", 0.40625;
		DamageFactor "Chop", 0.40625;
		DamageFactor "Lead", 0.40625;
		DamageFactor "Breakfast", 0.40625;
		DamageFactor "Zap", 0.40625;
		DamageFactor "Suck", 0.40625;
		DamageFactor "Dust", 0.40625;
		DamageFactor "Beats", 0.40625;
		DamageFactor "Cherrybomb", 0.40625;
		DamageFactor "BRocket", 0.40625;
		DamageFactor "Spinner", 0.40625;
		DamageFactor "Popper", 0.40625;
		DamageFactor "Dashing", 0.40625;
		DamageFactor "DashingBG", 0.40625;
		DamageFactor "DashingSD", 0.40625;
		DamageFactor "Bap", 0.40625;
		DamageFactor "Fire", 0.40625;
		DamageFactor "Boiling", 0.40625;

		Inventory.Icon "GBL1A0";
		Powerup.Duration -10;
		Powerup.Color "70 2c 52", 0.125;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "GBL1B0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "GBL1C0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		super.Tick();
	}
}

class PowerWineBuffStrong : PowerWine
{
	default
	{
		DamageFactor "Normal", 0.625;
		DamageFactor "Melee", 0.625;
		DamageFactor "Bonk", 0.625;
		DamageFactor "Cricket", 0.625;
		DamageFactor "Chop", 0.625;
		DamageFactor "Lead", 0.625;
		DamageFactor "Breakfast", 0.625;
		DamageFactor "Zap", 0.625;
		DamageFactor "Suck", 0.625;
		DamageFactor "Dust", 0.625;
		DamageFactor "Beats", 0.625;
		DamageFactor "Cherrybomb", 0.625;
		DamageFactor "BRocket", 0.625;
		DamageFactor "Spinner", 0.625;
		DamageFactor "Popper", 0.625;
		DamageFactor "Dashing", 0.625;
		DamageFactor "DashingBG", 0.625;
		DamageFactor "DashingSD", 0.625;
		DamageFactor "Bap", 0.625;
		DamageFactor "Fire", 0.625;
		DamageFactor "Boiling", 0.625;

		Inventory.Icon "GBL2A0";
		Powerup.Duration -7;
		Powerup.Color "70 2c 52", 0.325;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerWineBuffIPStrong : PowerWineBuffStrong
{
	default
	{
		DamageFactor "Normal", 0.3125;
		DamageFactor "Melee", 0.3125;
		DamageFactor "Bonk", 0.3125;
		DamageFactor "Cricket", 0.3125;
		DamageFactor "Chop", 0.3125;
		DamageFactor "Lead", 0.3125;
		DamageFactor "Breakfast", 0.3125;
		DamageFactor "Zap", 0.3125;
		DamageFactor "Suck", 0.3125;
		DamageFactor "Dust", 0.3125;
		DamageFactor "Beats", 0.3125;
		DamageFactor "Cherrybomb", 0.3125;
		DamageFactor "BRocket", 0.3125;
		DamageFactor "Spinner", 0.3125;
		DamageFactor "Popper", 0.3125;
		DamageFactor "Dashing", 0.3125;
		DamageFactor "DashingBG", 0.3125;
		DamageFactor "DashingSD", 0.3125;
		DamageFactor "Bap", 0.3125;
		DamageFactor "Fire", 0.3125;
		DamageFactor "Boiling", 0.3125;

		Inventory.Icon "GBL2A0";
		Powerup.Duration -14;
		Powerup.Color "70 2c 52", 0.1625;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "GBL2B0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "GBL2C0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		super.Tick();
	}
}

class PowerWineBuffStrongest : PowerWine
{
	default
	{
		DamageFactor "Normal", 0.4375;
		DamageFactor "Melee", 0.4375;
		DamageFactor "Bonk", 0.4375;
		DamageFactor "Cricket", 0.4375;
		DamageFactor "Chop", 0.4375;
		DamageFactor "Lead", 0.4375;
		DamageFactor "Breakfast", 0.4375;
		DamageFactor "Zap", 0.4375;
		DamageFactor "Suck", 0.4375;
		DamageFactor "Dust", 0.4375;
		DamageFactor "Beats", 0.4375;
		DamageFactor "Cherrybomb", 0.4375;
		DamageFactor "BRocket", 0.4375;
		DamageFactor "Spinner", 0.4375;
		DamageFactor "Popper", 0.4375;
		DamageFactor "Dashing", 0.4375;
		DamageFactor "DashingBG", 0.4375;
		DamageFactor "DashingSD", 0.4375;
		DamageFactor "Bap", 0.4375;
		DamageFactor "Fire", 0.4375;
		DamageFactor "Boiling", 0.4375;

		Inventory.Icon "GBL3A0";
		Powerup.Duration -9;
		Powerup.Color "70 2c 52", 0.400;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerWineBuffIPStrongest : PowerWineBuffStrongest
{
	default
	{
		DamageFactor "Normal", 0.21875;
		DamageFactor "Melee", 0.21875;
		DamageFactor "Bonk", 0.21875;
		DamageFactor "Cricket", 0.21875;
		DamageFactor "Chop", 0.21875;
		DamageFactor "Lead", 0.21875;
		DamageFactor "Breakfast", 0.21875;
		DamageFactor "Zap", 0.21875;
		DamageFactor "Suck", 0.21875;
		DamageFactor "Dust", 0.21875;
		DamageFactor "Beats", 0.21875;
		DamageFactor "Cherrybomb", 0.21875;
		DamageFactor "BRocket", 0.21875;
		DamageFactor "Spinner", 0.21875;
		DamageFactor "Popper", 0.21875;
		DamageFactor "Dashing", 0.21875;
		DamageFactor "DashingBG", 0.21875;
		DamageFactor "DashingSD", 0.21875;
		DamageFactor "Bap", 0.21875;
		DamageFactor "Fire", 0.21875;
		DamageFactor "Boiling", 0.21875;

		Inventory.Icon "GBL3A0";
		Powerup.Duration -18;
		Powerup.Color "70 2c 52", 0.200;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "GBL3B0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "GBL3C0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		super.Tick();
	}
}

class PowerWineBuffStrongestEven : PowerWine
{
	default
	{
		DamageFactor "Normal", 0.25;
		DamageFactor "Melee", 0.25;
		DamageFactor "Bonk", 0.25;
		DamageFactor "Cricket", 0.25;
		DamageFactor "Chop", 0.25;
		DamageFactor "Lead", 0.25;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0.25;
		DamageFactor "Dust", 0.25;
		DamageFactor "Beats", 0.25;
		DamageFactor "Cherrybomb", 0.25;
		DamageFactor "BRocket", 0.25;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "Dashing", 0.25;
		DamageFactor "DashingBG", 0.25;
		DamageFactor "DashingSD", 0.25;
		DamageFactor "Bap", 0.25;
		DamageFactor "Fire", 0.25;
		DamageFactor "Boiling", 0.25;

		Inventory.Icon "GBL4A0";
		Powerup.Duration -12;
		Powerup.Color "70 2c 52", 0.450;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerWineBuffIPStrongestEven : PowerWineBuffStrongestEven
{
	default
	{
		DamageFactor "Normal", 0.125;
		DamageFactor "Melee", 0.125;
		DamageFactor "Bonk", 0.125;
		DamageFactor "Cricket", 0.125;
		DamageFactor "Chop", 0.125;
		DamageFactor "Lead", 0.125;
		DamageFactor "Breakfast", 0.125;
		DamageFactor "Zap", 0.125;
		DamageFactor "Suck", 0.125;
		DamageFactor "Dust", 0.125;
		DamageFactor "Beats", 0.125;
		DamageFactor "Cherrybomb", 0.125;
		DamageFactor "BRocket", 0.125;
		DamageFactor "Spinner", 0.125;
		DamageFactor "Popper", 0.125;
		DamageFactor "Dashing", 0.125;
		DamageFactor "DashingBG", 0.125;
		DamageFactor "DashingSD", 0.125;
		DamageFactor "Bap", 0.125;
		DamageFactor "Fire", 0.125;
		DamageFactor "Boiling", 0.125;

		Inventory.Icon "GBL4A0";
		Powerup.Duration -24;
		Powerup.Color "70 2c 52", 0.225;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "GBL4B0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "GBL4C0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		super.Tick();
	}
}

class PowerWineBuffIPMaximum : PowerWine
{
	default
	{
		DamageFactor "Normal", 0.005;
		DamageFactor "Melee", 0.005;
		DamageFactor "Bonk", 0.005;
		DamageFactor "Cricket", 0.005;
		DamageFactor "Chop", 0.005;
		DamageFactor "Lead", 0.005;
		DamageFactor "Breakfast", 0.005;
		DamageFactor "Zap", 0.005;
		DamageFactor "Suck", 0.005;
		DamageFactor "Dust", 0.005;
		DamageFactor "Beats", 0.005;
		DamageFactor "Cherrybomb", 0.005;
		DamageFactor "BRocket", 0.005;
		DamageFactor "Spinner", 0.005;
		DamageFactor "Popper", 0.005;
		DamageFactor "Dashing", 0.005;
		DamageFactor "DashingBG", 0.005;
		DamageFactor "DashingSD", 0.005;
		DamageFactor "Bap", 0.005;
		DamageFactor "Fire", 0.005;
		DamageFactor "Boiling", 0.005;

		Inventory.Icon "GBL5A0";
		Powerup.Duration -40;
		Powerup.Color "70 2c 52", 0.25;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "GBL5B0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "GBL5C0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		super.Tick();
	}
}

class PowerFoodATK : PowerDamage
{
	double ticpiece;
	
	override void Tick ()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
}

class PowerFoodDEF : PowerProtection
{
	double ticpiece;
	
	override void Tick ()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
}

class PowerFruitBuff : PowerFoodATK
{
	default
	{
		DamageFactor "Normal", 1.125;
		Inventory.Icon "FOODBA";
		Powerup.Duration -3;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerFruitBuff2 : PowerFoodDEF
{
	default
	{
		DamageFactor "Normal", 0.925;
		DamageFactor "Melee", 0.925;
		DamageFactor "Bonk", 0.925;
		DamageFactor "Cricket", 0.925;
		DamageFactor "Chop", 0.925;
		DamageFactor "Lead", 0.925;
		DamageFactor "Breakfast", 0.925;
		DamageFactor "Zap", 0.925;
		DamageFactor "Suck", 0.925;
		DamageFactor "Dust", 0.925;
		DamageFactor "Beats", 0.925;
		DamageFactor "Cherrybomb", 0.925;
		DamageFactor "BRocket", 0.925;
		DamageFactor "Spinner", 0.925;
		DamageFactor "Popper", 0.925;
		DamageFactor "Dashing", 0.925;
		DamageFactor "DashingBG", 0.925;
		DamageFactor "DashingSD", 0.925;
		DamageFactor "Bap", 0.925;
		DamageFactor "Fire", 0.925;
		DamageFactor "Boiling", 0.925;

		Inventory.Icon "FOODBD";
		Powerup.Duration -3;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerEggBuff : PowerFoodATK
{
	default
	{
		DamageFactor "Normal", 1.0;
		Inventory.Icon "FOODEA";
		Powerup.Duration -3;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (!passive && damage > 0)
		{
			double TOTALFactor = 1.25;
			if (MiscItem) TOTALFactor = (1.25 + (MiscItem.UsedEggHeal * 0.0125));
			if (TOTALFactor >= 2.5) TOTALFactor = 2.5;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class PowerEggBuff2 : PowerFoodDEF
{
	default
	{
		DamageFactor "Normal", 1.0;

		Inventory.Icon "FOODED";
		Powerup.Duration -3;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.8;
			if (MiscItem) TOTALFactor = (0.8 - (MiscItem.UsedEggHeal * 0.004));
			if (TOTALFactor <= 0.4) TOTALFactor = 0.4;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class PowerRoastBuff : PowerFoodATK
{
	default
	{
		DamageFactor "Normal", 2;
		Inventory.Icon "FOODAA";
		Powerup.Duration -12;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerMealBuff : PowerFoodATK
{
	default
	{
		DamageFactor "Normal", 2.5;
		Inventory.Icon "FOODYA";
		Powerup.Duration -30;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerMealBuff2 : PowerFoodDEF
{
	default
	{
		DamageFactor "Normal", 0.4;
		DamageFactor "Melee", 0.4;
		DamageFactor "Bonk", 0.4;
		DamageFactor "Cricket", 0.4;
		DamageFactor "Chop", 0.4;
		DamageFactor "Lead", 0.4;
		DamageFactor "Breakfast", 0.4;
		DamageFactor "Zap", 0.4;
		DamageFactor "Suck", 0.4;
		DamageFactor "Dust", 0.4;
		DamageFactor "Beats", 0.4;
		DamageFactor "Cherrybomb", 0.4;
		DamageFactor "BRocket", 0.4;
		DamageFactor "Spinner", 0.4;
		DamageFactor "Popper", 0.4;
		DamageFactor "Dashing", 0.4;
		DamageFactor "DashingBG", 0.4;
		DamageFactor "DashingSD", 0.4;
		DamageFactor "Bap", 0.4;
		DamageFactor "Fire", 0.4;
		DamageFactor "Boiling", 0.4;

		Inventory.Icon "FOODYD";
		Powerup.Duration -30;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
}

class PowerMeal2Buff : PowerMealBuff
{
	default
	{
		Inventory.Icon "FOODDA";
		Powerup.Duration -15;
	}
}

class PowerMeal2Buff2 : PowerMealBuff2
{
	default
	{
		Inventory.Icon "FOODDD";
		Powerup.Duration -15;
	}
}

class VacAmmoCounter : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}


class KillsCount : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DamageCount : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 100;
		+INVENTORY.KEEPDEPLETED 
	}
}
class BonusCount : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 100;
		+INVENTORY.KEEPDEPLETED 
	}
}
class PoisonCount : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}



class PlayerStatPlaceholder : PlaceholderItemUndrop
{ 
	override void DoEffect() { }
	override void Tick() { }
}
class ExpPts : PlayerStatPlaceholder { }
class ExpPtsNeeded : PlayerStatPlaceholder { }
class ExpPtsLeft : PlayerStatPlaceholder { }
class PlayerLevel : PlayerStatPlaceholder { }
class PlayerMaxHP : PlayerStatPlaceholder { }
class PlayerATK : PlayerStatPlaceholder { }
class PlayerDEF : PlayerStatPlaceholder { }
class PlayerSPD : PlayerStatPlaceholder { }
class PlayerLuck : PlayerStatPlaceholder { }
class TimeFreezeTimer : PlayerStatPlaceholder { }

class PlayerStatChangePlaceholder : PlaceholderItemUndrop
{ 
	override void DoEffect() { }
	override void Tick() { }
}
class ItemPointsAdd : PlayerStatChangePlaceholder { }
class ItemPointsTake : PlayerStatChangePlaceholder { }


// Keeps Sounds/Music active during time Freeze powerups
class TimeFreezerKeepSound : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
		EffectTics = 350;
	}
}

class DDMiscTimeFreezer : TimeFreezerKeepSound
{
	int timer;
	default
	{
		+NOTIMEFREEZE
		Powerup.Duration 51;
	}
}

class DebugTimeFreezer : DDMiscTimeFreezer { }

class TimePotionTimeFreezer : TimeFreezerKeepSound
{
	default
	{
		Inventory.Icon "TIMPI0";
		Powerup.Color "8f 8f 8f", 0.5;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class DashTimeFreezer : TimeFreezerKeepSound
{
	default
	{
		Inventory.Icon "";
		Powerup.Color "8f 8f 8f", 0.0;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class PlayerPlaceHolderNoInt : PlaceHolderItem
{
	override void DoEffect() { }
	override void Tick() { }
}
class PKicking : PlaceHolderItem
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class OverFullHealth3 : PlaceHolderItem { }
class OverFullHealth2 : PlaceHolderItem { }
class OverFullHealth1 : PlaceHolderItem { }
class FullHealth : PlaceHolderItem { }
class NormalHealth : PlaceHolderItem { }
class DecentHealth : PlaceHolderItem { }
class LowHealth : PlaceHolderItem { } 
class CriticalHealth : PlaceHolderItem { }
class PlayerIsDead : PlaceholderItem 
{
	default
	{
		Inventory.MaxAmount 1; 
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner == null) Destroy();
		if (owner && owner.health > 0)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[olive]Removing PlayerIsDead Item...");
			Destroy();
		}
		super.Tick();
	}
}
class PlayerDeathFadeOut : PlaceHolderItem { }

class PowerDouble : PowerDamage
{
	int timer;
	int fadeouttic;
	double ticpiece;
	string texname;
	
	default
	{
		inventory.icon "DDMGA0";
		Powerup.Duration -30;
		Damagefactor "Normal", 1;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void Tick ()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 5) texname = "DDMGA0";
		if (timer % 24 >= 6 && timer % 24 <= 11) texname = "DDMGB0";
		if (timer % 24 >= 12 && timer % 24 <= 17) texname = "DDMGC0";
		if (timer % 24 >= 18 && timer % 24 <= 23) texname = "DDMGB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
/*
		if (EffectTics % 70 == 69) owner.A_StartSound("buffs/invulnpulse",200,CHANF_DEFAULT,frandom(0.75,1.0),ATTN_NORM);
		fadeouttic = 106;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invulnfading",201,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(201);
*/
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}


class PowerGuard : PowerProtection
{
	int timer;
	int fadeouttic;
	double ticpiece;
	string texname;
	
	default
	{
		inventory.icon "GUADA0";
		Powerup.Duration -30;
		Damagefactor "Normal", 1;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void Tick ()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 5) texname = "GUADA0";
		if (timer % 24 >= 6 && timer % 24 <= 11) texname = "GUADB0";
		if (timer % 24 >= 12 && timer % 24 <= 17) texname = "GUADC0";
		if (timer % 24 >= 18 && timer % 24 <= 23) texname = "GUADD0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
/*
		if (EffectTics % 70 == 69) owner.A_StartSound("buffs/invulnpulse",200,CHANF_DEFAULT,frandom(0.75,1.0),ATTN_NORM);
		fadeouttic = 106;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invulnfading",201,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(201);
*/
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerHaste : PowerSpeed
{
	int timer;
	int fadeouttic;
	double ticpiece;
	string texname;
	
	default
	{
		inventory.icon "HASTA0";
		Powerup.Duration -30;
		Speed 1.0;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void Tick ()
	{
		timer++;
		if (timer % 18 >= 0 && timer % 18 <= 5) texname = "HASTA0";
		if (timer % 18 >= 6 && timer % 18 <= 11) texname = "HASTB0";
		if (timer % 18 >= 12 && timer % 18 <= 17) texname = "HASTC0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
/*
		if (EffectTics % 70 == 69) owner.A_StartSound("buffs/invulnpulse",200,CHANF_DEFAULT,frandom(0.75,1.0),ATTN_NORM);
		fadeouttic = 106;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invulnfading",201,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(201);
*/
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerTerror : PowerFrightener
{
	int timer;
	int fadeouttic;
	double ticpiece;
	string texname;
	
	default
	{
		inventory.icon "TERRA0";
		Powerup.Duration -60;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void Tick ()
	{
		timer++;
		if (timer % 30 >= 0 && timer % 30 <= 5) texname = "TERRA0";
		if (timer % 30 >= 6 && timer % 30 <= 11) texname = "TERRB0";
		if (timer % 30 >= 12 && timer % 30 <= 17) texname = "TERRC0";
		if (timer % 30 >= 18 && timer % 30 <= 23) texname = "TERRD0";
		if (timer % 30 >= 24 && timer % 30 <= 29) texname = "TERRE0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
/*
		if (EffectTics % 70 == 69) owner.A_StartSound("buffs/invulnpulse",200,CHANF_DEFAULT,frandom(0.75,1.0),ATTN_NORM);
		fadeouttic = 106;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invulnfading",201,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(201);
*/
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerInvulnDD : PowerInvulnerable
{
	int timer;
	int fadeouttic;
	double ticpiece;
	string texname;
	
	default
	{
		inventory.icon "PDIVA0";
		Powerup.Duration -30;
		Powerup.Color "78447E", 0.334; // "3F00DF", "D0AFD5"
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override void Tick ()
	{
		timer++;
		if (timer % 36 >= 0 && timer % 36 <= 5) texname = "PDIVA0";
		if (timer % 36 >= 6 && timer % 36 <= 11) texname = "PDIVB0";
		if (timer % 36 >= 12 && timer % 36 <= 17) texname = "PDIVC0";
		if (timer % 36 >= 18 && timer % 36 <= 23) texname = "PDIVD0";
		if (timer % 36 >= 24 && timer % 36 <= 29) texname = "PDIVC0";
		if (timer % 36 >= 30 && timer % 36 <= 35) texname = "PDIVB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		if (EffectTics % 70 == 69) owner.A_StartSound("buffs/invulnpulse",200,CHANF_DEFAULT,frandom(0.75,1.0),ATTN_NORM);
		fadeouttic = 106;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invulnfading",201,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(201);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerStrengthDD : PowerStrength
{
	default
	{
		inventory.icon "PDBSA0";
		Powerup.Duration -150;
		Powerup.Color "FF0000", 0.5;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	double fadeintensity;

/*
	override bool HandlePickup (Inventory item)
	{
		fadeintensity = 1.00;
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
			EffectTics2 = 0;
		}
		return Super.HandlePickup (item);
	}
*/

	//===========================================================================
	//
	// APowerStrength :: DoEffect
	//
	//===========================================================================
	int EffectTics2;
	int Dire;
	double ticpiece;

	int timer;
	int fadeouttic;
	string texname;

	override void Tick ()
	{
		bool debugtick = false;

		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 2) texname = "PDBSA0";
		if (timer % 24 >= 3 && timer % 24 <= 5) texname = "PDBSB0";
		if (timer % 24 >= 6 && timer % 24 <= 8) texname = "PDBSC0";
		if (timer % 24 >= 9 && timer % 24 <= 11) texname = "PDBSD0";
		if (timer % 24 >= 12 && timer % 24 <= 14) texname = "PDBSE0";
		if (timer % 24 >= 15 && timer % 24 <= 17) texname = "PDBSF0";
		if (timer % 24 >= 18 && timer % 24 <= 20) texname = "PDBSG0";
		if (timer % 24 >= 21 && timer % 24 <= 23) texname = "PDBSH0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		int Point1 = 225;
		int Point2 = 450;
		int increment = random(6,8) * random(3,4);
		
		
		if (debugtick) Console.Printf("EffectTics: %d (%d), Dire: %d, Increment: %d", EffectTics2, EffectTics, Dire, Increment);

		if (Dire == 0)
		{
			if (EffectTics2 <= Point1) { EffectTics2 = Point1; Dire = 1; }
			else if (EffectTics2 >= Point2) { EffectTics2 = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}

		if (Dire == 1)
		{
			if (owner && owner.CountInv("TimePotionTimeFreezer") <= 0) EffectTics2 += increment;
			if (EffectTics2 >= Point2) Dire = 2;
		}
		else
		if (Dire == 2)
		{
			if (owner && owner.CountInv("TimePotionTimeFreezer") <= 0) EffectTics2 -= increment;
			if (EffectTics2 <= Point1) Dire = 1;
		}
		
		int fadeouttic = 48;
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(204);
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/berserkfading",204,CHANF_DEFAULT,2.25,ATTN_NORM);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Begin fading when 15 seconds remain
		fadeintensity = 1.0 * ((EffectTics * 1.0) / 525.0);
		if (fadeintensity >= 1.00) fadeintensity = 1.00;

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
	//===========================================================================
	//
	// APowerStrength :: GetBlend
	//
	//===========================================================================

	override color GetBlend()
	{
		bool debugblend = false;
		// slowly fade the berserk out
		int cnt = 128 - (EffectTics2>>3);
		cnt *= fadeintensity;
		int blendclr = BlendColor.a*cnt/256;
		if (debugblend) Console.Printf("cnt: %d, blendclr: %d, fade: %.2f", cnt, blendclr, fadeintensity);

		if (cnt > 0)
		{
			return Color(blendclr,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		if (debugblend) Console.Printf("EffectTics2: %d, cnt: %d / 256, BlendColor.a: %d, fadeintensity: %.2f", EffectTics2, cnt, BlendColor.a*cnt/256, fadeintensity);
		return 0;
	}
}

// Dash Trails

class PlayerDashing : PowerSpeed // Used to create trails behind the player for dashing
{
	default
	{
		Speed 1.0;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class PlayerBatDashing : PowerSpeed // Used to create trails behind the player for dashing
{
	default
	{
		Speed 1.0;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

// Dash Effects
class DashPuff : PhoenixPuff { default { +NOINTERACTION } }

class UsingBoxingGloves : PlaceHolderItem { }
class IsUnconscious : PlaceHolderItem { }

class DashGauge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashReady : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCharges : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashMaxCharge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCharge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}


class DashTics : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCost : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class GrimAltFireInUse : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 1;
		-INVENTORY.KEEPDEPLETED 
	}
}

class GrimophoneDEFDown : TempDefenseBuff
{
}

// Grimophone Alt-Fire Defense DEBUFF :V
class GrimophoneDEFDown1 : GrimophoneDEFDown
{
	default
	{
		DamageFactor "Normal", 1.5;
		DamageFactor "Beats", 0.334;
		DamageFactor "Melee", 1.5;
		DamageFactor "BFGSplash", 1.5;
		DamageFactor "Bonk", 1.5;
		DamageFactor "Cricket", 1.5;
		DamageFactor "Chop", 1.5;
		DamageFactor "Lead", 1.5;
		DamageFactor "Breakfast", 1.5;
		DamageFactor "Zap", 1.5;
		DamageFactor "Suck", 1.5;
		DamageFactor "Dust", 1.5;
		DamageFactor "Cherrybomb", 1.5;
		DamageFactor "BRocket", 1.5;
		DamageFactor "Spinner", 1.5;
		DamageFactor "Popper", 1.5;
		DamageFactor "Dashing", 1.5;
		DamageFactor "DashingBG", 1.5;
		DamageFactor "DashingSD", 1.5;
		DamageFactor "Bap", 1.5;
		DamageFactor "Fire", 1.5;
		DamageFactor "Boiling", 1.5;

		Inventory.Icon "RPLYD1";
	}
}

class GrimophoneDEFDown2 : GrimophoneDEFDown
{
	default
	{
		DamageFactor "Normal", 2.0;
		DamageFactor "Beats", 0.4;
		DamageFactor "Melee", 2.0;
		DamageFactor "BFGSplash", 2.0;
		DamageFactor "Bonk", 2.0;
		DamageFactor "Cricket", 2.0;
		DamageFactor "Chop", 2.0;
		DamageFactor "Lead", 2.0;
		DamageFactor "Breakfast", 2.0;
		DamageFactor "Zap", 2.0;
		DamageFactor "Suck", 2.0;
		DamageFactor "Dust", 2.0;
		DamageFactor "Cherrybomb", 2.0;
		DamageFactor "BRocket", 2.0;
		DamageFactor "Spinner", 2.0;
		DamageFactor "Popper", 2.0;
		DamageFactor "Dashing", 2.0;
		DamageFactor "DashingBG", 2.0;
		DamageFactor "DashingSD", 2.0;
		DamageFactor "Bap", 2.0;
		DamageFactor "Fire", 2.0;
		DamageFactor "Boiling", 2.0;

		Inventory.Icon "RPLYD2";
	}
}

class GrimophoneDEFDown3 : GrimophoneDEFDown
{
	default
	{
		DamageFactor "Normal", 2.5;
		DamageFactor "Beats", 0.5;
		DamageFactor "Melee", 2.5;
		DamageFactor "BFGSplash", 2.5;
		DamageFactor "Bonk", 2.5;
		DamageFactor "Cricket", 2.5;
		DamageFactor "Chop", 2.5;
		DamageFactor "Lead", 2.5;
		DamageFactor "Breakfast", 2.5;
		DamageFactor "Zap", 2.5;
		DamageFactor "Suck", 2.5;
		DamageFactor "Dust", 2.5;
		DamageFactor "Cherrybomb", 2.5;
		DamageFactor "BRocket", 2.5;
		DamageFactor "Spinner", 2.5;
		DamageFactor "Popper", 2.5;
		DamageFactor "Dashing", 2.5;
		DamageFactor "DashingBG", 2.5;
		DamageFactor "DashingSD", 2.5;
		DamageFactor "Bap", 2.5;
		DamageFactor "Fire", 2.5;
		DamageFactor "Boiling", 2.5;

		Inventory.Icon "RPLYD3";
	}
}

class GrimophoneDEFDown4 : GrimophoneDEFDown
{
	default
	{
		DamageFactor "Normal", 3.0;
		DamageFactor "Beats", 0.67;
		DamageFactor "Melee", 3.0;
		DamageFactor "BFGSplash", 3.0;
		DamageFactor "Bonk", 3.0;
		DamageFactor "Cricket", 3.0;
		DamageFactor "Chop", 3.0;
		DamageFactor "Lead", 3.0;
		DamageFactor "Breakfast", 3.0;
		DamageFactor "Zap", 3.0;
		DamageFactor "Suck", 3.0;
		DamageFactor "Dust", 3.0;
		DamageFactor "Cherrybomb", 3.0;
		DamageFactor "BRocket", 3.0;
		DamageFactor "Spinner", 3.0;
		DamageFactor "Popper", 3.0;
		DamageFactor "Dashing", 3.0;
		DamageFactor "DashingBG", 3.0;
		DamageFactor "DashingSD", 3.0;
		DamageFactor "Bap", 3.0;
		DamageFactor "Fire", 3.0;
		DamageFactor "Boiling", 3.0;

		Inventory.Icon "RPLYD4";
	}
}

class DefDownDebuff : PowerProtection
{
	bool firsttic;
	string victimname;
	
	int qmarkinterval;
	int qmarktimer;
	
	override void Tick()
	{
		if (owner && !firsttic)
		{
			victimname = owner.GetClassName();
			qmarkinterval = randompick(28,31,35,39,42);
			qmarkinterval *= frandompick(0.25,0.33,0.5);
		}
		
		if ((victimname == "PracticeTarget" || victimname == "PracticeTarget2") && !dydudebug_practicetargetsdebuff)
		{
			Destroy();
		}
		
		if (qmarktimer % qmarkinterval == 0)
		{
			qmarktimer = 0;
			qmarkinterval = randompick(28,31,35,39,42);
			qmarkinterval *= frandompick(0.25,0.33,0.5);
			actor QMark;
			bool success;
			double xspeed = frandom(0.5,1.5);
			double yspeed = frandom(0.5,1.5);
			double zspeed = frandom(0.5,1.5);
			double heightspawn = frandom((owner.height*0.5),owner.height);
			double radiusspawnx = frandom((-owner.radius * 0.5),(owner.radius * 0.5));
			double radiusspawny = frandom((-owner.radius * 0.5),(owner.radius * 0.5));
			string iconname;
			if (GetClassName() == "BlunderHelmSplitter") iconname = "DefDown1Icon";
			if (GetClassName() == "BlunderHelmSplitter2") iconname = "DefDown2Icon";
			if (GetClassName() == "BlunderHelmSplitter3") iconname = "DefDown3Icon";
			
			// Prevents MossMother from emitting icons if burrowed underground
			bool emit = true;
			if (MossMother(owner)) 
			{
				//Console.Printf("MossMother");
				if (owner.bNOTARGET == true || owner.bSHOOTABLE != true)
				{
					//Console.Printf("emit: false");
					emit = false;
				}
			}
			if (emit)
			{
				[success, QMark] = owner.A_SpawnItemEx(iconname,radiusspawnx,radiusspawny,heightspawn,xspeed,yspeed,zspeed,0.0,SXF_NOCHECKPOSITION);
				if (success && QMark)
				{
					double scalerx = frandompick(0.875,1.0,1.25);
					double scalery = frandompick(0.875,1.0,1.25);
					QMark.A_SetScale((QMark.Scale.x * scalerx),(QMark.Scale.y * scalery));
				}
			}
		}
		qmarktimer++;
		
		EffectTics--;
		firsttic = true;
		//Console.Printf("ScramblerFear [%s]: %d", victimname, EffectTics);
		if (EffectTics <= 0) 
		{
			if (owner && exex_combatlog)
			{
				Console.Printf("\c[red]*\c- \c[purple]%s's\c- defense-down has worn off! [%d]", owner.GetTag(), gametic);
			}
			Destroy();
		}
		// Powerups cannot exist outside an inventory
		if (owner == NULL) Destroy();
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
	}
}

// Blunderaxe Helm-Splitter Debuff
class BlunderHelmSplitter : DefDownDebuff
{
	default
	{
		Inventory.Icon "";
		Powerup.Duration -30;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!passive && damage > 0)
		{
			double TOTALFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
					damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop')
			{
				TOTALFactor = frandom(0.8,0.9);
			}
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
	
	override double GetSpeedFactor()
	{
		double Speed = (1.00 - frandom(0.25,0.30));
		return Speed; 
	}
}

class BlunderHelmSplitter2 : DefDownDebuff
{
	default
	{
		Inventory.Icon "";
		Powerup.Duration -30;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!passive && damage > 0)
		{
			double TOTALFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
					damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop')
			{
				TOTALFactor = frandom(0.625,0.775);
			}
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
	
	override double GetSpeedFactor()
	{
		double Speed = (1.00 - frandom(0.50,0.60));
		return Speed; 
	}
}


class BlunderHelmSplitter3 : DefDownDebuff
{
	default
	{
		Inventory.Icon "";
		Powerup.Duration -30;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!passive && damage > 0)
		{
			double TOTALFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' ||
					damageType == 'Bonk' || damageType == 'Bap' || damageType == 'Chop')
			{
				TOTALFactor = frandom(0.425,0.675);
			}
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
	
	override double GetSpeedFactor()
	{
		double Speed = (1.00 - frandom(0.75,0.90));
		return Speed; 
	}
}

// Scrambler Confusion/Fear Debuff Item
class ScramblerConfusion : PowerProtection
{
	bool firsttic;
	int debufftimer;
	int debufftimermax;
	int enemyalreadyfrightened;
	int enemyisfriendly;
	int enemyisnoinfight;
	int enemyisquickretaliate;
	int enemyismissilemore;
	int enemyismissileevenmore;
	int enemydontharmclass;
	int enemydontharmspecies;
	int enemyharmfriends;
	int enemydoharmspecies;
	string victimname;
	
	int qmarkinterval;
	int qmarktimer;
	int friendinterval;
	int friendtimer;
	int friendbasechance;
	
	default
	{
		DamageFactor "Normal", 1.0;
		Powerup.Duration -15;
	}
	
	override void Tick()
	{
		if (!friendinterval) friendinterval = randompick(35,70,70,70,105);
		if (owner && !firsttic)
		{
			if (owner.bFRIGHTENED) enemyalreadyfrightened = 1;
			if (owner.bNOINFIGHTING) enemyisnoinfight = 1;
			if (owner.bFRIENDLY) enemyisfriendly = 0;
			if (owner.bQUICKTORETALIATE) enemyisquickretaliate = 1;
			if (owner.bMISSILEMORE) enemyismissilemore = 1;
			if (owner.bMISSILEEVENMORE) enemyismissileevenmore = 1;
			if (owner.bDONTHARMCLASS) enemydontharmclass = 1;
			if (owner.bDONTHARMSPECIES) enemydontharmspecies = 1;

			if (owner.bHARMFRIENDS) enemyharmfriends = 1;
			if (owner.bDOHARMSPECIES) enemydoharmspecies = 1;
			owner.A_StopSound(121);
			owner.A_StartSound("debuffs/confuse2",121,CHANF_DEFAULT,frandom(1.25,1.50),ATTN_NORM,frandom(0.67,1.33));
			if (exex_combatlog)
			{
				if (owner.GetTag()) Console.Printf("\c[red]*\c- \c[purple]%s\c- was given confusion by the Scrambler's Bash!", owner.GetTag());
											 else Console.Printf("\c[red]*\c- \c[purple]%s\c- was given confusion by the Scrambler's Bash!", owner.GetClassName());
			}
			victimname = owner.GetClassName();
			qmarkinterval = randompick(28,31,35,39,42);
			qmarkinterval *= frandompick(0.25,0.33,0.5);
			friendinterval = randompick(35,70,70,70,105);
			friendbasechance = 25;
		}
		
		if (friendtimer % friendinterval == 0)
		{
			actor player = players[0].mo;
			friendtimer = 0;
			friendinterval = randompick(35,70,70,70,105);
			if (enemyisfriendly)
			{
				owner.bFRIENDLY = false;
				if (random(1,100) <= friendbasechance)
				{
					owner.bFRIENDLY = true;
					if (owner.target == player) target == null;
					friendbasechance = random(20,30);
				}
				friendbasechance += randompick(2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,7,7,7,11,11);
			}
		}
		
		if (qmarktimer % qmarkinterval == 0)
		{
			qmarktimer = 0;
			qmarkinterval = randompick(28,31,35,39,42);
			qmarkinterval *= frandompick(0.25,0.33,0.5);
			actor QMark;
			bool success;
			double xspeed = frandom(0.5,1.5);
			double yspeed = frandom(0.5,1.5);
			double zspeed = frandom(0.5,1.5);
			double heightspawn = frandom((owner.height*0.5),owner.height);
			double radiusspawnx = frandom((-owner.radius * 0.5),(owner.radius * 0.5));
			double radiusspawny = frandom((-owner.radius * 0.5),(owner.radius * 0.5));
			
			// Prevents MossMother from emitting icons if burrowed underground
			bool emit = true;
			if (MossMother(owner)) 
			{
				//Console.Printf("MossMother");
				if (owner.bNOTARGET == true || owner.bSHOOTABLE != true)
				{
					//Console.Printf("emit: false");
					emit = false;
				}
			}
			if (emit)
			{
				[success, QMark] = owner.A_SpawnItemEx("ConfusionQMark",radiusspawnx,radiusspawny,heightspawn,xspeed,yspeed,zspeed,0.0,SXF_NOCHECKPOSITION);
				if (success && QMark)
				{
					double scalerx = frandom(0.666,1.334);
					scalerx *= frandom(0.4,0.6);
					double scalery = frandom(0.666,1.334);
					scalery *= frandom(0.4,0.6);
					QMark.A_SetScale((QMark.Scale.x * scalerx),(QMark.Scale.y * scalery));
				}
			}
		}
		qmarktimer++;
		
		if (EffectTics > 1 && firsttic)
		{
			owner.bNOINFIGHTING = false;
			owner.bQUICKTORETALIATE = false;
			owner.bMISSILEMORE = false;
			owner.bMISSILEEVENMORE = false;
			owner.bFRIGHTENED = true;
			owner.bDONTHARMSPECIES = false;
			owner.bDONTHARMCLASS = false;

			owner.bHARMFRIENDS = true;
			owner.bDOHARMSPECIES = true;
		}
		
		EffectTics--;
		firsttic = true;
		//Console.Printf("ScramblerFear [%s]: %d", victimname, EffectTics);

		if (EffectTics <= 1)
		{
			if (!enemyalreadyfrightened) owner.bFRIGHTENED = false;
			if (enemyismissileevenmore && !owner.bMISSILEEVENMORE) owner.bMISSILEEVENMORE = true;
			if (enemyismissilemore && !owner.bMISSILEMORE) owner.bMISSILEMORE = true;
			if (enemyisquickretaliate && !owner.bQUICKTORETALIATE) owner.bQUICKTORETALIATE = true;
			if (!enemyisfriendly && owner.bFRIENDLY) owner.bFRIENDLY = false;
			if (enemyisnoinfight && !owner.bNOINFIGHTING) owner.bNOINFIGHTING = true;
			if (enemydontharmclass && !owner.bDONTHARMCLASS) owner.bDONTHARMCLASS = true;
			if (enemydontharmspecies && !owner.bDONTHARMSPECIES) owner.bDONTHARMSPECIES = true;

			if (enemyharmfriends && !owner.bHARMFRIENDS) owner.bHARMFRIENDS = true;
			else if (owner.bHARMFRIENDS) owner.bHARMFRIENDS = false;
			if (enemydoharmspecies && !owner.bDOHARMSPECIES) owner.bDOHARMSPECIES = true;
			else if (owner.bDOHARMSPECIES) owner.bDOHARMSPECIES = false;
		}
		if (EffectTics <= 0) 
		{
			if (owner && exex_combatlog)
			{
				Console.Printf("\c[red]*\c- \c[purple]%s's\c- confusion has worn off! [%d]", owner.GetTag(), gametic);
			}
			Destroy();
		}
		// Powerups cannot exist outside an inventory
		if (owner == NULL) Destroy();
	}
}

class PowerIronFeet2 : PowerIronFeet
{
	string texname;
	int timer;
	double ticpiece;
	default
	{
		Inventory.Icon "BIOSA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		if (damageType == 'Magma') newdamage = damage * 0.05;

		if (damageType == 'Slime' || 
				damageType == 'Drowning' ||
				damageType == 'Dust') newdamage = 0;

		if (damageType == 'Boiling')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.0,0.125,0.125,0.25,0.25,0.25,0.375,0.375,0.50);
		}
		if (damagetype == 'Fire')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.5,0.625,0.625,0.75,0.75,0.75,0.875,0.875,1.0);
		}
		if (damagetype == 'CherryBomb')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.75,0.8125,0.8125,0.875,0.875,0.875,0.9375,0.9375,1.0);
		}
		if (damagetype == 'Spinner')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.75,0.8125,0.8125,0.875,0.875,0.875,0.9375,0.9375,1.0);
		}
		if (damagetype == 'BRocket')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.75,0.8125,0.8125,0.875,0.875,0.875,0.9375,0.9375,1.0);
		}
		if (damagetype == 'Popper')
		{
			if (gameinfo.gametype & 8) newdamage = 0;
			else newdamage = damage *= frandompick(0.75,0.8125,0.8125,0.875,0.875,0.875,0.9375,0.9375,1.0);
		}
		if (damagetype == 'Poison')
		{
			newdamage = damage *= frandompick(0.5,0.625,0.625,0.75,0.75,0.75,0.875,0.875,1.0);
		}
	}
	
	override void DoEffect()
	{
		if (Owner.player != NULL)
		{
			Owner.player.mo.ResetAirSupply();
		}
		
		if (!owner.CountInv("PowerNoDrown"))
		{
			if ((gameinfo.gametype & 8 || (exex_masknoise && owner.waterlevel >= 3)) && !(Level.maptime & 0x3f))
			{
				double maskpitch = frandom(1.25,1.375);
				if (owner.waterlevel >= 3) maskpitch *= 1.259921885;
				Owner.A_StartSound("misc/mask", CHAN_7, CHANF_DEFAULT, frandom(0.875,1.0), ATTN_NORM, maskpitch);
			}
		}
	}

	override void Tick()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 5) texname = "BIOSA0";
		if (timer % 24 >= 6 && timer % 24 <= 11) texname = "BIOSB0";
		if (timer % 24 >= 12 && timer % 24 <= 17) texname = "BIOSC0";
		if (timer % 24 >= 18 && timer % 24 <= 23) texname = "BIOSD0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		//Console.Printf("EffectTics: %d", EffectTics);
		int fadeouttic = 75;
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(203);
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/bioshieldfading",203,CHANF_DEFAULT,2.25,ATTN_NORM);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerDoubleFiringSpeed2 : PowerDoubleFiringSpeed
{
	string texname;
	int timer;
	double ticpiece;
	Default
	{
		Powerup.Duration -40;
		Inventory.Icon "RAGSA0";
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 30 >= 0 && timer % 30 <= 4) texname = "RAGSA0";
		if (timer % 30 >= 5 && timer % 30 <= 9) texname = "RAGSB0";
		if (timer % 30 >= 10 && timer % 30 <= 14) texname = "RAGSC0";
		if (timer % 30 >= 15 && timer % 30 <= 19) texname = "RAGSD0";
		if (timer % 30 >= 20 && timer % 30 <= 24) texname = "RAGSC0";
		if (timer % 30 >= 25 && timer % 30 <= 29) texname = "RAGSB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		int fadeouttic = 64;
		//if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invisfading",202,CHANF_DEFAULT,2.25,ATTN_NORM);
		//if (EffectTics > fadeouttic && owner) owner.A_StopSound(202);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerInvisibility2 : PowerInvisibility
{
	string texname;
	int timer;
	double ticpiece;
	Default
	{
		+SHADOW;
		Powerup.Duration -60;
		Powerup.Strength 90;
		Powerup.Mode "Fuzzy";
		Inventory.Icon "PINSA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 2) texname = "PDISA0";
		if (timer % 24 >= 3 && timer % 24 <= 5) texname = "PDISB0";
		if (timer % 24 >= 6 && timer % 24 <= 8) texname = "PDISC0";
		if (timer % 24 >= 9 && timer % 24 <= 11) texname = "PDISD0";
		if (timer % 24 >= 12 && timer % 24 <= 14) texname = "PDISE0";
		if (timer % 24 >= 15 && timer % 24 <= 17) texname = "PDISF0";
		if (timer % 24 >= 18 && timer % 24 <= 20) texname = "PDISG0";
		if (timer % 24 >= 21 && timer % 24 <= 23) texname = "PDISH0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		int fadeouttic = 64;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invisfading",202,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(202);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerGhost2 : PowerGhost
{
	string texname;
	int timer;
	double ticpiece;
	Default
	{
		+SHADOW;
		Powerup.Duration -60;
		Powerup.Strength 60;
		Inventory.Icon "PINSA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 36 >= 0 && timer % 36 <= 5) texname = "DIVSA0";
		if (timer % 24 >= 6 && timer % 24 <= 11) texname = "DIVSB0";
		if (timer % 24 >= 12 && timer % 24 <= 17) texname = "DIVSC0";
		if (timer % 24 >= 18 && timer % 24 <= 23) texname = "DIVSD0";
		if (timer % 24 >= 24 && timer % 24 <= 29) texname = "DIVSE0";
		if (timer % 24 >= 30 && timer % 24 <= 35) texname = "DIVSF0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		int fadeouttic = 64;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invisfading",202,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(202);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class MonsterDamageFactorBase : PowerProtection
{
	default
	{
		DamageFactor 1;
		DamageFactor "Normal", 1;
		Inventory.Icon "";
		Powerup.Duration 1;
	}
	
	override void Tick ()
	{
		EffectTics = 35; // Keeps the Item permanently in the inventory unless it gets removed.

		// Powerups cannot exist outside an inventory
		if (EffectTics <= 0) Destroy();
		if (owner == NULL) Destroy();
	}
}

class FuryBuff : PowerDamage
{
	bool firsttic;
	default
	{
		DamageFactor "Normal", 1.0;
		Powerup.Duration 1;
	}

	override void Tick()
	{
		int timegive = random(12,18) * TICRATE;
		if (owner)
		{
			if (!owner.CountInv("PowerStrengthDD")) 
			{
				owner.SetInventory("PowerStrengthDD",1);
				let BerserkItem = PowerStrengthDD(owner.FindInventory("PowerStrengthDD"));
				if (BerserkItem) BerserkItem.EffectTics = timegive;
			}
			else
			{
				let BerserkItem = PowerStrengthDD(owner.FindInventory("PowerStrengthDD"));
				if (BerserkItem) BerserkItem.EffectTics += timegive;
			}
			Destroy();
		}
		if (!EffectTics) Destroy ();
		EffectTics--;
	}
}

class FuryBuffIP : PowerDamage
{
	bool firsttic;
	default
	{
		DamageFactor "Normal", 1.0;
		Powerup.Duration 1;
	}

	override void Tick()
	{
		int timegive = random(12,18) * randompick(9,10,10,10,10,10,11) * TICRATE;
		if (owner)
		{
			if (!owner.CountInv("PowerStrengthDD")) 
			{
				owner.SetInventory("PowerStrengthDD",1);
				let BerserkItem = PowerStrengthDD(owner.FindInventory("PowerStrengthDD"));
				if (BerserkItem) BerserkItem.EffectTics = timegive;
			}
			else
			{
				let BerserkItem = PowerStrengthDD(owner.FindInventory("PowerStrengthDD"));
				if (BerserkItem) BerserkItem.EffectTics += timegive;
			}
			Destroy();
		}
		if (!EffectTics) Destroy ();
		EffectTics--;
	}
}

//Diving Helmet
class PowerNoDrown : PowerProtection
{
	double ticpiece;
	default
	{
		DamageFactor "Drowning", 0;
		Powerup.Color "Grey", 0.1;
		Powerup.Duration -180;
		Inventory.Icon "DIVRA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	
	override void Tick()
	{
		int ticpiecemax;
		int ticwhiletimes = 3;
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (ddafd_underwatercompat && (owner.CountInv("IsDynDuchess") || owner.CountInv("IsAppetite") || owner.CountInv("IsCarnOfSouls")))
				{
					if (owner.CountInv("TimePotionTimeFreezer"))
					{
						ticpiecemax = 10;
						if (ticpiecemax > 0)
						{
							if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																										else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
							if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
							while (ticpiece >= ticpiecemax && ticwhiletimes)
							{
								EffectTics--;
								ticpiece -= ticpiecemax;
								ticwhiletimes--;
							}
						}
						else
						{
							EffectTics--;
						}
					}
					else
					{
						ticpiece = 0;
						ticpiecemax = 1;
						EffectTics--;
					}
				}
				else
				{
					if (owner.waterlevel >= 3)
					{
						if (owner.CountInv("TimePotionTimeFreezer"))
						{
							ticpiecemax = 10;
							if (ticpiecemax > 0)
							{
								if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																											else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
								if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
								while (ticpiece >= ticpiecemax && ticwhiletimes)
								{
									EffectTics--;
									ticpiece -= ticpiecemax;
									ticwhiletimes--;
								}
							}
							else
							{
								EffectTics--;
							}
						}
						else
						{
							ticpiece = 0;
							ticpiecemax = 1;
							EffectTics--;
						}
					}
					else
					{
						if (skill <= 0) ticpiecemax = 30;
						if (skill == 1) ticpiecemax = 25;
						if (skill == 2) ticpiecemax = 20;
						if (skill == 3) ticpiecemax = 15;
						if (skill >= 4) ticpiecemax = 10;
						if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) ticpiecemax *= 7.5;
						if (owner.CountInv("TimePotionTimeFreezer")) ticpiecemax *= 10;
						if (owner.CountInv("MysteryItem")) ticpiecemax *= 4;
						if (ticpiecemax > 0) 
						{
							ticpiece += 1;
							while (ticpiece >= ticpiecemax && ticwhiletimes)
							{
								EffectTics--;
								ticpiece -= ticpiecemax;
								ticwhiletimes--;
							}
						}
						else
						{
							EffectTics--;
						}
					}
				}
				if (dydudebug_airmeter) 
				{
					if (ticpiecemax > 1) Console.Printf("[PowerNoDrown] - EffectTics: %d, Ticpiece: %d / %d", EffectTics, ticpiece, ticpiecemax);
					else Console.Printf("[PowerNoDrown] - EffectTics: %d", EffectTics);
				}
			}
			if (ticpiece < -ticpiecemax) ticpiece = 0;
			if (ticpiece >= (ticpiecemax*3)) ticpiece = 0;
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
	
	override void DoEffect()
	{
		if (Owner.player != NULL)
		{
			Owner.player.mo.ResetAirSupply();
		}
		
		if (exex_masknoise && owner.waterlevel >= 3 && !(Level.maptime & 0x3f))
		{
			double maskpitch = frandom(1.25,1.375);
			if (owner.waterlevel >= 3) maskpitch *= 1.259921885;
			Owner.A_StartSound("misc/mask", CHAN_7, CHANF_DEFAULT, frandom(0.875,1.0), ATTN_NORM, maskpitch);
		}
	}
}

class PowerRatMorph : PowerMorph
{
	string texname;
	int timer;
	double ticpiece;
	
	default
	{
		PowerMorph.PlayerClass "RatPlayer";
		Powerup.Duration 490;
		Inventory.Icon "RBOTA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "RBOTA0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "RBOTB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		/*
		int fadeouttic = 53;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/flightfading",207,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(207);
		*/
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class CheeseFX : MorphProjectile
{
	default
	{
		Radius 8;
		Height 8;
		Speed 9;
		Seesound "aqua/kill2";
		Deathsound "aqua/kill1";
		MorphProjectile.PlayerClass "RatPlayer";
		MorphProjectile.Duration 210;
		MorphProjectile.MorphStyle MRF_UNDOBYTOMEOFPOWER|MRF_NEWTIDBEHAVIOUR|MRF_WHENINVULNERABLE;
		+SEEKERMISSILE
	}
	
	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		if (target.player)
		{
			double chance = 1.0;
			if (target.player.mo.CountInv("KnightGownItem")) 
			{
				chance *= 0.8;
				if (target.player.mo.CountInv("KnightGownIP1Buff")) chance *= 0.6;
			}
			if (target.player.mo.CountInv("KnightGownItem2")) 
			{
				chance *= 0.6;
				if (target.player.mo.CountInv("KnightGownIP2Buff")) chance *= 0.3;
			}
			if (target.player.mo.CountInv("KnightGownItem3"))
			{
				chance *= 0.4;
				if (target.player.mo.CountInv("KnightGownIP3Buff")) chance *= 0.2;
			}
			if (target.player.mo.CountInv("KnightGownItem4"))
			{
				chance *= 0.2;
				if (target.player.mo.CountInv("KnightGownIP4Buff")) chance *= 0.1;
			}
			if (target.player.mo.CountInv("DinahTrueIPState")) chance = 0;

			// Voodoo dolls forward this to the real player
			if (frandom(0.01,1.00) <= chance) target.player.mo.MorphPlayer(NULL, PlayerClass, Duration, MorphStyle, MorphFlash, UnMorphFlash);
			else 
			{
				if (!target.player.mo.CountInv("DinahTrueIPState")) target.player.mo.DamageMobj(self, self, ((damage*0.667)+(3*random(1,2))), damagetype, 0, Target.Angle);
																											 else target.player.mo.DamageMobj(self, self, (damage+(15*random(1,4))), damagetype, 0, Target.Angle);
			}
		}
		else
		{
			target.MorphMonster (MonsterClass, Duration, MorphStyle, MorphFlash, UnMorphFlash);
		}
		return -1;
	}

	States
	{
		Spawn:
			CHEM ABCD 3 A_SeekerMissile(7,7,SMF_LOOK);
			Loop;
		Death:
			CHEM EFGH 3 Bright;
			Stop;
	}
}

class PowerRavenMorph : PowerMorph
{
	default
	{
		PowerMorph.PlayerClass "RavenPlayer";
		PowerMorph.MorphStyle ( MRF_FULLHEALTH | MRF_ADDSTAMINA | MRF_WHENINVULNERABLE | MRF_LOSEACTUALWEAPON | MRF_NEWTIDBEHAVIOUR | MRF_UNDOBYDEATH | MRF_UNDOBYDEATHSAVES );
		Powerup.Duration 250;
	}
}

class PowerRavenInvisibility : PowerInvisibility2
{
	default
	{
		Powerup.Mode "None";
		Powerup.Strength 0;
		Powerup.Duration -8;
	}

	
	override void Tick()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 1) texname = "RVINA0";
		if (timer % 24 >= 2 && timer % 24 <= 3) texname = "RVINB0";
		if (timer % 24 >= 4 && timer % 24 <= 5) texname = "RVINC0";
		if (timer % 24 >= 6 && timer % 24 <= 7) texname = "RVIND0";
		if (timer % 24 >= 8 && timer % 24 <= 9) texname = "RVINE0";
		if (timer % 24 >= 10 && timer % 24 <= 11) texname = "RVINF0";
		if (timer % 24 >= 12 && timer % 24 <= 13) texname = "RVING0";
		if (timer % 24 >= 14 && timer % 24 <= 15) texname = "RVINF0";
		if (timer % 24 >= 16 && timer % 24 <= 17) texname = "RVINE0";
		if (timer % 24 >= 18 && timer % 24 <= 19) texname = "RVIND0";
		if (timer % 24 >= 20 && timer % 24 <= 21) texname = "RVINC0";
		if (timer % 24 >= 22 && timer % 24 <= 23) texname = "RVINB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		int fadeouttic = 64;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/invisfading",208,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(208);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class RavenStealth : PowerupGiver
{
	default
	{
		Inventory.PickupSound "";
		Inventory.PickupMessage "";
		Inventory.MaxAmount 0;
		Inventory.Icon "TNT1A0";
		Powerup.Type "PowerRavenInvisibility";
		Powerup.Duration 8;
		+Inventory.AutoActivate;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Fail;
	}
}

class RavenFlyer : PowerupGiver
{
	default
	{
		Inventory.PickupSound "";
		Inventory.PickupMessage "";
		Inventory.MaxAmount 0;
		Inventory.Icon "TNT1A0";
		Powerup.Type "PowerRavenFlight";
		Powerup.Duration 8;
		+Inventory.AutoActivate;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Fail;
	}
}


class PowerRavenFlight : PowerFlight
{
	string texname;
	int timer;
	double ticpiece;
	default
	{
		Inventory.Icon "TNT1A0";
		Powerup.Duration -8;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 20 >= 0 && timer % 20 <= 1) texname = "RVFLA0";
		if (timer % 20 >= 2 && timer % 20 <= 3) texname = "RVFLB0";
		if (timer % 20 >= 4 && timer % 20 <= 5) texname = "RVFLC0";
		if (timer % 20 >= 6 && timer % 20 <= 7) texname = "RVFLD0";
		if (timer % 20 >= 8 && timer % 20 <= 9) texname = "RVFLC0";
		if (timer % 20 >= 10 && timer % 20 <= 11) texname = "RVFLB0";
		if (timer % 20 >= 12 && timer % 20 <= 13) texname = "RVFLA0";
		if (timer % 20 >= 14 && timer % 20 <= 15) texname = "RVFLE0";
		if (timer % 20 >= 16 && timer % 20 <= 17) texname = "RVFLF0";
		if (timer % 20 >= 18 && timer % 20 <= 19) texname = "RVFLE0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		int fadeouttic = 53;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/flightfading",207,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(207);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}

class PowerLightAmp2 : PowerLightAmp
{
	string texname;
	int timer;
	double ticpiece;
	Default
	{
		+SHADOW;
		Powerup.Duration -120;
		Inventory.Icon "PLAMA0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 12 >= 0 && timer % 12 <= 5) texname = "PLAMA0";
		if (timer % 12 >= 6 && timer % 12 <= 11) texname = "PLAMB0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		int fadeouttic = 107;
		if (EffectTics == fadeouttic && owner) owner.A_StartSound("buffs/liteampfading",205,CHANF_DEFAULT,2.25,ATTN_NORM);
		if (EffectTics > fadeouttic && owner) owner.A_StopSound(205);
		
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy ();
		if (EffectTics <= 0) Destroy();
		//Console.Printf("EffectTics: %d", EffectTics);
	}
}


class CBombUpgrade : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 2;
	}
}

class SilentLevelUp : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 0x7FFFFFFD;
	}
}

class BlunderShotUpgrade : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 3;
	}
}

class GrimophoneUpgrade : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 3;
	}
}

class ArmorScavengerKit : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 100;
		-INVENTORY.KEEPDEPLETED
	}
}

class GoldRageCups : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 150;
		-INVENTORY.KEEPDEPLETED
	}
}

class IsInBatGuardFrame : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 1;
		-INVENTORY.KEEPDEPLETED
	}
}

class BlackScreenHUD : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 1;
	}
}

class DoingSpinAttack : PlaceHolderItem
{
	default
	{
		Inventory.MaxAmount 1;
	}
}

class DMGWeakness100Percent : PowerProtection 
{
	default 
	{
		damagefactor "normal", 2.00;
		inventory.icon "";
		Powerup.Duration 2147483646; 
	} 
}

class TookWeaknessHit : PlaceHolderItem { default { Inventory.MaxAmount 3; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class TookResistanceHit : PlaceHolderItem { default { Inventory.MaxAmount 3; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]

class FistPlayerBlock : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlock2 : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlock3 : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlock4 : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlockExtra : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlockExtra2 : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlockItem : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerBlockHold : PlaceHolderItem { default { -INVENTORY.KEEPDEPLETED } } 
class FistPlayerSpeedFactor : FistPlayerBlockItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerSpeedFactor2 : FistPlayerBlockItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerSpeedFactor3 : FistPlayerBlockItem { default { -INVENTORY.KEEPDEPLETED } }
class FistPlayerSpeedFactor4 : FistPlayerBlockItem { default { -INVENTORY.KEEPDEPLETED } }

class SigilDrain : PlaceHolderItem { default { Inventory.MaxAmount 1; } } 
class SigilModeType : PlaceHolderItem { default { Inventory.MaxAmount 6; } } 
class SigilPieces : PlaceHolderItem { default { Inventory.MaxAmount 5; } }

class SnakeIPBuffAtk : PowerDamage
{
	default
	{
		Inventory.Icon "";
		Powerup.Duration 2147483646; // 8
		Powerup.Color "00 00 00", 0.00;
	}
}

class IPUseMode : PlaceHolderItem { default { Inventory.MaxAmount 3; } }

// ?
class ResetInventory : PlaceholderItem 
{
	int timer;
	default 
	{
		Inventory.MaxAmount 1; 
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner == null) Destroy();
		if (owner && timer >= 1)
		{
			if (dydudebug_resetinventorydebug) Console.Printf("\c[olive]Self-Removing ResetInventory Item... (tics: %d)", timer);
			Destroy();
		}
		timer++;
		super.Tick();
	}
}

class DisplayObjectBase : EEBaseZSC
{
	double xsize, ysize;
	int fuse;
	
	property fuse: fuse;
	default
	{
		Radius 1;
		Height 1;
		Scale 0.25;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.50;
	}
}

class ConfusionQMark : DisplayObjectBase
{
	default
	{
		DisplayObjectBase.Fuse 35;
		VSpeed 4;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (!fuse) fuse = 35;
		double factor = 1.0 / fuse;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}
	
	states
	{
		Spawn:
			CONQ A 0 NoDelay
			{
			}
		Idle:
			CONQ A 1
			{
			}
			loop;
	}
}

class DefDown1Icon : DisplayObjectBase
{
	default
	{
		DisplayObjectBase.Fuse 35;
		VSpeed 4;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (!fuse) fuse = 35;
		double factor = 1.0 / fuse;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}
	
	states
	{
		Spawn:
			DFDW A 0 NoDelay
			{
			}
		Idle:
			DFDW A 1
			{
			}
			loop;
	}
}

class DefDown2Icon : DisplayObjectBase
{
	default
	{
		DisplayObjectBase.Fuse 35;
		VSpeed 4;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (!fuse) fuse = 35;
		double factor = 1.0 / fuse;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}
	
	states
	{
		Spawn:
			DFDW B 0 NoDelay
			{
			}
		Idle:
			DFDW B 1
			{
			}
			loop;
	}
}

class DefDown3Icon : DisplayObjectBase
{
	default
	{
		DisplayObjectBase.Fuse 35;
		VSpeed 4;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (!fuse) fuse = 35;
		double factor = 1.0 / fuse;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}
	
	states
	{
		Spawn:
			DFDW C 0 NoDelay
			{
			}
		Idle:
			DFDW C 1
			{
			}
			loop;
	}
}

class ArmorIPItem : PlaceHolderItem
{
	mixin IPCostCheck;
}

class KnightGown1IPItem : ArmorIPItem
{
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		int timegive = 60 * TICRATE;
		int fulltimegive = timegive;
		if (MiscItem) 
		{
			timegive *= (1.0 + (TruePlayerLevel * 0.0025));
			for (int i; i < MiscItem.IPArmorTimesUsed; i++) timegive *= 0.5;
			if (dydudebug_ipdisplays) Console.Printf("timegive: %d [timesused: %d]", timegive, MiscItem.IPArmorTimesUsed);
		}
		let globalvars = DDGlobalVariables.Get();
		if (exex_ikaripointsenabled && MiscItem && globalvars)
		{
			if (owner && player)
			{
				if (player.CountInv("IPUseMode"))
				{
					double cost = A_GetIPCost(1001);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
						A_IPUseHUD(cost);
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						if (!owner.CountInv("KnightGownIP1Buff")) 
						{
							owner.SetInventory("KnightGownIP1Buff",1);
							let BuffItem = KnightGownIP1Buff(owner.FindInventory("KnightGownIP1Buff"));
							if (BuffItem) BuffItem.EffectTics = fulltimegive;
						}
						else
						{
							let BuffItem = KnightGownIP1Buff(owner.FindInventory("KnightGownIP1Buff"));
							if (BuffItem) BuffItem.EffectTics += timegive;
						}
						MiscItem.IPArmorTimesUsed++;
						owner.A_StartSound("ipmode/armoruse",62);
						Destroy();
					}
					else
					{
						A_StartSound("inv_fail",62);
					}
				}
			}
		}
		Destroy();
	}
}

class KnightGown2IPItem : ArmorIPItem
{
	override void Tick()
	{
		string armorcheck = "KnightGownIP2Buff";
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		int timegive = 60 * TICRATE;
		int fulltimegive = timegive;
		if (MiscItem) 
		{
			timegive *= (1.0 + (TruePlayerLevel * 0.0025));
			for (int i; i < MiscItem.IPArmorTimesUsed; i++) timegive *= 0.5;
			if (dydudebug_ipdisplays) Console.Printf("timegive: %d [timesused: %d]", timegive, MiscItem.IPArmorTimesUsed);
		}
		let globalvars = DDGlobalVariables.Get();
		if (exex_ikaripointsenabled && MiscItem && globalvars)
		{
			if (owner && player)
			{
				if (player.CountInv("IPUseMode"))
				{
					double cost = A_GetIPCost(1002);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
						A_IPUseHUD(cost);
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						if (!owner.CountInv("KnightGownIP2Buff")) 
						{
							owner.SetInventory("KnightGownIP2Buff",1);
							let BuffItem = KnightGownIP2Buff(owner.FindInventory("KnightGownIP2Buff"));
							if (BuffItem) BuffItem.EffectTics = fulltimegive;
						}
						else
						{
							let BuffItem = KnightGownIP2Buff(owner.FindInventory("KnightGownIP2Buff"));
							if (BuffItem) BuffItem.EffectTics += timegive;
						}
						MiscItem.IPArmorTimesUsed++;
						owner.A_StartSound("ipmode/armoruse",62);
						owner.A_SetBlend("fc 3c 96",0.4,25);
					}
					else
					{
						A_StartSound("inv_fail",62);
					}
				}
			}
		}
		Destroy();
	}
}

class KnightGown3IPItem : ArmorIPItem
{
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		int timegive = 60 * TICRATE;
		int fulltimegive = timegive;
		if (MiscItem) 
		{
			timegive *= (1.0 + (TruePlayerLevel * 0.0025));
			for (int i; i < MiscItem.IPArmorTimesUsed; i++) timegive *= 0.5;
			if (dydudebug_ipdisplays) Console.Printf("timegive: %d [timesused: %d]", timegive, MiscItem.IPArmorTimesUsed);
		}
		if (exex_ikaripointsenabled && MiscItem && globalvars)
		{
			if (owner && player)
			{
				if (player.CountInv("IPUseMode"))
				{
					double cost = A_GetIPCost(1003);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
						A_IPUseHUD(cost);
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						if (!owner.CountInv("KnightGownIP3Buff")) 
						{
							owner.SetInventory("KnightGownIP3Buff",1);
							let BuffItem = KnightGownIP3Buff(owner.FindInventory("KnightGownIP3Buff"));
							if (BuffItem) BuffItem.EffectTics = fulltimegive;
						}
						else
						{
							let BuffItem = KnightGownIP3Buff(owner.FindInventory("KnightGownIP3Buff"));
							if (BuffItem) BuffItem.EffectTics += timegive;
						}
						MiscItem.IPArmorTimesUsed++;
						owner.A_StartSound("ipmode/armoruse",62);
						owner.A_SetBlend("fc 3c 96",0.4,25);
					}
					else
					{
						owner.A_StartSound("inv_fail",62);
					}
				}
			}
		}
		Destroy();
	}
}

class KnightGown4IPItem : ArmorIPItem
{
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		int timegive = 60 * TICRATE;
		int fulltimegive = timegive;
		if (MiscItem) 
		{
			timegive *= (1.0 + (TruePlayerLevel * 0.0025));
			for (int i; i < MiscItem.IPArmorTimesUsed; i++) timegive *= 0.5;
			if (dydudebug_ipdisplays) Console.Printf("timegive: %d [timesused: %d]", timegive, MiscItem.IPArmorTimesUsed);
		}
		if (exex_ikaripointsenabled && MiscItem && globalvars)
		{
			if (owner && player)
			{
				if (player.CountInv("IPUseMode"))
				{
					double cost = A_GetIPCost(1004);
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
						A_IPUseHUD(cost);
						if (MiscItem.IPDissipateTimer > 0) MiscItem.IPDissipateTimer *= 0.5;
						if (!owner.CountInv("KnightGownIP4Buff")) 
						{
							owner.SetInventory("KnightGownIP4Buff",1);
							let BuffItem = KnightGownIP4Buff(owner.FindInventory("KnightGownIP4Buff"));
							if (BuffItem) BuffItem.EffectTics = fulltimegive;
						}
						else
						{
							let BuffItem = KnightGownIP3Buff(owner.FindInventory("KnightGownIP3Buff"));
							if (BuffItem) BuffItem.EffectTics += timegive;
						}
						MiscItem.IPArmorTimesUsed++;
						owner.A_StartSound("ipmode/armoruse",62);
						owner.A_SetBlend("fc 3c 96",0.4,25);
					}
					else
					{
						owner.A_StartSound("inv_fail",62);
					}
				}
			}
		}
		Destroy();
	}
}

class KnightGownIPBuff : PowerProtection
{
	double ticpiece;
	
	default
	{
		Powerup.Duration -60;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += (frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0) * 0.4);
																								else ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
					if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
					while (ticpiece >= 10)
					{
						EffectTics--;
						ticpiece -= 10;
					}
				}
				else
				{
					EffectTics--;
				}
			}
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
}

class KnightGownIP1Buff : KnightGownIPBuff
{
	default
	{
		DamageFactor "Normal", 0.5;
		DamageFactor "Melee", 0.75;
		DamageFactor "BFGSplash", 0.75;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Cricket", 0.5;
		DamageFactor "Chop", 0.5;
		DamageFactor "Lead", 0.5;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Zap", 0.5;
		DamageFactor "Suck", 0.5;
		DamageFactor "Dust", 0.5;
		DamageFactor "Beats", 0.5;
		DamageFactor "Cherrybomb", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "Dashing", 0.5;
		DamageFactor "DashingBG", 0.5;
		DamageFactor "DashingSD", 0.5;
		DamageFactor "Bap", 0.5;
		DamageFactor "Fire", 0.5;
		DamageFactor "Boiling", 0.5;
		Inventory.Icon "KNGW1IP1";
	}
	string texname;
	int timer;
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		timer++;
		if (timer % 20 >= 0 && timer % 20 <= 9) texname = "KNGW1IP1";
		if (timer % 20 >= 10 && timer % 20 <= 19) texname = "KNGW1IP2";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		if (!owner.CountInv("KnightGownItem")) 
		{
			if (MiscItem) MiscItem.IPArmorTimesUsed = 0;
			Destroy();
		}
		Super.Tick();
	}
}

class KnightGownIP2Buff : KnightGownIPBuff
{
	default
	{
		DamageFactor "Normal", 0.25;
		DamageFactor "Melee", 0.375;
		DamageFactor "BFGSplash", 0.375;
		DamageFactor "Bonk", 0.25;
		DamageFactor "Cricket", 0.25;
		DamageFactor "Chop", 0.25;
		DamageFactor "Lead", 0.25;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0.25;
		DamageFactor "Dust", 0.25;
		DamageFactor "Beats", 0.25;
		DamageFactor "Cherrybomb", 0.25;
		DamageFactor "BRocket", 0.25;
		DamageFactor "Spinner", 0.25;
		DamageFactor "Popper", 0.25;
		DamageFactor "Dashing", 0.25;
		DamageFactor "DashingBG", 0.25;
		DamageFactor "DashingSD", 0.25;
		DamageFactor "Bap", 0.25;
		DamageFactor "Fire", 0.25;
		DamageFactor "Boiling", 0.25;
		Inventory.Icon "KNGW2IP1";
	}
	string texname;
	int timer;
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		timer++;
		if (timer % 20 >= 0 && timer % 20 <= 9) texname = "KNGW2IP1";
		if (timer % 20 >= 10 && timer % 20 <= 19) texname = "KNGW2IP2";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		if (!owner.CountInv("KnightGownItem2")) 
		{
			if (MiscItem) MiscItem.IPArmorTimesUsed = 0;
			Destroy();
		}
		Super.Tick();
	}
}


class KnightGownIP3Buff : KnightGownIPBuff
{
	default
	{
		DamageFactor "Normal", 0.125;
		DamageFactor "Melee", 0.1875;
		DamageFactor "BFGSplash", 0.1875;
		DamageFactor "Bonk", 0.125;
		DamageFactor "Cricket", 0.125;
		DamageFactor "Chop", 0.125;
		DamageFactor "Lead", 0.125;
		DamageFactor "Breakfast", 0.125;
		DamageFactor "Zap", 0.125;
		DamageFactor "Suck", 0.125;
		DamageFactor "Dust", 0.125;
		DamageFactor "Beats", 0.125;
		DamageFactor "Cherrybomb", 0.125;
		DamageFactor "BRocket", 0.125;
		DamageFactor "Spinner", 0.125;
		DamageFactor "Popper", 0.125;
		DamageFactor "Dashing", 0.125;
		DamageFactor "DashingBG", 0.125;
		DamageFactor "DashingSD", 0.125;
		DamageFactor "Bap", 0.125;
		DamageFactor "Fire", 0.125;
		DamageFactor "Boiling", 0.125;
		Inventory.Icon "KNGW3IP1";
	}
	string texname;
	int timer;
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		timer++;
		if (timer % 20 >= 0 && timer % 20 <= 9) texname = "KNGW3IP1";
		if (timer % 20 >= 10 && timer % 20 <= 19) texname = "KNGW3IP2";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		if (!owner.CountInv("KnightGownItem3")) 
		{
			if (MiscItem) MiscItem.IPArmorTimesUsed = 0;
			Destroy();
		}
		Super.Tick();
	}
}

class KnightGownIP4Buff : KnightGownIPBuff
{
	default
	{
		DamageFactor "Normal", 0.0625;
		DamageFactor "Melee", 0.09375;
		DamageFactor "BFGSplash", 0.09375;
		DamageFactor "Bonk", 0.0625;
		DamageFactor "Cricket", 0.0625;
		DamageFactor "Chop", 0.0625;
		DamageFactor "Lead", 0.0625;
		DamageFactor "Breakfast", 0.0625;
		DamageFactor "Zap", 0.0625;
		DamageFactor "Suck", 0.0625;
		DamageFactor "Dust", 0.0625;
		DamageFactor "Beats", 0.0625;
		DamageFactor "Cherrybomb", 0.0625;
		DamageFactor "BRocket", 0.0625;
		DamageFactor "Spinner", 0.0625;
		DamageFactor "Popper", 0.0625;
		DamageFactor "Dashing", 0.0625;
		DamageFactor "DashingBG", 0.0625;
		DamageFactor "DashingSD", 0.0625;
		DamageFactor "Bap", 0.0625;
		DamageFactor "Fire", 0.0625;
		DamageFactor "Boiling", 0.0625;
		Inventory.Icon "KNGW4IP1";
	}
	string texname;
	int timer;
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		timer++;
		if (timer % 20 >= 0 && timer % 20 <= 9) texname = "KNGW4IP1";
		if (timer % 20 >= 10 && timer % 20 <= 19) texname = "KNGW4IP2";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		if (!owner.CountInv("KnightGownItem4"))
		{
			if (MiscItem) MiscItem.IPArmorTimesUsed = 0;
			Destroy();
		}
		Super.Tick();
	}
}

class DinahTrueIPState : TempDefenseBuff 
{
	int EffectTics2;
	int Dire;
	double ticpiece;
	int timer;
	int fadeouttic;
	string texname;
	double fadeintensity;
	
	default
	{
		Powerup.Duration -60;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
		Powerup.Color "ff c0 00", 0.500;
	}
	
	override void Tick()
	{
		int iconframe;
		bool debugtick = false;
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = 0;
		if (exex_expenabled && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		
		timer++;
		if (timer % 40 >=  0 && timer % 40 <=  4) iconframe = 1;
		if (timer % 40 >=  5 && timer % 40 <=  9) iconframe = 2;
		if (timer % 40 >= 10 && timer % 40 <= 14) iconframe = 3;
		if (timer % 40 >= 15 && timer % 40 <= 19) iconframe = 4;
		if (timer % 40 >= 20 && timer % 40 <= 24) iconframe = 5;
		if (timer % 40 >= 25 && timer % 40 <= 29) iconframe = 6;
		if (timer % 40 >= 30 && timer % 40 <= 34) iconframe = 7;
		if (timer % 40 >= 35 && timer % 40 <= 39) iconframe = 8;
		if (TruePlayerLevel >= 1 && TruePlayerLevel <= 25)
		{
			if (timer % 32 >=  0 && timer % 32 <=  3) iconframe = 1;
			if (timer % 32 >=  4 && timer % 32 <=  7) iconframe = 2;
			if (timer % 32 >=  8 && timer % 32 <= 11) iconframe = 3;
			if (timer % 32 >= 12 && timer % 32 <= 15) iconframe = 4;
			if (timer % 32 >= 16 && timer % 32 <= 19) iconframe = 5;
			if (timer % 32 >= 20 && timer % 32 <= 23) iconframe = 6;
			if (timer % 32 >= 24 && timer % 32 <= 27) iconframe = 7;
			if (timer % 32 >= 28 && timer % 32 <= 31) iconframe = 8;
		}
		else
		if (TruePlayerLevel >= 26 && TruePlayerLevel <= 50)
		{
			if (timer % 24 >=  0 && timer % 24 <=  2) iconframe = 1;
			if (timer % 24 >=  3 && timer % 24 <=  5) iconframe = 2;
			if (timer % 24 >=  6 && timer % 24 <=  8) iconframe = 3;
			if (timer % 24 >=  9 && timer % 24 <= 11) iconframe = 4;
			if (timer % 24 >= 12 && timer % 24 <= 14) iconframe = 5;
			if (timer % 24 >= 15 && timer % 24 <= 17) iconframe = 6;
			if (timer % 24 >= 18 && timer % 24 <= 20) iconframe = 7;
			if (timer % 24 >= 21 && timer % 24 <= 23) iconframe = 8;
		}
		else
		if (TruePlayerLevel >= 51 && TruePlayerLevel <= 100)
		{
			if (timer % 16 >=  0 && timer % 16 <=  1) iconframe = 1;
			if (timer % 16 >=  2 && timer % 16 <=  3) iconframe = 2;
			if (timer % 16 >=  4 && timer % 16 <=  5) iconframe = 3;
			if (timer % 16 >=  6 && timer % 16 <=  7) iconframe = 4;
			if (timer % 16 >=  8 && timer % 16 <=  9) iconframe = 5;
			if (timer % 16 >= 10 && timer % 16 <= 11) iconframe = 6;
			if (timer % 16 >= 12 && timer % 16 <= 13) iconframe = 7;
			if (timer % 16 >= 14 && timer % 16 <= 15) iconframe = 8;
		}
		else
		{
			if (timer % 8 == 0) iconframe = 1;
			if (timer % 8 == 1) iconframe = 2;
			if (timer % 8 == 2) iconframe = 3;
			if (timer % 8 == 3) iconframe = 4;
			if (timer % 8 == 4) iconframe = 5;
			if (timer % 8 == 5) iconframe = 6;
			if (timer % 8 == 6) iconframe = 7;
			if (timer % 8 == 7) iconframe = 8;
		}
		if (iconframe == 1) texname = "DINTIP01";
		if (iconframe == 2) texname = "DINTIP02";
		if (iconframe == 3) texname = "DINTIP03";
		if (iconframe == 4) texname = "DINTIP04";
		if (iconframe == 5) texname = "DINTIP05";
		if (iconframe == 6) texname = "DINTIP06";
		if (iconframe == 7) texname = "DINTIP07";
		if (iconframe == 8) texname = "DINTIP08";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);

		int Point1 = 300;
		int Point2 = 525;
		int increment = random(5,9) * random(2,5);
		
		if (debugtick) Console.Printf("EffectTics: %d (%d), Dire: %d, Increment: %d", EffectTics2, EffectTics, Dire, Increment);

		if (Dire == 0)
		{
			if (EffectTics2 <= Point1) { EffectTics2 = Point1; Dire = 1; }
			else if (EffectTics2 >= Point2) { EffectTics2 = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}

		if (Dire == 1)
		{
			if (owner && owner.CountInv("TimePotionTimeFreezer") <= 0) EffectTics2 += increment;
			if (EffectTics2 >= Point2) Dire = 2;
		}
		else
		if (Dire == 2)
		{
			if (owner && owner.CountInv("TimePotionTimeFreezer") <= 0) EffectTics2 -= increment;
			if (EffectTics2 <= Point1) Dire = 1;
		}
		
		if (!owner.CountInv("INTERMAPChecker"))
		{
			int fadeouttic = 36;
			if (EffectTics > fadeouttic && owner) owner.A_StopSound(206);
			if (EffectTics == fadeouttic && owner) owner.A_StartSound("DinahIP/IPLoop3Down",206,CHANF_DEFAULT,2.25,ATTN_NORM);
		
			int basediv = 20;
			DDPlayerPawn player1;
			player1 = DDPlayerPawn(owner);
			if (player1)
			{
				if (player1.armortier == 1) basediv = 20;
				if (player1.armortier == 2) basediv = 15;
				if (player1.armortier == 3) basediv = 10;
				if (player1.armortier == 4) basediv = 5;
				if (owner && owner.CountInv("TimePotionTimeFreezer"))
				{
					if (MiscItem && MiscItem.TimeFreezeIPBuff) basediv *= frandompick(1.125,1.25,1.25,1.25,1.25,1.25,1.375);
																								else basediv *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.75);
				}
			}
			if (basediv > 0 && timer % basediv == 0)
			{
				int scrapgive = randompick(1,1,1,1,1,1,1,1,2,2,3);
				for (int i; i < scrapgive; i++)
				{
					owner.A_GiveInventory("ArmorScrap",1);
				}
			}
		
			if (owner && owner.CountInv("TimePotionTimeFreezer"))
			{
				if (MiscItem && MiscItem.TimeFreezeIPBuff) ticpiece += frandompick(7.2,8.0,8.0,8.0,8.0,8.0,8.8);
																							else ticpiece += frandompick(8.1,9.0,9.0,9.0,9.0,9.0,9.9);
				if (owner.CountInv("MysteryItem")) ticpiece *= 0.25;
				while (ticpiece >= 10)
				{
					EffectTics--;
					ticpiece -= 10;
				}
			}
			else
			{
				EffectTics--;
			}
			
			// Begin fading when 15 seconds remain
			fadeintensity = 1.0 * ((EffectTics * 1.0) / 525.0);
			if (fadeintensity >= 1.00) fadeintensity = 1.00;
		}
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
	
	override color GetBlend()
	{
		bool debugblend = false;
		// slowly fade the True IP out
		int cnt = 128 - (EffectTics2>>3);
		cnt *= fadeintensity;
		int blendclr = BlendColor.a*cnt/256;
		if (debugblend) Console.Printf("cnt: %d, blendclr: %d, fade: %.2f", cnt, blendclr, fadeintensity);

		if (cnt > 0)
		{
			return Color(blendclr,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		if (debugblend) Console.Printf("EffectTics2: %d, cnt: %d / 256, BlendColor.a: %d, fadeintensity: %.2f", EffectTics2, cnt, BlendColor.a*cnt/256, fadeintensity);
		return 0;
	}
}

class DedMonsterFlag : PlaceHolderItem 
{
	int fuse;
	int ownerorigrender;
	double ownerorigalpha;
	override void PostBeginPlay()
	{
		if (owner) 
		{
			ownerorigrender = owner.GetRenderStyle();
			ownerorigalpha = owner.alpha;
			if (exex_deadmonsterfade > 0) fuse = (exex_deadmonsterfade);
			if (exex_deadmonsterfade < 0) fuse = (abs(exex_deadmonsterfade) * TICRATE);
			if (exex_deadmonsterfade == 0) fuse = (randompick(15,30,45,60,75,90,105,120,135,150,165,180) * TICRATE);
		}
		else Destroy();
		super.PostBeginPlay();
	}

	override void Tick()
	{
		if (exex_deadmonsterfade != 0 && owner.CountInv("NoDeathFadeOut") <= 0) fuse--;
		
		if (fuse <= 0 && owner.CountInv("NoDeathFadeOut") <= 0)
		{
			double fadeoutint = 0.019964;
			If (Owner)
			{
				if (fuse == 0) owner.A_SetRenderStyle(1.0,STYLE_Add);
				if (fuse < 0) owner.A_FadeOut(fadeoutint,FTF_REMOVE);
			}
		}
		
		if (Owner == NULL) Destroy();
	}
}

class PowerScannerDD : PowerScanner
{
	default
	{
		Powerup.Duration 0x7FFFFFFD;
	}
}

class EvadeAnAttack : PowerProtection 
{
	default
	{
		damagefactor "normal", 0;
		radiusdamagefactor 0;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class VokterShieldGlitterBase : TeleGlitter1
{
	default
	{
		Alpha 1.0;
		scale 0.875;
		RenderStyle "Add";
	}
	
	void A_AccTeleGlitter()
	{
		if (++health > 20)
		{
			Vel.z *= frandompick(1.025,1.05,1.075,1.1);
			if (health >= 40)
			{
				A_FadeOut(frandompick(0.04167,0.0625),FTF_REMOVE);
			}
		}
	}
}

class VokterShieldGlitter1 : VokterShieldGlitterBase
{
	States
	{
		Spawn:
			TGLT P 2 BRIGHT;
			TGLT Q 2 BRIGHT A_AccTeleGlitter;
			TGLT R 2 BRIGHT;
			TGLT S 2 BRIGHT A_AccTeleGlitter;
			TGLT T 2 BRIGHT;
			Loop;
	}
}

class VokterShieldGlitter2 : VokterShieldGlitterBase
{
	States
	{
		Spawn:
			TGLT F 2 BRIGHT;
			TGLT G 2 BRIGHT A_AccTeleGlitter;
			TGLT H 2 BRIGHT;
			TGLT I 2 BRIGHT A_AccTeleGlitter;
			TGLT J 2 BRIGHT;
			Loop;
	}
}

class CentaurionShieldMode : PowerProtection
{
	int timer;
	int timerint;
	default
	{
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
	
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}
	
	override void Tick()
	{
		super.Tick();
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) 
		{
			if (owner) owner.bNOPAIN = false;
			Destroy();
		}
		else
		{
			if (owner) owner.bNOPAIN = true;
		}
	}
}

class VokterCloneShield : PowerProtection
{
	int timer;
	int timerint;
	default
	{
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
	
	override void PostBeginPlay()
	{
		timerint = (random(2,4) * 3);
	}
	
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}
	
	override void Tick()
	{
		if (owner)
		{
			owner.bNOPAIN = true;
			
			timer++;
			if (timer % timerint >= (timerint-1))
			{
				double maxrad = (owner.radius * 1.5);
				owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				if (random(1,3) <= 1)
				{
					owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					if (random(1,9) <= 1)
					{
						owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						if (random(1,27) <= 1)
						{
							owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
							owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						}
					}
				}
				timer = 0;
				timerint = (random(2,4) * 3);
				//Console.Printf("Shield1: (%d, %d)", timer, timerint);
			}
		}
		if (owner == null) Destroy();
		super.Tick();
	}
}

class VokterCloneShield2 : PowerProtection
{
	int timer;
	int timerint;
	default
	{
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
	
	override void PostBeginPlay()
	{
		timerint = (random(1,3) * 2);
	}
	
	override void Tick()
	{
		if (owner)
		{
			timer++;
			if (timer % timerint >= (timerint-1))
			{
				double maxrad = (owner.radius * 1.5);
				owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				if (random(1,3) <= 1)
				{
					owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
					if (random(1,9) <= 1)
					{
						owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						if (random(1,27) <= 1)
						{
							owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
							owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
							owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
							owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
						}
					}
				}
				timer = 0;
				timerint = (random(1,3) * 2);
				//Console.Printf("Shield2: (%d, %d)", timer, timerint);
			}
		}
		if (owner == null) Destroy();
		super.Tick();
	}
}

class VokterCloneStun : PowerProtection
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class VokterTeleportCooldown : Powerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class VokterTeleportCooldown2 : Powerup
{
	default
	{
		Powerup.Duration -3;
		+INVENTORY.UNTOSSABLE;
	}
}

// Forces resurrected monsters to reset their health to include their bonus HP from stat calculations :V
class JustRevived : PlaceHolderItem 
{
	int timer;
	override void Tick()
	{
		if (owner)
		{
			if (timer >= 0) owner.health = (owner.SpawnHealth() + owner.Stamina);
			if (timer >= 1) Destroy();
		}
		if (Owner == NULL) Destroy();
		timer++;
	}
	
}

class JustRevivedByForsaken : PlaceHolderItem 
{
	int timer;
	override void Tick()
	{
		if (owner)
		{
			if (timer >= 0) owner.health = ((owner.SpawnHealth() + owner.Stamina) * 0.5);
			if (timer >= 1) Destroy();
		}
		if (Owner == NULL) Destroy();
		timer++;
	}
	
}

class CCardGhostMarker : PlaceHolderItem { }
class CCardRespawnedMarker : PlaceHolderItem { }
class CCardAssassinMarker : PlaceHolderItem { }

//
class ShieldPartBig : EEBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Scale 0.5;
		RenderStyle "None";
		Alpha 0.25;
		Bloodtype "ShieldHit";
		+SHOOTABLE
		+NOGRAVITY
		+NOTELEPORT
		+NODAMAGE
		+DONTRIP
		+NOBLOODDECALS
		+FLOORCLIP
		//+REFLECTIVE
		+GHOST	//Give projectiles that you wish to pass through the shield THRUGHOST flag
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (target)
		{
			Console.Printf("target: %s (\c[gold]%p\c-)", target.GetClassName(), target);
		}
		if (other)
		{
			if (other.target)
			{
				Console.Printf("other-target: %s (\c[gold]%p\c-)", other.target.GetClassName(), other.target);
				if (target)
				{
					if (other.target == target)
					{
						return false;
					}
				}
			}
		}
		else
		{
			if (target)
			{
				if (other)
				{
					if (other.target)
					{
						if (target == other.target)
						{
							return false;
						}
					}
				}
			}
		}
		
		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			HEXH A 2 bright;
			Stop;
		Death:
			TNT1 A 2;
			Stop;
	}
}

class ShieldPartBigVisual : EEBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Scale 0.5;
		RenderStyle "Add";	//Fuzzy looks great in software mode
		Alpha 0.25;
		+NOINTERACTION
		+CLIENTSIDEONLY
		+FLOORCLIP
	}
	States
	{
		Spawn:
			HEXH C 2 bright;
			Stop;
		Death:
			TNT1 A 2;
			Stop;
	}
}

class ShieldBigChecker : EEBaseZSC
{
	void A_ShieldSpawnTargetSet(actor spawned)
	{
		if (spawned) 
		{
			spawned.target = target;
			//if (spawned.target) Console.Printf("Spawned (%s): %s (target: %s) [tic: %d]", GetClassName(), spawned.GetClassName(), spawned.target.GetClassName(), gametic);
		}
	}
}

class ShieldBigSpawner : ShieldBigChecker
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
	}
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1;
			TNT1 A 0 
			{
				int flags = SXF_NOCHECKPOSITION|SXF_SETTARGET;
				bool success;
				actor spawned;
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner4up", 0, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner5up", 24, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner5up", -24, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner4up", 48, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner4up", -48, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				/*
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner3up", 72, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner3up", -72, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner2up", 96, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldSpawner2up", -96, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				*/
			}
			Stop;
	}
}

class ShieldSpawner5up : ShieldBigChecker
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1;
			TNT1 A 0
			{
				int flags = SXF_NOCHECKPOSITION|SXF_SETTARGET;
				bool success;
				actor spawned;
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 16, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 32, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 48, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 64, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				/*
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 0, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				*/
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 16, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 32, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 48, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 64, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
			}
			Stop;
	}
}

class ShieldSpawner4up : ShieldBigChecker
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1;
			TNT1 A 0 
			{
				int flags = SXF_NOCHECKPOSITION|SXF_SETTARGET;
				bool success;
				actor spawned;

				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 8, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 24, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 40, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 56, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				/*
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 8, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				*/
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 24, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 40, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 56, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
			}
			Stop;
	}
}

class ShieldSpawner3up : ShieldBigChecker
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1;
			TNT1 A 0
			{
				int flags = SXF_NOCHECKPOSITION|SXF_SETTARGET;
				bool success;
				actor spawned;
				
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 16, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 32, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 48, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				/*
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 16, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				*/
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 32, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 48, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
			}
			Stop;
	}
}


class ShieldSpawner2up : ShieldBigChecker
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1;
			TNT1 A 0
			{
				int flags = SXF_NOCHECKPOSITION|SXF_SETTARGET;
				bool success;
				actor spawned;
				
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 24, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				[success, spawned] = A_SpawnItemEx ("ShieldPartBig", 0, 0, 40, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				/*
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 24, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
				*/
				[success, spawned] = A_SpawnItemEx ("ShieldPartBigVisual", 0, 0, 40, 0, 0, 0, 0, flags);
				A_ShieldSpawnTargetSet(spawned);
			}
			Stop;
	}
}

class ShieldHit : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.05;
		Renderstyle "Add";
		+NOGRAVITY
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			RHIT B 0 bright;
			RHIT B 1 bright A_Stop();
			RHIT B 0 bright A_StartSound("ForceBarrier/Hit");
		Grow:
			RHIT B 1 bright A_SetScale(0.1, 0.1);
			RHIT B 0 bright A_FadeOut(0.2);
			RHIT B 1 bright A_SetScale(0.15, 0.15);
			RHIT B 0 bright A_FadeOut(0.2);
			RHIT B 1 bright A_SetScale(0.2, 0.2);
			RHIT B 0 bright A_FadeOut(0.2);
			RHIT B 1 bright A_SetScale(0.25, 0.25);
			RHIT B 0 bright A_FadeOut(0.2);
			RHIT B 1 bright A_SetScale(0.3, 0.3);
			Stop;
	}
}

class BossBrainHolder : PlaceHolderItem 
{
}

class IoSMinion : PlaceHolderItem 
{
}

class ShieldEmitter : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	int timer;
	override void Tick()
	{
		if (owner)
		{
			if (timer == 0) 
			{
				owner.A_StartSound("ForceBarrier/On",121,CHANF_DEFAULT);
				owner.A_StartSound("ForceBarrier/Pew",122,CHANF_DEFAULT);
			}
			if (timer == 1) 
			{
				owner.A_StartSound("ForceBarrier/Loop",123,CHANF_DEFAULT);
			}
			if (timer >= 1) 
			{
				double dist = 48.0;
				double height = 48.0;
				int numrotations = 1;
				bool success;
				actor spawned;
				for (int i = 0; i < numrotations; i++)
				{
					owner.angle += (360.0 / numrotations);
					[success, spawned] = owner.A_SpawnItemEx("ShieldBigSpawner", 0, dist, (height * 0.0), 0, 0, 0, -270, SXF_NOCHECKPOSITION|SXF_SETTARGET);
					if (spawned) 
					{
						spawned.target = owner;
						//if (spawned.target) Console.Printf("Spawned (%s): %s (target: %s) [tic: %d]", GetClassName(), spawned.GetClassName(), spawned.target.GetClassName(), gametic);
					}
					[success, spawned] = owner.A_SpawnItemEx("ShieldBigSpawner", 0, dist, (height * 1.0), 0, 0, 0, -270, SXF_NOCHECKPOSITION|SXF_SETTARGET);
					if (spawned) 
					{
						spawned.target = owner;
						//if (spawned.target) Console.Printf("Spawned (%s): %s (target: %s) [tic: %d]", GetClassName(), spawned.GetClassName(), spawned.target.GetClassName(), gametic);
					}
					[success, spawned] = owner.A_SpawnItemEx("ShieldBigSpawner", 0, dist, (height * 2.0), 0, 0, 0, -270, SXF_NOCHECKPOSITION|SXF_SETTARGET);
					if (spawned) 
					{
						spawned.target = owner;
						//if (spawned.target) Console.Printf("Spawned (%s): %s (target: %s) [tic: %d]", GetClassName(), spawned.GetClassName(), spawned.target.GetClassName(), gametic);
					}
				}
			}
			if (timer >= 350)
			{
				owner.A_StopSound(123);
				timer = 0;
			}
			timer++;
			//Console.Printf("timer: %d", timer);
		}
		if (Owner == NULL) Destroy();
	}
}

class PikeGlowAttach : EEBaseZSC
{
	default
	{
		height 2;
		radius 2;
		+NOINTERACTION;
	}
	
	override void Tick()
	{
		super.Tick();
		actor player = players[0].mo;
		if (player)
		{
			double tradius = player.radius;
			double theight = (player.height * 0.5);
			A_Warp(AAPTR_PLAYER1,0,0,theight,0,WARPF_NOCHECKPOSITION);
			if (player.player.ReadyWeapon is "WizardPike" && player.CountInv("PikeAmmo") > 0 && exex_glowingpike) { } else { Destroy(); }
		}
		else
		{
			Destroy();
		}
	}
	
	states
	{
		Spawn:
			TNT1 A 1 NoDelay;
		Idle:
			TNT1 A 18
			{
				A_SetTics(random(17,18));
			}
			loop;
	}
}
//
class PikeGlowAttachED : EEBaseZSC
{
	default
	{
		height 2;
		radius 2;
		+NOINTERACTION;
	}
	
	int numpikeglows;
	override void Tick()
	{
		super.Tick();
		if (target)
		{
			EvilDinah EvDin;
			EvDin = EvilDinah(target);
			if (EvDin && EvDin.lastweaponused == 5 && EvDin.health > 0)
			{
				double tradius = EvDin.radius;
				double theight = (EvDin.height * 0.5);
				A_Warp(AAPTR_TARGET,0,0,theight,0,WARPF_NOCHECKPOSITION);
				//Console.Printf("PikeGlowAttachED - A_Warp [attaches]");
			}
			else
			{
				//Console.Printf("PikeGlowAttachED - Destroy [ED conditions no longer met]");
				Destroy();
			}
		}
		else
		{
			//Console.Printf("PikeGlowAttachED - Destroy [no target]");
			Destroy();
		}
	}
	
	states
	{
		Spawn:
			TNT1 A 1 NoDelay;
		Idle:
			TNT1 A 18
			{
				A_SetTics(random(17,18));
			}
			loop;
	}
}
//
class IoSDeathExplosionEffect : EEBaseZSC
{
	double mradius;
	double mheight;
	
	void A_IoSExplody()
	{
		if (target)
		{
			double tradius = target.radius;
			double theight = (target.height * 0.5);
			A_Warp(AAPTR_TARGET,0,0,theight,0,WARPF_NOCHECKPOSITION);
		}

		bool success;
		actor explod;
		[success, explod] = A_SpawnItemEx("IoSDeathExplosion",random(-mradius,mradius),random(-mradius,mradius),random((mradius*0.25),mheight), 0,0,0, 0,SXF_NOCHECKPOSITION);
		A_SetExplodStats(explod);
		if (random(1,3) <= 1) 
		{
			A_SpawnItemEx("IoSDeathExplosion",random(-mradius,mradius),random(-mradius,mradius),random((mradius*0.25),mheight), 0,0,0, 0,SXF_NOCHECKPOSITION);
			A_SetExplodStats(explod);
		}
		if (random(1,7) <= 1)
		{
			A_SpawnItemEx("IoSDeathExplosion",random(-mradius,mradius),random(-mradius,mradius),random((mradius*0.25),mheight), 0,0,0, 0,SXF_NOCHECKPOSITION);
			A_SetExplodStats(explod);
		}
	}
	
	void A_SetExplodStats(actor explod)
	{
		if (explod) 
		{
			explod.scale.x = frandom(0.375,0.5625);
			explod.scale.y = frandom(0.375,0.5625);
			explod.alpha = frandom(0.375,0.5625);
		}
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				mradius *= frandom(1.5,1.5);
				mheight *= frandom(1.0,2.0);
				A_IoSExplody();
			}
			TNT1 AAAAAAAA 0
			{
				if (random(1,5) <= random(2,4))
				{
					A_SetTics(random(1,5)*random(2,4));
					A_IoSExplody();
				}
				else
				{
					mradius *= frandom(1.5,1.5);
					mheight *= frandom(1.0,2.0);
					A_SetTics(0);
					if (random(1,16) <= 3) A_IoSExplody();
				}
			}
			stop;
	}
}

class IoSDeathExplosion : EEBaseZSC
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 0;
		Projectile;
		+RANDOMIZE
		+DEHEXPLOSION
		+ZDOOMTRANS
		RenderStyle "Add";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
	}
	States
	{
		Spawn:
			TNT1 A 1 Bright NoDelay;
			MISL BC 10 Bright;
			MISL D 10 Bright;
			Stop;
	}
}

class MonsterLevel : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 1000;
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNCLEARABLE
	}
	
	override void DoEffect() { }
	override void Tick() { }
}

class MonsterRating : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 10;
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNCLEARABLE
	}
	
	override void DoEffect() { }
	override void Tick() { }
}

class INTERMAPChecker : PlaceHolderItem
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class BackPackTier1 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class AirMeter : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 0x7FFFFFFD;
		-INVENTORY.KEEPDEPLETED
	}
}

class MaxAirMeter : PlaceHolderItem 
{
	default
	{
		Inventory.MaxAmount 0x7FFFFFFD;
		-INVENTORY.KEEPDEPLETED
	}
}

class DrownDebuffBase : TempDefenseBuff 
{
	string texname;
	int timer;
	default
	{
		Inventory.MaxAmount 1;
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		timer++;
		if (timer % 24 >= 0 && timer % 24 <= 5) texname = "DRWNA0";
		if (timer % 24 >= 6 && timer % 24 <= 11) texname = "DRWNB0";
		if (timer % 24 >= 12 && timer % 24 <= 17) texname = "DRWNC0";
		if (timer % 24 >= 18 && timer % 24 <= 23) texname = "DRWND0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
	}
}

class BackPackTier2 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class JustBatDashed : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 35) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(5,6,6,6,6,7)*5),0.1111,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		
		if (Owner == NULL) Destroy();

		Super.Tick();
	}
}


class JustShieldDashed : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 35) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(6,7,7,7,7,8)*random(5,6)),0.1334,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		
		if (Owner == NULL) Destroy();

		Super.Tick();
	}
}

class JustSurprised : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 1) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(5,6,6,6,6,7)*3),0.0834,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		
		if (Owner == NULL) Destroy();

		Super.Tick();
	}
}

class JustKicked : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 35) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(5,6,6,6,6,7)*randompick(3,4,4,4,4,5)),0.0834,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		
		if (Owner == NULL) Destroy();

		Super.Tick();
	}
}

class JustPunched : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 35) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(5,6,6,6,6,7)*randompick(1,1,1,2)),0.0667,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		
		if (Owner == NULL) Destroy();

		Super.Tick();
	}
}

class JustUppercutted : PlaceholderItem 
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < 35) 
			{
				timer++;
				if (A_PainStateChecker()) A_StunInduce((randompick(5,6,6,6,6,7)*3),0.10,true,frandom(1.334,1.667));
			}
			else Destroy();
		}
		if (Owner == NULL) Destroy();
		
		Super.Tick();
	}
}

class AirBubble1 : EEBaseZSC
{
	double deteri;
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.75;
		Scale 0.75;
		VSpeed 1;
		Mass 0;
	}
	
	override void PostBeginPlay()
	{
		scale.x = frandom(0.3,0.45);
		scale.y = frandom(0.3,0.45);
		if (GetClassName() == "AirBubble2")
		{
			scale.x *= frandom(1.45,1.55);
			scale.y *= frandom(1.45,1.55);
		}
		basealpha = alpha;
		vel.z = frandom(0.9,1.5) * frandompick(0.5,0.75,0.75,0.75,1.0,1.0,1.0,1.0,1.0,1.0,1.5,1.5,1.5,2.0);
		if (waterlevel >= 3) vel.z *= frandompick(0.34,0.5,0.5,0.5,0.67);
		basescalex = scale.x;
		basescaley = scale.y;
		deteri = frandom(0.0625,0.125);
		bool makesound;
		if (random(1,16) <= 5) makesound = true;
		else if (waterlevel >= 3 && random(1,8) <= 7) makesound = true;

		if (makesound) A_StartSound("misc/bubbles",CHAN_AUTO,CHANF_DEFAULT,frandom(0.7,1.3),ATTN_NORM,frandom(0.7,1.3));
		Super.PostBeginPlay();
	}

	States
	{
		Spawn:
			BUBL AAAAAAAAAA 4
			{
				if (waterlevel <= 2)
				{
					A_SetScale((scale.x-(basescalex*(deteri*2.5))),(scale.y-(basescaley*(deteri*2.5))));
					A_FadeOut((basealpha*(deteri*2.5)),FTF_REMOVE|FTF_CLAMP);
				}
				else
				{
					A_SetScale((scale.x-(basescalex*deteri)),(scale.y-(basescaley*deteri)));
					A_FadeOut((basealpha*deteri),FTF_REMOVE|FTF_CLAMP);
				}
			}
			loop;
	}
}

class AirBubble2 : AirBubble1
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.75;
		Scale 1.5;
		VSpeed 1;
		Mass 0;
	}
	
	States
	{
		Spawn:
			BUBL BBBBBBBBBB 4
			{
				if (waterlevel <= 2)
				{
					A_SetScale((scale.x-(basescalex*(deteri*2.5))),(scale.y-(basescaley*(deteri*2.5))));
					A_FadeOut((basealpha*(deteri*2.5)),FTF_REMOVE|FTF_CLAMP);
				}
				else
				{
					A_SetScale((scale.x-(basescalex*deteri)),(scale.y-(basescaley*deteri)));
					A_FadeOut((basealpha*deteri),FTF_REMOVE|FTF_CLAMP);
				}
			}
			STOP;
	}
}

class BasePercentSpeedBonus : PowerSpeed 
{
	default 
	{
		inventory.icon "";
		Powerup.Duration 2147483646;
		+POWERSPEED.NOTRAIL;
	} 
}

class Speed2PercentBonus : BasePercentSpeedBonus
{
	default 
	{
		Speed 1.02;
	}
}

class Speed4PercentBonus : BasePercentSpeedBonus { default { Speed 1.04; } }
class Speed6PercentBonus : BasePercentSpeedBonus { default { Speed 1.06; } }
class Speed8PercentBonus : BasePercentSpeedBonus { default { Speed 1.08; } }
class Speed10PercentBonus : BasePercentSpeedBonus { default { Speed 1.10; } }
class Speed12PercentBonus : BasePercentSpeedBonus { default { Speed 1.12; } }
class Speed14PercentBonus : BasePercentSpeedBonus { default { Speed 1.14; } }
class Speed16PercentBonus : BasePercentSpeedBonus { default { Speed 1.16; } }
class Speed18PercentBonus : BasePercentSpeedBonus { default { Speed 1.18; } }
class Speed20PercentBonus : BasePercentSpeedBonus { default { Speed 1.20; } }
class Speed22PercentBonus : BasePercentSpeedBonus { default { Speed 1.22; } }
class Speed24PercentBonus : BasePercentSpeedBonus { default { Speed 1.24; } }
class Speed26PercentBonus : BasePercentSpeedBonus { default { Speed 1.26; } }
class Speed28PercentBonus : BasePercentSpeedBonus { default { Speed 1.28; } }
class Speed30PercentBonus : BasePercentSpeedBonus { default { Speed 1.30; } }
//
class Speed75PercentBonus : BasePercentSpeedBonus { default { Speed 1.75; } }
//

class TempNoWeakSound : PlaceHolderItem
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < exex_q3aqchitsounddelay) 
			{
				timer++;
			}
			else Destroy();
		}
		if (Owner == NULL) Destroy();
		
		Super.Tick();
	}
}

class TempNoHitSound : PlaceHolderItem
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < exex_q3aqchitsounddelay) 
			{
				timer++;
			}
			else Destroy();
		}
		if (Owner == NULL) Destroy();
		
		Super.Tick();
	}
}

class NoDeathFadeOut : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 1; } }
class NoRessurrectMessage : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 1; } }

class TookCriticalHit : PlaceHolderItem
{
	mixin StunItems;
	int timer;
	default
	{
		-INVENTORY.KEEPDEPLETED;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		if (owner)
		{
			if (timer < randompick(1,1,1,2))
			{
				timer++;
			}
			else Destroy();
		}
		if (Owner == NULL) Destroy();
		
		Super.Tick();
	}
}

class ShieldingBuff : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class NightmarePhaseOutDefense : ShieldingBuff
{ 
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}
	
	override void Tick()
	{
		super.Tick();
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		else owner.bNOPAIN = true;
	}
}

class NoHUD : PlaceHolderItem { }
class NoRegeneration : PlaceHolderItem { }
class NoDashing : PlaceHolderItem { }

class AngerLevelEvent : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 100; } }
class AngerLevelEventN : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 1000; } }

class STCur : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class STMax : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class AngerTimerCur : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class AngerTimerMax : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class HammerDuckLaidBall : PlaceholderItemDepletable { }

class PlayingDoom : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingDoom1 : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingDoom2 : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingTNT : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingPlutonia : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingHeretic : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingHexen : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingHexenDD : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingStrife : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode

class PlayingGoingDown : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset
class PlayingRAMP : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset
class PlayingPSXDoom : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingDoom64 : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the game mode
class PlayingCircus2 : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset
class PlayingAugerZenith : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset
class PlayingKDIZD : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset
class PlayingTCOTDA : PlayerStatPlaceholder { } // This works as an inventory flag to indicate the mapset

class PlayingCCards : PlayerStatPlaceholder { } // This works as an inventory flag to indicate if Corruption Cards is active V:

class ChaingunCooldown : EEPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class HSphereTeleportCooldown : EEPowerup
{
	default
	{
		Powerup.Duration -3;
		+INVENTORY.UNTOSSABLE;
	}
}

class ShadowSplitCooldown : EEPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class HellWarriorShieldLevel : PlaceHolderItem { default { Inventory.MaxAmount 10; } }
class EWShieldIdleMode : PlaceholderItem { }
class EWShieldDefendMode : PlaceholderItem { }
class EWShieldDefendModeExtra : PlaceholderItem { }
class HWShieldBlockHold : PlaceholderItem { }

// Hell Warrior Shield [moved from KDIZD CompatPack]
class HWShieldDefense : ShieldingBuff 
{
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}
	
	override void Tick()
	{
		super.Tick();
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		else owner.bNOPAIN = true;
	}
}
class HWShieldDefenseExtra : ShieldingBuff
{
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}
	
	override void Tick()
	{
		super.Tick();
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		else owner.bNOPAIN = true;
	}
}

class IsFinalDoom : PlaceholderItemDepletable { } // This works as an inventory flag to indicate the game mode
class IsDynDuchess : PlaceholderItemDepletable { } // This works as an inventory flag to indicate the game mode
class IsAppetite : PlaceholderItemDepletable { } // This works as an inventory flag to indicate the game mode
class IsCarnOfSouls : PlaceholderItemDepletable { } // This works as an inventory flag to indicate the game mode

class CoSMemory1Seq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS
class CoSMemory2Seq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS
class CoSMemory3Seq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS
class CoSMemory4Seq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS
class CoSMemory5Seq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS

class CoSCellSeq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS
class CoSDelilaSeq : PlaceholderItemDepletable { } // This works as an inventory flag for ACS

class DealCriticalHit : PlaceholderItemDepletable { default { Inventory.MaxAmount 1; } }

class PWDefenseBuff : PlaceholderItem { }
class PWSpeedBalloonBuff : PowerSpeed
{
	default
	{
		Speed 4;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}
class PWATKBalloonBuff : PowerDamage
{
	default
	{
		DamageFactor 4;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}
class PWAttackBuff : PowerDamage
{
	default
	{
		DamageFactor 4;
		DamageFactor "Deadlight", 4;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class ForsakenResBuff : TempDefenseBuff
{
	default
	{
		Inventory.Icon "TNT1A0";
		Powerup.Duration -15;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.5;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
		else
		if (!passive && damage > 0)
		{
			double TOTALFactor = 2.0;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
	override double GetSpeedFactor()
	{
		Speed *= 1.334;
		return Speed; 
	}
}

class Tempest_Weakened : TempDefenseBuff
{
	default
	{
		Inventory.Icon "TNT1A0";
		Powerup.Duration 2147483646; // 8
		Powerup.Color "00 00 00", 0.00;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (passive && damage > 0)
		{
			double TOTALFactor = 2.5;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class CoSGE : PlaceholderItemDepletable { default { Inventory.MaxAmount 1; } }
class MysteryCoS : PlaceholderItemDepletable { default { Inventory.MaxAmount 1; } }
class OhaiTharDinah : TempDefenseBuff
{
	default
	{
		Inventory.Icon "TNT1A0";
		Powerup.Duration -9999999;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && damage > 0)
		{
			double TOTALFactor = 0.125;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
		else
		if (!passive && damage > 0)
		{
			double TOTALFactor = 1.5;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
	}
}

class Chase_Fly : PlaceholderItemDepletable { default { Inventory.MaxAmount 1; } }

class D_NoUCard : PowerProtection 
{
	default
	{
		Inventory.MaxAmount 1;
		Inventory.Icon "NOUCA0";
		Powerup.Duration 175; // 8
		Powerup.Color "00 00 00", 0.00;
	} 
	
	int timer;
	string texname;
	
	override void OnDestroy()
	{
		if (owner) owner.bNOPAIN = false;
		super.OnDestroy();
	}

	override void Tick()
	{
		super.Tick();
		timer++;
		if (timer % 16 >= 0 && timer % 16 <= 1) texname = "NOUCA0";
		if (timer % 16 >= 2 && timer % 16 <= 3) texname = "NOUCB0";
		if (timer % 16 >= 4 && timer % 16 <= 5) texname = "NOUCC0";
		if (timer % 16 >= 6 && timer % 16 <= 7) texname = "NOUCD0";
		if (timer % 16 >= 8 && timer % 16 <= 9) texname = "NOUCE0";
		if (timer % 16 >= 10 && timer % 16 <= 11) texname = "NOUCF0";
		if (timer % 16 >= 12 && timer % 16 <= 13) texname = "NOUCG0";
		if (timer % 16 >= 14 && timer % 16 <= 15) texname = "NOUCH0";
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) 
		{
			owner.bNOPAIN = false;
			Destroy();
		}
		if (EffectTics <= 0) 
		{
			if (owner)
			{
				owner.bNOPAIN = false;
				owner.A_StopSound(102);
				owner.A_StopSound(103);
				owner.A_StartSound("NoUEnd1",102,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				owner.A_StartSound("NoUEnd2",103,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			Destroy();
		}
		else
		{
			owner.bNOPAIN = true;
			if (GetAge() % 5 == 0)
			{
				double maxrad = (owner.radius * 1.5);
				owner.A_SpawnItemEx("VokterShieldGlitter1", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
				owner.A_SpawnItemEx("VokterShieldGlitter2", random[TeleGlitter](0,maxrad)-(maxrad*0.5),random[TeleGlitter](0,owner.radius)-(owner.radius*0.5),random[TeleGlitter](owner.height*0.625,owner.height*1.25)-(owner.height*0.3125), 0,0,0.25, SXF_NOCHECKPOSITION,0);
			}
		}
	}
}