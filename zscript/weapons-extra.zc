// The Almighty Sigil from Strife! :V ------------------------------------------------------

class SigilDD : DinahWeapon replaces Sigil
{
	// NUmPieces gets stored in 'health', so that it can be quickly accessed by ACS's GetSigilPieces function.
	int downpieces;
	int basedrain;
	int drainamt;
	
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 4000;
		Health 1;
		+FLOORCLIP
		+WEAPON.CHEATNOTWEAPON
		Inventory.PickupSound "weapons/sigilcharge";
		Tag "$TAG_SIGIL";
		Inventory.Icon "I_SGL1";
		Inventory.PickupMessage "$TXT_SIGIL";
	}
	
	States(Actor)
	{
		Spawn:
			SIGL A 1;
			SIGL A -1 A_SelectPiece;
			Stop;
			SIGL B -1;
			Stop;
			SIGL C -1;
			Stop;
			SIGL D -1;
			Stop;
			SIGL E -1;
			Stop;
	}
	
	States(Weapon)
	{
		Deselect:
			"----" A 1 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Deselect5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Deselect5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Deselect4");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Deselect3");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Deselect2");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Deselect1");
		Deselect1:
			DSGH A 1 Bright 
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Lower(12);
			}
			Loop;
		Deselect2:
			DSGH B 1 Bright 
			{
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Lower(12);
			}
			Loop;
		Deselect3:
			DSGH C 1 Bright 
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Lower(12);
			}
			Loop;
		Deselect4:
			DSGH D 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Lower(12);
			}
			Loop;
		Deselect5:
			DSGH E 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Lower(12);
			}
			Loop;

		//
		Select:
			"----" A 1 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Select5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Select5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Select4");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Select3");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Select2");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Select1");
		Select1:
			DSGH A 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Raise(12);
			}
			Loop;
		Select2:
			DSGH B 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Raise(12);
			}
			Loop;
		Select3:
			DSGH C 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Raise(12);
			}
			Loop;
		Select4:
			DSGH D 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Raise(12);
			}
			Loop;
		Select5:
			DSGH E 1 Bright
			{ 
				A_KickDecelerate();
				A_GetSigilDrainAmt();
				A_Raise(12);
			}
			Loop;

		//Well, it seems using "----" A in 'Ready' makes ZDoom refuse
		//to give you the item. Interesting.
		Ready:
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Ready5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Ready4");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Ready3");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Ready2");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Ready1");
		Ready1:
			DSGH A 1 Bright 
			{
				A_KickDecelerate();
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetSigilDrainAmt();
			}
			goto Ready;
		Ready2:
			DSGH B 1 Bright
			{
				A_KickDecelerate();
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetSigilDrainAmt();
			}
			goto Ready;
		Ready3:
			DSGH C 1 Bright
			{
				A_KickDecelerate();
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetSigilDrainAmt();
			}
			goto Ready;
		Ready4:
			DSGH D 1 Bright
			{
				A_KickDecelerate();
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetSigilDrainAmt();
			}
			goto Ready;
		Ready5:
			DSGH E 1 Bright
			{
				A_KickDecelerate();
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetSigilDrainAmt();
			}
			goto Ready;
			
		User4:
			"####" # 0
			{
				A_SetInventory("SigilPieces",(invoker.downpieces+1),AAPTR_PLAYER1);
				//Console.Printf("%d",(invoker.downpieces+1));
				if (CountInv("SigilPieces",AAPTR_PLAYER1) > 1)
				{
					A_GiveInventory("SigilModeType",1,AAPTR_PLAYER1);
					A_StartSound("weapons/sigil",CHAN_WEAPON);

					if (CountInv("SigilModeType",AAPTR_PLAYER1) > CountInv("SigilPieces",AAPTR_PLAYER1)) { A_SetInventory("SigilModeType",1,AAPTR_PLAYER1); }
				}
				
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 1) { return resolvestate("Change1"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 2) { return resolvestate("Change2"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 3) { return resolvestate("Change3"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 4) { return resolvestate("Change4"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 5) { return resolvestate("Change5"); }
				return resolvestate(null);
			}
			goto Ready;
		Change1:
			DSGH A 1 
			{ 
				A_GetSigilDrainAmt();
				A_SetTics(random(6,8)*2);
			}
			goto Ready;
		Change2:
			DSGH B 1 
			{ 
				A_GetSigilDrainAmt();
				A_SetTics(random(6,8)*2);
			}
			goto Ready;
		Change3:
			DSGH C 1 
			{ 
				A_GetSigilDrainAmt();
				A_SetTics(random(6,8)*2);
			}
			goto Ready;
		Change4:
			DSGH D 1 
			{ 
				A_GetSigilDrainAmt();
				A_SetTics(random(6,8)*2);
			}
			goto Ready;
		Change5:
			DSGH E 1 
			{ 
				A_GetSigilDrainAmt();
				A_SetTics(random(6,8)*2);
			}
			goto Ready;
		
		Fire:
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) >= 5, "Fire5");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Fire4");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Fire3");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Fire2");
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) <= 1, "Fire1");
		Fire1:
			DSGH A 18 Bright A_SigilCharge;
			DSGH A 3 Bright A_GunFlash;
			DSGH A 10 A_FireSigil1;
			DSGH A 5;
			Goto Ready;
		Fire2:
			DSGH B 18 Bright A_SigilCharge;
			DSGH B 3 Bright A_GunFlash;
			DSGH B 10 A_FireSigil2;
			DSGH B 5;
			Goto Ready;
		Fire3:
			DSGH C 18 Bright A_SigilCharge;
			DSGH C 3 Bright A_GunFlash;
			DSGH C 10 A_FireSigil3;
			DSGH C 5;
			Goto Ready;
		Fire4:
			DSGH D 18 Bright A_SigilCharge;
			DSGH D 3 Bright A_GunFlash;
			DSGH D 10 A_FireSigil4;
			DSGH D 5;
			Goto Ready;
		Fire5:
			DSGH E 18 Bright A_SigilCharge;
			DSGH E 3 Bright A_GunFlash;
			DSGH E 10 A_FireSigil5;
			DSGH E 5;
			Goto Ready;
		Flash:
			DSGF A 4 Bright A_Light2;
			DSGF B 6 Bright A_LightInverse;
			DSGF A 4 Bright A_Light1;
			DSGF A 0 Bright A_Light0;
			Stop;
	}
	
	//============================================================================
	//
	// ASigil :: HandlePickup
	//
	//============================================================================

	override bool HandlePickup (Inventory item)
	{
		if (item is "SigilDD")
		{
			int otherPieces = item.health;
			if (otherPieces > health)
			{
				item.bPickupGood = true;
				Icon = item.Icon;
				// If the player is holding the Sigil right now, drop it and bring
				// it back with the new piece(s) in view.
				if (Owner.player != null && Owner.player.ReadyWeapon == self)
				{
					DownPieces = health;
					Owner.player.PendingWeapon = self;
				}
				health = otherPieces;
			}
			return true;
		}
		return false;
	}

	//============================================================================
	//
	// ASigil :: CreateCopy
	//
	//============================================================================

	override Inventory CreateCopy (Actor other)
	{
		SigilDD copy = SigilDD(Spawn("SigilDD"));
		copy.Amount = Amount;
		copy.MaxAmount = MaxAmount;
		copy.health = health;
		copy.Icon = Icon;
		GoAwayAndDie ();
		return copy;
	}

	//============================================================================
	//
	// A_SelectPiece
	//
	// Decide which sprite frame self Sigil should use as an item, based on how
	// many pieces it represents.
	//
	//============================================================================

	void A_SelectPiece ()
	{
		int pieces = min (health, 5);

		if (pieces > 1)
		{
			SetState (FindState("Spawn") + pieces);
		}
	}

	action void A_GetSigilDrainAmt()
	{
		invoker.drainamt = (0.03 * Player.mo.CountInv("PlayerMaxHP"));
		if (invoker.drainamt < 1) invoker.drainamt = 1;
		invoker.drainamt *= CountInv("SigilModeType");
		if (bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("PowerInvulnDD") || CountInv("PowerInvulnerable"))
		{
			invoker.drainamt = 0;
		}
	}

	//============================================================================
	//
	// A_SelectSigilView
	//
	// Decide which first-person frame self Sigil should show, based on how many
	// pieces it represents. Strife did self by selecting a flash that looked like
	// the Sigil whenever you switched to it and at the end of an attack. I have
	// chosen to make the weapon sprite choose the correct frame and let the flash
	// be a regular flash. It means I need to use more states, but I think it's
	// worth it.
	//
	//============================================================================

	action void A_SelectSigilView ()
	{
		if (player == null)
		{
			return;
		}
		PSprite pspr = player.GetPSprite(PSP_WEAPON);
		if (pspr) pspr.SetState(pspr.CurState + invoker.health);
		invoker.downpieces = 0;
	}

	//============================================================================
	//
	// A_SelectSigilDown
	//
	// Same as A_SelectSigilView, except it uses DownPieces. self is so that when
	// you pick up a Sigil, the old one will drop and *then* change to the new
	// one.
	//
	//============================================================================

	action void A_SelectSigilDown ()
	{
		if (player == null)
		{
			return;
		}
		PSprite pspr = player.GetPSprite(PSP_WEAPON);
		int pieces = invoker.downpieces;
		if (pieces < 1 || pieces > 5) pieces = invoker.health;
		if (pspr) pspr.SetState(pspr.CurState + pieces);
	}

	//============================================================================
	//
	// A_SelectSigilAttack
	//
	// Same as A_SelectSigilView, but used just before attacking.
	//
	//============================================================================

	action void A_SelectSigilAttack ()
	{
		if (player == null)
		{
			return;
		}
		PSprite pspr = player.GetPSprite(PSP_WEAPON);
		if (pspr) pspr.SetState(pspr.CurState + (4 * invoker.health - 3));
	}

	//============================================================================
	//
	// A_SigilCharge
	//
	//============================================================================

	action void A_SigilCharge()
	{
		invoker.basedrain = (0.03 * Player.mo.CountInv("PlayerMaxHP"));
		if (invoker.basedrain < 1) invoker.basedrain = 1;

		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);
		if (player != null)
		{
			player.extralight = 2;
		}
	}

	//============================================================================
	//
	// A_FireSigil1
	//
	//============================================================================

	action void A_FireSigil1 ()
	{
		Actor spot = null;
		FTranslatedLineTarget t;

		if (player == null || player.ReadyWeapon == null)
			return;

		DamageMobj (self, null, 1*invoker.basedrain, 'Sigil', DMG_NO_ARMOR);
		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);

		BulletSlope (t, ALF_PORTALRESTRICT);
		if (t.linetarget != null)
		{
			spot = Spawn("SpectralLightningSpot", (t.linetarget.pos.xy, t.linetarget.floorz), ALLOW_REPLACE);
			if (spot != null)
			{
				spot.tracer = t.linetarget;
			}
		}
		else
		{
			spot = Spawn("SpectralLightningSpot", Pos, ALLOW_REPLACE);
			if (spot != null)
			{
				spot.VelFromAngle(28., angle);
			}
		}
		if (spot != null)
		{
			spot.SetFriendPlayer(player);
			spot.target = self;
		}
	}

	//============================================================================
	//
	// A_FireSigil2
	//
	//============================================================================

	action void A_FireSigil2 ()
	{
		if (player == null || player.ReadyWeapon == null)
			return;

		DamageMobj (self, null, 2*invoker.basedrain, 'Sigil', DMG_NO_ARMOR);
		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);
		SpawnPlayerMissile ("SpectralLightningH1");
	}

	//============================================================================
	//
	// A_FireSigil3
	//
	//============================================================================

	action void A_FireSigil3 ()
	{
		if (player == null || player.ReadyWeapon == null)
			return;

		DamageMobj (self, null, 3*invoker.basedrain, 'Sigil', DMG_NO_ARMOR);
		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);

		angle -= 90.;
		for (int i = 0; i < 20; ++i)
		{
			angle += 9.;
			Actor spot = SpawnSubMissile ("SpectralLightningBall1", self);
			if (spot != null)
			{
				spot.SetZ(pos.z + 32);
			}
		}
		angle -= 90.;
	}

	//============================================================================
	//
	// A_FireSigil4
	//
	//============================================================================

	action void A_FireSigil4 ()
	{
		FTranslatedLineTarget t;
		
		if (player == null || player.ReadyWeapon == null)
			return;

		DamageMobj (self, null, 4*invoker.basedrain, 'Sigil', DMG_NO_ARMOR);
		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);

		BulletSlope (t, ALF_PORTALRESTRICT);
		if (t.linetarget != null)
		{
			Actor spot = SpawnPlayerMissile ("SpectralLightningBigV1", angle, pLineTarget: t, aimFlags: ALF_PORTALRESTRICT);
			if (spot != null)
			{
				spot.tracer = t.linetarget;
			}
		}
		else
		{
			Actor spot = SpawnPlayerMissile ("SpectralLightningBigV1");
			if (spot != null)
			{
				spot.VelFromAngle(spot.Speed, angle);
			}
		}
	}

	//============================================================================
	//
	// A_FireSigil5
	//
	//============================================================================

	action void A_FireSigil5 ()
	{
		if (player == null || player.ReadyWeapon == null)
			return;

		DamageMobj (self, null, 5*invoker.basedrain, 'Sigil', DMG_NO_ARMOR);
		A_StartSound ("weapons/sigilcharge", CHAN_WEAPON);

		SpawnPlayerMissile ("SpectralLightningBigBall1");
	}

	//============================================================================
	//
	// ASigil :: SpecialDropAction
	//
	// Monsters don't drop Sigil pieces. The Sigil pieces grab hold of the person
	// who killed the dropper and automatically enter their inventory. That's the
	// way it works if you believe Macil, anyway...
	//
	//============================================================================

	override bool SpecialDropAction (Actor dropper)
	{
		// Give a Sigil piece to every player in the game
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].mo != null)
			{
				GiveSigilPiece (players[i].mo);
				Destroy ();
			}
		}
		return true;
	}

	//============================================================================
	//
	// ASigil :: GiveSigilPiece
	//
	// Gives the actor another Sigil piece, up to 5. Returns the number of Sigil
	// pieces the actor previously held.
	//
	//============================================================================

	static int GiveSigilPiece (Actor receiver)
	{
		SigilDD sigl = SigilDD(receiver.FindInventory("SigilDD"));
		if (sigl == null)
		{
			sigl = SigilDD(Spawn("Sigil1DD"));
			if (!sigl.CallTryPickup (receiver))
			{
				sigl.Destroy ();
			}
			return 0;
		}
		else if (sigl.health < 5)
		{
			++sigl.health;
			static const class<Sigil> sigils[] =
			{
				"Sigil1", "Sigil2", "Sigil3", "Sigil4", "Sigil5"
			};
			sigl.Icon = GetDefaultByType(sigils[clamp(sigl.health, 1, 5)-1]).Icon;
			// If the player has the Sigil out, drop it and bring it back up.
			if (sigl.Owner.player != null && sigl.Owner.player.ReadyWeapon == sigl)
			{
				sigl.Owner.player.PendingWeapon = sigl;
				sigl.DownPieces = sigl.health - 1;
			}
			return sigl.health - 1;
		}
		else
		{
			return 5;
		}
	}
}

// Sigil 1 ------------------------------------------------------------------

class Sigil1DD : SigilDD replaces Sigil1
{
	Default
	{
		Inventory.Icon "I_SGL1";
		Health 1;
	}
}

// Sigil 2 ------------------------------------------------------------------

class Sigil2DD : SigilDD replaces Sigil2
{
	Default
	{
		Inventory.Icon "I_SGL2";
		Health 2;
	}
}

// Sigil 3 ------------------------------------------------------------------

class Sigil3DD : SigilDD replaces Sigil3
{
	Default
	{
		Inventory.Icon "I_SGL3";
		Health 3;
	}
}

// Sigil 4 ------------------------------------------------------------------

class Sigil4DD : SigilDD replaces Sigil4
{
	Default
	{
		Inventory.Icon "I_SGL4";
		Health 4;
	}
}

// Sigil 5 ------------------------------------------------------------------

class Sigil5DD : SigilDD replaces Sigil5
{
	Default
	{
		Inventory.Icon "I_SGL5";
		Health 5;
	}
}

// The base class for attacks used by The Sigil of the One God, whether they are the Player's attacks or those of a Spectral Monster. 
// The base class also has a bit of explosive radius for their impact, although not all of their inheritors use said explosive damage.
class SpectralLightningBaseNew : DDProjectile // replaces SpectralLightningBase 
{
	default
	{
		+SPECTRAL 
		DamageType "Sigil";
		+NOTELEPORT
		+ACTIVATEIMPACT
		+ACTIVATEPCROSS
		+STRIFEDAMAGE
		MaxStepHeight 4;
		RenderStyle "Add";
		SeeSound "weapons/sigil";
		DeathSound "weapons/sigilhit";
	}
	
	States
	{
		Death:
			ZAP1 B 3 bright
			{
				A_GetSigilDamage(0,0); A_GetSigilDamage(0,1);
				A_Explode((finaldamagedealt), (finaldamagedealt2), 0);
			}
			ZAP1 A 3 bright 
			{
				if (random(1,256) > 96)
				{
					A_AlertMonsters();
				}
			}
			ZAP1 BCDEFE 3 bright
			{
			}
			ZAP1 DCB 2 bright
			{
			}
			ZAP1 A 1 bright
			{
			}
			Stop;
	}
}

//*********************
//* LE CRAZEH BALZ :V *
//*********************
class CrazyBallDD : DinahWeapon
{
	default
	{
		Weapon.SelectionOrder 3000;
		Inventory.PickupSound "misc/w_pkup";
		Weapon.AmmoType "CzBall";
		Weapon.AmmoGive 1;
		Weapon.AmmoUse 1;
		Weapon.SlotNumber 9;
		Inventory.Pickupmessage "\c[gold]What in heck's name is this thing...?";
		AttackSound "";
		Tag "Crazy Ball: Thrown and will emit a blizzard of colorful projectiles that weave everywhere. Can very rarely deal self-damage with a shot. Eventually exhausts itself and then explodes into bits.";
		Scale 0.6;
		+FLOATBOB
	}
	States 
	{ 
		Spawn: 
			CRZY A 0 A_Jump(240,2);
			CRZY A 0 A_StartSound("CRZ"); 
			CRZY AAAAAA 8;
			CRZY BCDODCB 2;
			CRZY A 0 A_Jump(128,3);		//Randomize
			CRZY AAAAAA 8;
			loop;
		Ready: 
			DCRZ A 1 
			{
				A_JumpIfNoAmmo("ReadyNoAmmo");
				A_KickDecelerate();
				A_WeaponReady(); // WRF_ALLOWUSER4
			}
			loop;
		ReadyNoAmmo: 
			TNT1 A 1 
			{
				A_KickDecelerate();
				A_WeaponReady(); // WRF_ALLOWUSER4
			}
			goto Ready;
		Deselect:
			DCRZ A 1 
			{
				A_KickDecelerate();
				A_Lower(12);
			}
			loop;
		Select: 
			DCRZ A 1 
			{
				A_KickDecelerate();
				A_Raise(12);
			}
			loop;
		Fire: 
			DCRZ A 1 A_JumpIfNoAmmo(5);
			DCRZ B 0;
			DCRZ B 6;
			DCRZ B 6;
			DCRZ C 10 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_FireProjectile("CrazyBallBerserk", 0, 2, 5, 5);
				}
				else
				{
					A_FireProjectile("CrazyBall", 0, 2, 5, 5);
				}
			}
			Goto Select;
			DCRZ C 0;
			GoTo Deselect;
	} 
} 

class CzBall : Ammo
{
	default
	{
		Scale 0.6;
		+FLOATBOB
		Inventory.Amount 1;
		Inventory.MaxAmount 25;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 50;
		Inventory.PickupMessage "You picked up a crazy ball.";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.Icon "LITEE0";
	}
	
	States
	{
		Spawn:
			CRZY A 8 A_GiveToTarget("CrazyBallDD", 1);
			CRZY AAAAAA 8;
			CRZY BCDODCB 2;
			Loop;
	}
}

class CrazyBall : DDProjectile
{
	int hurtflag;
	int hurtflag2;

	default
	{
		Radius 8;
		Height 16;
		Speed 40;
		Damage 2;
		Scale 0.6;
		+ACTIVATEIMPACT
		+ACTIVATEPCROSS
		+DROPOFF
		+MISSILE
		+NOTELEPORT
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
		SeeSound "";
		DeathSound "";
		BounceType "Hexen";
		BounceCount 2;
	}
	
	override void Tick()
	{
		hurtflag = CMF_AIMDIRECTION|CMF_BADPITCH|CMF_TRACKOWNER;
		hurtflag2 = 0;
		if (random(1,128) == 1) 
		{
			hurtflag = CMF_AIMDIRECTION|CMF_BADPITCH;
			hurtflag2 = XF_HURTSOURCE;
		}
		//if (target) Console.Printf("Target: %s", target.GetClassName());
		//Console.Printf("HurtFlag: %d, HurtFlag2: %d", hurtflag, hurtflag2);
		super.Tick();
	}
	
	States
	{
		Spawn:
			CRZY A 3;
			loop;
		Death:
			CRZY AAAA 20 A_StartSound("CRZCLIK3");
			CRZY BCD 8;
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_StartSound("CRZ");
			CRZY D 0 A_Jump(1, 2);
			GoTo Death+7;
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 70));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_StartSound("CRZ");
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 70));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_StartSound("CRZ");
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 70));
			CRZY D 0 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 70));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_Jump(32,2);
			GoTo Death+80;
			CRZY D 0 A_StartSound("CRZ");
			CRZY D 0 A_Explode(64,128,hurtflag2,0,32);
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 3 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 1 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 2 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 5 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 12, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 3 A_SpawnProjectile("CrazyBalls", 14, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 3 A_SpawnProjectile("CrazyBalls", 6, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 0 A_StartSound("CRZ");
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 1 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 2 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 3 A_SpawnProjectile("CrazyBalls", 10, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY O 5 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 4 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 5 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 6 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 7 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 8 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 9 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 10 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 11 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 12 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 14 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 17 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 20 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 25 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY D 30 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 35 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY DD 15 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(-10, 180));
			CRZY DD 15 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY DDD 15 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY DDDD 15 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY DDDDD 15 A_SpawnProjectile("CrazyBalls", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 20 A_StartSound("CRZ6");
			CRZY D 20 A_Explode(64,128,hurtflag2,0,32);
			CRZY C 0 A_StartSound("CRZCLIK3");
			CRZY CBBBB 20;
			CRZY B 20 A_StartSound("CRZCLIK3");
			CRZY B 20;
			PBFF B 3 Bright;
			CRZY D 0 A_SpawnProjectile("CrazyFlash", 12,-2,0,2,0);
			CRZY DDDDDDDDDD 0 A_SpawnProjectile("Sparkles", 8, 0, random(-180, 180), hurtflag, random(-180, 180));
			CRZY DD 0 A_SpawnProjectile("Popcorn_Shrap1", 2, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY DDDDDDDDDDDDDDDDDDDDDDDDDDDDD 0 A_SpawnProjectile("Popcorn_Shrap7", 2, 0, random(-180, 180), hurtflag, random(0, 180));
			PBFF D 0 A_StartSound("crazyball/detonate");
			PBFF D 0;
			CRZY D 0 A_SpawnProjectile("CrazyBits1", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits2", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			PBFF C 3 Bright A_SpawnProjectile("CrazyFlash", 4,2,0,2,0);
			CRZY CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 0 A_SpawnProjectile("Popcorn_Shrap7", 2, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits3", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits4", 12, 0, random(-180, 180), hurtflag, random(0, 180));
			PBFF D 3 Bright A_SpawnProjectile("CrazyFlash", 16,-4,0,2,0);
			CRZY DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD 0 A_SpawnProjectile("Popcorn_Shrap7", 2, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits5", 11, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits6", 11, 0, random(-180, 180), hurtflag, random(0, 180));
			PBFF E 3 Bright A_SpawnProjectile("CrazyFlash", 8,4,0,2,0);
			CRZY EEEEEEEEEEEEEEEEEEEEEEE 0 A_SpawnProjectile("Popcorn_Shrap7", 2, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits7", 9, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits8", 9, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits9", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			CRZY D 0 A_SpawnProjectile("CrazyBits10", 8, 0, random(-180, 180), hurtflag, random(0, 180));
			PBFF F 3 Bright;
			Stop;
	}
}

class CrazyBallBerserk : CrazyBall
{
	default
	{
		Speed 100;
		Damage 10;
	}
}

class CrazyFlash : DDProjectile
{
	default
	{
		+NOGRAVITY
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
	}
	
	States
	{
		Spawn:
			PBFF BCDEF 3 Bright;
			Stop;
	}
}

class CrazyBits1 : DDProjectile
{
	default
	{
		Radius 5;
		Height 5;
		Speed 4;
		Scale 0.6;
	}
	
	States
	{
		Spawn:
			CRZY E 15 A_Jump(3,1);
			goto Spawn;
			CRZY E 15;
			Stop;
	}
}	
class CrazyBits2 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY F 15 A_Jump(3,1);
			goto Spawn;
			CRZY F 15;
			Stop;
	}
}	
class CrazyBits3 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY G 15 A_Jump(3,1);
			goto Spawn;
			CRZY G 15;
			Stop;
	}
}
class CrazyBits4 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY H 15 A_Jump(3,1);
			goto Spawn;
			CRZY H 15;
			Stop;
	}
}

class CrazyBits5 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY I 15 A_Jump(3,1);
			goto Spawn;
			CRZY I 15;
			Stop;
	}
}

class CrazyBits6 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY J 15 A_Jump(3,1);
			goto Spawn;
			CRZY J 15;
			Stop;
	}
}

class CrazyBits7 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY K 15 A_Jump(3,1);
			goto Spawn;
			CRZY K 15;
			Stop;
	}
}

class CrazyBits8 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY L 15 A_Jump(3,1);
			goto Spawn;
			CRZY L 15;
			Stop;
	}
}

class CrazyBits9 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY M 15 A_Jump(3,1);
			goto Spawn;
			CRZY M 15;
			Stop;
	}
}

class CrazyBits10 : CrazyBits1
{
	States
	{
		Spawn:
			CRZY N 15 A_Jump(3,1);
			goto Spawn;
			CRZY N 15;
			Stop;
	}
}

class CrazyBalls : DDProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 3;
		Damage 9;
		Scale 0.6;
		Projectile;
		Alpha 0.8;
		SeeSound "";
		DeathSound "";
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
	}
	States
	{
		Spawn:
			CRZY P 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY Q 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY R 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY S 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY P 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY Q 2 Bright ThrustThing( (angle*random(-256,-128))/360, 4, 0, 0);
			CRZY R 2 Bright ThrustThing( (angle*random(-256,-128))/360, 4, 0, 0);
			CRZY S 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY Q 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY P 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY S 2 Bright ThrustThing( (angle*random(128,256))/360, 4, 0, 0);
			CRZY R 2 Bright ThrustThing( (angle*random(128,256))/360, 4, 0, 0);
			CRZY Q 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY S 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY R 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			Goto Spawn;
		Death:
			GLOB B 3 Bright;
			GLOB A 3 Bright A_Scream;
			GLOB H 3 Bright A_Fall;
			Stop;
	}
}

class Sparkles : DDProjectile
{
	default
	{
		Radius 5;
		Height 5;
		Speed 10;
		+MISSILE
		//+LOWGRAVITY
		+NOBLOCKMAP
		+NOTELEPORT
		+NODAMAGETHRUST
		+ACTIVATEIMPACT
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
		Scale 0.25;
	}
	
	States
	{
		Spawn:
			PWT2 ABCDABCDABCDABCDABCD 1 Bright;
			Stop;
		Death:
			PWT2 E 2 A_Scream;
			PWT2 F 2 A_Fall;
			PWT2 GHI 2;
			Stop;
	}
}

class Popcorn_Shrap1 : DDProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 3;
		+MISSILE 
		+LOWGRAVITY 
		+NOTELEPORT
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
		Scale 0.5;
		SeeSound "";
		DeathSound "";
	}
	States
	{
		Spawn:
			SHRA ABC 2 Bright ThrustThing( (angle*random(-256,256))/360, 1, 0, 0);
			SHRA C 0 Bright A_Jump(128,3);
			SHRA DE 2 Bright ThrustThing( (angle*random(-256,256))/360, 1, 0, 0);
			SHRA ABC 2 Bright;
			Goto Spawn;
		Death:
			SHRA DDEE 3 Bright;
			Stop;
	}
}

class Popcorn_Shrap7 : DDProjectile
{
	default
	{
		Radius 2;
		Height 2;
		Speed 6;
		Damage 7;
		+MISSILE 
		+LOWGRAVITY
		+NOTELEPORT
		-CASTSPRITESHADOW
		+NOSPRITESHADOW
		Scale 0.75;
		SeeSound "";
		DeathSound "";
	}
	States
	{
		Spawn:
			//CRZY P 2 Bright ThrustThing( (angle*random(-256,256))/360, 4, 0, 0);
			CRZY PQR 1 Bright;
			Goto Spawn;
		Death:
			GLOB B 3 Bright;
			GLOB A 3 Bright;
			GLOB H 3 Bright;
			Stop;
	}
}