// Future Stuff
class KillCardEEHelper : EECardSummon
{
	default
	{
		Radius 3;
		Height 3;
		Speed 0; // SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "Killer Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_EEChase();
			}
			Loop;
		Missile:
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 0
			{
				if (random(1,4) <= 1)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 0
			{
				if (random(1,2) <= 1) 
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 0 A_Die();
			Goto Death;
		Pain:
			TNT1 A 0
			{
				bNOPAIN = true; 
				bNODAMAGE = true;
			}
			goto Missile;
		Death:
			ZBUX A 4 bright;
			ZBUX BCD 4 Bright;
			stop;
	}
}

class SummonCardEEHelper : EECardSummon
{
	default
	{
		Radius 3;
		Height 3;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "Summon Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCBABCD 2 Bright 
			{
				A_EEChase();
			}
		Missile:
			DCRD F 10 A_Stop();
			DCRD F 1 A_FaceTarget();
			Goto Death;
		Pain:
			TNT1 A 0
			{
				bNOPAIN = true; 
				bNODAMAGE = true;
			}
			goto Missile;
		Death:
			DCRD F 0 bright
			{
				int user_type;
				string spawntype;
				bool isabosssummon = false;
				bool lolewat = true;
				if (master && DelilaDorsey_HelperFriend(master))
				{
					DelilaDorsey_HelperFriend DBC;
					DBC = DelilaDorsey_HelperFriend(master);
					if (DBC.health <= ((DBC.SpawnHealth() + DBC.Stamina) * frandompick(0.125,0.125,0.125,0.125,0.1667,0.1667,0.1667,0.2,0.2,0.25) * randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3)))
					{
						isabosssummon = true;
						user_type = random(1,110);
						if (user_type >= 1 && user_type <= 10) spawntype = "SphinxMotherClone";
						if (user_type >= 11 && user_type <= 20) spawntype = "GameMotherClone";
						if (user_type >= 21 && user_type <= 30) spawntype = "MossMotherClone";
						if (user_type >= 31 && user_type <= 40) spawntype = "RoseMotherClone";
						if (user_type >= 41 && user_type <= 50) spawntype = "HandMotherVacClone";
						if (user_type >= 51 && user_type <= 60) spawntype = "Teacher_KragClone";
						if (user_type >= 61 && user_type <= 70) spawntype = "Teacher_QuisClone";
						if (user_type >= 71 && user_type <= 80) spawntype = "Teacher_LauritzClone";
						if (user_type >= 81 && user_type <= 90) spawntype = "Teacher_JorgClone";
						if (user_type >= 91 && user_type <= 100) spawntype = "Teacher_VokterClone";
						if (user_type >= 101 && user_type <= 110) spawntype = "Tempest_BossClone";
						
						if (user_type <= 110 && DBC.health <= ((DBC.SpawnHealth() + DBC.Stamina) * frandompick(0.025,0.025,0.025,0.025,0.0334,0.0334,0.0334,0.04,0.04,0.05) * randompick(1,1,1,1,1,1,1,2)))
						{
							if (random(1,5) <= random(2,3)) isabosssummon = false; // This will make the boss summon spawn with their FULL health pool instead of a greatly reduced one.
						}
					}
					else
					{
						user_type = random(1,32);
						if (user_type >= 1 && user_type <= 16) spawntype = "Reaper";
						if (user_type >= 17 && user_type <= 22)
						{
							if (random(1,4) <= 1) spawntype = "CremeDeBratte_Torched";
															 else spawntype = "CremeDeBratte";
						}
						if (user_type >= 23 && user_type <= 27)
						{
							if (random(1,16) <= 1) spawntype = "PushyArchAngel";
																else spawntype = "PushyAngel";
						}
						if (user_type >= 28 && user_type <= 32)
						{
							spawntype = "Devil";
						}
					}
					bool success;
					actor spawned;
					[success, spawned] = A_SpawnItemEx(spawntype);
					if (success && spawned)
					{
						EECreature spawn2;
						spawn2 = EECreature(spawned);
						if (spawn2)
						{
							if (DBC)
							{
								if (lolewat) spawn2.master = DBC;
								if (isabosssummon) spawn2.isasummonedclone = true;
								spawn2.user_levelpreset = DBC.user_leveltransfer;
								spawn2.user_rankpreset = DBC.user_ranktransfer;
								if (DBC.target) spawn2.target = DBC.target;
							}
						}
						A_SpawnItemEx("TeleportFogDD",flags:SXF_NOCHECKPOSITION);
					}
				}
			}
			ZBUX A 4 bright A_AlertMonsters(1024);
			ZBUX BCD 4 Bright;
			stop;
	}
}

class HealCardEEHelper : EECardSummon
{
	bool alwayshealplayer;
	bool alwayshealself;
	default
	{
		Radius 3;
		Height 3;
		Speed 0;
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+NOTARGET;
		+NOINFIGHTING;
		-COUNTKILL;
		+CANTSEEK;
		Tag "Healing Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	void A_CheckDelilaStatus()
	{
		if (master && DelilaDorsey_HelperFriend(master)) 
		{
			int rng = random(1,2);
			if (alwayshealplayer) rng == 2;
			else if (alwayshealself) rng == 1;
			if (rng <= 1) 
			{
				target = master; // Send the healing projectile[s] to Delila herself.
				if (alwayshealself) 
				{
					state HealState = FindState("Missile");
					if (HealState != null) SetState(HealState);
				}
			}
			else
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				Actor mo;
				ThinkerIterator it = ThinkerIterator.Create("DinahPlayer");
				while (mo = Actor(it.Next()))
				{
					if (mo == player) 
					{
						target = player; // Send the heal projectile to the PLAYER
						if (alwayshealplayer) 
						{
							state HealState = FindState("Missile");
							if (HealState != null) SetState(HealState);
						}
					}
				}
			}
			//if (target == master) Console.Printf("$!@D");
		}
	}
	
	States
	{
		Spawn:
			DCRD A 0 NoDelay;
			DCRD A 0 A_CheckDelilaStatus();
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_Chase();
			}
			DCRD A 0
			{
				A_CheckDelilaStatus();
			}
			Loop;
		Missile:
			DCRD E 10 A_Stop();
			DCRD E 1
			{
				A_CheckDelilaStatus();
				A_FaceTarget();
			}
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 5)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 7)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 7)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRD E 0 A_Die();
			Goto Death;
		Pain:
			TNT1 A 0
			{
				bNOPAIN = true; 
				bNODAMAGE = true;
			}
			goto Missile;
		Death:
			SPNR C 4 bright;
			SPNR DEFG 4 Bright;
			stop;
	}
}

class NoUCardEEHelper : EECardSummon
{
	default
	{
		Radius 3;
		Height 3;
		Health 15;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "'No U' Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_EEChase();
			}
		Missile:
			UNOU A 10 A_Stop();
			UNOU A 1 A_FaceTarget();
			UNOU A 0
			{
				// Will give Delila herself or the player the NoU reflection effect.
				actor DBC;
				DBC = DelilaDorsey_HelperFriend(master);
				DelilaDorsey_HelperFriend DBC2;
				DBC2 = DelilaDorsey_HelperFriend(DBC);
				if (DBC2) 
				{
					DBC2.NoUCooldown = 525;
				}
				if (random(1,2) <= 1)
				{
					if (DBC2) 
					{
						DBC2.A_StopSound(102);
						DBC2.A_StopSound(103);
						DBC2.A_StartSound("NoUStart1",102,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
						DBC2.A_StartSound("NoUStart2",103,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
						DBC2.A_SetInventory("D_NoUCard",1);
					}
				}
				else
				{
					actor player = players[0].mo;
					let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
					Actor mo;
					ThinkerIterator it = ThinkerIterator.Create("DinahPlayer");
					while (mo = Actor(it.Next()))
					{
						if (mo == player)
						{
							player.A_StopSound(102);
							player.A_StopSound(103);
							player.A_StartSound("NoUStart1",102,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
							player.A_StartSound("NoUStart2",103,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
							player.A_SetInventory("D_NoUCard",1);
						}
					}
				}
			}
			UNOU D 0 A_Die();
			Goto Death;
		Pain:
			TNT1 A 0
			{
				bNOPAIN = true; 
				bNODAMAGE = true;
			}
			goto Missile;
		Death:
			ZBUX A 4 bright;
			ZBUX BCD 4 Bright;
			stop;
	}
}


class HealBallEEHelper : EEEffectProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (0);
		+SEEKERMISSILE;
		+NOEXTREMEDEATH;
		PROJECTILE;
		DamageType "HealingSpell";
		DeathSound "virtuoso/musichit";
	}
	
	override int SpecialMissileHit (Actor victim) // HealMissile
 	{
		EECreature healee;
		DDPlayerPawn healee2;
		if (victim) healee = EECreature(victim);
		if (victim) healee2 = DDPlayerPawn(victim);

		if (healee && healee.bISMONSTER)
		{
			int maxhp = (healee.SpawnHealth() + healee.Stamina);
			if (healee.health > 0 && healee.health < maxhp)
			{
				healee.health += (maxhp * 0.05); 
				if (healee.health > maxhp) healee.health = maxhp;
			}
			else
			{
				healee.health += (maxhp * 0.016667); 
				if (healee.health > maxhp*3) healee.health = (maxhp*3);
			}
		}
		else
		{
			if (healee2)
			{
				int PlayerHP = healee2.health;
				let MiscItem = PlayerStatItem(healee2.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					int maxhp = MiscItem.MaxHealthTrue;
					//Console.Printf("health: %d, maxhp: %d", PlayerHP, maxhp);
					if (PlayerHP > 0 && PlayerHP < maxhp)
					{
						PlayerHP += (maxhp * 0.16667);
						if (PlayerHP > maxhp) PlayerHP = maxhp;
					}
					else
					{
						PlayerHP += (maxhp * 0.0555566666666667); 
						if (PlayerHP > maxhp*3) PlayerHP = (maxhp*3);
					}
				}
				//Console.Printf("PlayerHP: %d, healee.health: %d", PlayerHP, healee2.health);
				if (PlayerHP > healee2.health) 
				{
					actor player = players[0].mo;
					player.health = PlayerHP;
					healee2.health = PlayerHP;
					player.A_StartSound("Dinah/Giggle",CHAN_VOICE);
				}
			}
		}
		return -1;
	}

	void A_CheckDelilaStatus(bool firsttic)
	{
		actor permtracer;
		if (firsttic)
		{
			if (target)
			{
				if (target.master && DelilaDorsey_HelperFriend(target.master))
				{
					tracer = target.master;
					permtracer = target.master;
					//if (tracer == target.master) Console.Printf("B434D");
				}
			}
		}
		else
		{
			if (permtracer) tracer = permtracer;
			//if (tracer == permtracer) Console.Printf("ng34");
		}
	}
	
	void A_TracerCheck()
	{
		if (tracer)
		{
			if (!DelilaDorsey_HelperFriend(tracer)) A_CheckDelilaStatus(false);
			//Console.Printf("\c[green]tracer: %s", tracer.GetClassName());
		}
		else 
		{
			//Console.Printf("\c[orange]no tracer");
			A_CheckDelilaStatus(false);
		}
		//if (target) Console.Printf("target: %s", target.GetClassName());
		//			 else Console.Printf("no target");
		A_SeekerMissile(10,10,SMF_LOOK);
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_CheckDelilaStatus(true);
	}
	
	States
	{
		Spawn:
			CBOM A 1 Bright A_TracerCheck();
			CBOM A 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM B 1 Bright A_TracerCheck();
			CBOM B 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM C 1 Bright A_TracerCheck();
			CBOM C 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM D 1 Bright A_TracerCheck();
			CBOM D 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			Loop;
		
		Death:
			TNT1 A 0; //A_Explode(1,128,0,0,1);
			TNT1 AAAAAAAAAAAA 1 A_SpawnItemEx("Mininote", 0, 0, 25, 2, 0, random(-2,2), random(0,359));
			Stop;
	}
}

class DelilaDorsey_HelperFriend : EEHelperFriend
{
	int NoUCooldown;
	bool NoUFlinchCheck;
	bool forcehealplayer;
	bool forcehealself;
	int landcooldown;
	default
	{
		//$Category RPHelpers;
		Health 1250;
		Height 48;
		Radius 16;
		Speed 12;
		Scale 1;
		PainChance 64;
		Mass 100;
		MONSTER;
		DamageFactor "CherryBomb", 0.625;
		PainChance "CherryBomb", 40;
		DamageFactor "BRocket", 0.625;
		PainChance "BRocket", 40;
		DamageFactor "Spinner", 1.4375;
		PainChance "Spinner", 115;
		DamageFactor "Popper", 1.5;
		PainChance "Popper", 120;
		DamageFactor "Bonk", 0.75;
		PainChance "Bonk", 48;
		DamageFactor "Chop", 1.25;
		PainChance "Chop", 80;
		DamageFactor "Lead", 0.5;
		PainChance "Lead", 40;
		DamageFactor "Cricket", 1.75;
		PainChance "Cricket", 140;
		DamageFactor "Breakfast", 0.875;
		PainChance "Breakfast", 72;
		DamageFactor "Suck", 0.25;
		PainChance "Suck", 0;
		DamageFactor "Zap", 0.25;
		PainChance "Zap", 16;
		DamageFactor "Fire", 0.25;
		PainChance "Fire", 16;
		DamageFactor "Ice", 0.25;
		PainChance "Ice", 16;
		DamageFactor "Beats", 0.25;
		PainChance "Beats", 16;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTTHRUST;
		+LOOKALLAROUND;
		+NOGRAVITY;
		+FLOATBOB;
		+FLOAT;
		+FRIENDLY;
		//+MISSILEMORE;
		//+MISSILEEVENMORE;
		Tag "Delila Dorsey [Helper/Ally]";
	}
	
	int noblockmonsttimer;
	int noblockmonstchance;
	int noblockmonstresist;
	override void Tick()
	{
		super.tick();
		if (GetAge() <= 3) 
		{
			user_ranktransfer = CountInv("MonsterRating");
			user_leveltransfer = CountInv("MonsterLevel");
		}
		if (NoUCooldown > 0) 
		{
			NoUCooldown--;
			//Console.Printf("NoUCooldown: %d", NoUCooldown);
		}
		if (GetAge() % 35 == 5) A_CheckTag();
		
		noblockmonstresist = random(3,5) * (Skill * frandom(0.75,1.25));
		noblockmonstresist *= random(1,3);
		noblockmonstresist *= (1.0 + (CountInv("MonsterLevel") * 0.2));
		noblockmonstchance = 16 + (Skill * 8);
		noblockmonstchance *= random(1,3);
		noblockmonstchance *= (1.0 + (CountInv("MonsterLevel") * 0.05));
		if (!bNOBLOCKMONST)
		{
			if (random(1,1024) <= noblockmonstchance)
			{
				bNOBLOCKMONST = true;
				noblockmonsttimer = noblockmonstresist;
			}
		}
		else
		{
			noblockmonsttimer--;
			if (noblockmonsttimer <= 0) 
			{
				bNOBLOCKMONST = false;
			}
		}
	}
	
	int PrevHealthRatio;
	int HealthRatio;
	bool A_CheckOwnStatus()
	{
		//****************************************
		//*Get Health Ratio & Health Level Checks*
		//****************************************
		int CurrHealth = health;
		int MaxHealthTrue = (SpawnHealth() + Stamina);
		if (MaxHealthTrue > 0)
		{
			HealthRatio = (CurrHealth * 1000) / MaxHealthTrue;
			HealthRatio = clamp(HealthRatio, 0, 3000);
			if (HealthRatio != PrevHealthRatio)
			{
				if (HealthRatio > 1500)
				{
					if (HealthRatio > 2250)
					{
						if (HealthRatio > 2875)
						{
							A_SetInventory("OverFullHealth3", 1);
							A_SetInventory("OverFullHealth2", 0);
							A_SetInventory("OverFullHealth1", 0);
						}
						else
						{
							A_SetInventory("OverFullHealth3", 0);
							A_SetInventory("OverFullHealth2", 1);
							A_SetInventory("OverFullHealth1", 0);
						}
					}
					else
					{
						A_SetInventory("OverFullHealth3", 0);
						A_SetInventory("OverFullHealth2", 0);
						A_SetInventory("OverFullHealth1", 1);
					}
					A_SetInventory("NormalHealth", 1);
					A_SetInventory("DecentHealth", 0);
					A_SetInventory("LowHealth", 0);
					A_SetInventory("CriticalHealth", 0);
				}
				else
				{
					A_SetInventory("OverFullHealth3", 0);
					A_SetInventory("OverFullHealth2", 0);
					A_SetInventory("OverFullHealth1", 0);
					if (HealthRatio < 625)
					{
						if (HealthRatio < 167)
						{
							if (HealthRatio < 21)
							{
								A_SetInventory("NormalHealth", 0);
								A_SetInventory("DecentHealth", 0);
								A_SetInventory("LowHealth", 0);
								A_SetInventory("CriticalHealth", 1);
							}
							else 
							{
								A_SetInventory("NormalHealth", 0);
								A_SetInventory("DecentHealth", 0);
								A_SetInventory("LowHealth", 1);
								A_SetInventory("CriticalHealth", 0);
							}
						}
						else 
						{
							A_SetInventory("NormalHealth", 0);
							A_SetInventory("DecentHealth", 1);
							A_SetInventory("LowHealth", 0);
							A_SetInventory("CriticalHealth", 0);
						}
					}
					else
					{
						A_SetInventory("NormalHealth", 1);
						A_SetInventory("DecentHealth", 0);
						A_SetInventory("LowHealth", 0);
						A_SetInventory("CriticalHealth", 0);
					}
				}
				if (CurrHealth >= MaxHealthTrue) A_SetInventory("FullHealth", 1); else A_SetInventory("FullHealth", 0);
				
				PrevHealthRatio = HealthRatio;
			}
		}
		
		if (health < (SpawnHealth() + Stamina))
		{
			if (CountInv("NormalHealth"))
			{
				if (random(1,16) <= 2) return true;
				else return false;
			}
			else
			if (CountInv("DecentHealth"))
			{
				if (random(1,16) <= random(5,6)) return true;
				else return false;
			}
			else
			if (CountInv("LowHealth"))
			{
				if (random(1,16) <= 10) return true;
				else return false;
			}
			else
			if (CountInv("CriticalHealth"))
			{
				if (random(1,16) <= randompick(15,15,16)) return true;
				else return false;
			}
			return false;
		}
		return false;
	}

	bool A_CheckDinahStatus()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			Actor mo;
			ThinkerIterator it = ThinkerIterator.Create("DinahPlayer");
			while (mo = Actor(it.Next()))
			{
				//Console.Printf("mo: %p [%s] (gametic: %d)", mo, mo.GetClassName(), gametic);
				if (mo == player)
				{
					//Console.Printf("mo: %p [%s], player: %p [%s] (gametic: %d)", mo, mo.GetClassName(), player, player.GetClassName(), gametic);
					target = player;
					int hp = player.health;
					int maxhp = MiscItem.MaxHealthTrue;
					if (hp < maxhp && Distance3D(target) <= 4096 && CheckIfTargetInLOS(90.0, JLOSF_DEADNOJUMP, 4096))
					{
						if (player.CountInv("NormalHealth"))
						{
							if (random(1,16) <= 2) return true;
							else return false;
						}
						else
						if (player.CountInv("DecentHealth"))
						{
							if (random(1,16) <= random(5,6)) return true;
							else return false;
						}
						else
						if (player.CountInv("LowHealth"))
						{
							if (random(1,16) <= 10) return true;
							else return false;
						}
						else
						if (player.CountInv("CriticalHealth"))
						{
							if (random(1,16) <= randompick(15,15,16)) return true;
							else return false;
						}
						return false;
					}
				}
			}
		}
		
		return false;
	}
	
	void A_LandChecker(int basechance = 64)
	{
		if (landcooldown <= 0)
		{
			if (!target)
			{
				if (random(1,64) <= randompick(1,1,1,1,1,1,2)) 
				{
					state LandState = FindState("Land");
					if (LandState != null) SetState(LandState);
				}
			}
		}
		else 
		{
			landcooldown--;
			if (landcooldown <= 0) landcooldown = 0;
			//Console.Printf("landcooldown: %d", landcooldown);
		}
	}
	
	states
	{
		Spawn:
			DLIL J 0 NoDelay ThrustThingZ(0, random(4,16),0,0);
			DLIL JJJ 1 ThrustThingZ(0, random(4,16),0,0);
			DLIL J 0 A_ScaleVelocity(0.0);
		Idle:
			DLIL JJ 5 
			{
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				A_FloatLook(16);
			}
			Goto See;
		See:
			DLIL J 0
			{
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				if (random(1,4) <= 1) return resolvestate("See1");
				return resolvestate("See2");
			}
		See1:
			DLIL JJJJJJJJJJJJJJJJ 2 
			{
				A_LandChecker(64);
				A_FloatChaseCheck(2,4,6,8,0.125,0.125);
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(1,1,1,1,1,2,2,2));
				if (health <= (SpawnHealth() + Stamina) * 0.25)
				{
					if (random(1,random(7,9)) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																		 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else
				{
					if (random(1,random(14,18)) <= 1) A_EEChase("Melee","Missile",CHF_RESURRECT|CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",CHF_RESURRECT,1,3,1,1);
				}
			}
			#### # 0
			{
				forcehealplayer = false;
				forcehealself = false;
				if (A_CheckDinahStatus()) return resolvestate("AllyHeal");
				else if (A_CheckOwnStatus()) return resolvestate("SelfHeal");
				return resolvestate(null);
			}
			goto See;
		See2:
			DLIL JJJJJJJJJJJJJJJJ 2 
			{
				A_LandChecker(64);
				A_FloatChaseCheck(4,8,12,16,0.25,0.25);
				
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(1,1,1,2,2,2,2,2));
				if (health <= (SpawnHealth() + Stamina) * 0.25)
				{
					if (random(1,random(28,36)) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else
				{
					if (random(1,random(56,72)) <= 1) A_EEChase("Melee","Missile",CHF_RESURRECT|CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",CHF_RESURRECT,1,3,1,1);
				}
			}
			#### # 0
			{
				forcehealplayer = false;
				forcehealself = false;
				if (A_CheckDinahStatus()) return resolvestate("AllyHeal");
				else if (A_CheckOwnStatus()) return resolvestate("SelfHeal");
				return resolvestate(null);
			}
			goto See;
		Land:
			DLIL J 0
			{
				//Console.Printf("n34");
				bFLOATBOB = false;
				bFLOAT = false;
				bNOGRAVITY = false;
				A_Look();
			}
		LandLoop:
			DLIL J 2
			{
				//Console.Printf("pos.z: %.4f, floorz: %.4f", pos.z, floorz);
				bFLOATBOB = false;
				bFLOAT = false;
				bNOGRAVITY = false;
				ThrustThingZ(0, frandom(-4,-16),0,0);
				A_Look();
				A_CheckFloor("Stand");
				if (pos.z <= floorz) return resolvestate("Stand");
				return resolvestate(null);
			}
			loop;
		Stand:
			DLIL A 0
			{
				landcooldown = 70;
				bFLOATBOB = false;
				bFLOAT = false;
				bNOGRAVITY = false;
			}
			DLIL AAAA 5 
			{
				landcooldown = 70;
				A_Look();
				if (random(1,64) <= randompick(1,1,1,1,1,1,2)) return resolvestate("Launch");
				return resolvestate(null);
			}
			DLIL A 0
			{
				if (random(1,8) <= randompick(1,1,1,1,1,1,2)) return resolvestate("StandWink");
				else A_Look();
				return resolvestate(null);
			}
			loop;
		StandWink:
			DLIL BBBB 5 
			{
				A_Look();
				if (random(1,64) <= randompick(1,1,1,1,1,1,2)) return resolvestate("Launch");
				return resolvestate(null);
			}
			goto Stand;
		Launch:
			DLIL J 0
			{
				landcooldown = 70;
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				ThrustThingZ(0, random(4,16),0,0);
			}
			DLIL JJJ 1 ThrustThingZ(0, random(4,16),0,0);
			DLIL J 0 A_ScaleVelocity(0.0);
			Goto See;
		Heal:
			#### # 0 A_DynamicMusic(forcedplay:true,checkres:true);
			DLIL JKHI 6;
			DLIL I 8 { A_SetTics(random(3,7)*2); }
			DLIL HJ 8;
			goto See;
		Pain:
			DLIL E 8
			{
				bFLOATBOB = false;
				if (random(1,4) <= 1) 
				{
					bFLOAT = false;
					NoUFlinchCheck = true;
					if (NoUCooldown > 0) NoUCooldown *= 0.25;
				}
				else
				{
					if (random(1,6) <= randompick(1,1,1,2))
					{
						NoUFlinchCheck = true;
						if (NoUCooldown > 0) NoUCooldown *= 0.25;
					}
				}
				A_FloatPain(0,8,64);
				user_painfastchase = 8 * random(4,8);
			}
			DLIL EE 8;
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.5;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.5;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 2;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		Missile:
			DLIL J 0 
			{
				forcehealplayer = false;
				forcehealself = false;
				if (A_CheckDinahStatus()) return resolvestate("AllyHeal");
				else if (A_CheckOwnStatus()) return resolvestate("SelfHeal");

				int stopchance = (15 - (CountInv("MonsterLevel") * 0.0125));
				if (health <= (SpawnHealth() + Stamina) * 0.625) 
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.01875));
					stopchance *= 0.8125;
				}
				else if (health <= (SpawnHealth() + Stamina) * 0.3125) 
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.025));
					stopchance *= 0.65625;
				}
				else if (health <= (SpawnHealth() + Stamina) * 0.05)
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.0375));
					stopchance *= 0.525;
				}
				if (stopchance < 1) stopchance = 1;

				if (random(1,16) <= stopchance) A_Stop();
				bFLOATBOB = false;
				A_FaceTarget();
				return resolvestate(null);
			}
			DLIL J 0 A_StartSound("dancer/danceattk");
			DLIL HHHHHHHHHHHH 2 
			{
				A_SetTics(randompick(0,0,1,1,1,2,2,2,2));
				A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DLIL H 0 
			{
				int chance = 1 + (CountInv("MonsterLevel") * 0.0225);
				if (NoUFlinchCheck)
				{
					chance *= frandompick(1.5,1.5,2.0,2.0,2.5,3.0);
					NoUFlinchCheck = false;
				}
				if (random(1,8) <= chance && NoUCooldown <= 0 && !FindInventory("D_NoUCard")) return resolvestate("NoUCardAttk");

				chance = 1 + (CountInv("MonsterLevel") * 0.01667);
				if (random(1,10) <= chance) return resolvestate("SummonCardAttk");

				if (!FindInventory("D_NoUCard"))
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01125);
					if (health <= (SpawnHealth() + Stamina) * 0.625) chance *= 2;
					if (health <= (SpawnHealth() + Stamina) * 0.3125) chance *= 2;
					if (health <= (SpawnHealth() + Stamina) * 0.05) chance *= 4;
					if (random(1,16) <= chance) return resolvestate("HealCardAttk");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = 24;
				if (health <= (SpawnHealth() + Stamina) * 0.625)
				{
					A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
					if (atktype == 2)
					{
						A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("KillCardEEHelper",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		SummonCardAttk:
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = 24;
				if (health <= (SpawnHealth() + Stamina) * 0.3125)
				{
					A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
					if (atktype == 2)
					{
						A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("SummonCardEEHelper",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		NoUCardAttk:
			DLIL H 0 
			{
				bFLOATBOB = false;
				A_FaceTarget();
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			DLIL I 12
			{
				double randang = frandompick(0,22.5,45,67.5);
				double baseang = randompick(90,180,270,0);
				double zoff = (random(4,8) * 4);
				double velgenx = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				double velgenz = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				if (target && (target.pos.z > (pos.z + 16.0))) velgenz *= -1;
				//Console.Printf("zoff: %.8f, velgenx: %.8f, velgenz: %.8f", zoff, velgenx, velgenz);

				A_SpawnItemEx("NoUCardEEHelper",0,0,zoff,velgenx,0,velgenz,(baseang+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			Goto See;
		AllyHeal:
			DLIL J 0 
			{
				A_StartSound("dancer/danceattk");
				forcehealplayer = true;
			}
			DLIL HHHHHHHHHHHH 2 
			{
				A_SetTics(randompick(0,0,1,1,1,2,2,2,2));
				A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			goto HealCardAttk;
		SelfHeal:
			DLIL J 0 
			{
				A_StartSound("dancer/danceattk");
				forcehealself = true;
			}
			DLIL HHHHHHHHHHHH 2 
			{
				A_SetTics(randompick(0,0,1,1,1,2,2,2,2));
				A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			goto HealCardAttk;
		HealCardAttk:
			DLIL H 0 
			{
				bFLOATBOB = false;
				A_FaceTarget();
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = (random(4,8) * 4);
				double velgenx = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				double velgenz = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				if (target && (target.pos.z > (pos.z + 16.0))) velgenz *= -1;
				//Console.Printf("zoff: %.8f, velgenx: %.8f, velgenz: %.8f", zoff, velgenx, velgenz);

				bool success;
				actor HealCard;
				if (health <= (SpawnHealth() + Stamina) * 0.15625)
				{
					[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && HealCard)
					{
						HealCardEEHelper targ;
						targ = HealCardEEHelper(HealCard);
						if (targ && forcehealplayer) targ.alwayshealplayer = true;
						else if (targ && forcehealself) targ.alwayshealself = true;
					}
					[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && HealCard)
					{
						HealCardEEHelper targ;
						targ = HealCardEEHelper(HealCard);
						if (targ && forcehealplayer) targ.alwayshealplayer = true;
						else if (targ && forcehealself) targ.alwayshealself = true;
					}
					[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && HealCard)
					{
						HealCardEEHelper targ;
						targ = HealCardEEHelper(HealCard);
						if (targ && forcehealplayer) targ.alwayshealplayer = true;
						else if (targ && forcehealself) targ.alwayshealself = true;
					}
					[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && HealCard)
					{
						HealCardEEHelper targ;
						targ = HealCardEEHelper(HealCard);
						if (targ && forcehealplayer) targ.alwayshealplayer = true;
						else if (targ && forcehealself) targ.alwayshealself = true;
					}
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						if (success && HealCard)
						{
							HealCardEEHelper targ;
							targ = HealCardEEHelper(HealCard);
							if (targ && forcehealplayer) targ.alwayshealplayer = true;
							else if (targ && forcehealself) targ.alwayshealself = true;
						}
						[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						if (success && HealCard)
						{
							HealCardEEHelper targ;
							targ = HealCardEEHelper(HealCard);
							if (targ && forcehealplayer) targ.alwayshealplayer = true;
							else if (targ && forcehealself) targ.alwayshealself = true;
						}
					}
					if (atktype == 2)
					{
						[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(0+randang),SXF_SETMASTER);
						if (success && HealCard)
						{
							HealCardEEHelper targ;
							targ = HealCardEEHelper(HealCard);
							if (targ && forcehealplayer) targ.alwayshealplayer = true;
							else if (targ && forcehealself) targ.alwayshealself = true;
						}
						[success, HealCard] = A_SpawnItemEx("HealCardEEHelper",0,0,zoff,velgenx,0,velgenz,(180+randang),SXF_SETMASTER);
						if (success && HealCard)
						{
							HealCardEEHelper targ;
							targ = HealCardEEHelper(HealCard);
							if (targ && forcehealplayer) targ.alwayshealplayer = true;
							else if (targ && forcehealself) targ.alwayshealself = true;
						}
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		Teleporting:
			DLIL I 0
			{
				bFLOATBOB = false;
				A_UnsetShootable();
				A_UnsetSolid();
				A_SetInvulnerable();
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			DLIL I 6;
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0,0);
			#### ######################## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
		TeleportEnd:
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(1.0,0);
			DLIL I 0
			{
				A_SetShootable();
				A_SetSolid();
				A_UnsetInvulnerable();
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele2",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele2",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			DLIL III 3;
			Goto See;
		Death:
			DLIL E 0 
			{
				A_KillChildren("SilentMassacre");
				bFLOATBOB = false; 
				bFLOAT = false; 
				let globalvars = DDGlobalVariables.Get();
				globalvars.KilledDelilaClone = true;
			}
			DLIL E 0 A_SetGravity(0.25);
			DLIL E 0;
			DLIL EEEEEEEE 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DLIL F 0 A_NoBlocking();
			DLIL F 105
			{
				A_SetTics(15 * random(4,7));
			}
			DLIL F 0 
			{
				A_StopSound(18);
				A_StopSound(19);
				A_StopSound(20);
				A_StopSound(21);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.925,1.075));
				A_StartSound("vokter/tele",20,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.85,1.15));
				A_StartSound("vokter/tele",21,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.775,1.225));
			}
			DLIL F 1 A_Fadeout(frandompick(0.019,0.020,0.021),FTF_REMOVE);
			wait;
	}
}