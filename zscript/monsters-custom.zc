//**********************
//* Annoying Lost Soul *
//**********************
class LostSoulAnnoying : LostSoulNew
{
	default
	{
		Tag "Annoying Lost Soul";
		Health 125;
		DamageFunction (finaldamagedealt);
		Speed 10;
		Meleerange 80;
		Mass 75;
		ReactionTime 4;
		Painchance 160;
		DamageFactor 0.75;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 56;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 200;
		DamageFactor "Cricket", 2.5;
		Painchance "Cricket", 256;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 80;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 40;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 80;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 200;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 256;
		AttackSound "skull/melee2";
		Obituary "%o was spooked by an annoying lost soul.";
		+MISSILEEVENMORE;
		-MISSILEMORE;
	}
	
	override void Tick()
	{
		if (!bDORMANT)
		{
			int damage = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
			finaldamagedealt = damage;
		}
		super.Tick();
	}
	
	states
	{
		Spawn:
			SKUL AB 10 BRIGHT A_Look();
			Loop;
		See:
			SKUL AABB 3 BRIGHT 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			SKUL C 8 BRIGHT A_FaceTarget();
			SKUL D 4 BRIGHT 
			{
				A_SkullAttack(30);
				A_DynamicMusic();
			}
			SKUL CCDD 2 BRIGHT;
			Goto Missile+3;
		Pain:
			SKUL E 3 BRIGHT;
			SKUL E 3 BRIGHT
			{
				A_EEPain();
				user_painfastchase = 2 * random(1,8);
			}
			Goto See;
		Death:
			SKUL F 0 BRIGHT
			{
				int randvar = random(1,4);
				A_Explode((randvar*16),(randvar*16),0,0,(randvar*8));
			}
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		}
}

//*************
//* Diabloist *
//*************
class Diabloist : EECreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Diabloist";
		Health 1400;
		Radius 20;
		Height 56;
		Mass 750;
		Speed 22.5;
		BloodColor "08 08 08";
		Painchance 10;
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Fist", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are hyper suspectible to Kick attack [50x pain chance]
		Painchance "Gauntlets", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Chainsaw", 100; // Archvile are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 100; // Archvile are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 0;
		PainChance "Ice", 35;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Damagefactor "Stomp", 5;
		Damagefactor "Trample", 5;
		DamageFactor "Fist", 5;
		DamageFactor "Kick", 5;
		DamageFactor "Gauntlets", 5;
		DamageFactor "PoisonNeedle", 5;
		DamageFactor "Sceptre", 5;
		DamageFactor "Chainsaw", 5;
		DamageFactor "Melee", 5;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.02;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.48;
		PainChance "Magic", 4;
		Species "Diabloist";
		MONSTER;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+NODROPOFF;
		+NORADIUSDMG;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		MaxTargetRange 896;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
		Obituary "%o got was set ablaze by a Diabloist.";
	}
	
	void A_SetDiabloistRange()
	{
		if (exex_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * 17.92));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}

	States 
	{
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(43, "GravityAttackCheck");
		// Archvile-Type Fire Spell
		Missile1:
			DIAB G 0 BRIGHT 
			{
				if (random(1,2) <= 1)
				{
					if (random(1,3) <= 1) { return resolvestate("Missile2"); }
					else if (random(1,2) <= 1) { return resolvestate("Missile3"); }
					else { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DIAB G 0 BRIGHT A_FaceTarget();
			DIAB GH 3 Bright 
			{
				A_FaceTarget();
			}
			DIAB I 3 BRIGHT 
			{
				A_VileTarget("DFire");
				A_DynamicMusic();
			}
			DIAB HGHIHGHIHGHIGH 3 BRIGHT 
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAB I 3 BRIGHT
			{
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(40,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(140,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile1");
			DIAB G 0 BRIGHT A_Jump(64,"Missile3");
			Goto See;

		// Rapid Fire Shots
		Missile2:
			DIAB NOPNOPNOPNOPNOP 5 BRIGHT
			{
				A_FaceTarget();
				A_SpawnProjectile("DFlare",40,0,random(-4,4));
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile2");
			DIAB P 0 BRIGHT A_Jump(32,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Firestorm-Equse Attack
		Missile3:
			DIAB GHIJKLMN 5 BRIGHT 
			{
				A_FaceTarget();
			}
			DIAB O 5 BRIGHT 
			{
				A_StartSound("weapons/firbfi");
				A_FaceTarget();
				A_SpawnProjectile("DMissile",32,0,0);
				A_DynamicMusic();
			}
			DIAB P 5 BRIGHT;
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Twin Flame Snakes
		Missile4:
			DIAB [\ 8 BRIGHT // "[\"
			{
				A_FaceTarget();
			}
			DIAB ] 8 BRIGHT
			{
				A_FaceTarget();
				A_SpawnProjectile("DTracer",0,-40,0);
				A_SpawnProjectile("DTracer",0,40,0);
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile4");
			DIAB G 0 BRIGHT A_Jump(4,"Missile1");
			Goto See;

		GravityAttackCheck:
			DIAB G 0 BRIGHT A_DiabloistGravityCheck();
		Missile5:
			DIAG A 0 BRIGHT A_FaceTarget();
			DIAG A 3 BRIGHT
			{
				A_DiabloistSpawnGravityNodes();
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				A_DiabloistGravityPulse(3.0);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				A_DiabloistGravityPulse(5.25);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				A_DiabloistGravityPulse(9.75);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				A_DiabloistGravityPulse(12.00);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG DEF 4 Bright // 9/6/3
			{
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG G 4 BRIGHT
			{
				A_DiabloistGravity(user_gravitytype);
				A_DynamicMusic();
			}
			DIAG FE 3 Bright // 9/6/3
			{
				A_FaceTarget();
			}
			DIAG A 0 BRIGHT A_Jump(1,"Missile");
			Goto See;

		Spawn:
			DIAB AB 10 
			{
				A_Look();
				A_SetDiabloistRange();
			}
			Loop;
		See:
			DIAB A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.375)) 
				{
					if (health <= ((SpawnHealth() + Stamina) * 0.125)) 
					{
						A_SetInventory("Speed18PercentBonus",1);
						A_SetInventory("Speed12PercentBonus",0);
					}
					else
					{
						A_SetInventory("Speed12PercentBonus",1);
						A_SetInventory("Speed18PercentBonus",0);
					}
				}
				else
				{
					A_SetInventory("Speed18PercentBonus",0);
					A_SetInventory("Speed12PercentBonus",0);
				}
			}
			DIAB AABBCCDDEEFF 2
			{
				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 40) // 160 
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				
				A_EEChase(null,"Missile",flag2,1,3,1,1);
				A_SetDiabloistRange();
			}
			loop;

		Heal:
			DIAB [ 0 BRIGHT
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetDiabloistRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			DIAB [ 10 BRIGHT // "["
			{
				A_DiabHealProj(-24.0,-40.0);
			}
			DIAB \ 10 BRIGHT // "\"
			{
				A_DiabHealProj(0.0,0.0);
			}
			DIAB ] 10 BRIGHT // "]"
			{
				A_DiabHealProj(24.0,40.0);
			}
			Goto See;

		Pain:
			DIAB Q 5;
			DIAB Q 5 
			{
				A_EEPain();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Ice:
			DIAB Q 5;
			DIAB Q 5 A_EEPain();
			DIAB Q 10;
			DIAB Q 0 A_Jump(128, 4);
			DIAB Q 5;
			DIAB Q 0 A_Jump(128, 2);
			DIAB Q 5;
			DIAB Q 0;
			Goto See;
		Death:
			DIAB Q 7;
			DIAB R 7 A_Scream();
			DIAB S 7 A_NoBlocking();
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Ice:
			DIAB Q 5 A_GenericFreezeDeath();
			DIAB Q 1 A_FreezeDeathChunks();
			wait;
		/*
		Raise:
			DIAB Y 5 
			DIAB X 5
			DIAB WVUTSRQ 7
			goto See;
		*/
	}
}

// Aetherius's Version of The Hell Cleric
class HellClericDVDS : EECreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Beats", 1.334;
		DamageFactor "Cricket", 1.334;
		DamageFactor "Lead", 1.334;
		DamageFactor "Zap", 2.5;
		DamageFactor "Dust", 2.667;
		DamageFactor "Breakfast", 1.5;
		DamageFactor "CherryBomb", 0.875;
		DamageFactor "Spinner", 0.875;
		DamageFactor "BRocket", 0.875;
		DamageFactor "Popper", 2.667;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Bonk", 0.4;
		DamageFactor "Chop", 0.4;
		DamageFactor "Suck", 0.4;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			Loop;
		See:
			HELC AABBCCDD 2
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_EEChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			HELC E 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				int baserand = random(6,12);
				int dmg = 7;
				dmg += (12 * baserand);
				dmg *= 0.5;
				if (exex_monsterlevelenabledflags)
				{
					dmg = (7 + (CountInv("MonsterLevel") * 0.035));
					dmg += ((12 * baserand) + (CountInv("MonsterLevel") * (0.06 * baserand)));
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
					{
						dmg += (2.334 + (CountInv("MonsterLevel") * 0.001167));
						dmg += ((4 * baserand) + (CountInv("MonsterLevel") * (0.02 * baserand)));
					}
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						dmg += (1.167 + (CountInv("MonsterLevel") * 0.000584));
						dmg += ((2 * baserand) + (CountInv("MonsterLevel") * (0.01 * baserand)));
					}
					dmg *= (1.0 + (CountInv("MonsterLevel") * 0.005));
				}
				dmg *= 0.5;
				
				A_CustomComboAttack(atktype, user_tempvar1, (dmg), "imp/melee", "Melee", true);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 60)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
				A_DynamicMusic();
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_EEPain(1,random(18,22),8,0,0,25);
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}

class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}

class FlyingBalrogDVDS : EECreature
{
	default
	{
		Tag "Flying Balrog";;
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		DamageFactor "Zap", 0.5;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		DamageFactor "Cricket", 1.75;
		DamageFactor "Breakfast", 3.25;
		DamageFactor "Chop", 3.5;
		DamageFactor "Suck", 1.5;
		DamageFactor "Bonk", 0.875;
		DamageFactor "Lead", 0.334;
		DamageFactor "Dust", 0.25;
		DamageFactor "CherryBomb", 0.5625;
		DamageFactor "BRocket", 0.5625;
		DamageFactor "Spinner", 0.5625;
		DamageFactor "Popper", 1.66667;
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMCLASS;
		+BOSSDEATH;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_Look();
			Loop;
		See:
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE == true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) 
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
					A_FloatSetFChaseT(randompick(0,3,6));
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;
			
		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			FRIT EF 6 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(2,3,3,3,4,4,4,4,4,4,4,5,5,5,6); // Angle
				user_tempvar3 = (user_tempvar2 * 1.25); // Offset
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*1.5), (user_tempvar3*1.5)); // Partially Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, 0, 0); // Center
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-1.5), (user_tempvar3*-1.5)); // Partially Right
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(3,4.5,4.5,4.5,6,6,6,6,6,6,6,7.5,7.5,7.5,9); // Angle
				user_tempvar3 = (user_tempvar2 * 1.5); // Offset
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, 0, 0);
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
			}
			FRIT G 6 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;

		Death:
			FRIT I 0 Bright 
			{
				bDONTTHRUST = true;
				A_Stop();
				A_NoGravity();
			}
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",CHAN_VOICE);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_BossDeath();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Ice:
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}

// Suicide Bomber
class SuicideBomber : EECreature 
{
	default
	{
		Tag "Suicide Bomber";
		
		Health 80;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 16;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor "Zap", 1.0;
		Damagefactor "Fire", 0.25;
		Damagefactor "Ice", 1.5;
		DamageFactor "Cricket", 0.5;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Chop", 1.5;
		DamageFactor "Suck", 4.0;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Lead", 1.5;
		DamageFactor "Dust", 4.0;
		DamageFactor "CherryBomb", 0.2;
		DamageFactor "BRocket", 0.2;
		DamageFactor "Spinner", 0.2;
		DamageFactor "Popper", 5.0;
		
		MONSTER;
		+FLOORCLIP;
		+JUMPDOWN;
		+NOFEAR;
		-NOTARGET;
		-NOTARGETSWITCH;
		-NEVERTARGET;
		-NOINFIGHTING;
		seesound "suicide/sit";
		attacksound "shotguy/death";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		obituary "%o was exploded by a crazy suicide bomber.";
		DamageType "Explosive";
		MeleeRange 64.0;
	}
	
	states
	{
		Spawn:
			BMBE AB 10 A_Look();
			Loop;
		See:
			BMBE AAABBBCCCDDD 2
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			BMBE A 0 
			{
				A_StartSound("suicide/scream",CHAN_VOICE);
				A_DynamicMusic(matktype:11);
				if (exex_monsterlevelenabledflags) MeleeRange = (64.0 + (CountInv("MonsterLevel") * 0.25));
			}
			Loop;
		Melee:
			#### # 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_Die();
					A_DynamicMusic();
				}
				else
				{
					A_Die("Illus");
				}
			}
			Goto Death;
		Illus:
			#### # 1 A_CCIllusionDisperse();
			stop;
		Pain:
			BMBE A 3;
			BMBE A 3 A_EEPain();
			goto See;
		
		Death:
			BMBE M 0 bright A_DynamicMusic();
			BMBE M 5 bright 
			{
				if (CountInv("MonsterLevel") > 90)
				{
					if (random(1,2) <= 1) 
					{
						if (random(1,4) <= 1) { A_SpawnProjectile("SuicideBombUltra",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
					else 
					{ 
						if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
					}
				}
				else
				if (CountInv("MonsterLevel") > 45)
				{
					if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
				else
				{
					if (random(1,16) <= 1) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
			}
			BMBE N 5 bright A_XScream();
			BMBE O 5 A_NoBlocking();
			BMBE PQRST 5;
			TNT1 A 0 CCCardDeathCheck();
			BMBE U -1;
			stop;
		Ice:
			BMBE D 5 A_GenericFreezeDeath();
			BMBE D 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BMBE T 5;
			BMBE SRQPONM 5;
			Goto See;
	}
}

class DeathIncarnate : EECreature 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Revenant Type"
		Tag "Death Incarnate";

		Health 600;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 12;
		MeleeDamage 7;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 1.5;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Painchance "Explosive", 43;
		Damagefactor "IncarnateGlare", 0;
		Painchance "IncarnateGlare", 0;
		DamageFactor "Fire", 0.1; // Incarnates = -80% Fire Damage
		DamageFactor "CherryBomb", 0.2;
		DamageFactor "Spinner", 0.15;
		DamageFactor "BRocket", 2.0;
		DamageFactor "Popper", 2.0;
		DamageFactor "Ice", 1.75;
		DamageFactor "Suck", 0.25;
		DamageFactor "Zap", 2.5;
		Painchance "Fire", 13; // Incarnates = -80% Pain Chance
		Painchance "CherryBomb", 26;
		Painchance "Spinner", 19;
		Painchance "BRocket", 128;
		Painchance "Popper", 255;
		Painchance "Ice", 112;
		Painchance "Suck", 16;
		Painchance "Zap", 160;
		MONSTER;
		+FLOORCLIP;
		+SHORTMISSILERANGE;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		SeeSound "monster/incsit";
		PainSound "dincarnate/pain";
		DeathSound "monster/incdth";
		ActiveSound "monster/incact";
		AttackSound "monster/incatk";
		MeleeSound "monster/inchit";
		Obituary "%o was killed by a Death Incarnate's glare.";
		HitObituary "%o was beaten to death by a Death Incarnate.";
	}

	States 
	{
		Spawn:
			INCA AB 10 A_Look();
			Loop;
		See:
			INCA AABBCCDDEEFF 2
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
		Melee2:
			INCA G 0 A_Jump(128,5); // to -1
			INCA G 6  
			{
				A_SkelWhoosh();
			}
			INCA H 6
			{
				A_FaceTarget();
			}
			INCA I 6
			{
				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(7,random(1,10),0.005,0.3334,0.1667,0.005);

				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true);
			}
			Goto See;
			INCA R 5
			{
				A_SkelWhoosh();
			}
			INCA S 5
			{
				A_FaceTarget();
			}
			INCA T 5
			{
				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(6,random(1,11),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			INCA G 5
			{
				A_SkelWhoosh();
			}
			INCA H 5
			{
				A_FaceTarget();
			}
			INCA I 5
			{
				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(6,random(1,11),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			Goto See;

		Missile:
			INCA J 0
			{
				A_DynamicMusic();
			}
			INCA J 5
			{
				user_shotsfiredmax = 10;
				user_shotaccuracy = 30.0;
				user_shotzaccuracy = 0.0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); user_shotsfiredmax += 12; user_shotaccuracy = user_shotaccuracy * 1 / 4; user_shotzaccuracy = user_shotzaccuracy * 1 / 4; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); user_shotsfiredmax += 8; user_shotaccuracy = user_shotaccuracy * 2 / 4; user_shotzaccuracy = user_shotzaccuracy * 2 / 4; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); user_shotsfiredmax += 4; user_shotaccuracy = user_shotaccuracy * 3 / 4; user_shotzaccuracy = user_shotzaccuracy * 3 / 4; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
			INCA J 5;
		MissileStart:
			INCA U 10 Bright
			{
				A_FaceTarget();
				
				A_StartSound("monster/incatk",CHAN_WEAPON,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (exex_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, user_shotsfiredmax, (dmg), "DIPuff", 1024);
				}
				else
				{
					for (user_shotsfired = 0; user_shotsfired < user_shotsfiredmax; user_shotsfired++)
					{
						actor TraceShot;
						TraceShot = A_SpawnProjectile("IncarnateGlareTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
						if (TraceShot) 
						{
							EEBulletTracer TraceShotEE;
							TraceShotEE = EEBulletTracer(TraceShot);
							if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
						}
					}
				}
			}
			INCA K 10;
			INCA K 0
			{
				if (random(1,256) <= (16 + (CountInv("MonsterLevel")/15))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			Goto See;

		Pain: 
			INCA L 5;
			INCA L 5 A_EEPain();
			Goto See;

		Death:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (192 - (user_deathcounter * 24));
				if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1) chance = (96 - (user_deathcounter * 24));
				
				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.Zap:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (96 - (user_deathcounter * 24));
				if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1) chance = (48 - (user_deathcounter * 24));

				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.SpectralLow:
		Death.Sigil:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				if (random(1,256) <= 8) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;

		Death2:
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCA L 7;
			INCA M 7;
			INCA N 7 A_Scream();
			INCA O 7 A_NoBlocking();
			INCA P 7;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCX Q 0 Bright 
			{
				A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			}
			INCA Q -1;
			Stop;
		FakeDeath:
			TNT1 A 0 
			{
				user_deathcounter += 1;
			}
			INCA L 6;
			INCA M 6;
			INCA N 6 A_Scream();
			INCA O 6 A_NoBlocking();
			INCA P 6;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
		RegenCycle:
			INCA Q 0 CanRaise Thing_Raise(0);
			INCA Q 5;
			loop;

		Death.Massacre:
		Death.SilentMassacre:
		XDeath:
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			INCX D 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCX EFGHIJ 5 Bright;
			INCX K -1;
		Ice:
			INCA L 5 A_GenericFreezeDeath();
			INCA L 1 A_FreezeDeathChunks();
			wait;
		Raise:
			INCA Q 0 
			{
				A_KillChildren();
				if (user_truekill)
				{
					user_truekill = 0;
					user_deathcounter = 0;
				}
			}
			INCA Q 5;
			INCA PONML 5;
			Goto See;
	}
}

class HadesSphere : EECreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		Mass 3000;
		Speed 10;
		ExplosionDamage 112;
		ExplosionRadius 112;
		Damagefactor "IncarnateGlare", 0;
		RENDERSTYLE "Normal";
		Obituary "%o was blown away by a Hades Sphere.";
		PainChance 0;
		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+LONGMELEERANGE;
		+THRUSPECIES;
		Species "HadesSphere";
		SeeSound "monster/hadsit";
		Damagefactor "Zap", 2.56;
		Damagefactor "Suck", 10.0;
	}

	States 
	{
		Spawn:
			TNT1 A 4 Bright A_Look();
			Loop;
		See:
			HADE EFGH 4 Bright;
			goto Chase;

		Chase:
			HADE A 0 Bright A_SetShootable();
			HADE A 0 Bright A_SetSolid();
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
	
				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0
			{
				A_DynamicMusic(matktype:11);
				A_HadesSphereTeleport("PhaseOut",128,1024);
			}
			loop;

		PhaseOut:
			HADE H 0 Bright
			{
				A_DynamicMusic();
				A_UnSetSolid();
				A_UnSetShootable();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 4 Bright;
			goto Stalking;

		Stalking:
			TNT1 AAAAAAA 2 Bright A_EEChase(null,null,CHF_NOPLAYACTIVE|CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright 
			{
				A_DynamicMusic();
				if (random(1,256) <= 96) return resolvestate("PhaseIn");
				return resolvestate(null);
			}
			loop;

		PhaseIn:
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright
			{
				A_DynamicMusic();
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
			}
			Goto Chase;

		Melee:
			HADE H 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_SetInvulnerable();
					A_DynamicMusic();
				}
				else
				{
					A_Die("Illus");
				}
			}
			HADE HGFE 4 Bright;
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			Stop;
		Illus:
			#### # 1 A_CCIllusionDisperse();
			stop;
		Pain:
			Goto See;
			
		Death.HSExplode:
		Death:
			HADE E 0 Bright 
			{
				A_DynamicMusic();
				A_Noblocking();
			}
			HADE E 0 Bright A_SpawnProjectile("HSBoom",0,0,0,0);
			HADE E 0 A_UnSetInvulnerable();
			TNT1 A 1;
			TNT1 A 1;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		XDeath:
			HADE E 0 A_Jump(8,"Death");
			HADE E 0 A_UnSetInvulnerable();
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Ice:
			goto Death;
	}
}

class RailArachnotron : EECreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Arachnotron";
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		Damage 30;
		Painchance 128;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 112;
		DamageFactor "Bonk", 0.625;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 64;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 192;
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+MAP07BOSS2;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "%o was railed by an arachnotron.";
		Decal "RedRailScorch";
		Species "Arachnotron";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			RSPI AB 10 A_Look();
			Loop;
		See:
			RSPI A 20;
			RSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("baby/walk",CHAN_BODY); 
				}
				if (user_walksound >= 6) { user_walksound = 0; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			goto See+1;

		Missile:
			RSPI A 0 
			{
				A_DynamicMusic();
			}
			RSPI A 5
			{
				A_FaceTarget();
				A_StartSound("baby/chargerailgun",CHAN_WEAPON);
			}
			RSPI A 11
			{
				A_FaceTarget();
			}
			RSPI G 16
			{
				A_FaceTarget();
			}
			RSPI H 4
			{
				A_FaceTarget();
				int dmg = A_CalcDamageFormula(9,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomRailgun(dmg, 6, "AA0000", "FF0000", 0, 1, 0, "DBTRailPuff", 0, 0, 8192, 35, 1.0, 1.0, "None", -14, 270, 0, 3);
			}
			RSPI G 8;
			Goto See+1;

		Pain:
			RSPI I 3;
			RSPI I 3 A_EEPain();
			Goto See+1;
		Death:
			RSPI J 20 A_Scream();
			RSPI K 7 A_NoBlocking();
			RSPI LMNO 7;
			RSPI P -1 A_BossDeath();
			Stop;
		Ice:
			RSPI I 5 A_GenericFreezeDeath();
			RSPI I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			RSPI P 5;
			RSPI ONMLKJ 5;
			Goto See+1;
	}
}

class Belphegor : HellKnightNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hell Nobles"
		Tag "Belphegor";

		Health 1500;
		Painchance 25;
		DamageFactor "Crush", 0.55;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 12;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 50;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 88;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 63;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 63;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 19;
		BloodColor "00 64 00";

		Species "HellNoble";
		+DONTHARMSPECIES;
		SeeSound "belphegor/sight";
		PainSound "belphegor/pain";
		DeathSound "belphegor/death";
		ActiveSound "baron/active";
		Obituary "%o was slain by a Belphegor.";
		HitObituary "%o was slain by a Belphegor.";
	}
	
	States
	{
		Spawn:
			BOS3 A 0 NoDelay;
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 A_Jump(32,2); // 12.5% chance of skipping the shotsfired check and possibly shooting an extra shot/nova
			TNT1 A 0 A_JumpIf(user_shotsfired > 2, "See");
			BOS3 EF 6
			{
				A_FaceTarget();
			}
			BOS3 G 6
			{
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(random(12,13),random(1,8),0.005,0.3334,0.1667,frandom(0.005,0.00625));
				A_CustomComboAttack("BelphegorBall", user_tempvar1, (dmg), "imp/melee");
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			goto Missile;

		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_EEPain();
			Goto See;
		Death:
			BOS3 I 8;
			BOS3 J 8 A_Scream();
			BOS3 K 8;
			BOS3 L 8 A_NoBlocking();
			BOS3 MN 8;
			BOS3 O -1 A_BossDeath();
			Stop;
		Ice:
			BOS3 H 5 A_GenericFreezeDeath;
			BOS3 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS3 O 8;
			BOS3 NMLKJI 8;
			Goto See;
	}
}

class BruiserDemon : BaronOfHellNew
{
	int user_fireswipeangle; 
	int user_fireswipeframe; 
	int user_fireswipeframemax;
	int user_groundwaverepeatchance;
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Bruiser Demon";

		Health 2000;
		Radius 24;
		Height 64;
		Mass 1500;
		Speed 8;
		MissileType "BruiserBall";
		MeleeDamage 15;
		Scale 1.125;
		Painchance 15;
		PainChance "Ice", 60;
		DamageFactor "Ice", 3.33;
		DamageFactor "Fire", 0.2;
		PainChance "Fire", 7;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 11;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 6;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 6;
		DamageFactor "Suck", 1.5;
		Painchance "Suck", 9;

		Species "HellNoble";
		Monster;
		+FLOORCLIP;
		+MISSILEEVENMORE;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		SeeSound "superbaron/scream";
		PainSound "superbaron/pain";
		DeathSound "superbaron/death";
		ActiveSound "superbaron/act";
		MeleeSound "baron/melee";
		Obituary "%o was slaughtered by a Bruiser demon.";
		HitObituary "%o was cremated by a Bruiser demon.";
	}

	States
	{
		Missile:
			BRUS E 0 Bright
			{
				A_DynamicMusic();
			}
			BRUS E 0 Bright A_Jump(24, "Missile5"); // Jump to Ground Fire Wave
			BRUS E 0 Bright A_Jump(144, "MissileCheck3"); // Jump to Swipe attack #1
			// Bruiser Main Fireball #1 - Normal
		Missile1:
			BRUS EF 6 Bright
			{
				A_FaceTarget();
			}
			BRUS G 6 Bright
			{
				A_FaceTarget();

				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_SpawnProjectile("BruiserBall",user_tempvar1,0,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile2"); // Jump to Main Fireball #2
			Goto See;

		// Bruiser Main Fireball #2 - Normal
		Missile2:
			BRUS HI 6 Bright
			{
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				A_FaceTarget();

				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_SpawnProjectile("BruiserBall",user_tempvar1,0,0,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			Goto See;

		// Bruiser Fire Swipe #1
		MissileCheck3:
			BRUS E 0 Bright A_Jump(96, "Missile5"); // Jump to Ground Fire Wave Attack
		Missile3:
			BRUS E 6 Bright
			{
				A_FaceTarget();
			}
			BRUS F 4 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			BRUS F 2 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_FaceTarget();

				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = -40;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS GGGGGG 1 Bright 
			{
				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle += 10;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile4"); // Jump to Fire Swipe #2
			Goto See;

		// Bruiser Fire Swipe #2
		Missile4:
			BRUS H 6 Bright
			{
				A_FaceTarget();
			}
			BRUS I 4 Bright
			{
				A_FaceTarget();
			}
			BRUS I 2 Bright
			{
				A_FaceTarget();

				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = 40;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS JJJJJJ 1 Bright 
			{
				user_tempvar1 = 40; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle -= 10;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			Goto See;

		// Bruiser Ground Fire Wave
		Missile5:
			BRUS KL 6 Bright
			{
				A_FaceTarget();
			}
			BRUS M 2 Bright 
			{
				user_tempvar1 = 16; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_FaceTarget();

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-3),0); }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-2),0); }
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-1),0);
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,0,0);
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*1),0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*2),0); }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*3),0); }
			}
			BRUS MM 2 Bright
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
			}
			TNT1 A 0 
			{
				if (random(1,256) <= user_groundwaverepeatchance)
				{
					user_groundwaverepeatchance *= frandompick(0.5,0.25);
					return resolvestate("Missile5");
				}
				return resolvestate(null);
			}
			Goto See;

		ResetLevel:
			BRUS A 1 A_Look();
			BRUS A 1; 
			BRUS A 1 { user_ressurrectstr += random(10,20); }
			BRUS A 1;
			goto Spawn+1;
		Spawn:
			BRUS A 0 NoDelay;
			BRUS AB 10 BRIGHT A_Look();
			goto Spawn+1;
		See:
			BRUS AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				user_groundwaverepeatchance = ((8 * random(6,10)) + (CountInv("MonsterLevel") / 4.5));
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			TNT1 A 0 A_Jump(256,"Melee1","Melee2");
		Melee1:
			BRUS EF 6 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS G 6 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int dmg = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("BruiserBall",user_tempvar1,(dmg),"baron/melee");
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Melee2:
			BRUS HI 6 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int dmg = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("BruiserBall",user_tempvar1,(dmg),"baron/melee");
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Pain:
			BRUS N 5 Bright A_EEPain();
			Goto See;
		Pain.Ice:
			BRUS N 5 Bright A_EEPain();
			BRUS N 20 Bright;
			BRUS N 0 Bright A_Jump (128, 4);
			BRUS N 5 Bright;
			BRUS N 0 Bright A_Jump (128, 2);
			BRUS N 5 Bright;
			BRUS N 0 Bright;
			Goto See;
		Death:
			BRUD A 6 Bright A_Scream();
			BRUD BCD 4 Bright;
			BRUD EFG 4 Bright;
			BRUD H 4 Bright A_Fall();
			BRUD IJKLMNOP 4 Bright;
			BRUD QRSTUV 4;
			BRUD W -1 A_BossDeath();
			Stop;
		Ice:
			BRUS N 5 A_GenericFreezeDeath();
			BRUS N 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BRUD V 4;
			BRUD UTSRQPONMLKJIHGFEDCBA 4;
			Goto See;
	}
}

class BloodDemon : DemonNew
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky";
		Health 300; 
		Speed 15;
		Height 56;
		Radius 30;
		Mass 600;
		Meleedamage 10;
		ReactionTime 8;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Painchance 135;
		DamageFactor "Fire", 0.666; // Pinkies = -33% Fire Damage
		Painchance "Fire", 90; // Pinkies = -33% Pain Chance
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 135;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 157;
		DamageFactor "Chop", 0.625;
		Painchance "Chop", 113;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 202;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 240;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 240;
		MONSTER;
		+FLOORCLIP;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		//MeleeSound "blooddemon/melee";
		Obituary "%o Was chewed up and spat out by a Blood demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				user_fastchasetimermax = 8;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 300) 
					{ 
						if (random(1,1) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 225) 
					{ 
						if (random(1,2) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,3) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{ 
						if (random(1,4) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 300) 
					{ 
						if (random(1,1) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 225) 
					{ 
						if (random(1,2) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,3) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{
						if (random(1,4) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					}
					else { A_EEChase("Melee",null,0,1,3,1,1); }
				}
			}
			loop;

		Missile:
			SRG2 AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
						A_FaceTarget(); 
						A_DynamicMusic();
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(1); }
						else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("BloodDemonFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			SRG2 E 0 
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack(random(1,10)*10,"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain: 
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_EEPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}

class BloodSpectre : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre";
		
		+SHADOW
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o Was chewed up and spat out by a Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	States
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, 128);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
	}
}

class NightmareBloodSpectre : BloodDemon
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre (Nightmare)";
		Health 600;
		Speed 20;
		Meleedamage 14;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		HitObituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				A_SetTics(randompick(1,2,2,2,2,3));
				user_fastchasetimermax = 4;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,1) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) 
					{ 
						if (random(1,2) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{ 
						if (random(1,3) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) 
					{ 
						if (random(1,4) <= 1) { A_EEChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else { A_EEChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,1) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) 
					{ 
						if (random(1,2) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{ 
						if (random(1,3) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) 
					{
						if (random(1,4) <= 1) { A_EEChase("Melee","Missile",0,1,3,1,1); } else { A_EEChase("Melee",null,0,1,3,1,1); }
					}
					else { A_EEChase("Melee",null,0,1,3,1,1); }
				}
			}
			loop;

		Missile:
			SRG2 AEF 3
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						//if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						//else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
						A_FaceTarget(); 
						A_DynamicMusic();
						return resolvestate(null);
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(1); }
						else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("NightmareBloodSpectreFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			SRG2 E 0
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack((random(3,10)*random(13,14)),"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				A_SetTics(randompick(2,3,3,3,3,4));
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain: 
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_EEPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 
			{
				A_SpawnItemEx("NBloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			}
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}


class ChaingunDemon : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky [Chaingun]";

		Speed 14;
		Mass 650;
		AttackSound "";
		Obituary "%o was mowed down by a chaingun-wielding Blood Demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		DropItem "GalaApple", 64;
		DropItem "GalaApple", 4;
	}
	
	States 
	{
		Spawn: 
			CRG2 AB 10 A_Look();
			goto Spawn;
		See: 
			CRG2 AABBCCDD 2
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				user_fastchasetimermax = 8;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				if (user_fastchasetimer >= user_fastchasetimermax) { A_EEChase(null,"Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); user_fastchasetimer = 0; } else { A_EEChase(null,"Missile",0,1,3,1,1); }
			}
			loop;

		Melee: 
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += random((30 + (CountInv("MonsterLevel") / 10)),(90 + (CountInv("MonsterLevel") / 3.34))); }
					else { user_shotsfiredmax = random(30,90); }
					A_DynamicMusic();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			CRG2 H 9
			{
				A_FaceTarget();
				user_shotaccuracy = 11.25; // 22.5;
				user_shotzaccuracy = 0.0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { user_shotaccuracy = user_shotaccuracy * 5 / 8; user_shotzaccuracy = user_shotzaccuracy * 3 / 8; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 4 / 8; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 5 / 8; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 6 / 8; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { user_shotaccuracy = user_shotaccuracy * 7 / 8; user_shotzaccuracy = user_shotzaccuracy * 7 / 8; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		StartMissile:
			TNT1 E 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 E 3 bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (exex_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						EEBulletTracer TraceShotEE;
						TraceShotEE = EEBulletTracer(TraceShot);
						if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();

				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 F 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 F 3 bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (exex_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						EEBulletTracer TraceShotEE;
						TraceShotEE = EEBulletTracer(TraceShot);
						if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"MissileEnd");
			goto StartMissile;
		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CRG2 H 9
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_FaceTarget();
			}
			Goto See;

		Pain: 
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_EEPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}

class ChaingunSpectre : ChaingunDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre [Chaingun]";

		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o was mowed down by a chaingun-wielding Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
	}

	States 
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			TNT1 A 0;
			SRG2 N -1;
			Stop;
	}
}

class BloodDemonArm : EECustomGib
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class BloodSpectreArm : EECustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class NBloodSpectreArm : EECustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "Subtract";
		Alpha 0.7;
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			NightmareBloodSpectre ownerz;
			if (target) ownerz = NightmareBloodSpectre(target);
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			alphavarbase = frandom(0.00375,0.00425);

			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (ownerz) nightmarephasetimer = ownerz.nightmarephasetimer;
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class HellWarrior : EECreature 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 175;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 38;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		DropItem "PikeAmmo", 8;
		DropItem "PikeAmmoBig", 1;
	}

	States 
	{ 
		Spawn: 
			HWAR AB 10 A_Look();
			Loop;
		See: 
			HWAR AABBCCDD 3
			{
				A_HellWarShieldOff();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();

				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 16
			{
				A_HellWarShieldOn();
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR H 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Melee: 
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			HWAR J 6 A_EEPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }	
			Goto PainShield;
		PainShield:
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death: 
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60);
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Raise: 
			HWAR QPONMLK 5;
			Goto See;
	} 
}

class HellWarriorBall : EEProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 14;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.7;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HWFB AB 5 Bright;
			Loop;
		Death:
			HWFB CDE 5 Bright;
			Stop;
	}
}

class HellWarriorBall2 : EEProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		ALPHA 0.8;
		SCALE 0.4;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Zap";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (dydudebug_shieldcollision) Console.Printf("\cyHellWarriorBall2 [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (dydudebug_shieldcollision) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (dydudebug_shieldcollision) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright;
			Loop;
		Death:
			GRBA AIJKLMN 3 Bright;
			Stop;
	}
}

class HellWarriorShield : EEBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Speed 6;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	States
	{
		Spawn:
			HWSH ABCDEFGH 3;
			Loop;
		Death:
			HWSH I -1;
			Loop;
	}
}

// CyBruiser Rocket Trail
class CyBruiserTrail : EEProjectile
{
	default
	{
		Radius 3;
		Height 3;
		RenderStyle "Translucent";
		Alpha 0.67;
		Projectile;
	}
	
	States
	{
		Spawn:
			TNT1 A 3 Bright;
			PUFF ABCD 4 BRIGHT;
			Stop;
	}
}

// CyBruiser
class CyBruiserMissile : EEProjectile
{
	default
	{
		Tag "CyBruiser Missile";
		DamageType "Explosive";
		Radius 8;
		Height 12;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 1.0;
		Projectile;
		RenderStyle "Normal";
		SeeSound "monster/cbrufir";
		DeathSound "weapons/hellex";
		DONTHURTSHOOTER;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			BAL3 C 0 Bright A_SetTranslucent(0.67,1);
			BAL3 C 6 Bright;
			BAL3 D 6 Bright A_Explode(64,64,0,false,0,0,10,"BulletPuff","Explosive");
			BAL3 E 6 Bright;
			Stop;
	}
}

class CyBruiserMissileSeek : CyBruiserMissile
{
	default
	{
		Tag "CyBruiser Seeker Missile";
		DamageType "Explosive";
		Radius 6;
		Height 9;
		Speed 16;
		DamageFunction (finaldamagedealt);
		Scale 0.75;
		Projectile;
		RenderStyle "Normal";
		SeeSound "monster/cbrufir";
		DeathSound "weapons/hellex";
		DontHurtShooter;
		+SEEKERMISSILE;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			FBRS A 1 Bright;
			FBRS A 1 Bright
			{
				A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(random(12,13),random(17,18));
			}
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			FBRS A 1 Bright;
			FBRS A 1 Bright
			{
				A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,random(12,13));
			}
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			BAL3 C 0 Bright A_SetTranslucent(0.67,1);
			BAL3 C 6 Bright;
			BAL3 D 6 Bright A_Explode(48,64,0,false,0,0,10,"BulletPuff","Explosive");
			BAL3 E 6 Bright;
			Stop;
	}
}

// CyBruiser [Brusier/Archon tier Hell Noble]
class Cybruiser : EECreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hell Nobles";
		Tag "CyBruiser";
		
		Health 2000;
		Radius 24;
		Height 64;
		Mass 2000;
		Speed 8;
		Monster;
		MeleeDamage 15;
		PainChance 20;
		Painchance "Fire", 16;
		Damagefactor "Crush", 0.5;
		DamageFactor "Holy", 2;
		Painchance "Holy", 40;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 10;
		DamageFactor "BRocket", 0.25;
		Painchance "BRocket", 5;
		DamageFactor "Spinner", 0.5;
		Painchance "Spinner", 10;
		DamageFactor "Suck", 1.5;
		Painchance "Suck", 30;

		Species "HellNoble";
		+FLOORCLIP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "monster/cbrusit";
		PainSound "monster/cbrupn";
		DeathSound "monster/cbrudth";
		MeleeSound "baron/melee";
		Obituary "%o was blown away by a Cybruiser.";
		HitObituary "%o was smashed by a Cybruiser.";
	}

	States 
	{
		Spawn: 
			CBRS A 0 NoDelay;
			CBRS AB 10 A_Look(); 
			goto Spawn+1;
		See:
			CBRS A 0
			{
				user_shotsfired = 0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CBRS AABBCCDD 3
			{
				user_walksound++;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("monster/cbruwlk"); 
				}
				if (user_walksound >= 4) { user_walksound = 0; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0 A_DynamicMusic();
			CBRS E 0
			{
				if (exex_monsterlevelenabledflags)
				{
					if (random(1,256) <= (32 + (CountInv("MonsterLevel") / 3.75))) { return resolvestate("RageAttackStart"); }
				}
				else
				{
					if (random(1,256) <= 32) { return resolvestate("RageAttackStart"); }
				}
				return resolvestate(null);
			}
		MissileStart:
			CBRS E 0 A_JumpIfTargetInsideMeleeRange("Melee");
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(12); 
				}
				else
				{
					A_SetTics(6); 
				}
				A_FaceTarget();
			}
			goto Missile1;
		Missile1:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_FaceTarget();
				if (random(1,256) <= 16)
				{
					A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,0,0);
				}
				else
				{
					A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,0,0);
				}
			}
			goto Missile1End;
		Missile1End:
			CBRS F 12
			{
				A_FaceTarget();
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "See");
			goto MissileStart;

		RageAttackStart:
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(6); 
				}
				else
				{
					A_SetTics(3); 
				}
				A_FaceTarget();
			}
			goto RageAttack;
		RageAttack:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_FaceTarget();
				if (random(1,256) <= 16)
				{
					A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,0,0);
				}
				else
				{
					A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,0,0);
				}
			}
			goto RageAttackEnd;
		RageAttackEnd:
			CBRS F 6
			{
				A_FaceTarget();
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= (user_shotsfiredmax * 2), "See");
			goto RageAttackStart;

		Melee:
			TNT1 A 0 A_DynamicMusic();
			CBRS GH 8
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			CBRS I 8 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				int mldmg = A_CalcDamageFormula(15,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"baron/melee","none","Melee",1);
			}
			Goto See;

		Pain: 
			CBRS J 2;
			CBRS J 2 A_EEPain(); 
			Goto See;
		Death:
			CBRS K 6 Bright A_Scream();
			CBRS LMN 6 Bright;
			CBRS O 6 Bright A_NoBlocking();
			CBRS QR 6 Bright;
			CBRS S 6;
			CBRS T -1 A_BossDeath();
			Stop;
		Ice:
			CBRS J 5 A_GenericFreezeDeath();
			CBRS J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CBRS S 6;
			CBRS RQONMLK 6;
			Goto See;
	}
}


class Cacolantern : CacodemonNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Cacodemon Type";
		Tag "Cacolantern";

		Health 800;
		Painchance 112;

		DamageFactor "Fire", 0.125;
		Painchance "Fire", 14;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "Breakfast", 3.5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 28;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 28;
		DamageFactor "BRocket", 1.75;
		Painchance "BRocket", 196;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 256;
		DamageFactor "Dust", 3.5;
		Painchance "Dust", 256;
		DamageFactor "Popper", 0.125;
		Painchance "Popper", 14;

		bloodcolor "blue";
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		Obituary "%o was smitten by a cacolantern.";
		HitObituary "%o got too close to a cacolantern.";
		PainSound "cacodemon/pain";
	}

	States
	{
		Spawn:
			HED2 A 0 NoDelay;
			HED2 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED2 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			HED2 BC 5
			{
				A_FaceTarget();
			}
			HED2 D 5 Bright
			{
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(8,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("CacolanternBall", user_tempvar1, (mldmg), "caco/melee");
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= randompick(33,33,34))
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (CountInv("MonsterLevel") >= randompick(66,67,67))
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (CountInv("MonsterLevel") >= 100)
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			goto See;

		Pain:
			TNT1 A 0 A_ActorShadowSplit(90,256);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			HED2 G 8 A_NoBlocking();
			HED2 H 8 A_Scream();
			HED2 IJK 8;
			HED2 L -1 A_SetFloorClip();
			Stop;
		Ice:
			HED2 F 5 A_GenericFreezeDeath();
			HED2 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED2 L 8 A_UnsetFloorClip();
			HED2 KJIHG 8;
			Goto See;
	}
}

class CacolanternShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class CacolanternShadowSplit1 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class CacolanternShadowSplit2 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class CacolanternShadowSplit3 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class CacolanternShadowSplit4 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class CacolanternBall : EEEffectProjectile
{
	default
	{
		Tag "Lightning Shot";
		decal "CacoScorch";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEEffectProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEEffectProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL8 AB 4 Bright;
			Loop;
		Death:
			BAL8 CDE 6 Bright;
			Stop;
	}
}

class Abaddon : Cacolantern
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Cacodemon Type";
		Tag "Abaddon";
		Health 1200;
		Speed 12;
		Painchance 80;
		DamageFactor "Fire", 0.167;
		Painchance "Fire", 13; 
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 200;
		DamageFactor "Breakfast", 4;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 10;
		DamageFactor "CherryBomb", 0.334;
		Painchance "CherryBomb", 27;
		DamageFactor "BRocket", 1.75;
		Painchance "BRocket", 140;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 200;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 200;
		DamageFactor "Popper", 1.00;
		Painchance "Popper", 80;
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		PainSound "cacodemon/pain";
		Obituary "%o was smitten by an Abaddon.";
		HitObituary "%o became food for an Abaddon.";
		bloodcolor "red";
	}

	States
	{
		Spawn:
			HED3 A 0 NoDelay;
			HED3 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED3 A 0;
			HED3 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }

				A_FastChaseCalc(8,8);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			HED3 BC 5
			{
				A_FaceTarget();
			}
			HED3 D 5 Bright
			{
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(10,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("AbaddonBall", user_tempvar1, (mldmg), "caco/melee"); // See CacodemonBall
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (CountInv("MonsterLevel") >= 90)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			HED3 CBC 5
			{
				A_FaceTarget();
			}
			HED3 D 5 Bright
			{
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(10,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("AbaddonBall", user_tempvar1, (mldmg), "caco/melee"); // See CacodemonBall
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (CountInv("MonsterLevel") >= 90)
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			goto See;
		Pain:
			TNT1 A 0 A_ActorShadowSplit(60,256);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			HED3 G 8 A_NoBlocking();
			HED3 H 8 A_Scream();
			HED3 IJK 8;
			HED3 L -1 A_SetFloorClip();
			Stop;
		Ice:
			HED3 F 5 A_GenericFreezeDeath();
			HED3 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED3 L 8 A_UnsetFloorClip();
			HED3 KJIHG 8;
			Goto See;
	}
}

class AbaddonShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class AbaddonShadowSplit1 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class AbaddonShadowSplit2 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION) ;
			Stop;
	}
}

class AbaddonShadowSplit3 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class AbaddonShadowSplit4 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class AbaddonBall : EEProjectile
{
	default
	{
		Tag "Scorching Shot";
		decal "CacoScorch";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL3 AB 4 Bright;
			Loop;
		Death:
			BAL3 CDE 6 Bright;
			Stop;
	}
}

class NetherDarkImp : EECreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/DoomImp Type";
		Tag "Nether Dark Imp";

		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		Mass 250;
		Scale 1.2;
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
		PainChance 100;
		DamageFactor "Crush", 0.8;
		DamageFactor "Fire", 0.2;
		Painchance "Fire", 20;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 250;
		DamageFactor "CherryBomb", 0.4;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 75;
		DamageFactor "Spinner", 0.6;
		Painchance "Spinner", 60;
		DamageFactor "Popper", 1.75;
		Painchance "Popper", 175;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 250;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;

		MONSTER;
		Species "Imp";
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp4/sight";
		PainSound "darkimp4/pain";
		DeathSound "darkimp4/death";
		ActiveSound "darkimp4/active";
		MeleeSound "darkimp4/melee";
		Obituary "%o was cursed by a nether dark imp.";
		HitObituary "%o was touched by a nether dark imp.";
	}
	States
	{
		Spawn:
			DRKF A 0 NoDelay;
			DRKF AB 10 A_Look();
			goto Spawn+1;
		See:
			DRKF AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0 A_DynamicMusic();
			DRKF E 0 A_Jump (256, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8
			{
				A_FaceTarget();
			}
			DRKF G 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("NetherLightning", 32, (mldmg), "imp/melee");
			}
			Goto See;
		Missile2:
			DRKF IJ 8
			{
				A_FaceTarget();
			}
			DRKF K 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("InfernoBall", 32, (mldmg), "imp/melee");
			}
			Goto See;

		Pain:
			DRKF H 2;
			DRKF H 2 A_EEPain();
			Goto See;

		Death:
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;

		XDeath:
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Ice:
			DRKF H 5 A_GenericFreezeDeath();
			DRKF H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKF P 8;
			DRKF O 8;
			DRKF NML 6;
			Goto See;
	}
}

// Dark Imp InfernoBall Trail
class InfernoBallTrail : EEProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			ITRL ABCDEFGHIJKLMN 1 Bright A_FadeOut(0.08);
			stop;
	}
}

// Dark Imp Nether Lightning
class NetherLightningTrail : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 1;
		Damage 0;
		PROJECTILE;
		+RIPPER;
		RENDERSTYLE "ADD";
		ALPHA 0.75;
		Scale 0.75;
	}

	States
	{
		Spawn:
			NLIT A 1 A_FadeOut (0.025);
			NLIT A 0 A_Jump (32, "Spark");
			loop;
		Spark:
			NLIT A 0 A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			goto Spawn;
	}
}

class NetherLightningSpark : EEProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			NLIT BCDEFG 1 Bright;
			stop;
	}
}

class InfernoBall : EEProjectile
{
	default
	{
		Tag "Inferno Ball";
		Radius 8;
		Height 6;
		Speed 40;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}

	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			IBAL AAAABBBB 1 Bright A_SpawnItemEx ("InfernoBallTrail", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			Loop;
		Death:
			IBAL CDE 4 Bright;
			Stop;
	}
}

class NetherLightning : EEProjectile
{
	default
	{
		Tag "Nether Lightning";
		Radius 8;
		Height 6;
		Speed 48;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+RIPPER;
		Scale 0.75;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Thunder";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			NLIT A 0 Bright;
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			loop;
		Death:
			NLIT ABCDEFG 1 Bright;
			Stop;
	}
}

// Plasma Specialist
class PlasmaGuy : EECreature
{
	int PlasmaBurstLevel;
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Zombieman Type";
		Tag "Plasma Dude";

		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		MONSTER;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got burned by a plasma-rifle zombie.";
		MissileType "PlasmaBallMonster";

		DamageFactor "Crush", 1.0;
		Painchance 100;
		DamageFactor "Fire", 1.333;
		Painchance "Fire", 133;
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 111;
		DamageFactor "CherryBomb", 1.1667;
		Painchance "CherryBomb", 167;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 125;

		+AVOIDMELEE;
		+DOHARMSPECIES;
	}

	States
	{
		Spawn:
			ZMAY A 0 NoDelay;
			ZMAY AB 10 A_Look();
			goto Spawn+1;
		See:
			ZMAY A 0
			{
				user_shotsfired = 0;
			}
			ZMAY AABBCCDD 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0 A_DynamicMusic();
			ZMAY E 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }

				user_shotsfiredmax = random(random(2,3),5);
				if (exex_monsterlevelenabledflags) { user_shotsfiredmax += random((CountInv("MonsterLevel")/40),(CountInv("MonsterLevel")/10)); }
				
				user_shotsfired = 0;
				user_attacktype = 0;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") > 90) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (CountInv("MonsterLevel") > random(67,68)) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (CountInv("MonsterLevel") > 45) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (CountInv("MonsterLevel") > random(22,23)) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				A_FaceTarget();
			}
		Missile1:
			ZMAY F 3 Bright 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }

				if (user_attacktype == 0) 
				{ 
					A_SpawnProjectile("PlasmaBallMonster",32.0,0.0,0.0); 
					user_shotsfired += 1;
				}
				if (user_attacktype == 1) 
				{ 
					for (PlasmaBurstLevel = 0; PlasmaBurstLevel < random(random(1,2),random(2,3)); PlasmaBurstLevel++)
					{
						A_SpawnProjectile("PlasmaBallMonster",32.0,0.0,(0.5*random(-30,30)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-30,30))); 
					}
					user_shotsfired += 1;
				}

				A_FaceTarget();
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				user_shotsfiredmax = random(random(2,3),5);
				if (exex_monsterlevelenabledflags) { user_shotsfiredmax += random((CountInv("MonsterLevel")/40),(CountInv("MonsterLevel")/10)); }

				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			ZMAY G 3;
			ZMAY G 3 A_EEPain();
			Goto See;

		Death:
			ZMAY H 5;
			ZMAY I 5 A_Scream();
			ZMAY J 5 A_Fall();
			ZMAY K 5;
			ZMAY L -1;
			Stop;
		XDeath:
			ZMAY O 5;
			ZMAY P 5 A_XScream();
			ZMAY Q 5 A_Fall();
			ZMAY RSTU 5;
			ZMAY V -1;
			Stop;
		Ice:
			ZMAY G 5 A_GenericFreezeDeath();
			ZMAY G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ZMAY K 5;
			ZMAY JIH 5;
			Goto See;
	}
}

// Rocket Commando
class RocketLauncherGuy : EECreature
{ 
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Zombieman Type";
		Tag "Rocketeer Zombie";

		health 80;
		radius 20;
		height 56;
		Mass 100;
		speed 8;

		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance [maxed out in this case]
		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		+DOHARMSPECIES;
		seesound "shotguy/sight";
		attacksound "shotguy/attack";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		activesound "shotguy/active";
		obituary "%o was 'sploded by a rocket-launcher guy.";
	}

	States 
	{
		Spawn:
			MPO2 A 0 NoDelay;
			MPO2 AB 10 A_Look();
			goto Spawn+1;
		See:
			MPO2 A 0
			{
				user_shotsfired = 0;
			}
			MPO2 AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			MPO2 E 10 
			{
				user_shotsfired = 0;
				user_attacktype = 0;
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") > 90) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (CountInv("MonsterLevel") > random(67,68)) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (CountInv("MonsterLevel") > 45) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (CountInv("MonsterLevel") > random(22,23)) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/12.5); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(1,3); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/25); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(1,3); }
				}

				if (user_attacktype == 1)
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				}
				A_FaceTarget();
			}
		Missile1:
			MPO2 F 10 bright
			{
				if (user_attacktype == 1)
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				}
	
				if (user_attacktype == 1) 
				{ 
					A_SpawnProjectile("RocketMonster",32.0,0.0,(0.5*random(-15,15)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-15,15))); 
				}
				else
				{
					A_SpawnProjectile("RocketMonster"); 
				}
	
				user_shotsfired += 1;
				A_FaceTarget();
			}
			MPO2 E 10 
			{
				if (user_attacktype == 1)
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
					else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				}
	
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/12.5); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (exex_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/25); }
				}
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			MPO2 G 3;
			MPO2 G 3 A_EEPain();
			Goto See;
		Pain.Fist:
			MPO2 G 3;
			MPO2 G 3 A_EEPain();
			MPO2 GG 3;
			Goto See;
		Pain.Kick:
			MPO2 G 3;
			MPO2 G 3 A_EEPain();
			MPO2 GGGG 3;
			Goto See;

		Death:
			MPO2 H 5;
			MPO2 I 5 A_Scream();
			MPO2 J 5;
			MPO2 K 5 A_Fall();
			MPO2 L -1;
			Stop;
		XDeath:
			MPO2 M 5;
			MPO2 N 5 A_XScream();
			MPO2 O 5;
			MPO2 P 5 A_Fall();
			MPO2 QRST 5;
			MPO2 U -1;
			Stop;
		Raise: 
			MPO2 K 5;
			MPO2 JIH 5;
			Goto See;
	}
}

class PlasmaBallMonster : EEProjectile
{
	default
	{
		Tag "Plasma Ball";
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "%o was melted by %k's plasma gun.";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			PLSS AB 6 Bright;
			Loop;
		Death:
			PLSE AAAABBBBCCCCDDDDEEEE 1 Bright
			{
				user_projtimer++;
				if (user_projtimer > 1)
				{
					bDONTTHRUST = false;
					bPAINLESS = true;
				}

				if ((user_projtimer % 4) == 0) 
				{ 
					if (random(1,16) <= 2) { bFORCERADIUSDMG = true; }
					A_Explode(5,16,0,0,8);
				}
			}
			Stop;
	}
}