//**********************
//* Annoying Lost Soul *
//**********************
class LostSoulAnnoying : LostSoulNew
{
	default
	{
		Tag "Annoying Lost Soul";
		Health 125;
		Damage 4;
		Speed 10;
		Meleerange 80;
		Mass 75;
		ReactionTime 4;
		Painchance 160;
		DamageFactor 0.75;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 56;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 200;
		DamageFactor "Cricket", 2.5;
		Painchance "Cricket", 256;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 80;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 40;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 80;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 200;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		AttackSound "skull/melee2";
		Obituary "%o was spooked by an annoying lost soul.";
		+MISSILEEVENMORE;
		-MISSILEMORE;
	}

	states
	{
		Spawn:
			SKUL AB 10 BRIGHT A_Look();
			goto Spawn;
		See:
			SKUL AABB 3 BRIGHT 
			{
				if (random(1,256) <= 3) { A_FastChase(); } else { A_Chase(); }
			}
			Loop;
		Missile:
			SKUL C 8 BRIGHT A_FaceTarget();
			SKUL D 4 BRIGHT A_SkullAttack(30);
			SKUL CCDD 2 BRIGHT;
			Goto Missile+2;
		Pain:
			SKUL E 3 BRIGHT;
			SKUL E 3 BRIGHT A_Pain;
			Goto See;
		Death:
			SKUL F 0 BRIGHT
			{
				A_Explode(64,64,0,0,(random(1,4)*8));
			}
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream;
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking;
			SKUL J 6;
			SKUL K 6;
			Stop;
		}
}

//*************
//* Diabloist *
//*************
class Diabloist : EECreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Diabloist";
		Health 1400;
		Radius 20;
		Height 56;
		Mass 750;
		Speed 22.5;
		BloodColor "08 08 08";
		Painchance 10;
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Fist", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are hyper suspectible to Kick attack [50x pain chance]
		Painchance "Gauntlets", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Chainsaw", 100; // Archvile are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 100; // Archvile are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 0;
		PainChance "Ice", 35;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Damagefactor "Stomp", 5;
		Damagefactor "Trample", 5;
		DamageFactor "Fist", 5;
		DamageFactor "Kick", 5;
		DamageFactor "Gauntlets", 5;
		DamageFactor "PoisonNeedle", 5;
		DamageFactor "Sceptre", 5;
		DamageFactor "Chainsaw", 5;
		DamageFactor "Melee", 5;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.02;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.48;
		PainChance "Magic", 4;
		Species "Diabloist";
		MONSTER;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+NODROPOFF;
		+NORADIUSDMG;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
		Obituary "%o got was set ablaze by a Diabloist.";
	}

	States 
	{
		Missile:
			TNT1 A 0;
			DIAB G 0 A_Jump(43, "GravityAttackCheck");
		// Archvile-Type Fire Spell
		Missile1:
			DIAB G 0 BRIGHT 
			{
				if (random(1,2) <= 1)
				{
					if (random(1,3) <= 1) { return resolvestate("Missile2"); }
					else if (random(1,2) <= 1) { return resolvestate("Missile3"); }
					else { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DIAB G 0 BRIGHT A_FaceTarget();
			DIAB GH 3 Bright 
			{
				A_FaceTarget();
			}
			DIAB I 3 BRIGHT 
			{
				A_VileTarget("DFire");
			}
			DIAB HGHIHGHIHGHIGH 3 BRIGHT 
			{
				A_FaceTarget();
			}
			DIAB I 3 BRIGHT
			{
				A_FaceTarget();
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile1");
			DIAB G 0 BRIGHT A_Jump(64,"Missile3");
			Goto See;

		// Rapid Fire Shots
		Missile2:
			DIAB NOPNOPNOPNOPNOP 5 BRIGHT
			{
				A_FaceTarget();
				A_SpawnProjectile("DFlare",40,0,random(-4,4));
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile2");
			DIAB P 0 BRIGHT A_Jump(32,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Firestorm-Equse Attack
		Missile3:
			DIAB GHIJKLMN 5 BRIGHT 
			{
				A_FaceTarget();
			}
			DIAB O 5 BRIGHT 
			{
				A_StartSound("weapons/firbfi");
				A_FaceTarget();
				A_SpawnProjectile("DMissile",32,0,0);
			}
			DIAB P 5 BRIGHT;
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Twin Flame Snakes
		Missile4:
			DIAB [\ 8 BRIGHT // "[\"
			{
				A_FaceTarget();
			}
			DIAB ] 8 BRIGHT
			{
				A_FaceTarget();
				A_SpawnProjectile("DTracer",0,-40,0);
				A_SpawnProjectile("DTracer",0,40,0);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile4");
			DIAB G 0 BRIGHT A_Jump(4,"Missile1");
			Goto See;

		GravityAttackCheck:
			DIAB G 0 BRIGHT A_DiabloistGravityCheck();
		Missile5:
			DIAG A 0 BRIGHT A_FaceTarget();
			DIAG A 3 BRIGHT
			{
				A_DiabloistSpawnGravityNodes();
				A_FaceTarget();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				A_DiabloistGravityPulse(3.0);
				A_FaceTarget();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				A_DiabloistGravityPulse(5.25);
				A_FaceTarget();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				A_DiabloistGravityPulse(9.75);
				A_FaceTarget();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				A_DiabloistGravityPulse(12.00);
				A_FaceTarget();
			}
			DIAG DEF 4 Bright // 9/6/3
			{
				A_FaceTarget();
			}
			DIAG G 4 BRIGHT
			{
				A_DiabloistGravity(user_gravitytype);
			}
			DIAG FE 3 Bright // 9/6/3
			{
				A_FaceTarget();
			}
			DIAG A 0 BRIGHT A_Jump(1,"Missile");
			Goto See;

		Spawn:
			DIAB A 0 NoDelay;
			DIAB AB 10 A_Look();
			goto Spawn+1;
		See:
			DIAB A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.375)) 
				{
					if (health <= ((SpawnHealth() + Stamina) * 0.125)) 
					{
						A_SetInventory("Speed18PercentBonus",1);
						A_SetInventory("Speed12PercentBonus",0);
					}
					else
					{
						A_SetInventory("Speed12PercentBonus",1);
						A_SetInventory("Speed18PercentBonus",0);
					}
				}
				else
				{
					A_SetInventory("Speed18PercentBonus",0);
					A_SetInventory("Speed12PercentBonus",0);
				}
			}
			DIAB AABBCCDDEEFF 2
			{
				if (random (1,256) <= 40) // 160 
				{
					A_Chase(null, "Missile", CHF_FASTCHASE | CHF_RESURRECT);
				}
				else
				{
					A_Chase(null ,"Missile", CHF_RESURRECT); 
				} 
			}
			loop;

		Heal:
			DIAB [ 10 BRIGHT // "["
			{
				A_DiabHealProj(-24.0,-40.0);
			}
			DIAB \ 10 BRIGHT // "\"
			{
				A_DiabHealProj(0.0,0.0);
			}
			DIAB ] 10 BRIGHT // "]"
			{
				A_DiabHealProj(24.0,40.0);
			}
			Goto See;

		Pain:
			DIAB Q 5;
			DIAB Q 5 A_Pain();
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Fist:
			DIAB Q 5;
			DIAB Q 5 A_Pain();
			DIAB QQ 5;
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Kick:
			DIAB Q 5;
			DIAB Q 5 A_Pain();
			DIAB QQQQ 5;
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Ice:
			DIAB Q 5;
			DIAB Q 5 A_Pain();
			DIAB Q 10;
			DIAB Q 0 A_Jump(128, 4);
			DIAB Q 5;
			DIAB Q 0 A_Jump(128, 2);
			DIAB Q 5;
			DIAB Q 0;
			Goto See;
		Death:
			DIAB Q 7;
			DIAB R 7 A_Scream;
			DIAB S 7 A_NoBlocking;
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Ice:
			DIAB Q 5 A_GenericFreezeDeath();
			DIAB Q 1 A_FreezeDeathChunks();
			wait;
		/*
		Raise:
			DIAB Y 5 
			DIAB X 5
			DIAB WVUTSRQ 7
			goto See;
		*/
	}
}

// Aetherius's Version of The Hell Cleric
class HellClericDVDS : EECreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Beats", 1.334;
		DamageFactor "Cricket", 1.334;
		DamageFactor "Lead", 1.334;
		DamageFactor "Zap", 2.5;
		DamageFactor "Dust", 2.667;
		DamageFactor "Breakfast", 1.5;
		DamageFactor "CherryBomb", 0.875;
		DamageFactor "Spinner", 0.875;
		DamageFactor "BRocket", 0.875;
		DamageFactor "Popper", 2.667;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Bonk", 0.4;
		DamageFactor "Chop", 0.4;
		DamageFactor "Suck", 0.4;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 0 NoDelay; 
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			goto Spawn+1;
		See:
			HELC AABBCCDD 2
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 30) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 120) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_EEChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0;
			HELC E 4 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 45) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = 15;
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				A_CustomComboAttack(atktype, user_tempvar1, (7+(12*(random(6,12)))/2), "imp/melee", "Melee", true);
				if (exex_monsterlevelenabledflags && user_monsterlevel >= 30)
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= 60)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_EEPain(1,random(18,22),8,0,0,25);
			goto See;
		Pain.Fist:
			HELC H 2 A_EEPain(1,random(18,22),8,0,0,50);
			HELC H 1;
			goto See;
		Pain.Kick:
			HELC H 2 A_EEPain(1,random(18,22),8,0,0,75);
			HELC H 2;
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}

class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}

// Hell Cleric Shot 1
class HellClericBall : EEProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}

// Hell Cleric Shot 2
class HellClericDarkBall : EEProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}

	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}

class FlyingBalrogDVDS : EECreature
{
	default
	{
		Tag "Flying Balrog";;
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		DamageFactor "Zap", 0.5;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		DamageFactor "Cricket", 1.75;
		DamageFactor "Breakfast", 0.8;
		DamageFactor "Chop", 3.5;
		DamageFactor "Suck", 1.5;
		DamageFactor "Bonk", 0.875;
		DamageFactor "Lead", 1.25;
		DamageFactor "Dust", 0.25;
		DamageFactor "CherryBomb", 0.5625;
		DamageFactor "BRocket", 0.5625;
		DamageFactor "Spinner", 0.5625;
		DamageFactor "Popper", 1.66667;
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMCLASS;
		+BOSSDEATH;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_Look();
			Loop;
		See:
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 30) { bAVOIDMELEE == true; }
				if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) 
				{
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
					A_FloatSetFChaseT(randompick(0,3,6));
				}
				else
				{
					A_EEChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;
			
		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			FRIT EF 6 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > random(112,113)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 4; // Angle
				user_tempvar3 = 5; // Offset
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*1.5), (user_tempvar3*1.5)); // Partially Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, 0, 0); // Center
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-1.5), (user_tempvar3*-1.5)); // Partially Right
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(2); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 6; // Angle
				user_tempvar3 = 9; // Offset
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, 0, 0);
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
			}
			FRIT G 6 Bright
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > random(112,113)) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 75) { A_SetTics(4); }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;

		Death:
			FRIT I 0 Bright 
			{
				bNODAMAGETHRUST = true;
				A_Stop();
				A_NoGravity();
			}
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",CHAN_VOICE);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_BossDeath();
			Stop;
		Ice:
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}

class FlyingBalrogShot1 : EEProjectile // FatShotNew
{
	default
	{
		Tag "Flamer Shot";
		scale 1.25;
		Radius 6;
		Height 8;
		Speed 30; // 50% faster
		DamageFunction (12 * random(1,8)); // 50% stronger
		DamageType "Fire";
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	States
	{
		Spawn:
			MANF AABB 2 Bright;
			Loop;
		Death:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class FlyingBalrogShot2 : EEProjectile // RevenantTracerNew
{
	double user_tracetightness;
	int LevelOfShooter;
	default
	{
		Tag "Tracer Missile";
		scale 1.25;
		Radius 11;
		Height 8;
		Speed 15; // 50% faster
		DamageFunction (15 * random(1,8)); // 50% stronger
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE;
		+RANDOMIZE;
		SeeSound "Imp/Attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FATB AB 2 Bright A_Tracer();
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("skeleton/tracex",CHAN_7);
				A_Quake(1, 8, 0, 192, "nosound/silent");
				A_Quake(3, 8, 0, 96, "nosound/silent");
			}
			FBXP A 8 Bright;
			FBXP B 6 Bright;
			FBXP C 4 Bright;
			Stop;
	}
}

// Suicide Bomber
class SuicideBomber : EECreature 
{
	default
	{
		Tag "Suicide Bomber";
		
		Health 80;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 16;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor "Zap", 1.0;
		Damagefactor "Fire", 0.25;
		Damagefactor "Ice", 1.5;
		DamageFactor "Cricket", 0.5;
		DamageFactor "Breakfast", 0.25;
		DamageFactor "Chop", 1.5;
		DamageFactor "Suck", 4.0;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Lead", 1.5;
		DamageFactor "Dust", 4.0;
		DamageFactor "CherryBomb", 0.2;
		DamageFactor "BRocket", 0.2;
		DamageFactor "Spinner", 0.2;
		DamageFactor "Popper", 5.0;
		
		MONSTER;
		+FLOORCLIP;
		+JUMPDOWN;
		+NOFEAR;
		-NOTARGET;
		-NOTARGETSWITCH;
		-NEVERTARGET;
		-NOINFIGHTING;
		seesound "suicide/sit";
		attacksound "shotguy/death";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		obituary "%o was exploded by a crazy suicide bomber.";
		DamageType "Explosive";
		MeleeRange 64.0;
	}
	
	states
	{
		Spawn:
			BMBE AB 10 A_Look();
			goto Spawn;
		See:
			BMBE AAABBBCCCDDD 2
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 75) { A_SetTics(1); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			BMBE A 0 
			{
				A_StartSound("suicide/scream",CHAN_VOICE);
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags) MeleeRange = (64.0 + (user_monsterlevel * 0.25));
			}
			Loop;
		Melee:
			TNT1 A 0 A_Die();
			Goto Death;
		Pain:
			BMBE A 3;
			BMBE A 3 A_EEPain();
			goto See;
		
		Death:
			BMBE M 5 bright 
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (user_monsterlevel > 90)
				{
					if (random(1,2) <= 1) 
					{
						if (random(1,4) <= 1) { A_SpawnProjectile("SuicideBombUltra",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
					else 
					{ 
						if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
					}
				}
				else
				if (user_monsterlevel > 45)
				{
					if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
				else
				{
					if (random(1,16) <= 1) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
			}
			BMBE N 5 bright A_XScream();
			BMBE O 5 A_NoBlocking();
			BMBE PQRST 5;
			BMBE U -1;
			stop;
		Ice:
			BMBE D 5 A_GenericFreezeDeath();
			BMBE D 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BMBE T 5 ;
			BMBE SRQPONM 5;
			Goto See;
	}
}

// Suicide Bomber Explosions
class SuicideBomb : EEProjectile
{
	default
	{
		Tag "Suicide Bomb";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		Scale 0.75;
		PROJECTILE;
		RenderStyle "Add";
		DontHurtShooter;
		Obituary "%o was exploded by a crazy suicide bomber.";
		SeeSound "weapons/rocklx";
		DamageType "Explosion";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((64+random(-16,16)), (96+random(-24,24)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

class SuicideBombStrong : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Strong]";
		Alpha 0.925;
		Scale 1.10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((128+random(-64,64)), (128+random(-64,64)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

class SuicideBombUltra : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Ultra]";
		Alpha 0.95;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright A_Explode((256+random(-128,128)), (224+random(-112,112)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			Stop;
	}
}

class DeathIncarnate : EECreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Revenant Type"
		Tag "Death Incarnate";

		Health 600;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 12;
		MeleeDamage 7;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 1.5;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Painchance "Explosive", 43;
		Damagefactor "IncarnateGlare", 0;
		Painchance "IncarnateGlare", 0;
		DamageFactor "Fire", 0.1; // Incarnates = -80% Fire Damage
		Painchance "Fire", 13; // Incarnates = -80% Pain Chance
		MONSTER;
		+FLOORCLIP;
		+SHORTMISSILERANGE;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		SeeSound "monster/incsit";
		PainSound "dincarnate/pain";
		DeathSound "monster/incdth";
		ActiveSound "monster/incact";
		AttackSound "monster/incatk";
		MeleeSound "monster/inchit";
		Obituary "%o was killed by a Death Incarnate's glare.";
		HitObituary "%o was beaten to death by a Death Incarnate.";
	}

	States 
	{
		Spawn:
			INCA A 0 NoDelay;
			INCA AB 10 A_Look();
			goto Spawn+1;
		See:
			INCA AABBCCDDEEFF 2
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0;
		Melee2:
			INCA G 0 A_Jump(128,5); // to -1
			INCA G 6  
			{
				A_SkelWhoosh();
			}
			INCA H 6
			{
				A_FaceTarget();
			}
			INCA I 6
			{
				A_FaceTarget();
				A_CustomMeleeAttack(random(1,10)*7,"skeleton/melee","none","Melee",true);
			}
			Goto See;
			INCA R 5
			{
				A_SkelWhoosh();
			}
			INCA S 5
			{
				A_FaceTarget();
			}
			INCA T 5
			{
				A_FaceTarget();
				A_CustomMeleeAttack(random(1,11)*6,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			INCA G 5
			{
				A_SkelWhoosh();
			}
			INCA H 5
			{
				A_FaceTarget();
			}
			INCA I 5
			{
				A_FaceTarget();
				A_CustomMeleeAttack(random(1,11)*6,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			Goto See;

		Missile:
			INCA J 5
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				user_shotsfiredmax = 10;
				user_shotaccuracy = 30.0;
				user_shotzaccuracy = 0.0;
				if (exex_monsterlevelenabledflags && user_monsterlevel > 90) { A_SetTics(2); user_shotsfiredmax += 12; user_shotaccuracy = user_shotaccuracy * 1 / 4; user_shotzaccuracy = user_shotzaccuracy * 1 / 4; }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 60) { A_SetTics(3); user_shotsfiredmax += 8; user_shotaccuracy = user_shotaccuracy * 2 / 4; user_shotzaccuracy = user_shotzaccuracy * 2 / 4; }
				else if (exex_monsterlevelenabledflags && user_monsterlevel > 30) { A_SetTics(4); user_shotsfiredmax += 4; user_shotaccuracy = user_shotaccuracy * 3 / 4; user_shotzaccuracy = user_shotzaccuracy * 3 / 4; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
			INCA J 5;
		MissileStart:
			INCA U 10 Bright
			{
				A_FaceTarget();
	
				A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, user_shotsfiredmax, 3, "DIPuff", 1024);
			}
			INCA K 10;
			INCA K 0
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (random(1,256) <= (16 + (user_monsterlevel/15))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			Goto See;

		Pain: 
			INCA L 5;
			INCA L 5 A_EEPain();
			Goto See;

		Death:
			TNT1 A 0 A_Jump((192-(user_deathcounter*24)),"FakeDeath"); // 75% of the time it's a fake death
			goto Death2;

		Death2:
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCA L 7;
			INCA M 7;
			INCA N 7 A_Scream();
			INCA O 7 A_NoBlocking();
			INCA P 7;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCX Q 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCA Q -1;
			Stop;
		FakeDeath:
			TNT1 A 0 
			{
				user_deathcounter += 1;
			}
			INCA L 6;
			INCA M 6;
			INCA N 6 A_Scream();
			INCA O 6 A_NoBlocking();
			INCA P 6;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
		RegenCycle:
			INCA Q 0 CanRaise Thing_Raise(0);
			INCA Q 5;
			loop;

		Death.Massacre:
		Death.SilentMassacre:
		XDeath:
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			INCX D 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCX EFGHIJ 5 Bright;
			INCX K -1;
		Ice:
			INCA L 5 A_GenericFreezeDeath();
			INCA L 1 A_FreezeDeathChunks();
			wait;
		Raise:
			INCA Q 0 
			{
				A_KillChildren();
				if (user_truekill)
				{
					user_truekill = 0;
					user_deathcounter = 0;
				}
			}
			INCA Q 5;
			INCA PONML 5;
			Goto See;
	}
}

// Death Incarnate Glare Puff
class DIPuff : EEProjectile
{
	default
	{
		Tag "Dark Glare";
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		+PUFFONACTORS;
		RENDERSTYLE "Add";
		DamageType "IncarnateGlare";
	}
	
	States
	{
		Spawn:
			INPF ABCDE 3 Bright;
			Stop;
	}
}

class HadesSphere : EECreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		Mass 3000;
		Speed 10;
		ExplosionDamage 112;
		ExplosionRadius 112;
		Damagefactor "IncarnateGlare", 0;
		RENDERSTYLE "Normal";
		Obituary "%o was blown away by a Hades Sphere.";
		PainChance 0;
		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMCLASS;
		+LONGMELEERANGE;
		+THRUSPECIES;
		Species "HadesSphere";
		SeeSound "monster/hadsit";
		Damagefactor "Zap", 2.56;
	}

	States 
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 4 Bright A_Look();
			goto Spawn+1;
		See:
			HADE EFGH 4 Bright;
			goto Chase;

		Chase:
			HADE A 0 Bright A_SetShootable();
			HADE A 0 Bright A_SetSolid();
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				int user_monsterlevel = CountInv("MonsterLevel");
				if (exex_monsterlevelenabledflags && user_monsterlevel > 120) { A_SetTics(1); }
	
				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0
			{
				A_HadesSphereTeleport("PhaseOut",128,1024);
			}
			loop;

		PhaseOut:
			HADE H 0 Bright
			{
				A_UnSetSolid();
				A_UnSetShootable();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 4 Bright;
			goto Stalking;

		Stalking:
			TNT1 AAAAAAA 2 Bright A_EEChase(null,null,CHF_NOPLAYACTIVE|CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright A_Jump(96,"PhaseIn");
			loop;

		PhaseIn:
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
			}
			Goto Chase;

		Melee:
			HADE H 0 A_SetInvulnerable();
			HADE HGFE 4 Bright;
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			Stop;
			
		Pain:
		Pain.Fist:
		Pain.Kick:
			Goto See;
			
		Death.HSExplode:
		Death:
			HADE E 0 Bright A_Noblocking();
			HADE E 0 Bright A_SpawnProjectile("HSBoom",0,0,0,0);
			HADE E 0 A_UnSetInvulnerable();
			TNT1 A 1;
			TNT1 A 1;
			Stop;
		XDeath:
			HADE E 0 A_Jump(8,"Death");
			HADE E 0 A_UnSetInvulnerable();
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			Stop;
		Ice:
			goto Death;
	}
}

// Hades Sphere Explosions
class HSBoom : EEProjectile
{
	default
	{
		Tag "Explosion";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		PROJECTILE;
		RENDERSTYLE "ADD";
		DONTHURTSHOOTER;
		Obituary "%o was blown away by a Hades Sphere.";
		SeeSound "monster/hadexp";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			HADE M 4 Bright 
			{
				A_HadesSphereExplode(112,112);
			}
			HADE NOPQ 5 Bright;
			Stop;
	}
}
