//==============================================================================
//				MAIN STUFF
//==============================================================================
class LDLWillBecomeLegendary : PlaceHolderItem { }
class LDLLegendaryEvolved : PlaceHolderItem { }

class LDLegendaryMonsterTracker : PlaceHolderItem
{
	bool evolved;
	override void Tick()
	{
		super.Tick();
		
		if (owner)
		{
			if (GetAge() >= 1)
			{
				int StartTID = owner.TID;
				
				int EESpawnHealth = owner.SpawnHealth() + owner.Stamina;
				int EvolveHPLevel = EESpawnHealth / random(2,4);
				int SpawnHealthX = owner.SpawnHealth() + owner.Stamina;
				owner.bBUDDHA = true;
				int RealSpawnHealth = owner.SpawnHealth() + owner.Stamina;
				int newtid = 5000 + random(1,100);
				bool evolved = false;
				
				If (owner.CountInv("LDLWillBecomeLegendary") > 0) return;
				owner.A_SetInventory("LDLWillBecomeLegendary", 1);
				
				if (LD_legendarydebug) Console.Printf("\cdLD DEBUG\c-: \ca%s \c-(%s / %d) has been \cdLEGENDARIFIED\c-", owner.GetClassName(), StartTID, newtid);
				
				/*
				if (!SpawnForced("DRPGLegenDoomActive", 0, 0, 0, tid, 0))
				{
						if (owner.bBOSS) SpawnHealthX *= LD_legendaryhealthboss / 100;
												else SpawnHealthX *= LD_legendaryhealthboss / 100;        
				}
				else
						Thing_Remove(tid);
				*/
				int health = owner.health;
				int olddamagemulti = owner.DamageMultiply;
				int newdamagemulti;
				int olddamagereduce = owner.DamageFactor;
				int newdamagereduce;
				int oldspeed = owner.Speed;
				int newspeed;
				int oldmass = owner.Mass;
				int newmass;
				
				if (health > 0 && health <= EvolveHPLevel && !evolved)
				{
					owner.health = SpawnHealthX;
					owner.Stamina = (SpawnHealthX - owner.SpawnHealth());
					owner.A_SetInventory("LDLLegendaryEvolved", 1);
					if (owner.bBUDDHA) owner.bBUDDHA = false;
					if (owner.bBOSS)
					{
						GiveInventory("LDLegendaryMonsterBossStatBoost", 1);
				
						newdamagemulti = (olddamagemulti * LD_legendarydamageboss);
						if (LD_legendarydebug) Console.Printf("New DamageMulti: %.8f", newdamagemulti);
						owner.DamageMultiply = newdamagemulti;
				
						newdamagereduce = (olddamagereduce * LD_legendarydefenseboss);
						if (LD_legendarydebug) Console.Printf("New DamageReduce: %.8f", newdamagereduce);
						owner.DamageFactor = newdamagereduce;
						
						newmass = oldmass * LD_legendarymassboss / 100;
						if (LD_legendarydebug) Console.Printf("New Mass: %d", newmass);
						owner.Mass = newmass;
					}
					else
					{
						GiveInventory("LDLegendaryMonsterStatBoost", 1);
				
						newdamagemulti = (olddamagemulti * LD_legendarydamage);
						if (LD_legendarydebug) Console.Printf("New DamageMulti: %.8f", newdamagemulti);
						owner.DamageMultiply = newdamagemulti;
				
						newdamagereduce = (olddamagereduce * LD_legendarydefense);
						if (LD_legendarydebug) Console.Printf("New DamageReduce: %.8f", newdamagereduce);
						owner.DamageFactor = newdamagereduce;
						
						newmass = oldmass * LD_legendarymass / 100;
						if (LD_legendarydebug) Console.Printf("New Mass: %d", newmass);
						owner.Mass = newmass;
					}            
					evolved = true;
				}
				
				if (owner.health <= 0 && evolved)
				{
					if (owner.bBOSS)
					{
						if (evolved) A_SpawnItemEx("LDLiteEEBossItem",4.0,4.0,24.0,8.0,8.0,-4.0,owner.angle,SXF_ABSOLUTEANGLE|SXF_NOCHECKPOSITION);
						owner.GiveInventory("LDLegendaryMonsterDed", 1);
					}
					else
					{
						if (evolved) A_SpawnItemEx("LDLiteEEItem",4.0,4.0,24.0,8.0,8.0,-4.0,owner.angle,SXF_ABSOLUTEANGLE|SXF_NOCHECKPOSITION);
						owner.GiveInventory("LDLegendaryMonsterDed", 1);
					}
					Destroy();
				}
			}
		}
		else Destroy();
	}
}

class LDPermanentInventory : Inventory
{
	default
	{
		//	+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.IGNORESKILL;
		inventory.maxamount 1;
	}
}

class LDCustomFunction : CustomInventoryExt
{
	default
	{
		-COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
		Pickup:
			TNT1 A 0;
			TNT1 A 0;
			Stop;
	}
}

class LDVisualIcon : EEBaseZSC
{
	default
	{
		Radius 16;
		Height 8;
		Scale 0.8;
		Alpha 0.85;
		RenderStyle "Add";
		+NOGRAVITY;
		+THRUACTORS;
	}
	
	States
	{
		Spawn:
			TNT1 AA 1 Bright;
			Stop;
	}
}

class LDMaxHax : EEBaseZSC
{
	default
	{
		+NOGRAVITY;
		+THRUACTORS;
		+NOTONAUTOMAP;
		+NOTIMEFREEZE;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

//==============================================================================
//				LEGENDARY SELECTION
//==============================================================================
class LDLegendaryMonsterToken : LDPermanentInventory {}
class LDLegendaryMonsterTransformed : LDPermanentInventory {}

//==============================================================================
//			LEGENDARY GENERATION
//==============================================================================
class LDLegendaryMonsterStatChooser : LDCustomFunction
{
	States
	{
		Pickup:
			TNT1 A 0
			{
				if (bBOSS) return resolvestate("BossStatBoost");
				return resolvestate(null);
			}
			TNT1 A 0 A_GiveInventory ("LDLegendaryMonsterStatBoost", 1);
			Stop;
		BossStatBoost:
			TNT1 A 0 A_GiveInventory ("LDLegendaryMonsterBossStatBoost", 1);
			Stop;
	}
}

class LDLegendaryMonsterStatBoost : LDCustomFunction
{
	States
	{
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("Draw_Pentagram", 0, radius*2);
			TNT1 A 0 A_StartSound("effects/legendaryenemyloop", CHAN_6, CHANF_LOOPING, 0.8, ATTN_NORM);
			TNT1 A 0 A_StartSound("effects/legendaryenemy", CHAN_7, CHANF_DEFAULT, 1.0, ATTN_NONE);
			TNT1 A 0
			{
				bALWAYSFAST = true;
				bMISSILEMORE = true;
				bMISSILEEVENMORE = true;
				bNOINFIGHTING = true;
				bNOTARGET = true;
				bJUMPDOWN = true;
				bQUICKTORETALIATE = true;
				bNOFEAR = true;
				//bNOTIMEFREEZE = true;
				bSEEINVISIBLE = true;
				bDONTDRAIN = true;
				bNOICEDEATH = true;
				bDONTGIB = true;
				bDROPOFF = true;
				bBRIGHT = true;
				bBUDDHA = false;
			}
			Stop;
	}
}

class LDLegendaryMonsterBossStatBoost : LDCustomFunction
{
	States
	{
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("Draw_Pentagram", 0, radius*2);
			TNT1 A 0 A_StartSound("effects/legendaryenemyloop", CHAN_6, CHANF_LOOPING, 0.8, ATTN_NORM);
			TNT1 A 0 A_StartSound("effects/legendaryenemy", CHAN_7, CHANF_DEFAULT, 1.0, ATTN_NONE);
			TNT1 A 0 A_StartSound("effects/legendaryenemyboss", CHAN_5, CHANF_DEFAULT, 1.0, ATTN_NONE);
			TNT1 A 0 
			{
				bALWAYSFAST = true;
				bMISSILEMORE = true;
				bMISSILEEVENMORE = true;
				bNOINFIGHTING = true;
				bNOTARGET = true;
				bQUICKTORETALIATE = true;
				bNOFEAR = true;
				//bNOTIMEFREEZE = true;
				bSEEINVISIBLE = true;
				bDONTDRAIN = true;
				bNOICEDEATH = true;
				bDONTGIB = true;
				bDROPOFF = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				bBRIGHT = true;
				bBUDDHA = false;
			}
			Stop;
	}
}

//==============================================================================
//			LEGENDARY EFFECTS
//==============================================================================
// Removes the special effects from the legendary monsters on death
class LDLegendaryMonsterDed : LDCustomFunction
{
	States
	{
		Pickup:
			TNT1 A 0 ;
			TNT1 A 0 
			{
				A_StopSound(6);
				bBRIGHT = false;
			}
			Stop;
	}
}

// Constantly alternates visuals based on maxhax funtiems
class LDLegendaryMonsterVisualEffectMaker : LDCustomFunction
{
	States
	{
		Pickup:
			TNT1 A 0 A_JumpIfInventory ("LDLegendaryMonsterVisualEffectAlternator", 1, "Pickup2");
			TNT1 A 0 A_GiveInventory ("LDLegendaryMonsterVisualEffectAlternator", 1);
			TNT1 A 0 A_SpawnItemEx ("LDLegendaryMonsterVisualEffect1", -1,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
			TNT1 AAA 0 A_SpawnParticle ("Red", SPF_FULLBRIGHT | SPF_RELPOS | SPF_NOTIMEFREEZE, random(random(1,3),random(7,9))*5, random(2,7), 0, frandom(-(radius*1.2),(radius*1.2)),frandom(-(radius*1.2),(radius*1.2)), frandom(0,(height*1.2)), 0,0,frandom(0.05,1.8), 0,0,0.25, 0.8, -1);
			Stop;
		Pickup2:
			TNT1 A 0 A_TakeInventory ("LDLegendaryMonsterVisualEffectAlternator", 1);
			TNT1 A 0 A_SpawnItemEx ("LDLegendaryMonsterVisualEffect2", -1,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
			TNT1 AAA 0 A_SpawnParticle ("Black", SPF_FULLBRIGHT | SPF_RELPOS | SPF_NOTIMEFREEZE, random(random(1,3),random(7,9))*5, random(2,7), 0, frandom(-(radius*1.2),(radius*1.2)),frandom(-(radius*1.2),(radius*1.2)), frandom(0,(height*1.2)), 0,0,frandom(0.05,1.8), 0,0,0.25, 0.8, -1);
			Stop;
	}
}

class LDLegendaryMonsterVisualEffectAlternator : LDPermanentInventory {}

class LDLegendaryMonsterVisualEffect1 : LDVisualIcon
{
	default
	{
		RenderStyle "AddStencil";
		StencilColor "Red";
		Scale 1.0;
		Alpha 1.0;
		-VISIBILITYPULSE;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			#### # 0 Bright;
			#### # 0 Bright A_FadeTo (alpha * 0.5, 1, 0);
			#### # 0 Bright ThrustThingZ (0, 1, 0, 0);
			#### # 0 A_Jump (256, "SpawnLoop");
			Goto SpawnLoop;
		SpawnLoop:
			#### # 0 Bright A_FadeTo (0, 0.12, 1);
			#### # 1 Bright Light("LDMonsterGlow1") A_SetScale (scale.x*frandom(1.02,1.04), scale.y*frandom(1.04,1.08));
			Goto SpawnLoop;
	}
}

class LDLegendaryMonsterVisualEffect2 : LDLegendaryMonsterVisualEffect1
{
	default
	{
		RenderStyle "Stencil";
		StencilColor "Black";
	}
	
	States
	{
		SpawnLoop:
			#### # 0 Bright A_FadeTo (0, 0.12, 1);
			#### # 1 Bright Light("LDMonsterGlow2") A_SetScale (scale.x*frandom(1.02,1.04), scale.y*frandom(1.04,1.08));
			Goto SpawnLoop;
	}
}

//==============================================================================
//			LEGENDARY MAP MARKERS
//==============================================================================
// These appear on the automap if enabled in the options
class LDLegendaryMonsterMarker : MapMarker
{
	default
	{
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			SCUL A -1;
			Stop;
	}
}

class LDLegendaryMonsterBossMarker : MapMarker
{
	default
	{
		Scale 0.8;
	}
	
	States
	{
		Spawn:
			SCUL B -1;
			Stop;
	}
}

//==============================================================================
//				LOOT GENERATION
//==============================================================================
class LDLiteEEArmorSpawner : RandomSpawner2
{
	default
	{
		DropItem "ArmorScrap", 256, 467;
		DropItem "KnightGown", 256, 26;
		DropItem "KnightGown2", 256, 13;
		DropItem "KnightGown3", 256, 4;
		DropItem "KnightGown4", 256, 1;
	}
}

class LDLiteEEAmmoSpawner : RandomSpawner2
{
	default
	{
		DropItem "Clip", 256, 3;
		DropItem "Shell", 256, 3;
		DropItem "RocketAmmo", 256, 1;
		DropItem "Cell", 256, 1;
	}
}

class LDLiteEEItemSpawner : RandomSpawner2
{
	default
	{
		DropItem "GalaApple", 256, 2048;
		DropItem "AppleWine", 256, 256;
		DropItem "TurkeyDinner", 256, 64;
		DropItem "CherryBombPickup", 96, 32;
		DropItem "SpinnerPickup", 96, 32;
		DropItem "BRocketPickup", 96, 32;
		DropItem "PopperPickup", 96, 32;
		DropItem "FuryPotion", 96, 8;
		DropItem "TimePotion", 96, 4;
		DropItem "RandomAppleSpawnerAlways", 1, 1;
	}
}

class LDLiteEEItem : LDMaxHax
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx ("LDLiteEEItemSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
				if (random(1,16) == 1) { A_SpawnItemEx ("LDLiteEEItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
				if (random(1,256) == 1) { A_SpawnItemEx ("LDLiteEEItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
				if (random(1,4096) == 1) { A_SpawnItemEx ("LDLiteEEItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }

				if (CallACS("CheckCharacterClass") != 2)
				{
					A_SpawnItemEx ("LDLiteEEArmorSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					if (random(1,16) == 1) { A_SpawnItemEx ("LDLiteEEArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
					if (random(1,256) == 1) { A_SpawnItemEx ("LDLiteEEArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
					if (random(1,4096) == 1) { A_SpawnItemEx ("LDLiteEEArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
	
					A_SpawnItemEx ("LDLiteEEAmmoSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					if (random(1,16) == 1) { A_SpawnItemEx ("LDLiteEEAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
					if (random(1,256) == 1) { A_SpawnItemEx ("LDLiteEEAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
					if (random(1,4096) == 1) { A_SpawnItemEx ("LDLiteEEAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION); }
				}
			}
			TNT1 A 2;
			Stop;
	}
}

class LDLiteEEBossArmorSpawner : RandomSpawner2
{
	default
	{
		DropItem "ArmorScrap", 256, 118;
		DropItem "KnightGown", 256, 52;
		DropItem "KnightGown2", 256, 24;
		DropItem "KnightGown3", 256, 8;
		DropItem "KnightGown4", 256, 2;
	}
}

class LDLiteEEBossAmmoSpawner : RandomSpawner2
{
	default
	{
		DropItem "ClipBox", 256, 3;
		DropItem "ShellBox", 256, 3;
		DropItem "RocketBox", 256, 1;
		DropItem "CellPack", 256, 1;
	}
}

class LDLiteEEBossItemSpawner : RandomSpawner2
{
	default
	{
		DropItem "GalaApple", 256, 256;
		DropItem "AppleWine", 256, 128;
		DropItem "TurkeyDinner", 256, 32;
		DropItem "CherryBombPickup", 96, 16;
		DropItem "SpinnerPickup", 96, 16;
		DropItem "BRocketPickup", 96, 16;
		DropItem "PopperPickup", 96, 16;
		DropItem "FuryPotion", 96, 8;
		DropItem "TimePotion", 96, 4;
		DropItem "RandomAppleSpawnerAlways", 1, 2;
	}
}

class LDLiteEEBossItem : LDMaxHax
{
  States
  {
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
				if (random(1,4) == 1) 
				{
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
				}
				if (random(1,16) == 1) 
				{
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
				}
				if (random(1,64) == 1) 
				{
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossItemSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
				}

				if (CallACS("CheckCharacterClass") != 2)
				{
					A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					if (random(1,4) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
					if (random(1,16) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
					if (random(1,64) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossArmorSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
	
					A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x,vel.y,vel.z, 0, SXF_NOCHECKPOSITION);
					if (random(1,4) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
					if (random(1,16) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
					if (random(1,64) == 1) 
					{
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
						A_SpawnItemEx ("LDLiteEEBossAmmoSpawner", 0,0,0, vel.x+random(-8,8),vel.y+random(-8,8),vel.z+random(-8,8), 0, SXF_NOCHECKPOSITION);
					}
				}
			}
			TNT1 A 2;
			Stop;
	}
}