class DDStatusBarMain : BaseStatusBar
{
	mixin IPCostCheck;

	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mArmorInterpolator;
	DynamicValueInterpolator mEXPInterpolator;
	int prevhealthtick, healthtick;
	int prevarmortick, armortick;
	int prevEXPtick, EXPtick;
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mBigFont;
	HUDFont mSmallFont;
	HUDFont mArmSaveFont;
	HUDFont mConFont;
	HUDFont mDDSFont;
	HUDFont mDDMFont;
	HUDFont mDDLFont;
	HUDFont mDDLFont2;
	InventoryBarState diparms;
	InventoryBarState diparms_sbar;
	private int wiggle;
	int HPDmgShakeX, HPDmgShakeY;
	int APDmgShakeX, APDmgShakeY;
	int IPDmgShakeX, IPDmgShakeY;
	double HPRecPulseSpd;
	double APRecPulseSpd;
	double IPRecPulseSpd;
	int HPShakeInc, APShakeInc, IPShakeInc;
	int HPPulseInc, APPulseInc;
	int HPPulseTimer, APPulseTimer;

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 200); // This sets the pixel height of the status bar and the base resolution
		//SetSize(42, 320, 200); // 42, 320, 200

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_RAVEN";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0") + 1, Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_RAVEN";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		fnt = "BIGFONT";
		mBigFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 2, 2);
		fnt = "CONFONT";
		mSmallFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		fnt = "CONFONT";
		mConFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		fnt = "CONFONT";
		mArmSaveFont = HUDFont.Create(fnt, fnt.GetCharWidth("0") - 1, Mono_CellLeft, 1, 1);

		fnt = "INDEXFONT_DD";
		mDDSFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DDM";
		mDDMFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DDL";
		mDDLFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DDL";
		mDDLFont2 = HUDFont.Create(fnt, 0, false, 1, 1);
		diparms = InventoryBarState.Create(mIndexFont);
		diparms_sbar = InventoryBarState.CreateNoBox(mIndexFont, boxsize:(31, 31), arrowoffs:(0,-10));
		if (dydudebug_hudinitdisplays)
		{
			Console.Printf("diparms: boxsize: %d x %d, boxofs: %d x %d, selectofs: %d x %d, innersize: %d x %d", diparms.boxsize.x, diparms.boxsize.y, diparms.boxofs.x, diparms.boxofs.y, diparms.selectofs.x, diparms.selectofs.y, diparms.innersize.x, diparms.innersize.y);
			Console.Printf("diparms_sbar: boxsize: %d x %d, boxofs: %d x %d, selectofs: %d x %d, innersize: %d x %d", diparms_sbar.boxsize.x, diparms_sbar.boxsize.y, diparms_sbar.boxofs.x, diparms_sbar.boxofs.y, diparms_sbar.selectofs.x, diparms_sbar.selectofs.y, diparms_sbar.innersize.x, diparms_sbar.innersize.y);
		}
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mEXPInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		healthtick = armortick = EXPtick = 8;
	}
	
	override int GetProtrusion(double Scaleratio) const
	{
		return Scaleratio > 0.7? 8 : 0;
	}

	override void NewGame ()
	{
		Super.NewGame();
		mHealthInterpolator.Reset(0);
		mArmorInterpolator.Reset(0);
		mEXPInterpolator.Reset(0);
	}

	override void Tick()
	{
		Super.Tick();
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));
		double tickinc = 0.1;
		if (MiscItem && MiscItem.itemtimer <= 2) tickinc = 1.0;
		healthtick = CPlayerPawn.CountInv("PlayerMaxHP") * tickinc;
		if (CPlayerPawn.GetClassName() == "RatPlayer") healthtick = (CPlayerPawn.CountInv("PlayerMaxHP") * 0.30) * tickinc;
		if (healthtick < 1) healthtick = 1;
		if (healthtick != prevhealthtick) mHealthInterpolator = DynamicValueInterpolator.Create(CPlayerPawn.health, 0.25, 1, healthtick);
		name armorclasstype = "KGArmor";
		let armor = KGArmor(CPlayerPawn.FindInventory(armorclasstype));
		if (armor != null && armor.Amount > 0) 
		{
			if (MiscItem)
			{
				if (MiscItem.KnightGownTier == 1) armortick = MiscItem.ArmorItemMax1 * tickinc;
				if (MiscItem.KnightGownTier == 2) armortick = MiscItem.ArmorItemMax2 * tickinc;
				if (MiscItem.KnightGownTier == 3) armortick = MiscItem.ArmorItemMax3 * tickinc;
				if (MiscItem.KnightGownTier == 4) armortick = MiscItem.ArmorItemMax4 * tickinc;
			}
			if (armortick < 1) armortick = 1;
			if (armortick != prevarmortick) mArmorInterpolator = DynamicValueInterpolator.Create(armor.Amount, 0.25, 1, armortick);
		}
		EXPtick = CPlayerPawn.CountInv("ExpPtsNeeded") * tickinc;
		if (EXPtick < 1) EXPtick = 1;
		if (EXPtick != prevEXPtick) mEXPInterpolator = DynamicValueInterpolator.Create(CPlayerPawn.CountInv("ExpPts"), 0.25, 1, EXPTick);
		//Console.Printf("HealthTick: %d [%d], ArmorTick %d [%d], EXPTick %d [%d]", healthtick, prevhealthtick, armortick, prevarmortick, EXPtick, prevEXPtick);

		mHealthInterpolator.Update(CPlayerPawn.health);
		if (armor != null && armor.Amount > 0) mArmorInterpolator.Update(armor.Amount);
		mEXPInterpolator.Update(CPlayerPawn.CountInv("ExpPts"));
		
		prevhealthtick = healthtick;
		prevarmortick = armortick;
		prevEXPtick = EXPtick;

		// wiggle the chain if it moves
		if (Level.time & 1)
		{
			wiggle = (mHealthInterpolator.GetValue() != CPlayerPawn.health) && Random[ChainWiggle](0, 1);
		}
	}
	
	//============================================================================
	//
	// DrawInventoryBar
	//
	// This function needs too many parameters, so most have been offloaded to
	// a struct to keep code readable and allow initialization somewhere outside
	// the actual drawing code.
	//
	//============================================================================
	
	// Except for the placement information this gets all info from the struct that gets passed in.
	void DrawInventoryBar(InventoryBarState parms, Vector2 position, int NumFields, int flags = 0, double BGAlpha = 1.)
	{
		if (dydudebug_invbardisplays) Console.Printf("\c[yellow][DrawInventoryBar Init]\c- boxsize: %d x %d, selectofs: %d x %d", parms.boxsize.x, parms.boxsize.y, parms.selectofs.x, parms.selectofs.y);
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));
		
		Font fnt = "INDEXFONT_DD";
		parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		parms.box = TexMan.CheckForTexture("ARTIBOXD", TexMan.TYPE_MiscPatch);
		parms.selector = TexMan.CheckForTexture("SELECTBO", TexMan.TYPE_MiscPatch);
		if (dydudebug_invbarfix)
		{
			parms.boxsize = (30, 30);
			parms.boxofs = (2, 2);
			parms.selectofs = (0, 0);
			parms.innersize = (26, 26);
		}
		
		double width = parms.boxsize.X * NumFields;
		[position, flags] = AdjustPosition(position, flags, width, parms.boxsize.Y);
		
		CPlayerPawn.InvFirst = ValidateInvFirst(NumFields);
		if (CPlayerPawn.InvFirst == null) return;	// Player has no listed inventory items.
		
		Vector2 boxsize = parms.boxsize;
		// First draw all the boxes
		for (int i = 0; i < NumFields; i++)
		{
			DrawTexture(parms.box, position + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, BGAlpha);
		}
		
		// now the items and the rest
		
		Vector2 ItemPos = position + boxsize / 2;
		Vector2 TextPos = position + boxsize - (1, 1 + parms.amountfont.mFont.GetHeight());
		Vector2 TextPosExtra;

		int i = 0;
		Inventory item;
		bool InventoryLimits;
		double InvIconAlpha, InvIconAlphaPulse, InvIconScaleX, InvIconScaleY;
		int InvIconAlphaTimer = level.time % 35;
		CPlayer.inventorytics = 0; // Makes it you can immediateLY "use" items after selecting through them.
		
		int ItemHeldRatio;
		int TextTranslation = font.CR_UNTRANSLATED;
		for (item = CPlayerPawn.InvFirst; item != NULL && i < NumFields; item = item.NextInv())
		{
			// Main Icons
			for (int j = 0; j < 2; j++)
			{
				if (j ^ !!(flags & DI_DRAWCURSORFIRST))
				{
					if (item == CPlayerPawn.InvSel)
					{
						double FlashAlpha = BGAlpha;
						if (flags & DI_ARTIFLASH) FlashAlpha *= itemflashFade;
						DrawTexture(parms.selector, position + parms.selectofs + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, FlashAlpha);
					}
				}
				else
				{
					InvIconScaleX = 1.0;
					InvIconScaleY = 1.0;
					if (item is "Coin")
					{
						InvIconAlpha = 0.875;
					}
					else
					{
						if (item.Amount <= 0) 
						{
							InvIconAlpha = 0.4375; 
							InvIconScaleX *= 0.875;
							InvIconScaleY *= 0.875;
						}
						else 
						if (item.Amount >= item.MaxAmount) 
						{
							if (InvIconAlphaTimer == 0) InvIconAlphaPulse = -0.125;
							if (InvIconAlphaTimer == 1 || InvIconAlphaTimer == 39) InvIconAlphaPulse = -0.1125;
							if (InvIconAlphaTimer == 2 || InvIconAlphaTimer == 38) InvIconAlphaPulse = -0.1000;
							if (InvIconAlphaTimer == 3 || InvIconAlphaTimer == 37) InvIconAlphaPulse = -0.0875;
							if (InvIconAlphaTimer == 4 || InvIconAlphaTimer == 36) InvIconAlphaPulse = -0.075;
							if (InvIconAlphaTimer == 5 || InvIconAlphaTimer == 35) InvIconAlphaPulse = -0.0625;
							if (InvIconAlphaTimer == 6 || InvIconAlphaTimer == 34) InvIconAlphaPulse = -0.05;
							if (InvIconAlphaTimer == 7 || InvIconAlphaTimer == 33) InvIconAlphaPulse = -0.0375;
							if (InvIconAlphaTimer == 8 || InvIconAlphaTimer == 32) InvIconAlphaPulse = -0.025;
							if (InvIconAlphaTimer == 9 || InvIconAlphaTimer == 31) InvIconAlphaPulse = -0.0125;
							if (InvIconAlphaTimer == 10 || InvIconAlphaTimer == 30) InvIconAlphaPulse = -0.00;
							if (InvIconAlphaTimer == 11 || InvIconAlphaTimer == 29) InvIconAlphaPulse = 0.0125;
							if (InvIconAlphaTimer == 12 || InvIconAlphaTimer == 28) InvIconAlphaPulse = 0.025;
							if (InvIconAlphaTimer == 13 || InvIconAlphaTimer == 27) InvIconAlphaPulse = 0.0375;
							if (InvIconAlphaTimer == 14 || InvIconAlphaTimer == 26) InvIconAlphaPulse = 0.05;
							if (InvIconAlphaTimer == 15 || InvIconAlphaTimer == 25) InvIconAlphaPulse = 0.0625;
							if (InvIconAlphaTimer == 16 || InvIconAlphaTimer == 24) InvIconAlphaPulse = 0.075;
							if (InvIconAlphaTimer == 17 || InvIconAlphaTimer == 23) InvIconAlphaPulse = 0.0875;
							if (InvIconAlphaTimer == 18 || InvIconAlphaTimer == 22) InvIconAlphaPulse = 0.10;
							if (InvIconAlphaTimer == 19 || InvIconAlphaTimer == 21) InvIconAlphaPulse = 0.125;
							if (InvIconAlphaTimer == 20) InvIconAlphaPulse = 0.1375;
							InvIconAlphaPulse *= 2;
							InvIconAlpha = 0.75 + InvIconAlphaPulse;
							InvIconScaleX *= 1.0 + ((InvIconAlphaPulse * 0.25));
							InvIconScaleY *= 1.0 + ((InvIconAlphaPulse * 0.25));
						}
						else 
						{
							InvIconAlpha = 0.875;
							InvIconScaleX *= 0.9375;
							InvIconScaleY *= 0.9375;
						}
						if (item.GetClassName() == "CherryBombPickup") 
						{
							if (CPlayerPawn.CountInv("CBombUpgrade") == 1)
							{
								InvIconScaleX *= 1.175;
								InvIconScaleY *= 1.175;
							}
							if (CPlayerPawn.CountInv("CBombUpgrade") == 2)
							{
								InvIconScaleX *= 1.2875;
								InvIconScaleY *= 1.2875;
							}
							if (CPlayerPawn.CountInv("CBombUpgrade") >= 3)
							{
								InvIconScaleX *= 1.4;
								InvIconScaleY *= 1.4;
							}
						}
						if (item.GetClassName() == "FCandlePickup") 
						{
							InvIconScaleX *= 0.75;
							InvIconScaleY *= 0.75;
						}
						if (CPlayerPawn && CPlayerPawn.buttons & BT_ZOOM) 
						{
							if (item.GetClassName() == "SpinnerPickup") 
							{
								InvIconAlpha *= 4; 
								InvIconScaleX *= 1.25;
								InvIconScaleY *= 1.25;
							}
							else 
							{
								InvIconAlpha *= 0.25;
								InvIconScaleX *= 0.8;
								InvIconScaleY *= 0.8;
							}
						}
					}

					DrawInventoryIcon(item, ItemPos + (boxsize.X * i, 0), flags | DI_ITEM_CENTER, InvIconAlpha, (-1, -1), (InvIconScaleX, InvIconScaleY) );
				}
			}
			
			// Hotkeys
			string LegendStr = "";
			string UserKeyString;
			Array<String> UserKeys;
			int LegendFlags = DI_TEXT_ALIGN_LEFT;
			int LegendFontCLR = font.cr_green;
			double LegendAlpha = 0.9;
			Vector2 LegendScale = (0.875, 0.875);
			Vector2 LegendPos = position + (boxsize.X * i, 0); // (324, -25) + (0, yadd)
			Vector2 LegendPosV = LegendPos;
			vector2 ValPos = (482, 20);

			if (item is "AppleWine") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QAppleWine");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "TurkeyDinner") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QTurkeyDinner");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "CherryBombPickup") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QCherryBomb");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "BRocketPickup") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QBRocket");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "SpinnerPickup") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QSpinner");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "SnakePickup") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QSugarSnake");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "KilletanteEffigy") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QKEffigy");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "PopperPickup") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QPopper");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "FuryPotion") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QFuryPotion");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "TimePotion") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QTimePotion");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "BirdPotion") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QBirdPotion");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			if (item is "RatPotion") 
			{
				UserKeyString = UIKeybinds.getKeyboard("QRatPotion");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}

			if (LegendStr != "") 
			{
				//Console.Printf(LegendStr);
				//Console.Printf("x: %d, y: %d", LegendPos.x, LegendPos.y);
				DrawString(mConFont, LegendStr, LegendPosV + ValPos, LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}

			// IP Icons
			if (exex_ikaripointsenabled && MiscItem)
			{
				double IPCost = 0.0;
				textureid IPIcon = TexMan.CheckForTexture("IPIconUN", TexMan.TYPE_MiscPatch);
				Vector2 IPIconPos = position + (boxsize.X * i, 0); // (324, -25) + (0, yadd)
				Vector2 IPIconPosV = IPIconPos;
				bool HasIPIcon = false;
				int CanUseIPATK = 0;
				int IPIconTimer = level.time % 8;
				int IPIconSpeed = 1;
				if (CPlayerPawn && MiscItem.IPUseMode) IPIconSpeed = 2;
				
				if (item is "AppleWine" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(9);
				}
				if (item is "TurkeyDinner" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(10);
				}
				if (item is "CherryBombPickup" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(1);
				}
				if (item is "SpinnerPickup" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(4);
				}
				if (item is "BRocketPickup" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(2);
				}
				if (item is "SnakePickup" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(3);
				}
				if (item is "KilletanteEffigy" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(5);
				}
				if (item is "PopperPickup" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(6);
				}
				if (item is "FuryPotion" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(7);
				}
				if (item is "TimePotion" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(8);
				}
				if (item is "BirdPotion" && item.Amount > 0)
				{
					HasIPIcon = true;
					CanUseIPATK = 0;
					IPCost = A_GetIPCost(12);
				}
				if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
				else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
				if (dydudebug_infiniteip) CanUseIPATK = 3;

				if (dydudebug_ipdisplays && HasIPIcon) Console.Printf("\c[blue][SBAR Inventory (%s)] Cost: %.4f", item.GetClassName(), IPCost);

				// Shows the Proper Icon if the above meets criteria
				if (HasIPIcon) 
				{
					if (CanUseIPATK) 
					{
						if (IPIconSpeed <= 1) IPIcon = TexMan.CheckForTexture("IPIcon1U", TexMan.TYPE_MiscPatch);
						if (IPIconSpeed >= 2) IPIcon = TexMan.CheckForTexture("IPIcon2U", TexMan.TYPE_MiscPatch);
						if (CanUseIPATK == 1)
						{
							if (IPIconSpeed == 1)
							{
								IPIconTimer = level.time % 32;
								if (IPIconTimer >= 0 && IPIconTimer <= 7) IPIconPos += (0, 0);
								if (IPIconTimer >= 8 && IPIconTimer <= 15) IPIconPos += (1, 0);
								if (IPIconTimer >= 16 && IPIconTimer <= 23) IPIconPos += (1, 1);
								if (IPIconTimer >= 24 && IPIconTimer <= 31) IPIconPos += (0, 1);
							}
							else
							{
								IPIconTimer = level.time % 24;
								if (IPIconTimer >= 0 && IPIconTimer <= 5) IPIconPos += (0, 0);
								if (IPIconTimer >= 6 && IPIconTimer <= 11) IPIconPos += (1, 0);
								if (IPIconTimer >= 12 && IPIconTimer <= 17) IPIconPos += (1, 1);
								if (IPIconTimer >= 18 && IPIconTimer <= 23) IPIconPos += (0, 1);
							}
						}
						if (CanUseIPATK == 2)
						{
							if (IPIconSpeed == 1)
							{
								IPIconTimer = level.time % 16;
								if (IPIconTimer >= 0 && IPIconTimer <= 3) IPIconPos += (0, 0);
								if (IPIconTimer >= 4 && IPIconTimer <= 7) IPIconPos += (1, 0);
								if (IPIconTimer >= 8 && IPIconTimer <= 11) IPIconPos += (1, 1);
								if (IPIconTimer >= 12 && IPIconTimer <= 15) IPIconPos += (0, 1);
							}
							else
							{
								IPIconTimer = level.time % 12;
								if (IPIconTimer >= 0 && IPIconTimer <= 2) IPIconPos += (0, 0);
								if (IPIconTimer >= 3 && IPIconTimer <= 5) IPIconPos += (1, 0);
								if (IPIconTimer >= 6 && IPIconTimer <= 8) IPIconPos += (1, 1);
								if (IPIconTimer >= 9 && IPIconTimer <= 11) IPIconPos += (0, 1);
							}
						}
						if (CanUseIPATK >= 3)
						{
							if (IPIconSpeed == 1)
							{
								IPIconTimer = level.time % 8;
								if (IPIconTimer >= 0 && IPIconTimer <= 1) IPIconPos += (0, 0);
								if (IPIconTimer >= 2 && IPIconTimer <= 3) IPIconPos += (1, 0);
								if (IPIconTimer >= 4 && IPIconTimer <= 5) IPIconPos += (1, 1);
								if (IPIconTimer >= 6 && IPIconTimer <= 7) IPIconPos += (0, 1);
							}
							else
							{
								IPIconTimer = level.time % 4;
								if (IPIconTimer == 0) IPIconPos += (0, 0);
								if (IPIconTimer == 1) IPIconPos += (1, 0);
								if (IPIconTimer == 2) IPIconPos += (1, 1);
								if (IPIconTimer == 3) IPIconPos += (0, 1);
							}
						}
					}
					else
					{
						IPIcon = TexMan.CheckForTexture("IPIconUN", TexMan.TYPE_MiscPatch);
					}
					DrawTexture(IPIcon, IPIconPos + (24, 6), flags | DI_ITEM_CENTER);
					
					int IPCharges;
					if (IPCost > 0.001) 
					{
						int TextSize = 1;
						IPCharges = (MiscItem.ItemPoints / IPCost);
						double valscale = 0.667;
						double valAlpha = 0.875;
						fnt = "INDEXFONT_DDL";
						parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
						vector2 ValPos = (24, 10);
						int ValColor = font.CR_GREY;
						if (IPIconSpeed <= 1) ValColor = font.CR_FIRE;
						if (IPIconSpeed >= 2) ValColor = font.CR_SAPPHIRE;
						if (IPCost)
						{
							if (IPCharges) DrawString(parms.amountfont, FormatNumber(IPCharges, 0, 6), IPIconPosV + ValPos, flags | DI_TEXT_ALIGN_CENTER, ValColor, ValAlpha, -1, 4, (valscale, valscale));
						}
					}
				}
			}
			
			// Amount & Limits
			int TextSize = 1;
			if (parms.amountfont != null && (item.Amount >= 0 || (flags & DI_ALWAYSSHOWCOUNTERS)))
			{
				if (item.MaxAmount > 0) ItemHeldRatio = (item.Amount * 1000) / item.MaxAmount;
				else ItemHeldRatio = 0;
				
				if (item is "Coin")
				{
					fnt = "INDEXFONT_DD";
					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
					if (TextSize == 0) TextPosExtra = (0,0);
					if (TextSize == 1) TextPosExtra = (0,0);
					if (TextSize == 2) TextPosExtra = (0,5);
					DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), TextPos + (boxsize.X * i, 0) + (-14,0) + TextPosExtra, flags | DI_TEXT_ALIGN_CENTER, font.CR_GOLD, parms.itemalpha);
				}
				else
				{
					if (TextSize == 0) fnt = "INDEXFONT_DD";
					if (TextSize == 1) fnt = "INDEXFONT_DDM";
					if (TextSize == 2) fnt = "INDEXFONT_DDL";

					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);

					if (exex_imposeinventorylimits)
					{
						if (TextSize == 0) TextPosExtra = (0,0);
						if (TextSize == 1) TextPosExtra = (-1,0);
						if (TextSize == 2) TextPosExtra = (-3,1);
						if (item.Amount <= 0) TextTranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) TextTranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) TextTranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) TextTranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) TextTranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) TextTranslation = Font.CR_GREEN;
						}
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), TextPos + (boxsize.X * i, 0) + (-26,-19) + TextPosExtra, flags | DI_TEXT_ALIGN_LEFT, TextTranslation, parms.itemalpha);

						if (TextSize == 0) TextPosExtra = (0,0);
						if (TextSize == 1) TextPosExtra = (0,0);
						if (TextSize == 2) TextPosExtra = (-1,1);
						DrawString(parms.amountfont, "/", TextPos + (boxsize.X * i, 0) + (-14,-10) + TextPosExtra, flags | DI_TEXT_ALIGN_CENTER, Font.CR_WHITE, parms.itemalpha);

						if (TextSize == 0) TextPosExtra = (0,0);
						if (TextSize == 1) TextPosExtra = (1,0);
						if (TextSize == 2) TextPosExtra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.MaxAmount, 0, 10), TextPos + (boxsize.X * i, 0) + (-2,-2) + TextPosExtra, flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD, parms.itemalpha);
						
						TextPosExtra = (0,0);
					}
					else
					{
						if (item.Amount <= 0) TextTranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) TextTranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) TextTranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) TextTranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) TextTranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) TextTranslation = Font.CR_GREEN;
						}
						if (TextSize == 0) TextPosExtra = (0,0);
						if (TextSize == 1) TextPosExtra = (1,0);
						if (TextSize == 2) TextPosExtra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), TextPos + (boxsize.X * i, 0) + (-2,-2) + TextPosExtra, flags | DI_TEXT_ALIGN_RIGHT, TextTranslation, parms.itemalpha);

						TextPosExtra = (0,0);
					}
				}
			}
			i++;
		}

		// Is there something to the left?
		if (CPlayerPawn.FirstInv() != CPlayerPawn.InvFirst)
		{
			DrawTexture(parms.left, position + (-parms.arrowoffset.X, parms.arrowoffset.Y), flags | DI_ITEM_RIGHT|DI_ITEM_VCENTER);
		}
		// Is there something to the right?
		if (item != NULL)
		{
			DrawTexture(parms.right, position + parms.arrowoffset + (width, 0), flags | DI_ITEM_LEFT|DI_ITEM_VCENTER);
		}
	}
	
	// Draw Damage Borders
	int, int DrawDmgBorderFullScreen(int CurrHealth, int MaxHealthTrue)
	{
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));
		int DigX, DigY, Spacing;

		//*****************
		//* Damage Border *
		//*****************
		if (MiscItem && CPlayerPawn)
		{
			double HealthRatio = (CurrHealth * 1.00) / (MaxHealthTrue * 1.00);
			textureid InjBorderT;
			double BaseInjAlpha;
			double InjAlpha = 1.0;
			double injscale = 1.125;
			int InjPulseTimerMod = CPlayerPawn.hudbeatpulse;
		
			if (HealthRatio <= 0.02)
			{
				InjBorderT = TexMan.CheckForTexture("M_INJ2", TexMan.TYPE_MiscPatch);
				BaseInjAlpha = 0.575; // 0.9975;
			}
			else
			{
				if (HealthRatio <= 0.05)
				{
					InjBorderT = TexMan.CheckForTexture("M_INJ2", TexMan.TYPE_MiscPatch);
					BaseInjAlpha = 0.475; // 0.9;
				}
				else
				{
					if (HealthRatio <= 0.10)
					{
						InjBorderT = TexMan.CheckForTexture("M_INJ", TexMan.TYPE_MiscPatch);
						BaseInjAlpha = 0.4; // 0.8;
					}
					else
					{
						if (HealthRatio <= 0.25)
						{
							InjBorderT = TexMan.CheckForTexture("M_INJ", TexMan.TYPE_MiscPatch);
							BaseInjAlpha = 0.35; // 0.625;
						}
					}
				}
			}
			
			InjAlpha = 0.0;
			if (InjPulseTimerMod && exex_playerbpmhud)
			{
				double BaseInjAlphaframe = BaseInjAlpha / (InjPulseTimerMod * 0.5);
				int InjPulseTimer = level.time % InjPulseTimerMod;
				int InjPulseFrame = (InjPulseTimerMod * 0.5);
				InjPulseFrame = abs(InjPulseFrame - InjPulseTimer);
				InjAlpha = BaseInjAlpha + (InjPulseFrame * BaseInjAlphaframe);
				//Console.Printf("\c[brick]HealthRatio: %.3f, InjAlpha: %.3f (timer: %d / %d)", HealthRatio, InjAlpha, InjPulseTimer, InjPulseTimerMod);
			}
			
			DigX = 480;
			DigY = 270;
			DrawTexture(InjBorderT, (DigX, DigY), DI_ITEM_CENTER, InjAlpha, (-1,-1), (injscale, injscale));
		}
		return CurrHealth, MaxHealthTrue;
	}
	
	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		BeginHUD();
		
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		if (!CPlayerPawn.CountInv("NoHUD")) DrawFullScreenStuff();
	}

	protected void DrawMainBar (double TicFrac)
	{
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));
		DrawTexture(TexMan.CheckForTexture("BARBACK", TexMan.TYPE_MiscPatch), (0, 158), DI_ITEM_OFFSETS);
		DrawTexture(TexMan.CheckForTexture("LTFCTOP", TexMan.TYPE_MiscPatch), (0, 148), DI_ITEM_OFFSETS);
		DrawTexture(TexMan.CheckForTexture("RTFCTOP", TexMan.TYPE_MiscPatch), (290, 148), DI_ITEM_OFFSETS);
		if (IsInvulnerable())
		{
			//god mode
			DrawTexture(TexMan.CheckForTexture("GOD1", TexMan.TYPE_MiscPatch), (16, 167), DI_ITEM_OFFSETS);
			DrawTexture(TexMan.CheckForTexture("GOD2", TexMan.TYPE_MiscPatch), (287, 167), DI_ITEM_OFFSETS);
		}
		//health
		DrawTexture(TexMan.CheckForTexture("CHAINBAC", TexMan.TYPE_MiscPatch), (0, 190), DI_ITEM_OFFSETS);
		// wiggle the chain if it moves
		int inthealth =  mHealthInterpolator.GetValue();
		DrawGem("CHAIN", "LIFEGEM4", inthealth, CPlayerPawn.GetMaxHealth(true), (2, 191 + wiggle), 15, 25, 16, (multiplayer? DI_TRANSLATABLE : 0) | DI_ITEM_LEFT_TOP); 
		DrawTexture(TexMan.CheckForTexture("LTFACE", TexMan.TYPE_MiscPatch), (0, 190), DI_ITEM_OFFSETS);
		DrawTexture(TexMan.CheckForTexture("RTFACE", TexMan.TYPE_MiscPatch), (276, 190), DI_ITEM_OFFSETS);
		DrawShader(SHADER_HORZ, (19, 190), (16, 10));
		DrawShader(SHADER_HORZ|SHADER_REVERSE, (278, 190), (16, 10));

		if (!isInventoryBarVisible())
		{
			int x = 86;
			int y = 174;
			//statbar
			int PlayerMaxHP = CPlayerPawn.CountInv("PlayerMaxHP");
			if (CPlayerPawn.GetClassName() == "RatPlayer") PlayerMaxHP *= 0.30;

			DrawTexture(TexMan.CheckForTexture("LIFEBAR", TexMan.TYPE_MiscPatch), (34, 160), DI_ITEM_OFFSETS);
			DrawTexture(TexMan.CheckForTexture("ARMCLEAR", TexMan.TYPE_MiscPatch), (57, 171), DI_ITEM_OFFSETS);
			DrawString(mDDSFont, FormatNumber(PlayerMaxHP, 3), (x, y+5), DI_TEXT_ALIGN_RIGHT, font.cr_brick);
			DrawString(mDDSFont, "/", (x+6, y), DI_TEXT_ALIGN_RIGHT, font.cr_brick);
			DrawString(mDDLFont, FormatNumber(mHealthInterpolator.GetValue(), 3), (x, y-6), DI_TEXT_ALIGN_RIGHT, font.cr_brick);

			x = 253;
			y = 174;
			if (MiscItem)
			{
				int ArmorColor = font.CR_White; 
				int ArmorMax;
				name armorclasstype = "KGArmor";
				let armor = KGArmor(CPlayerPawn.FindInventory(armorclasstype));
				if (MiscItem.KnightGownTier == 1)
				{
					ArmorColor = font.CR_Purple;
					ArmorMax = MiscItem.ArmorItemMax1;
				}
				if (MiscItem.KnightGownTier == 2)
				{
					ArmorColor = font.CR_Cyan;
					ArmorMax = MiscItem.ArmorItemMax2;
				}
				if (MiscItem.KnightGownTier == 3)
				{
					ArmorColor = font.CR_Gold;
					ArmorMax = MiscItem.ArmorItemMax3;
				}
				if (MiscItem.KnightGownTier == 4)
				{
					ArmorColor = font.CR_Green;
					ArmorMax = MiscItem.ArmorItemMax4;
				}
				if (ArmorMax)
				{
					DrawInventoryIcon(armor, (x-22, y+10), DI_TEXT_ALIGN_CENTER, 0.75, (-1, -1), (0.5,0.5)); // 58, -24
					DrawString(mDDSFont, FormatNumber(ArmorMax, 4), (x, y+5), DI_TEXT_ALIGN_RIGHT, ArmorColor, 0.90); // 41, -43
					DrawString(mDDSFont, "/", (x+6, y), DI_TEXT_ALIGN_RIGHT, ArmorColor, 0.90); // 41, -43
					DrawString(mDDLFont, FormatNumber(mArmorInterpolator.GetValue(), 4), (x, y-6), DI_TEXT_ALIGN_RIGHT, ArmorColor, 0.90); // 41, -43
				}
				else
				{
					DrawString(mDDLFont, FormatNumber(mArmorInterpolator.GetValue(), 4), (x, y-4), DI_TEXT_ALIGN_RIGHT, ArmorColor, 0.90); // 41, -43
				}
			}

			//ammo
			Ammo ammo1, ammo2;
			[ammo1, ammo2] = GetCurrentAmmo();
			x = 136;
			y = 162;
			if (ammo1 != null && ammo2 == null)
			{
				DrawTexture(ammo1.icon, (x-15, y+13), DI_ITEM_CENTER, 0.75, (-1, -1), (1.0,1.0));
				DrawString(mDDLFont, FormatNumber(ammo1.Amount, 3), (136, y), DI_TEXT_ALIGN_RIGHT, font.cr_Gold);
				DrawString(mDDSFont, "/", (136, y+12), DI_TEXT_ALIGN_RIGHT, font.cr_Gold);
				DrawString(mDDSFont, FormatNumber(ammo1.MaxAmount, 3), (136, y+19), DI_TEXT_ALIGN_RIGHT, font.cr_Gold);
			}
			else if (ammo2 != null)
			{
				DrawString(mIndexFont, FormatNumber(ammo1.Amount, 3), (137, 165), DI_TEXT_ALIGN_RIGHT, font.cr_Gold);
				DrawString(mIndexFont, FormatNumber(ammo2.Amount, 3), (137, 177), DI_TEXT_ALIGN_RIGHT, font.cr_Gold);
				DrawTexture(ammo1.icon, (115, 169), DI_ITEM_CENTER);
				DrawTexture(ammo2.icon, (115, 180), DI_ITEM_CENTER);
			}

			//keys
			int BaseX = 153;
			if (gameinfo.gametype & 1) // Doom Mode
			{
				bool locks[6];
				String image = "";
				for (int i = 0; i < 6; i++) locks[i] = CPlayerPawn.CheckKeys(i + 1, false, true);
				// key 1
				if (locks[1] && locks[4]) image = "BKEYICO2";
				else if (locks[1]) image = "BKEYICO0";
				else if (locks[4]) image = "BKEYICO1";
				else image = "";
				DrawTexture(TexMan.CheckForTexture(image, TexMan.TYPE_MiscPatch), (153, 164), DI_ITEM_OFFSETS);

				if (locks[2] && locks[5]) image = "YKEYICO2";
				else if (locks[2]) image = "YKEYICO0";
				else if (locks[5]) image = "YKEYICO1";
				else image = "";
				DrawTexture(TexMan.CheckForTexture(image, TexMan.TYPE_MiscPatch), (153, 172), DI_ITEM_OFFSETS);

				if (locks[0] && locks[3]) image = "RKEYICO2";
				else if (locks[0]) image = "RKEYICO0";
				else if (locks[3]) image = "RKEYICO1";
				else image = "";
				DrawTexture(TexMan.CheckForTexture(image, TexMan.TYPE_MiscPatch), (153, 180), DI_ITEM_OFFSETS);
			}
			if (gameinfo.gametype & 2) // Heretic Mode
			{
				if (CPlayerPawn.CheckKeys(3, false, true)) DrawTexture(TexMan.CheckForTexture("YKEYICON", TexMan.TYPE_MiscPatch), (153, 164), DI_ITEM_OFFSETS);
				if (CPlayerPawn.CheckKeys(1, false, true)) DrawTexture(TexMan.CheckForTexture("GKEYICON", TexMan.TYPE_MiscPatch), (153, 172), DI_ITEM_OFFSETS);
				if (CPlayerPawn.CheckKeys(2, false, true)) DrawTexture(TexMan.CheckForTexture("BKEYICON", TexMan.TYPE_MiscPatch), (153, 180), DI_ITEM_OFFSETS);
			}

			//inventory box
			if (CPlayerPawn.InvSel != null)
			{
				DrawInventoryIcon(CPlayerPawn.InvSel, (194, 175), DI_ARTIFLASH|DI_ITEM_CENTER|DI_DIMDEPLETED, boxsize:(28, 28));
				if (CPlayerPawn.InvSel.Amount > 1)
				{
					DrawString(mIndexFont, FormatNumber(CPlayerPawn.InvSel.Amount, 3), (209, 182), DI_TEXT_ALIGN_RIGHT);
				}
			}
		}
		else
		{
			DrawTexture(TexMan.CheckForTexture("INVBAR", TexMan.TYPE_MiscPatch), (34, 160), DI_ITEM_OFFSETS);
			DrawInventoryBar(diparms_sbar, (49, 160), 7, DI_ITEM_LEFT_TOP, HX_SHADOW);
		}
	}

	override void DrawPowerups()
	{
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));

		// The AltHUD specific adjustments have been removed here, because the AltHUD uses its own variant of this function
		// that can obey AltHUD rules - which this cannot.
		Vector2 pos = (-20, POWERUPICONSIZE * 5 / 4);
		double maxpos = screen.GetWidth() / 2;
		for (let iitem = CPlayerPawn.Inv; iitem != NULL; iitem = iitem.Inv)
		{
			let item = Powerup(iitem);
			if (item != null)
			{
				bool Debuff = false;
				Vector2 PosDiff = (0.0, 0.0);
				int ItemEffectTics = item.EffectTics;
				int ItemEffectSecs = (item.EffectTics / thinker.TICRATE);
				int ItemFontCLR = font.CR_White;
				int ItemTicMod = 26;
				int ItemEffectLevel = 0;

				if (PowerFoodATK(item) || PowerFoodDEF(item)) ItemFontCLR = font.CR_Tan;
				if (PowerWine(item)) ItemFontCLR = font.CR_Purple;
				if (PowerInvisibility(item) || PowerGhost(item)) ItemFontCLR = font.CR_Brick;
				if (DinahTrueIPState(item)) ItemFontCLR = font.CR_Fire;
				if (PowerStrength(item)) ItemFontCLR = font.CR_Red;
				if (PowerDoubleFiringSpeed(item)) ItemFontCLR = font.CR_Red;
				if (PowerInvulnerable(item)) ItemFontCLR = font.CR_Green;
				if (PowerIronfeet(item)) ItemFontCLR = font.CR_Teal;
				if (PowerLightAmp(item) || PowerTorch(item)) ItemFontCLR = font.CR_Cyan;
				if (PowerFrightener(item) || PowerTerror(item)) ItemFontCLR = font.CR_Gold;
				if (PowerDouble(item)) ItemFontCLR = font.CR_Red;
				if (PowerGuard(item)) ItemFontCLR = font.CR_Green;
				if (PowerHaste(item)) ItemFontCLR = font.CR_Sapphire;
				if (PowerRatMorph(item)) ItemFontCLR = font.CR_Gold;
				if (PowerNoDrown(item)) 
				{
					ItemTicMod = 260;
					if (MiscItem.PlayerWaterLevel >= 3)
					{
						ItemTicMod = 26;
						ItemFontCLR = font.CR_Sapphire;
						if (level.time % ItemTicMod >= 0 && level.time % ItemTicMod >= (ItemTicMod*0.5)) ItemFontCLR = font.CR_LightBlue;
					}
					else 
					{
						ItemFontCLR = font.CR_DarkGray;
						if (level.time % ItemTicMod >= 0 && level.time % ItemTicMod >= (ItemTicMod*0.5)) ItemFontCLR = font.CR_Grey;
					}
				}
				if (D_NoUCard(item))
				{
					if (level.time % 35 >= 0 && level.time % 35 <= 4) font.CR_Sapphire;
					if (level.time % 35 >= 5 && level.time % 35 <= 9) font.CR_Green;
					if (level.time % 35 >= 10 && level.time % 35 <= 14) font.CR_Gold;
					if (level.time % 35 >= 15 && level.time % 35 <= 19) font.CR_Purple;
					if (level.time % 35 >= 20 && level.time % 35 <= 24) font.CR_Fire;
					if (level.time % 35 >= 25 && level.time % 35 <= 29) font.CR_Tan;
					if (level.time % 35 >= 30 && level.time % 35 <= 34) font.CR_Brick;
				}
				if (TimePotionTimeFreezer(item))
				{
					if (MiscItem) 
					{
						ItemEffectTics = MiscItem.TimeFreezeTimer;
						ItemEffectSecs = (MiscItem.TimeFreezeTimer / thinker.TICRATE);
						ItemFontCLR = font.CR_Gray;
					}
				}
				if (GrimophoneDEFDown(item)) 
				{
					if (MiscItem) 
					{
						ItemEffectTics = MiscItem.GrimophoneDebuffTimer;
						ItemEffectSecs = (MiscItem.GrimophoneDebuffTimer / thinker.TICRATE);
						ItemFontCLR = font.CR_brick;
						Debuff = true;
					}
				}
				if (DrownDebuffBase(item))
				{
					if (MiscItem) 
					{
						ItemEffectTics = MiscItem.drownDebufftimer;
						ItemEffectSecs = (MiscItem.drownDebufftimer / thinker.TICRATE);
						ItemFontCLR = font.CR_Brick;
						ItemEffectLevel = MiscItem.drownDebufflevel;
						Debuff = true;
					}
				}
				let icon = item.GetPowerupIcon();
				if (icon.IsValid() && !item.IsBlinking())
				{
					// Each icon gets a 32x32 block.
					if (Debuff) 
					{
						PosDiff = (randompick(-1,0,1), randompick(-1,0,1));
						if (MiscItem)
						{
							if (MiscItem.drownDebufflevel >= 3) PosDiff = (randompick(-1,0,1), randompick(-1,0,1));
							if (MiscItem.drownDebufflevel >= 5) PosDiff = (randompick(-2,-1,0,1,2), randompick(-2,-1,0,1,2));
							if (MiscItem.drownDebufflevel >= 7) PosDiff = (randompick(-3,-2,-1,0,1,2,3), randompick(-3,-2,-1,0,1,2,3));
							if (MiscItem.drownDebufflevel >= 10) PosDiff = (randompick(4,-3,-2,-1,0,1,2,3,4), randompick(-4,-3,-2,-1,0,1,2,3,4));
						}
						
						if (item.GetClassName() == "GrimophoneDEFDown1") PosDiff = (randompick(-1,0,1), randompick(-1,0,1));
						if (item.GetClassName() == "GrimophoneDEFDown2") PosDiff = (randompick(-2,-1,0,1,2), randompick(-2,-1,0,1,2));
						if (item.GetClassName() == "GrimophoneDEFDown3") PosDiff = (randompick(-3,-2,-1,0,1,2,3), randompick(-3,-2,-1,0,1,2,3));
					}
					DrawTexture(icon, pos+PosDiff, DI_SCREEN_RIGHT_TOP, 1.0, (POWERUPICONSIZE, POWERUPICONSIZE));
					pos.x -= POWERUPICONSIZE;
					if (pos.x < -maxpos)
					{
						pos.x = -20;
						pos.y += POWERUPICONSIZE * 3 / 2;
					}
					if (ItemEffectTics < 350000 && ItemEffectTics != 0 && ItemEffectTics > -10000) // don't show timers for powerups with timers longer than 9999 seconds V:
					{
						pos.y += 1;
						if (ItemEffectTics <= 175) // Shake the timer fast when it has less than 5 seconds left
						{
							if (ItemEffectTics % 10 >= 9) pos.y += 1; 
							else if (ItemEffectTics % 10 >= 7) pos.y += 2; 
							else if (ItemEffectTics % 10 >= 5) pos.y += 1; 
							else if (ItemEffectTics % 10 >= 3) pos.y += 2; 
							else if (ItemEffectTics % 10 >= 1) pos.y += 1; 
						}
						if (ItemEffectTics >= 177 && ItemEffectTics <= 1050) { if (ItemEffectTics % 30 >= 15) pos.y += 1; }
						if (ItemEffectTics >= 1051) { if (ItemEffectTics % 50 >= 25) pos.y += 1; }
						if (dyduhud_showpoweruptimers) 
						{
							if (!(gameinfo.gametype == GAME_Hexen && PowerFlight(item))) DrawString(mDDMFont, FormatNumber(ItemEffectSecs), (pos.x+POWERUPICONSIZE, pos.y) + PosDiff, DI_TEXT_ALIGN_CENTER, ItemFontCLR, 0.9, -1, 4, (1.0, 1.0)); // 41, -43
						}
						if (ItemEffectTics <= 175) 
						{
							if (ItemEffectTics % 10 >= 9) pos.y -= 1; 
							else if (ItemEffectTics % 10 >= 7) pos.y -= 2; 
							else if (ItemEffectTics % 10 >= 5) pos.y -= 1; 
							else if (ItemEffectTics % 10 >= 3) pos.y -= 2; 
							else if (ItemEffectTics % 10 >= 1) pos.y -= 1; 
						}
						if (ItemEffectTics >= 177 && ItemEffectTics <= 1050) { if (ItemEffectTics % 30 >= 15) pos.y -= 1; }
						if (ItemEffectTics >= 1051) { if (ItemEffectTics % 50 >= 25) pos.y -= 1; }
						pos.y -= 1;
					}
					if (ItemEffectLevel > 0)
					{
						pos.x += -8;
						pos.y += -32;
						DrawString(mDDLFont, FormatNumber(ItemEffectLevel), (pos.x+POWERUPICONSIZE, pos.y) + PosDiff, DI_TEXT_ALIGN_RIGHT, font.cr_sapphire, 0.9, -1, 4, (1.0, 1.0)); // 41, -43
						pos.x -= -8;
						pos.y -= -32;
					}
				}
			}
		}
	}

	protected void DrawFullScreenStuff()
	{
		int VisiblePlayerLevel = 0;
		int VisiblePlayerATK = 0;
		int VisiblePlayerDEF = 0;
		int VisiblePlayerSPD = 0;
		DDPlayerPawn CPlayerPawn;
		CPlayerPawn = DDPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));
		if (MiscItem && exex_expenabled) 
		{
			VisiblePlayerLevel = MiscItem.PlayerLevel;
			VisiblePlayerATK = MiscItem.PlayerATK;
			VisiblePlayerDEF = MiscItem.PlayerDEF;
			VisiblePlayerSPD = MiscItem.PlayerSPD;
		}

		if (screenblocks < 12)
		{
			Vector2 FontScale = (1.25, 1.25);
			int FontLineSpace = 4;
			int FontWrapWidth = -1;
			double FontAlpha = 0.9;
			int HPShakeFormX = 0;
			int HPShakeFormY = 0;
			int APShakeFormX = 0;
			int APShakeFormY = 0;
			int IPShakeFormX = 0;
			int IPShakeFormY = 0;
			double HPPulseScale = 1.00;
			double APPulseScale = 1.00;
			let PlayerWeapon = MiscItem.weapon;
			
			if (dyduhud_showhpapdmghudshake)
			{
				if (MiscItem)
				{
					if (MiscItem.HPHUDShakeType <= 1)
					{
						HPShakeFormX = randompick(-1,0,1);
						HPShakeFormY = randompick(-1,0,1);
					}
					if (MiscItem.HPHUDShakeType == 2)
					{
						HPShakeFormX = randompick(-2,-1,0,1,2);
						HPShakeFormY = randompick(-2,-1,0,1,2);
					}
					if (MiscItem.HPHUDShakeType == 3)
					{
						HPShakeFormX = randompick(-3,-2,-1,0,1,2,3);
						HPShakeFormY = randompick(-3,-2,-1,0,1,2,3);
					}
					if (MiscItem.HPHUDShakeType >= 4)
					{
						HPShakeFormX = randompick(-4,-3,-2,-1,0,1,2,3,4);
						HPShakeFormY = randompick(-4,-3,-2,-1,0,1,2,3,4);
					}
					if (MiscItem.APHUDShakeType <= 1)
					{
						APShakeFormX = randompick(-1,0,1);
						APShakeFormY = randompick(-1,0,1);
					}
					if (MiscItem.APHUDShakeType == 2)
					{
						APShakeFormX = randompick(-2,-1,0,1,2);
						APShakeFormY = randompick(-2,-1,0,1,2);
					}
					if (MiscItem.APHUDShakeType == 3)
					{
						APShakeFormX = randompick(-3,-2,-1,0,1,2,3);
						APShakeFormY = randompick(-3,-2,-1,0,1,2,3);
					}
					if (MiscItem.APHUDShakeType >= 4)
					{
						APShakeFormX = randompick(-4,-3,-2,-1,0,1,2,3,4);
						APShakeFormY = randompick(-4,-3,-2,-1,0,1,2,3,4);
					}
					if (MiscItem.IPHUDShakeType <= 1)
					{
						IPShakeFormX = randompick(-1,0,1);
						IPShakeFormY = randompick(-1,0,1);
					}
					if (MiscItem.IPHUDShakeType == 2)
					{
						IPShakeFormX = randompick(-2,-1,0,1,2);
						IPShakeFormY = randompick(-2,-1,0,1,2);
					}
					if (MiscItem.IPHUDShakeType == 3)
					{
						IPShakeFormX = randompick(-3,-2,-1,0,1,2,3);
						IPShakeFormY = randompick(-3,-2,-1,0,1,2,3);
					}
					if (MiscItem.IPHUDShakeType >= 4)
					{
						IPShakeFormX = randompick(-4,-3,-2,-1,0,1,2,3,4);
						IPShakeFormY = randompick(-4,-3,-2,-1,0,1,2,3,4);
					}

					if (MiscItem.HPHUDShakeTime && MiscItem.HPDmgHUDAmt > 0)
					{
						HPShakeInc++;
						if (HPShakeInc >= 4)
						{
							HPShakeInc = 0;
							HPDmgShakeX = HPShakeFormX;
							HPDmgShakeY = HPShakeFormY;
						}
						if (dydudebug_hudrecdmgdisplays) Console.Printf("HPHUDShakeTime: %d, Shake: HPShakeInc: %d, HPDmgShakeX: %d, HPDmgShakeY: %d", MiscItem.HPHUDShakeTime, HPShakeInc, HPDmgShakeX, HPDmgShakeY);
					}
					else
					{
						HPDmgShakeX = 0;
						HPDmgShakeY = 0;
						HPShakeInc = 0;
					}
					
					if (MiscItem.APHUDShakeTime && MiscItem.APDmgHUDAmt > 0)
					{
						APShakeInc++;
						if (APShakeInc >= 4)
						{
							APShakeInc = 0;
							APDmgShakeX = APShakeFormX;
							APDmgShakeY = APShakeFormY;
						}
						if (dydudebug_hudrecdmgdisplays) Console.Printf("APHUDShakeTime: %d, Shake: APShakeInc: %d, APDmgShakeX: %d, APDmgShakeY: %d", MiscItem.APHUDShakeTime, APShakeInc, APDmgShakeX, APDmgShakeY);
					}
					else
					{
						APShakeInc = 0;
						APDmgShakeX = 0;
						APDmgShakeY = 0;
					}
					
					if (MiscItem.IPHUDShakeTimer)
					{
						IPShakeInc++;
						if (IPShakeInc >= 4)
						{
							IPShakeInc = 0;
							IPDmgShakeX = IPShakeFormX;
							IPDmgShakeY = IPShakeFormY;
						}
						if (dydudebug_hudrecdmgdisplays) Console.Printf("IPHUDShakeTimer: %d, Shake: IPShakeInc: %d, IPDmgShakeX: %d, IPDmgShakeY: %d", MiscItem.IPHUDShakeTimer, IPShakeInc, IPDmgShakeX, IPDmgShakeY);
					}
					else
					{
						IPShakeInc = 0;
						IPDmgShakeX = 0;
						IPDmgShakeY = 0;
					}
				}
				else
				{
					HPDmgShakeX = 0;
					HPDmgShakeY = 0;
					HPShakeInc = 0;
					APShakeInc = 0;
					APDmgShakeX = 0;
					APDmgShakeY = 0;
					IPShakeInc = 0;
					IPDmgShakeX = 0;
					IPDmgShakeY = 0;
				}
			}
			else
			{
				HPDmgShakeX = 0;
				HPDmgShakeY = 0;
				HPShakeInc = 0;
				APShakeInc = 0;
				APDmgShakeX = 0;
				APDmgShakeY = 0;
				IPShakeInc = 0;
				IPDmgShakeX = 0;
				IPDmgShakeY = 0;
			}
			
			if (dyduhud_showhpaprechudpulse)
			{
				if (MiscItem)
				{
					if (MiscItem.HPHUDPulseType <= 1) HPRecPulseSpd = 0.01;
					if (MiscItem.HPHUDPulseType == 2) HPRecPulseSpd = 0.015;
					if (MiscItem.HPHUDPulseType == 3) HPRecPulseSpd = 0.025;
					if (MiscItem.HPHUDPulseType >= 4) HPRecPulseSpd = 0.04;
					
					if (MiscItem.APHUDPulseType <= 1) APRecPulseSpd = 0.01;
					if (MiscItem.APHUDPulseType == 2) APRecPulseSpd = 0.015;
					if (MiscItem.APHUDPulseType == 3) APRecPulseSpd = 0.025;
					if (MiscItem.APHUDPulseType >= 4) APRecPulseSpd = 0.04;
					
					if (MiscItem.HPRecHUDTimer >= 36 && MiscItem.HPRecHUDAmt > 0)
					{
						HPPulseInc = (level.time + MiscItem.HPHUDPulseTimeP) % 40;
						if (HPPulseInc == 0 || HPPulseInc == 20) HPPulseScale = (1.00 + (HPRecPulseSpd * 0));
						if (HPPulseInc == 1 || HPPulseInc == 19) HPPulseScale = (1.00 + (HPRecPulseSpd * 0.25));
						if (HPPulseInc == 2 || HPPulseInc == 18) HPPulseScale = (1.00 + (HPRecPulseSpd * 0.5));
						if (HPPulseInc == 3 || HPPulseInc == 17) HPPulseScale = (1.00 + (HPRecPulseSpd * 0.75));
						if (HPPulseInc == 4 || HPPulseInc == 16) HPPulseScale = (1.00 + (HPRecPulseSpd * 1.0));
						if (HPPulseInc == 5 || HPPulseInc == 15) HPPulseScale = (1.00 + (HPRecPulseSpd * 1.25));
						if (HPPulseInc == 6 || HPPulseInc == 14) HPPulseScale = (1.00 + (HPRecPulseSpd * 1.5));
						if (HPPulseInc == 7 || HPPulseInc == 13) HPPulseScale = (1.00 + (HPRecPulseSpd * 1.75));
						if (HPPulseInc == 8 || HPPulseInc == 12) HPPulseScale = (1.00 + (HPRecPulseSpd * 2.0));
						if (HPPulseInc == 9 || HPPulseInc == 11) HPPulseScale = (1.00 + (HPRecPulseSpd * 2.25));
						if (HPPulseInc == 10) HPPulseScale = (1.00 + (HPRecPulseSpd * 2.5));

						if (HPPulseInc == 21 || HPPulseInc == 39) HPPulseScale = (1.00 + (HPRecPulseSpd * -0.25));
						if (HPPulseInc == 22 || HPPulseInc == 38) HPPulseScale = (1.00 + (HPRecPulseSpd * -0.5));
						if (HPPulseInc == 23 || HPPulseInc == 37) HPPulseScale = (1.00 + (HPRecPulseSpd * -0.75));
						if (HPPulseInc == 24 || HPPulseInc == 36) HPPulseScale = (1.00 + (HPRecPulseSpd * -1.0));
						if (HPPulseInc == 25 || HPPulseInc == 35) HPPulseScale = (1.00 + (HPRecPulseSpd * -1.25));
						if (HPPulseInc == 26 || HPPulseInc == 34) HPPulseScale = (1.00 + (HPRecPulseSpd * -1.5));
						if (HPPulseInc == 27 || HPPulseInc == 33) HPPulseScale = (1.00 + (HPRecPulseSpd * -1.75));
						if (HPPulseInc == 28 || HPPulseInc == 32) HPPulseScale = (1.00 + (HPRecPulseSpd * -2.0));
						if (HPPulseInc == 29 || HPPulseInc == 31) HPPulseScale = (1.00 + (HPRecPulseSpd * -2.25));
						if (HPPulseInc == 30) HPPulseScale = (1.00 + (HPRecPulseSpd * -2.5));
					}
					else
					{
						HPPulseScale = 1.00;
						HPPulseInc = 0;
					}
					
					if (MiscItem.APRecHUDTimer >= 36 && MiscItem.APRecHUDAmt > 0)
					{
						APPulseInc = (level.time + MiscItem.APHUDPulseTimeP) % 40;
						if (APPulseInc == 0 || APPulseInc == 20) APPulseScale = (1.00 + (APRecPulseSpd * 0));
						if (APPulseInc == 1 || APPulseInc == 19) APPulseScale = (1.00 + (APRecPulseSpd * 0.25));
						if (APPulseInc == 2 || APPulseInc == 18) APPulseScale = (1.00 + (APRecPulseSpd * 0.5));
						if (APPulseInc == 3 || APPulseInc == 17) APPulseScale = (1.00 + (APRecPulseSpd * 0.75));
						if (APPulseInc == 4 || APPulseInc == 16) APPulseScale = (1.00 + (APRecPulseSpd * 1));
						if (APPulseInc == 5 || APPulseInc == 15) APPulseScale = (1.00 + (APRecPulseSpd * 1.25));
						if (APPulseInc == 6 || APPulseInc == 14) APPulseScale = (1.00 + (APRecPulseSpd * 1.5));
						if (APPulseInc == 7 || APPulseInc == 13) APPulseScale = (1.00 + (APRecPulseSpd * 1.75));
						if (APPulseInc == 8 || APPulseInc == 12) APPulseScale = (1.00 + (APRecPulseSpd * 2));
						if (APPulseInc == 9 || APPulseInc == 11) APPulseScale = (1.00 + (APRecPulseSpd * 2.25));
						if (APPulseInc == 10) APPulseScale = (1.00 + (APRecPulseSpd * 2.5));

						if (APPulseInc == 21 || APPulseInc == 39) APPulseScale = (1.00 + (APRecPulseSpd * -0.25));
						if (APPulseInc == 22 || APPulseInc == 38) APPulseScale = (1.00 + (APRecPulseSpd * -0.5));
						if (APPulseInc == 23 || APPulseInc == 37) APPulseScale = (1.00 + (APRecPulseSpd * -0.75));
						if (APPulseInc == 24 || APPulseInc == 36) APPulseScale = (1.00 + (APRecPulseSpd * -1));
						if (APPulseInc == 25 || APPulseInc == 35) APPulseScale = (1.00 + (APRecPulseSpd * -1.25));
						if (APPulseInc == 26 || APPulseInc == 34) APPulseScale = (1.00 + (APRecPulseSpd * -1.5));
						if (APPulseInc == 27 || APPulseInc == 33) APPulseScale = (1.00 + (APRecPulseSpd * -1.75));
						if (APPulseInc == 28 || APPulseInc == 32) APPulseScale = (1.00 + (APRecPulseSpd * -2));
						if (APPulseInc == 29 || APPulseInc == 31) APPulseScale = (1.00 + (APRecPulseSpd * -2.25));
						if (APPulseInc == 30) APPulseScale = (1.00 + (APRecPulseSpd * -2.5));
					}
					else
					{
						APPulseScale = 1.00;
						APPulseInc = 0;
					}
				}
			}
			int DigX, DigY, Spacing;
			int CurrHealth = CPlayerPawn.health;
			int MaxHealthTrue = MiscItem.MaxHealthTrue;
			
			//*****************
			//* Damage Border *
			//*****************
			[CurrHealth, MaxHealthTrue] = DrawDmgBorderFullScreen(CurrHealth,MaxHealthTrue);
			
			//**********
			//* Health *
			//**********
			int ValueAmt = CurrHealth;
			string ValueAmtS = FormatNumber(ValueAmt);
			int PlayerMaxHP = MaxHealthTrue;
			if (CPlayerPawn.GetClassName() == "RatPlayer") PlayerMaxHP *= 0.30;
			string PlayerMaxHPS = FormatNumber(PlayerMaxHP);

			int HealthDigits = 2;
			HealthDigits = PlayerMaxHPS.Length();
			if (ValueAmt > PlayerMaxHP) HealthDigits = ValueAmtS.Length();

			int SlashUnit = (-6 * (HealthDigits-2));
			int HealthColor = font.CR_brick;
			bool IsInvuln = false;
			if (CPlayerPawn.bINVULNERABLE || 
					 CPlayerPawn.CountInv("PowerInvulnerable") || CPlayerPawn.CountInv("PowerInvulnDD") || 
					 CPlayer.cheats & CF_GODMODE2 || CPlayer.cheats & CF_GODMODE) IsInvuln = true;
			if (IsInvuln) HealthColor = font.CR_Gold;
			//health
			textureid HealthIcon = TexMan.CheckForTexture("ARTIWINE", TexMan.TYPE_MiscPatch);
			if (CPlayerPawn.player.poisoncount) HealthIcon = TexMan.CheckForTexture("ARTIWINP", TexMan.TYPE_MiscPatch);
			if (CPlayer.cheats & CF_BUDDHA2) HealthIcon = TexMan.CheckForTexture("ARTIWINB", TexMan.TYPE_MiscPatch);
			if (CPlayer.cheats & CF_GODMODE2) HealthIcon = TexMan.CheckForTexture("ARTIWING", TexMan.TYPE_MiscPatch);
			DrawTexture(HealthIcon, ((64+HPDmgShakeX), (-4+HPDmgShakeY))); // 51, -3
			DrawString(mDDMFont, FormatNumber(PlayerMaxHP), ((49+HPDmgShakeX), (-12+HPDmgShakeY)), DI_TEXT_ALIGN_RIGHT, HealthColor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*HPPulseScale)); // 41, -43
			DrawString(mDDMFont, "/", (((24+SlashUnit)+HPDmgShakeX), (-18+HPDmgShakeY)), DI_TEXT_ALIGN_RIGHT, HealthColor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*HPPulseScale)); // 41, -43
			double HealthAlpha = 0.90;
			double ScaleSal;
			double XScal = 1.00;
			double YScal = 1.00;
			int Direction = 1;
			int ScalerBase, Scaler, Scaler2, ScalerDiv;
			double ScaleIncAmt;
			double ScaleAmtBase = 1.334;
			if (ValueAmt <= 0)
			{
				HealthAlpha *= 0.1;
				HealthColor = font.CR_black;
			}
			else
			{
				if (MiscItem.oldhealthratio == 3 && level.time % 6 >= 3) 
				{
					HealthAlpha = 0.125;
				}
				else if (MiscItem.oldhealthratio == 2 && level.time % 18 >= 9) 
				{
					HealthAlpha *= 0.25;
				}
				else if (MiscItem.oldhealthratio == 1 && level.time % 36 >= 18) 
				{
					HealthAlpha *= 0.5;
				}
				else 
				{
					if (ValueAmt > PlayerMaxHP)
					{
						ScalerBase = 192;
						ScaleAmtBase = 1.0;
						ScaleSal = 0.25;
						HealthColor = font.CR_Teal;
						if (ValueAmt >= (PlayerMaxHP * 1.334))
						{
							ScalerBase = 128;
							ScaleAmtBase = 1.0625;
							ScaleSal = 0.234375;
							HealthColor = font.CR_Cyan;
							if (ValueAmt >= (PlayerMaxHP * 1.667))
							{
								ScalerBase = 96;
								ScaleAmtBase = 1.125;
								ScaleSal = 0.21875;
								HealthColor = font.CR_Sapphire;
								if (ValueAmt >= (PlayerMaxHP * 2))
								{
									ScalerBase = 64;
									ScaleAmtBase = 1.1875;
									ScaleSal = 0.203125;
									HealthColor = font.CR_LightBlue;
									if (ValueAmt >= (PlayerMaxHP * 2.5))
									{
										ScalerBase = 32;
										ScaleAmtBase = 1.25;
										ScaleSal = 0.1875;
										HealthColor = font.CR_Purple;
										if (ValueAmt >= (PlayerMaxHP * 3.0))
										{
											ScalerBase = 16;
											ScaleAmtBase = 1.3125;
											ScaleSal = 0.171875;
											HealthColor = font.CR_Gold;
										}
									}
								}
							}
						}
						if (!ScaleSal) ScaleSal = 0.25;
						if (!ScalerBase) ScalerBase = 192;
						ScaleIncAmt = (ScaleSal / (ScalerBase * 1.0)); //0.00166667;
						
						Scaler = (level.time % ScalerBase);
						if (Scaler >= (ScalerBase*0.5) && Scaler <= (ScalerBase-1)) Scaler2 = (ScalerBase - Scaler);
																																	else Scaler2 = Scaler;
						XScal = YScal = 1.0 + (Scaler2 * (ScaleIncAmt * ScaleAmtBase)); // 4
						//Console.Printf("Scaler2: %d (%d), ScaleIncAmt: %.8f (%d)", Scaler2, Scaler, ScaleIncAmt, ScalerBase);
					}
				}
			}
			//Console.Printf("scal: %.8f / %.8f", XScal, YScal);
			if (IsInvuln)
			{
				HealthColor = font.CR_Gold;
			}
			else
			{
				if (CPlayerPawn.player.poisoncount) 
				{
					if (level.time % 16 >= 8) HealthColor = font.CR_DarkRed;
					else HealthColor = font.CR_DarkGreen;
				}
			}
			DrawString(mDDLFont, FormatNumber(mHealthInterpolator.GetValue()), ((49+HPDmgShakeX), (-28+HPDmgShakeY)), DI_TEXT_ALIGN_RIGHT, HealthColor, HealthAlpha, FontWrapWidth, FontLineSpace, ((XScal*1.25, YScal*1.25)*HPPulseScale));
			
			//*************************
			//* HP Gain [Upper Right] (2, -32)
			//*************************
			double HUDHitAlpha = 1.00;
			If (MiscItem)
			{
				if (MiscItem.HPRecHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.HPRecHUDTimer))));
				else HUDHitAlpha = 1.00;
			}
			int HUDNumHitValue = 0;
			If (MiscItem) HUDNumHitValue = MiscItem.HPRecHUDAmt;
			string HUDStringHit = "+";
			HUDStringHit.AppendFormat("%d", HUDNumHitValue);
			if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (2, -32), DI_TEXT_ALIGN_LEFT, font.CR_Green, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43

			//*************************
			//* HP Loss [Lower Left] (2, -24)
			//*************************
			HUDNumHitValue = 0;
			If (MiscItem)
			{
				if (MiscItem.HPDmgHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.HPDmgHUDTimer))));
				else HUDHitAlpha = 1.00;
			}
			If (MiscItem) HUDNumHitValue = MiscItem.HPDmgHUDAmt;
			HUDStringHit = "-";
			HUDStringHit.AppendFormat("%d", HUDNumHitValue);
			if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (2, -24), DI_TEXT_ALIGN_LEFT, font.CR_Brick, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
			
			//*************************
			//* Max HP Gain [Lower Right] (5, -9)
			//*************************
			HUDNumHitValue = 0;
			If (MiscItem)
			{
				if (MiscItem.MaxHPIncTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.MaxHPIncTimer))));
				else HUDHitAlpha = 1.00;
			}
			If (MiscItem) HUDNumHitValue = MiscItem.MaxHPIncAmt;
			HUDStringHit = "+";
			HUDStringHit.AppendFormat("%d", HUDNumHitValue);
			if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (5, -9), DI_TEXT_ALIGN_LEFT, font.CR_Gold, HUDHitAlpha, FontWrapWidth, FontLineSpace, (FontScale*0.8)); // 41, -43
			
			//****************
			//* misc [speed] *
			//****************
			double BaseMass = 1.0;
			double BaseSpeed = 1.0;
			double BaseHPRegen = 1.0;
			int JumpHeight = 64;
			string SpeedVal = "";
			string JumpVal = "";
			string RegenVal = "";
			string MassVal = "";
			int ExtY = 0;
			int BaseY = -27; // -21
			if (MiscItem && CurrHealth > 0) 
			{
				if (CurrHealth != PlayerMaxHP) ExtY = -3;
				FontScale = (1.0, 1.0);
				BaseSpeed = MiscItem.HUDSpeed * 100;
				int SpeedCLR = font.cr_white;
				if (BaseSpeed > 100.0000) SpeedCLR = font.cr_blue;
				if (BaseSpeed < 100.0000) SpeedCLR = font.cr_red;
				SpeedVal.AppendFormat("%.2f%% MoveSpeed", BaseSpeed);
				DrawString(mArmSaveFont, SpeedVal, (79, (BaseY+ExtY)), DI_TEXT_ALIGN_LEFT, SpeedCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43

				BaseY += 6;
				JumpHeight = MiscItem.TrueJumpHeight;
				JumpVal.AppendFormat("%d Jump Height", JumpHeight);
				DrawString(mArmSaveFont, JumpVal, (79, (BaseY+ExtY)), DI_TEXT_ALIGN_LEFT, SpeedCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43

				BaseY += 6;
				BaseMass = MiscItem.TotalMass;
				int MassCLR = font.cr_white;
				if (BaseMass > MiscItem.BaseMass) MassCLR = font.cr_blue;
				if (BaseMass < MiscItem.BaseMass) MassCLR = font.cr_red;
				MassVal.AppendFormat("%d Balance", BaseMass);
				DrawString(mArmSaveFont, MassVal, (79, (BaseY+ExtY)), DI_TEXT_ALIGN_LEFT, MassCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43

				if (CurrHealth != PlayerMaxHP)
				{
					BaseY += 6;
					BaseHPRegen = MiscItem.BaseRegenMulti * 100;
					int RegenCLR = font.cr_white;
					if (CurrHealth < PlayerMaxHP) 
					{
						if (BaseHPRegen > 100.0000) RegenCLR = font.cr_blue;
						if (BaseHPRegen < 100.0000) RegenCLR = font.cr_red;
						RegenVal.AppendFormat("%.2f%% Regen Speed", BaseHPRegen);
					}
					if (CurrHealth > PlayerMaxHP) 
					{
						if (BaseHPRegen > 100.0000) RegenCLR = font.cr_red;
						if (BaseHPRegen < 100.0000) RegenCLR = font.cr_blue;
						RegenVal.AppendFormat("%.2f%% Degen Speed", BaseHPRegen);
					}
					DrawString(mArmSaveFont, RegenVal, (79, (BaseY+ExtY)), DI_TEXT_ALIGN_LEFT, RegenCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				FontScale = (1.25, 1.25);
			}
			
			
			//*********
			//* Armor *
			//*********
			int ArmorColor = font.CR_White; 
			int ArmorMax;
			double ArmorProtect;
			string ArmorMaxS;
			string ArmorSaveAmt;
			name armorclasstype = "KGArmor";
			let armor = KGArmor(CPlayerPawn.FindInventory(armorclasstype));
			int ArmorScavengingLevel = CPlayerPawn.CountInv("ArmorScavengerKit");
			if (armor != null && armor.Amount > 0)
			{
				ArmorProtect = Armor.SavePercent * 100;
				ArmorSaveAmt = "";
				ArmorSaveAmt.AppendFormat("%.2f%%", ArmorProtect);
				ArmorSaveAmt.AppendFormat(" damage resist");
				ValueAmt = armor.Amount;
				ValueAmtS = FormatNumber(ValueAmt);

				DrawInventoryIcon(armor, ((64+APDmgShakeX), (-32+APDmgShakeY))); // 58, -24
				if (MiscItem.KnightGownTier == 1)
				{
					ArmorColor = font.CR_Purple;
					ArmorMax = MiscItem.ArmorItemMax1;
				}
				if (MiscItem.KnightGownTier == 2)
				{
					ArmorColor = font.CR_Cyan;
					ArmorMax = MiscItem.ArmorItemMax2;
				}
				if (MiscItem.KnightGownTier == 3)
				{
					ArmorColor = font.CR_Gold;
					ArmorMax = MiscItem.ArmorItemMax3;
				}
				if (MiscItem.KnightGownTier == 4)
				{
					ArmorColor = font.CR_Green;
					ArmorMax = MiscItem.ArmorItemMax4;
				}
				ValueAmtS = FormatNumber(ValueAmt);
				ArmorMaxS = FormatNumber(ArmorMax);
				
				if (exex_ikaripointsenabled && MiscItem)
				{
					bool HasIPIcon = false;
					string image = "";
					double IPCost = 0.0;
					textureid IPIcon = TexMan.CheckForTexture("IPIconUN", TexMan.TYPE_MiscPatch);
					int CanUseIPATK = 0;
					int IPIconTimer = level.time % 8;
					int IPIconSpeed = 1;
					Vector2 IPIconPos = (0, 0);
					Vector2 IPIconScale = (2.0, 2.0);
					if (CPlayerPawn && MiscItem.IPUseMode) IPIconSpeed = 2;

					if (MiscItem.KnightGownTier == 1)
					{
						HasIPIcon = true;
						IPCost = A_GetIPCost(1001);
					}
					if (MiscItem.KnightGownTier == 2)
					{
						HasIPIcon = true;
						IPCost = A_GetIPCost(1002);
					}
					if (MiscItem.KnightGownTier == 3)
					{
						HasIPIcon = true;
						IPCost = A_GetIPCost(1003);
					}
					if (MiscItem.KnightGownTier == 4)
					{
						HasIPIcon = true;
						IPCost = A_GetIPCost(1004);
					}
					if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
					else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
					if (dydudebug_infiniteip) CanUseIPATK = 3;
					if (dydudebug_ipdisplays && HasIPIcon) Console.Printf("\c[blue][SBAR Armor (%s)] Cost: %.4f, IPIconSpeed: %d", armor.GetClassName(), IPCost, IPIconSpeed);

					// Shows the Proper Icon if the above meets criteria
					if (HasIPIcon) 
					{
						if (CanUseIPATK) 
						{
							if (IPIconSpeed <= 1) IPIcon = TexMan.CheckForTexture("IPIcon1U", TexMan.TYPE_MiscPatch);
							if (IPIconSpeed >= 2) IPIcon = TexMan.CheckForTexture("IPIcon2U", TexMan.TYPE_MiscPatch);
							if (CanUseIPATK == 1)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 32;
									if (IPIconTimer >= 0 && IPIconTimer <= 7) IPIconPos += (0, 0);
									if (IPIconTimer >= 8 && IPIconTimer <= 15) IPIconPos += (1, 0);
									if (IPIconTimer >= 16 && IPIconTimer <= 23) IPIconPos += (1, 1);
									if (IPIconTimer >= 24 && IPIconTimer <= 31) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 24;
									if (IPIconTimer >= 0 && IPIconTimer <= 5) IPIconPos += (0, 0);
									if (IPIconTimer >= 6 && IPIconTimer <= 11) IPIconPos += (1, 0);
									if (IPIconTimer >= 12 && IPIconTimer <= 17) IPIconPos += (1, 1);
									if (IPIconTimer >= 18 && IPIconTimer <= 23) IPIconPos += (0, 1);
								}
							}
							if (CanUseIPATK == 2)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 16;
									if (IPIconTimer >= 0 && IPIconTimer <= 3) IPIconPos += (0, 0);
									if (IPIconTimer >= 4 && IPIconTimer <= 7) IPIconPos += (1, 0);
									if (IPIconTimer >= 8 && IPIconTimer <= 11) IPIconPos += (1, 1);
									if (IPIconTimer >= 12 && IPIconTimer <= 15) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 12;
									if (IPIconTimer >= 0 && IPIconTimer <= 2) IPIconPos += (0, 0);
									if (IPIconTimer >= 3 && IPIconTimer <= 5) IPIconPos += (1, 0);
									if (IPIconTimer >= 6 && IPIconTimer <= 8) IPIconPos += (1, 1);
									if (IPIconTimer >= 9 && IPIconTimer <= 11) IPIconPos += (0, 1);
								}
							}
							if (CanUseIPATK >= 3)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 8;
									if (IPIconTimer >= 0 && IPIconTimer <= 1) IPIconPos += (0, 0);
									if (IPIconTimer >= 2 && IPIconTimer <= 3) IPIconPos += (1, 0);
									if (IPIconTimer >= 4 && IPIconTimer <= 5) IPIconPos += (1, 1);
									if (IPIconTimer >= 6 && IPIconTimer <= 7) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 4;
									if (IPIconTimer == 0) IPIconPos += (0, 0);
									if (IPIconTimer == 1) IPIconPos += (1, 0);
									if (IPIconTimer == 2) IPIconPos += (1, 1);
									if (IPIconTimer == 3) IPIconPos += (0, 1);
								}
							}
						}
						else
						{
							IPIcon = TexMan.CheckForTexture("IPIconUN", TexMan.TYPE_MiscPatch);
						}
						DrawTexture(IPIcon, IPIconPos + ((68+APDmgShakeX), (-58+APDmgShakeY)), DI_ITEM_CENTER, 1.0, (-1, -1), IPIconScale);
					}
					string LegendStr = "";
					string UserKeyString;
					Array<String> UserKeys;
					int LegendFlags = DI_TEXT_ALIGN_CENTER;
					int LegendFontCLR = font.cr_gray;
					double LegendAlpha = 0.9;
					Vector2 LegendScale = (1.0, 1.0);
					int LX, LY;
					LX = 64; // 64;
					LY = -46; // -46;
					UserKeyString = UIKeybinds.getKeyboard("UseArmorIP");
					if (UserKeyString != "")
					{
						UserKeyString.Split(UserKeys,", ");
						LegendStr.AppendFormat("\c[fire]%s\c-", UserKeys[0]);
					}
					else 
					{
						LegendStr.AppendFormat("\c[red][unb]\c-");
					}
					if (LegendStr != "" && CanUseIPATK && IPIconSpeed >= 2) DrawString(mConFont, LegendStr, ((LX+APDmgShakeX), (LY+APDmgShakeY)), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, (LegendScale*APPulseScale));
				}

				int ArmorDigits = 2;
				
				ArmorDigits = ArmorMaxS.Length();
				if (ValueAmt > ArmorMax) ArmorDigits = ValueAmtS.Length();
				
				SlashUnit = (-6 * (ArmorDigits-2));
				
				// Amounts
				DrawString(mDDMFont, FormatNumber(ArmorMax), ((49+APDmgShakeX), (-42+APDmgShakeY)), DI_TEXT_ALIGN_RIGHT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*APPulseScale)); // 41, -43
				DrawString(mDDMFont, "/", (((20+SlashUnit)+APDmgShakeX), (-50+APDmgShakeY)), DI_TEXT_ALIGN_RIGHT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*APPulseScale)); // 41, -43
				DrawString(mDDLFont, FormatNumber(mArmorInterpolator.GetValue()), ((49+APDmgShakeX), (-59+APDmgShakeY)), DI_TEXT_ALIGN_RIGHT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*APPulseScale)); // 41, -43
				
				FontScale = (1.0, 1.0);
				int ArmModY = 0;
				// + Defense
				int BaseFlatDefValue;
				if (MiscItem) BaseFlatDefValue = MiscItem.BaseFlatDefValue;
				int ArmorFlatDefValue = 0 + BaseFlatDefValue;
				int BaseArmorFlat;
				string ArmorFlatDef = "";
				if (MiscItem) BaseArmorFlat = MiscItem.ArmorDefValueHUD;
				
				double ArmFactor;
				if (ArmorMax > 0) ArmFactor = double(ValueAmt * 1.0 / ArmorMax);
				//Console.Printf("BaseArmorFlat: %d, Amt: %d / %d, ArmFactor: %.8f", BaseArmorFlat, ValueAmt, ArmorMax, ArmFactor);
				ArmorFlatDefValue += (BaseArmorFlat * ArmFactor);
				ArmorFlatDef.AppendFormat("-");
				ArmorFlatDef.AppendFormat("%d ", ArmorFlatDefValue);
				ArmorFlatDef.AppendFormat("flat damage");
				
				//
				string ArmorScavengeLevel = "";
				if (ArmorScavengingLevel > 0) 
				{
					ArmorScavengeLevel.AppendFormat("+");
					ArmorScavengeLevel.AppendFormat("%d%% ", ArmorScavengingLevel);
					ArmorScavengeLevel.AppendFormat("armor scavenge power");
				}
				
				if (ArmorScavengingLevel > 0) ArmModY -= 3;
				if (armor.Amount > 0 && ArmorFlatDefValue) ArmModY -= 3;
				
				int firstliney = -50;
				if (ArmorProtect) DrawString(mArmSaveFont, ArmorSaveAmt, (79, firstliney+ArmModY), DI_TEXT_ALIGN_LEFT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				if (armor.Amount > 0 && ArmorFlatDefValue) 
				{
					firstliney += 6;
					DrawString(mArmSaveFont, ArmorFlatDef, (79, firstliney+ArmModY), DI_TEXT_ALIGN_LEFT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				if (ArmorScavengingLevel > 0)
				{
					firstliney += 6;
					DrawString(mArmSaveFont, ArmorScavengeLevel, (79, firstliney+ArmModY), DI_TEXT_ALIGN_LEFT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				FontScale = (1.25, 1.25);
			}
			else
			{
				FontScale = (1.0, 1.0);

				FontScale = (1.25, 1.25);
				DrawString(mDDLFont, "N/A", (40, -55), DI_TEXT_ALIGN_RIGHT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				FontScale = (1.00, 1.00);
				// + Defense
				int BaseFlatDefValue;
				if (MiscItem) BaseFlatDefValue = MiscItem.BaseFlatDefValue;
				int ArmorFlatDefValue = 0 + BaseFlatDefValue;
				string ArmorFlatDef = "";
				ArmorFlatDef.AppendFormat("-");
				ArmorFlatDef.AppendFormat("%d ", ArmorFlatDefValue);
				ArmorFlatDef.AppendFormat("flat damage");
				DrawTexture(TexMan.CheckForTexture("KGWNY0", TexMan.TYPE_MiscPatch), (64, -32)); // 58, -24

				int firstliney = -50;
				if (ArmorFlatDefValue) DrawString(mArmSaveFont, ArmorFlatDef, (79, firstliney), DI_TEXT_ALIGN_LEFT, ArmorColor, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43

				FontScale = (1.25, 1.25);
			}
			
			
			//*************************
			//* AP Gain [Upper Right] *
			//*************************
			HUDHitAlpha = 1.00;
			If (MiscItem)
			{
				if (MiscItem.APRecHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.APRecHUDTimer))));
				else HUDHitAlpha = 1.00;
			}
			HUDNumHitValue = 0;
			If (MiscItem) HUDNumHitValue = MiscItem.APRecHUDAmt;
			HUDStringHit = "+";
			HUDStringHit.AppendFormat("%d", HUDNumHitValue);
			if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (2, -64), DI_TEXT_ALIGN_LEFT, font.CR_DarkGreen, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
			
			// AP Loss [Lower Left] (2, -64)
			If (MiscItem)
			{
				if (MiscItem.APDmgHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.APDmgHUDTimer))));
				else HUDHitAlpha = 1.00;
			}
			HUDNumHitValue = 0;
			If (MiscItem) HUDNumHitValue = MiscItem.APDmgHUDAmt;
			HUDStringHit = "-";
			HUDStringHit.AppendFormat("%d", HUDNumHitValue);
			if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (2, -56), DI_TEXT_ALIGN_LEFT, font.CR_Red, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
			
			
			int Digits;
			//***************
			//* level / EXP *
			//***************
			DigX = 32; // 48;
			DigY = -80; // -82;
			if (exex_expenabled)
			{
				if (dyduhud_showexplevel)
				{
					DrawString(mDDLFont, FormatNumber(VisiblePlayerLevel, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
					DrawString(mSmallFont, "LVL", (DigX, DigY-9), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				if (dyduhud_showexperience)
				{
					//EXP
					int EXPPts = CPlayerPawn.CountInv("ExpPts");
					int EXPNeeded = CPlayerPawn.CountInv("ExpPtsNeeded");
					if (EXPNeeded < 100000000) Digits = 8;
					if (EXPNeeded < 10000000) Digits = 7;
					if (EXPNeeded < 1000000) Digits = 6;
					if (EXPNeeded < 100000) Digits = 5;
					if (EXPNeeded < 10000) Digits = 4;
					if (EXPNeeded < 1000) Digits = 3;
					if (EXPNeeded < 100) Digits = 2;
					if (EXPNeeded < 10) Digits = 1;
					Spacing = 6; // 6
					Spacing *= 1.25;
					DigX += 16 + (Digits * Spacing);
					DrawString(mDDMFont, FormatNumber(mEXPInterpolator.GetValue(), Digits), (DigX, DigY-6), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
					DrawString(mDDMFont, "/", ((DigX+(Spacing*1.334)), DigY-2), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
					DrawString(mDDMFont, FormatNumber(EXPNeeded, Digits), (DigX, DigY+4), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				
				//*************************
				//* EXP Gain / Kill Combo *
				//*************************
				double EXPBaseScale = 1.0;
				int EXPScaleTimer; 
				int EXPScaleTimerMod = 35;
				if (MiscItem) EXPScaleTimer = MiscItem.EXPGainHUDTimer % EXPScaleTimerMod;
				double BaseEXPScaleFrame = 0.125 / double(EXPScaleTimerMod * 0.5);
				int ExpPulseFrame = (EXPScaleTimerMod * 0.5);
				ExpPulseFrame = abs(ExpPulseFrame - EXPScaleTimer);
				double ExpTrueScale = EXPBaseScale + (ExpPulseFrame * BaseEXPScaleFrame);
				vector2 EXPScale = (ExpTrueScale, ExpTrueScale); //(0.875, 0.875);

				HUDNumHitValue = 0;
				HUDHitAlpha = 1.00;
				If (MiscItem)
				{
					if (MiscItem.EXPGainHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.EXPGainHUDTimer))));
					else HUDHitAlpha = 1.00;
				}
				HUDNumHitValue = 0;
				If (MiscItem) HUDNumHitValue = MiscItem.EXPGainHUDAmt;
				HUDStringHit = "+";
				HUDStringHit.AppendFormat("%d", HUDNumHitValue);
				if (MiscItem && MiscItem.KillComboCount) HUDStringHit.AppendFormat(" [%d]", MiscItem.KillComboCount);
				DigX = 3;
				DigY = -67;
				if (HUDNumHitValue > 0) DrawString(mConFont, HUDStringHit, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.CR_Gold, HUDHitAlpha, FontWrapWidth, FontLineSpace, EXPScale); // 41, -43
			}

			//********
			//* Keys *
			//********
			Vector2 KeyPos = (240, -6); // (-10, 24)
			int RowSize = 6;
			Vector2 KeyScale = (1.0, 1.0);
			if (gameinfo.gametype == GAME_Doom) 
			{
				KeyPos = (240, -6);
				RowSize = 3;
				KeyScale = (1.25, 1.25);
			}
			if (gameinfo.gametype == GAME_Heretic) 
			{
				KeyPos = (240, -6);
				RowSize = 3;
				KeyScale = (1.25, 1.25);
			}
			if (gameinfo.gametype == GAME_Hexen) 
			{ 
				KeyPos = (212, -8); // 256, -6
				RowSize = 2; // Hexen's key icons are far and away the largest, so this is capped to 11, the number of keys Hexen uses.
				KeyScale = (0.625, 0.625);
			}
			if (gameinfo.gametype == GAME_Strife) 
			{
				KeyPos = (216, -5); // 256, -6
				RowSize = 4; // Strife has an absurd TWENTY-EIGHT key types, at least the ones that the HUD normalLY shows. :V
				KeyScale = (0.575, 0.575);
			}
			int BaseXPos = KeyPos.x;
			int BaseYPos = KeyPos.y;

			int RowC = 0;
			double RowW = 0;
			bool ShowKeys = true;
		
			if (ShowKeys)
			{
				for (let i = CPlayerPawn.Inv; i != null; i = i.Inv)
				{
					if (i is "Key" && i.Icon.IsValid())
					{
						//Console.Printf("x: %d, y: %d, type: %s", KeyPos.x, KeyPos.y, i.GetClassName());
						DrawTexture(i.Icon, KeyPos, DI_SCREEN_LEFT_BOTTOM|DI_ITEM_CENTER, 1.0, (-1, -1), KeyScale);
						Vector2 size = TexMan.GetScaledSize(i.Icon);
						size.x *= KeyScale.x;
						size.y *= KeyScale.y;
						KeyPos.Y -= size.Y + 2; // + = down, - = up
						RowW = max(RowW, size.X);
						if (++RowC == RowSize)
						{
							KeyPos.Y = BaseYPos;
							KeyPos.X += RowW + 2;
							RowW = 0;
							RowC = 0;
						}
					}
				}
			}
			
			
			//********
			//* Dash *
			//********
			int candash = CPlayerPawn.CountInv("DashReady");
			if (candash && CPlayerPawn.CountInv("NoDashing")) candash = 0;
			int dash = CPlayerPawn.CountInv("DashGauge");
			int dashcharge = CPlayerPawn.CountInv("DashCharge");
			int dashtics = CPlayerPawn.CountInv("DashTics");
			int dashmaxcharge = CPlayerPawn.CountInv("DashMaxCharge");
			double dashmeterlength = (dyduhud_basedashmeterlength + (VisiblePlayerLevel * dyduhud_dashmetergrowperlvl));
			if (dashmeterlength > dyduhud_dashmetermaxlength) dashmeterlength = dyduhud_dashmetermaxlength;
			int dashbarunits = dash * dashmeterlength;
			DigX = 5; // 5;
			DigY = -122; // -94;
			textureid dun = TexMan.CheckForTexture("DASHUNI2", TexMan.TYPE_MiscPatch);
			if (candash) dun = TexMan.CheckForTexture("DASHUNIT", TexMan.TYPE_MiscPatch);
			int dashcost = CPlayerPawn.CountInv("DashCost");
			int dashcostunit;
			if (dashmaxcharge) dashcostunit = dashcost * 100 / dashmaxcharge;
			dashcostunit *= dashmeterlength;
			int ix;
			vector2 unitscale = (1, 1);
			if (DashMaxCharge >= dashcost)
			{
				DrawString(mSmallFont, "DASH", (DigX+38, DigY-19), DI_TEXT_ALIGN_RIGHT, font.CR_Gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				for (int i; i < (100 * dashmeterlength); i++) DrawTexture(TexMan.CheckForTexture("BLAKUNIT", TexMan.TYPE_MiscPatch), (DigX+i, DigY), 0, HX_SHADOW, (-1, -1), unitscale);
				
				for (int i; i < dashbarunits; i++) 
				{
					if (candash)
					{
						dun = TexMan.CheckForTexture("DASHUNI1", TexMan.TYPE_MiscPatch);
						unitscale = (1, 1);
						ix = (i % dashcostunit);
						if (i != 0 && ix == 0) 
						{
							unitscale = (1.125, 1.125);
							dun = TexMan.CheckForTexture("DASHUNI3", TexMan.TYPE_MiscPatch);
						}
					}
					else
					{
						dun = TexMan.CheckForTexture("DASHUNI2", TexMan.TYPE_MiscPatch);
						ix = (i % dashcostunit);
						if (i != 0 && ix == 0) 
						{
							unitscale = (1.125, 1.125);
							dun = TexMan.CheckForTexture("DASHUNI4", TexMan.TYPE_MiscPatch);
						}
					}
					
					DrawTexture(dun, (DigX+i, DigY), 0, HX_SHADOW, (-1, -1), unitscale); // -46, -1
				}
			}
			
			int dashcharges = CPlayerPawn.CountInv("DashCharges");
			if (dydudebug_dashmeter)
			{
				DigY = -126;
				DigX = 48;
				if (candash) DrawString(mDDMFont, FormatNumber(dash, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_LightBlue, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
								else DrawString(mDDMFont, FormatNumber(dash, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_Brick, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				DigY = -134;
				DigX = 48;
				if (candash) DrawString(mDDMFont, FormatNumber(dashcharge, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_LightBlue, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
								else DrawString(mDDMFont, FormatNumber(dashcharge, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_Brick, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				DigY = -126;
				DigX = 80;
				if (candash) DrawString(mDDMFont, FormatNumber(dashcharges, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_LightBlue, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
								else DrawString(mDDMFont, FormatNumber(dashcharges, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_Brick, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				if (dashtics)
				{
					DigY = -132;
					DigX = 80;
					if (candash) DrawString(mDDMFont, FormatNumber(dashtics, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_LightBlue, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
									else DrawString(mDDMFont, FormatNumber(dashtics, 3), (DigX, DigY), DI_TEXT_ALIGN_RIGHT, font.cr_Brick, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				}
			}
			
			// Air Display
			double AirMeterCurrent = CPlayerPawn.CountInv("AirMeter");
			if (AirMeterCurrent < 0) AirMeterCurrent = 0;
			double AirMeterMax = CPlayerPawn.CountInv("MaxAirMeter");
			double airmeterlength = 1.0;
			if (CPlayerPawn.CountInv("PowerStrength") || CPlayerPawn.CountInv("PowerStrengthDD")) airmeterlength *= 1.25;
			int AirUnits;
			double AirPercent;
			if (AirMeterMax > 0) 
			{
				AirUnits = AirMeterCurrent * 100 / AirMeterMax;
				AirPercent = AirMeterCurrent * 100.0 / AirMeterMax;
				if (CPlayerPawn.CountInv("PowerStrength") || CPlayerPawn.CountInv("PowerStrengthDD")) AirPercent = AirMeterCurrent * 125.0 / AirMeterMax;
			}
			if (AirMeterMax > 0 && AirUnits < AirMeterMax)
			{
				int airlow = 0;
				int airlowmod = 999;
				if (AirUnits <= randompick(33,33,34)) 
				{
					airlow = 1;
					airlowmod = 64;
				}
				if (AirUnits <= 10)
				{
					airlow = 2;
					airlowmod = 32;
				}
				if (AirUnits <= 4)
				{
					airlow = 3;
					airlowmod = 16;
				}
				if (AirUnits <= 1) 
				{
					airlow = random(3,5);
					airlowmod = 8;
				}
				int airlowFlashTimer;
				if (airlow > 0)
				{
					airlowFlashTimer = level.time % airlowmod;
				}
				AirUnits *= airmeterlength;
				unitscale = (1, 1);
				DigX = 5;
				DigY = -148;
				int lowairx, lowairy;
				double airmeterscale = 0.875;
				if (airlow)
				{
					lowairx = random(-airlow,airlow);
					lowairy = random(-airlow,airlow);
				}
				if (AirMeterMax > 0 && dyduhud_showairmeter)
				{
					if ((AirMeterCurrent < AirMeterMax || MiscItem.PlayerWaterLevel >= 3) && AirMeterMax > 0)
					{
						if (dydudebug_airmeter == 1) Console.Printf("[HUD] %d / %d (AirUnits: %d)", AirMeterCurrent, AirMeterMax, AirUnits);
						DrawString(mSmallFont, "AIR", (DigX+29+lowairx, DigY-18+lowairy), DI_TEXT_ALIGN_RIGHT, font.CR_sapphire, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
						for (int i; i < (100 * airmeterlength); i++) DrawTexture(TexMan.CheckForTexture("BLAKUNIT", TexMan.TYPE_MiscPatch), (DigX+i+lowairx, DigY+lowairy), 0, HX_SHADOW, (-1, -1), unitscale);
						
						for (int i; i < AirUnits; i++) 
						{
							dun  = TexMan.CheckForTexture("DASHUNI1", TexMan.TYPE_MiscPatch);
							unitscale = (1, 1);
							if (airlow > 0 && airlowmod > 0)
							{
								if (airlowFlashTimer >= (airlowmod*0.5)) dun = TexMan.CheckForTexture("DASHUNI2", TexMan.TYPE_MiscPatch);
							}
							DrawTexture(dun, (DigX+i+lowairx, DigY+lowairy), 0, HX_SHADOW, (-1, -1), unitscale); // -46, -1
						}
						double airseconds = (AirMeterCurrent / TICRATE);
						string airsecstring = "";
						if (dyduhud_airmeterdisplay)
						{
							if (dyduhud_airmeterdisplay & 1) airsecstring.AppendFormat("%.1f", airseconds);
							if (dyduhud_airmeterdisplay & 1 && dyduhud_airmeterdisplay & 2) 
							{
								airmeterscale = 0.75;
								airsecstring.AppendFormat(" (");
							}
							if (dyduhud_airmeterdisplay & 2) airsecstring.AppendFormat("%.1f%%", AirPercent);
							if (dyduhud_airmeterdisplay & 1 && dyduhud_airmeterdisplay & 2)
							{
								airsecstring.AppendFormat(")");
							}
							int AirSecsFont = font.CR_sapphire;
							if (AirMeterCurrent <= 0) AirSecsFont = font.CR_Red;
							DrawString(mSmallFont, airsecstring, (DigX+(46*airmeterlength)+lowairx, DigY-9+lowairy), DI_TEXT_ALIGN_CENTER, AirSecsFont, FontAlpha, FontWrapWidth, FontLineSpace, FontScale*airmeterscale); // 41, -43
						}
					}
				}
			}
			
			// IP % Display
			double IPIconPulseScale = 1.00;
			int IPIconScaleTimer;
			if (MiscItem) IPIconScaleTimer = (level.time + MiscItem.IPHUDPulseTimeP) % 40;
			if (exex_ikaripointsenabled)
			{
				if (MiscItem)
				{
					if (MiscItem.IPHUDPulseType <= 1) IPRecPulseSpd = 0.02;
					if (MiscItem.IPHUDPulseType == 2) IPRecPulseSpd = 0.03;
					if (MiscItem.IPHUDPulseType == 3) IPRecPulseSpd = 0.05;
					if (MiscItem.IPHUDPulseType >= 4) IPRecPulseSpd = 0.08;

					if (MiscItem.IPHUDPulseTimer)
					{
						if (IPIconScaleTimer == 0 || IPIconScaleTimer == 20) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 0));
						if (IPIconScaleTimer == 1 || IPIconScaleTimer == 19) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 0.25));
						if (IPIconScaleTimer == 2 || IPIconScaleTimer == 18) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 0.5));
						if (IPIconScaleTimer == 3 || IPIconScaleTimer == 17) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 0.75));
						if (IPIconScaleTimer == 4 || IPIconScaleTimer == 16) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 1.0));
						if (IPIconScaleTimer == 5 || IPIconScaleTimer == 15) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 1.25));
						if (IPIconScaleTimer == 6 || IPIconScaleTimer == 14) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 1.5));
						if (IPIconScaleTimer == 7 || IPIconScaleTimer == 13) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 1.75));
						if (IPIconScaleTimer == 8 || IPIconScaleTimer == 12) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 2.0));
						if (IPIconScaleTimer == 9 || IPIconScaleTimer == 11) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 2.25));
						if (IPIconScaleTimer == 10) IPIconPulseScale = (1.00 + (IPRecPulseSpd * 2.5));

						if (IPIconScaleTimer == 21 || IPIconScaleTimer == 39) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -0.25));
						if (IPIconScaleTimer == 22 || IPIconScaleTimer == 38) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -0.5));
						if (IPIconScaleTimer == 23 || IPIconScaleTimer == 37) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -0.75));
						if (IPIconScaleTimer == 24 || IPIconScaleTimer == 36) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -1.0));
						if (IPIconScaleTimer == 25 || IPIconScaleTimer == 35) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -1.25));
						if (IPIconScaleTimer == 26 || IPIconScaleTimer == 34) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -1.5));
						if (IPIconScaleTimer == 27 || IPIconScaleTimer == 33) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -1.75));
						if (IPIconScaleTimer == 28 || IPIconScaleTimer == 32) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -2.0));
						if (IPIconScaleTimer == 29 || IPIconScaleTimer == 31) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -2.25));
						if (IPIconScaleTimer == 30) IPIconPulseScale = (1.00 + (IPRecPulseSpd * -2.5));
						
						//Console.Printf("IPHUDPulseTimer: %d, Pulse: IPIconScaleTimer: %d, IPRecPulseSpd: %.4f", MiscItem.IPHUDPulseTimer, IPIconScaleTimer, IPRecPulseSpd);
					}
				}

				int IPx;
				int IPy;
				double ItemPoints;
				string IPPts = "";
				int IPDigits;
				int IPdigitcolor = 0;
				int IPdigittimer = level.time % 30;
				if (MiscItem && MiscItem.ItemPoints >= MiscItem.MaxItemPoints)
				{
					//Console.Printf("IPdigittimer: %d", IPdigittimer);
					if (IPdigittimer >= 0 && IPdigittimer <= 4) IPdigitcolor = font.cr_red;
					if (IPdigittimer >= 5 && IPdigittimer <= 9) IPdigitcolor = font.cr_brick;
					if (IPdigittimer >= 10 && IPdigittimer <= 14) IPdigitcolor = font.cr_orange;
					if (IPdigittimer >= 15 && IPdigittimer <= 19) IPdigitcolor = font.cr_fire;
					if (IPdigittimer >= 20 && IPdigittimer <= 24) IPdigitcolor = font.cr_orange;
					if (IPdigittimer >= 25 && IPdigittimer <= 29) IPdigitcolor = font.cr_brick;
				}
				else IPdigitcolor = font.cr_red;
				
				if (MiscItem) 
				{
					ItemPoints = MiscItem.ItemPoints;
					IPPts.AppendFormat("%.2f%%", ItemPoints);

					DigX = 34; // 68
					DigY = -108; // -108
					DrawString(mDDLFont2, IPPts, ((DigX+IPDmgShakeX), (DigY+IPDmgShakeY)), DI_TEXT_ALIGN_CENTER, IPdigitcolor, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*IPIconPulseScale)); // 41, -43
					DigY -= 8;
					DrawString(mSmallFont, "IP", ((DigX+IPDmgShakeX), (DigY+IPDmgShakeY)), DI_TEXT_ALIGN_CENTER, font.cr_brick, FontAlpha, FontWrapWidth, FontLineSpace, (FontScale*IPIconPulseScale)); // 41, -43
					DigX += 65;
					DigY += 7;
					if (MiscItem.MaxIPExtensions)
					{
						vector2 IPFScale = (FontScale * 0.75);
						string IPExt = "[+";
						IPExt.AppendFormat("%.2f%% Max IP]", ((MiscItem.BaseMaxItemPoints * 0.01) * MiscItem.MaxIPExtensions));
						DrawString(mSmallFont, IPExt, ((DigX+IPDmgShakeX), (DigY+IPDmgShakeY)), DI_TEXT_ALIGN_LEFT, font.cr_green, FontAlpha, FontWrapWidth, FontLineSpace, (IPFScale*IPIconPulseScale)); // 41, -43
					}
					DigX -= 65;
					DigY -= 7;
				}
				
				string IPInputIcon = "IPINPUT0";
				if (MiscItem.IPUseMode) IPInputIcon = "IPINPUT1";
				if (MiscItem)
				{
					if (MiscItem.IPNoGainTimer)
					{
						IPInputIcon = "IPINPUT2";
						if (MiscItem.IPUseMode) IPInputIcon = "IPINPUT3";
					}
					else
					if (MiscItem.IPMortalBlowReduceTimer)
					{
						IPInputIcon = "IPINPUT4";
						if (MiscItem.IPUseMode) IPInputIcon = "IPINPUT5";
					}
					else
					{
						IPInputIcon = "IPINPUT0";
						if (MiscItem.IPUseMode) IPInputIcon = "IPINPUT1";
					}
				}
				else
				{
					IPInputIcon = "IPINPUT0";
					if (MiscItem.IPUseMode) IPInputIcon = "IPINPUT1";
				}

				vector2 IPIconScale = (1.5, 1.5);
				DigX += 50; // +50
				DigY += 22; // +22
				DrawTexture(TexMan.CheckForTexture(IPInputIcon, TexMan.TYPE_MiscPatch), ((DigX+IPDmgShakeX), (DigY+IPDmgShakeY)), DI_TEXT_ALIGN_CENTER, 1.0, (-1, -1), (IPIconScale*IPIconPulseScale));
				
				// Disipation Meter
				int DissipateTimer;
				if (MiscItem) DissipateTimer = MiscItem.IPDissipateTimer;
				string IPDisipateIcon = "";
				double IPDisipatePulse = 0.25;
				double IPDisipatePulseInc = frandompick(0.25,0.325,0.325,0.325,0.325,0.325,0.375);
				if (DissipateTimer > 2065)
				{
					IPDisipatePulseInc /= 2;
					if (level.time % 5) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 5 == 1 || level.time % 9 == 4) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 5 == 2 || level.time % 9 == 3) IPDisipatePulse += (IPDisipatePulseInc * 2);
				}
				else
				if (DissipateTimer > 1875)
				{
					IPDisipatePulseInc /= 5;
					if (level.time % 9) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 9 == 1 || level.time % 9 == 8) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 9 == 2 || level.time % 9 == 7) IPDisipatePulse += (IPDisipatePulseInc * 2);
					if (level.time % 9 == 3 || level.time % 9 == 6) IPDisipatePulse += (IPDisipatePulseInc * 3);
					if (level.time % 9 == 4 || level.time % 9 == 5) IPDisipatePulse += (IPDisipatePulseInc * 4);
				}
				else
				if (DissipateTimer > 1750)
				{
					IPDisipatePulseInc /= 9;
					if (level.time % 18) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 18 == 1 || level.time % 18 == 17) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 18 == 2 || level.time % 18 == 16) IPDisipatePulse += (IPDisipatePulseInc * 2);
					if (level.time % 18 == 3 || level.time % 18 == 15) IPDisipatePulse += (IPDisipatePulseInc * 3);
					if (level.time % 18 == 4 || level.time % 18 == 14) IPDisipatePulse += (IPDisipatePulseInc * 4);
					if (level.time % 18 == 5 || level.time % 18 == 13) IPDisipatePulse += (IPDisipatePulseInc * 5);
					if (level.time % 18 == 6 || level.time % 18 == 12) IPDisipatePulse += (IPDisipatePulseInc * 6);
					if (level.time % 18 == 7 || level.time % 18 == 11) IPDisipatePulse += (IPDisipatePulseInc * 7);
					if (level.time % 18 == 8 || level.time % 18 == 10) IPDisipatePulse += (IPDisipatePulseInc * 8);
					if (level.time % 18 == 9) IPDisipatePulse += (IPDisipatePulseInc * 9);
				}
				else
				if (DissipateTimer > 980)
				{
					IPDisipatePulseInc /= 17;
					if (level.time % 35) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 35 == 1 || level.time % 35 == 34) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 35 == 2 || level.time % 35 == 33) IPDisipatePulse += (IPDisipatePulseInc * 2);
					if (level.time % 35 == 3 || level.time % 35 == 32) IPDisipatePulse += (IPDisipatePulseInc * 3);
					if (level.time % 35 == 4 || level.time % 35 == 31) IPDisipatePulse += (IPDisipatePulseInc * 4);
					if (level.time % 35 == 5 || level.time % 35 == 30) IPDisipatePulse += (IPDisipatePulseInc * 5);
					if (level.time % 35 == 6 || level.time % 35 == 29) IPDisipatePulse += (IPDisipatePulseInc * 6);
					if (level.time % 35 == 7 || level.time % 35 == 28) IPDisipatePulse += (IPDisipatePulseInc * 7);
					if (level.time % 35 == 8 || level.time % 35 == 27) IPDisipatePulse += (IPDisipatePulseInc * 8);
					if (level.time % 35 == 9 || level.time % 35 == 26) IPDisipatePulse += (IPDisipatePulseInc * 9);
					if (level.time % 35 == 10 || level.time % 35 == 25) IPDisipatePulse += (IPDisipatePulseInc * 10);
					if (level.time % 35 == 11 || level.time % 35 == 24) IPDisipatePulse += (IPDisipatePulseInc * 11);
					if (level.time % 35 == 12 || level.time % 35 == 23) IPDisipatePulse += (IPDisipatePulseInc * 12);
					if (level.time % 35 == 13 || level.time % 35 == 22) IPDisipatePulse += (IPDisipatePulseInc * 13);
					if (level.time % 35 == 14 || level.time % 35 == 21) IPDisipatePulse += (IPDisipatePulseInc * 14);
					if (level.time % 35 == 15 || level.time % 35 == 20) IPDisipatePulse += (IPDisipatePulseInc * 15);
					if (level.time % 35 == 16 || level.time % 35 == 19) IPDisipatePulse += (IPDisipatePulseInc * 16);
					if (level.time % 35 == 17 || level.time % 35 == 18) IPDisipatePulse += (IPDisipatePulseInc * 17);
				}
				else
				if (DissipateTimer > 0)
				{
					IPDisipatePulseInc /= 27;
					if (level.time % 55) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 55 == 1 || level.time % 55 == 54) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 55 == 2 || level.time % 55 == 53) IPDisipatePulse += (IPDisipatePulseInc * 2);
					if (level.time % 55 == 3 || level.time % 55 == 52) IPDisipatePulse += (IPDisipatePulseInc * 3);
					if (level.time % 55 == 4 || level.time % 55 == 51) IPDisipatePulse += (IPDisipatePulseInc * 4);
					if (level.time % 55 == 5 || level.time % 55 == 50) IPDisipatePulse += (IPDisipatePulseInc * 5);
					if (level.time % 55 == 6 || level.time % 55 == 49) IPDisipatePulse += (IPDisipatePulseInc * 6);
					if (level.time % 55 == 7 || level.time % 55 == 48) IPDisipatePulse += (IPDisipatePulseInc * 7);
					if (level.time % 55 == 8 || level.time % 55 == 47) IPDisipatePulse += (IPDisipatePulseInc * 8);
					if (level.time % 55 == 9 || level.time % 55 == 46) IPDisipatePulse += (IPDisipatePulseInc * 9);
					if (level.time % 55 == 10 || level.time % 55 == 45) IPDisipatePulse += (IPDisipatePulseInc * 10);
					if (level.time % 55 == 11 || level.time % 55 == 44) IPDisipatePulse += (IPDisipatePulseInc * 11);
					if (level.time % 55 == 12 || level.time % 55 == 43) IPDisipatePulse += (IPDisipatePulseInc * 12);
					if (level.time % 55 == 13 || level.time % 55 == 42) IPDisipatePulse += (IPDisipatePulseInc * 13);
					if (level.time % 55 == 14 || level.time % 55 == 41) IPDisipatePulse += (IPDisipatePulseInc * 14);
					if (level.time % 55 == 15 || level.time % 55 == 40) IPDisipatePulse += (IPDisipatePulseInc * 15);
					if (level.time % 55 == 16 || level.time % 55 == 39) IPDisipatePulse += (IPDisipatePulseInc * 16);
					if (level.time % 55 == 17 || level.time % 55 == 38) IPDisipatePulse += (IPDisipatePulseInc * 17);
					if (level.time % 55 == 18 || level.time % 55 == 37) IPDisipatePulse += (IPDisipatePulseInc * 18);
					if (level.time % 55 == 19 || level.time % 55 == 36) IPDisipatePulse += (IPDisipatePulseInc * 19);
					if (level.time % 55 == 20 || level.time % 55 == 35) IPDisipatePulse += (IPDisipatePulseInc * 20);
					if (level.time % 55 == 21 || level.time % 55 == 34) IPDisipatePulse += (IPDisipatePulseInc * 21);
					if (level.time % 55 == 22 || level.time % 55 == 33) IPDisipatePulse += (IPDisipatePulseInc * 22);
					if (level.time % 55 == 23 || level.time % 55 == 32) IPDisipatePulse += (IPDisipatePulseInc * 23);
					if (level.time % 55 == 24 || level.time % 55 == 31) IPDisipatePulse += (IPDisipatePulseInc * 24);
					if (level.time % 55 == 25 || level.time % 55 == 30) IPDisipatePulse += (IPDisipatePulseInc * 25);
					if (level.time % 55 == 26 || level.time % 55 == 29) IPDisipatePulse += (IPDisipatePulseInc * 26);
					if (level.time % 55 == 27 || level.time % 55 == 28) IPDisipatePulse += (IPDisipatePulseInc * 27);
				}
				else
				if (DissipateTimer < 0)
				{
					double IPDisipatePulseInc = frandompick(0.5,0.65,0.65,0.65,0.65,0.65,0.75);
					IPDisipatePulseInc /= 27;
					if (level.time % 55) IPDisipatePulse += (IPDisipatePulseInc * 0);
					if (level.time % 55 == 1 || level.time % 55 == 54) IPDisipatePulse += (IPDisipatePulseInc * 1);
					if (level.time % 55 == 2 || level.time % 55 == 53) IPDisipatePulse += (IPDisipatePulseInc * 2);
					if (level.time % 55 == 3 || level.time % 55 == 52) IPDisipatePulse += (IPDisipatePulseInc * 3);
					if (level.time % 55 == 4 || level.time % 55 == 51) IPDisipatePulse += (IPDisipatePulseInc * 4);
					if (level.time % 55 == 5 || level.time % 55 == 50) IPDisipatePulse += (IPDisipatePulseInc * 5);
					if (level.time % 55 == 6 || level.time % 55 == 49) IPDisipatePulse += (IPDisipatePulseInc * 6);
					if (level.time % 55 == 7 || level.time % 55 == 48) IPDisipatePulse += (IPDisipatePulseInc * 7);
					if (level.time % 55 == 8 || level.time % 55 == 47) IPDisipatePulse += (IPDisipatePulseInc * 8);
					if (level.time % 55 == 9 || level.time % 55 == 46) IPDisipatePulse += (IPDisipatePulseInc * 9);
					if (level.time % 55 == 10 || level.time % 55 == 45) IPDisipatePulse += (IPDisipatePulseInc * 10);
					if (level.time % 55 == 11 || level.time % 55 == 44) IPDisipatePulse += (IPDisipatePulseInc * 11);
					if (level.time % 55 == 12 || level.time % 55 == 43) IPDisipatePulse += (IPDisipatePulseInc * 12);
					if (level.time % 55 == 13 || level.time % 55 == 42) IPDisipatePulse += (IPDisipatePulseInc * 13);
					if (level.time % 55 == 14 || level.time % 55 == 41) IPDisipatePulse += (IPDisipatePulseInc * 14);
					if (level.time % 55 == 15 || level.time % 55 == 40) IPDisipatePulse += (IPDisipatePulseInc * 15);
					if (level.time % 55 == 16 || level.time % 55 == 39) IPDisipatePulse += (IPDisipatePulseInc * 16);
					if (level.time % 55 == 17 || level.time % 55 == 38) IPDisipatePulse += (IPDisipatePulseInc * 17);
					if (level.time % 55 == 18 || level.time % 55 == 37) IPDisipatePulse += (IPDisipatePulseInc * 18);
					if (level.time % 55 == 19 || level.time % 55 == 36) IPDisipatePulse += (IPDisipatePulseInc * 19);
					if (level.time % 55 == 20 || level.time % 55 == 35) IPDisipatePulse += (IPDisipatePulseInc * 20);
					if (level.time % 55 == 21 || level.time % 55 == 34) IPDisipatePulse += (IPDisipatePulseInc * 21);
					if (level.time % 55 == 22 || level.time % 55 == 33) IPDisipatePulse += (IPDisipatePulseInc * 22);
					if (level.time % 55 == 23 || level.time % 55 == 32) IPDisipatePulse += (IPDisipatePulseInc * 23);
					if (level.time % 55 == 24 || level.time % 55 == 31) IPDisipatePulse += (IPDisipatePulseInc * 24);
					if (level.time % 55 == 25 || level.time % 55 == 30) IPDisipatePulse += (IPDisipatePulseInc * 25);
					if (level.time % 55 == 26 || level.time % 55 == 29) IPDisipatePulse += (IPDisipatePulseInc * 26);
					if (level.time % 55 == 27 || level.time % 55 == 28) IPDisipatePulse += (IPDisipatePulseInc * 27);
				}
				
				if (DissipateTimer >= 1961) IPDisipateIcon = "IPDSTM15";
				if (DissipateTimer >= 1821 && DissipateTimer <= 1960) IPDisipateIcon = "IPDSTM14";
				if (DissipateTimer >= 1681 && DissipateTimer <= 1820) IPDisipateIcon = "IPDSTM13";
				if (DissipateTimer >= 1541 && DissipateTimer <= 1680) IPDisipateIcon = "IPDSTM12";
				if (DissipateTimer >= 1401 && DissipateTimer <= 1540) IPDisipateIcon = "IPDSTM11";
				if (DissipateTimer >= 1261 && DissipateTimer <= 1400) IPDisipateIcon = "IPDSTM10";
				if (DissipateTimer >= 1121 && DissipateTimer <= 1260) IPDisipateIcon = "IPDSTM09";
				if (DissipateTimer >= 981 && DissipateTimer <= 1120) IPDisipateIcon = "IPDSTM08";
				if (DissipateTimer >= 841 && DissipateTimer <= 980) IPDisipateIcon = "IPDSTM07";
				if (DissipateTimer >= 701 && DissipateTimer <= 840) IPDisipateIcon = "IPDSTM06";
				if (DissipateTimer >= 561 && DissipateTimer <= 700) IPDisipateIcon = "IPDSTM05";
				if (DissipateTimer >= 421 && DissipateTimer <= 560) IPDisipateIcon = "IPDSTM04";
				if (DissipateTimer >= 281 && DissipateTimer <= 420) IPDisipateIcon = "IPDSTM03";
				if (DissipateTimer >= 141 && DissipateTimer <= 280) IPDisipateIcon = "IPDSTM02";
				if (DissipateTimer >= 1 && DissipateTimer <= 140) IPDisipateIcon = "IPDSTM01";
				if (DissipateTimer >= -139 && DissipateTimer <= -1) IPDisipateIcon = "IPDRTM01";
				if (DissipateTimer >= -279 && DissipateTimer <= -140) IPDisipateIcon = "IPDRTM02";
				if (DissipateTimer >= -419 && DissipateTimer <= -280) IPDisipateIcon = "IPDRTM03";
				if (DissipateTimer >= -559 && DissipateTimer <= -420) IPDisipateIcon = "IPDRTM04";
				if (DissipateTimer >= -699 && DissipateTimer <= -560) IPDisipateIcon = "IPDRTM05";
				if (DissipateTimer >= -839 && DissipateTimer <= -700) IPDisipateIcon = "IPDRTM06";
				if (DissipateTimer >= -979 && DissipateTimer <= -840) IPDisipateIcon = "IPDRTM07";
				if (DissipateTimer >= -1119 && DissipateTimer <= -980) IPDisipateIcon = "IPDRTM08";
				if (DissipateTimer >= -1259 && DissipateTimer <= -1120) IPDisipateIcon = "IPDRTM09";
				if (DissipateTimer >= -1399 && DissipateTimer <= -1260) IPDisipateIcon = "IPDRTM10";
				if (DissipateTimer >= -1539 && DissipateTimer <= -1400) IPDisipateIcon = "IPDRTM11";
				if (DissipateTimer >= -1679 && DissipateTimer <= -1540) IPDisipateIcon = "IPDRTM12";
				if (DissipateTimer >= -1819 && DissipateTimer <= -1680) IPDisipateIcon = "IPDRTM13";
				if (DissipateTimer >= -1959 && DissipateTimer <= -1820) IPDisipateIcon = "IPDRTM14";
				if (DissipateTimer >= -2100 && DissipateTimer <= -1960) IPDisipateIcon = "IPDRTM15";
				if (MiscItem && MiscItem.IPDissipateTimer != 0) DrawTexture(TexMan.CheckForTexture(IPDisipateIcon, TexMan.TYPE_MiscPatch), ((DigX+IPDmgShakeX), (DigY+IPDmgShakeY)), DI_TEXT_ALIGN_RIGHT, IPDisipatePulse, (-1, -1), (IPIconScale*IPIconPulseScale));
				if (dydudebug_ipdisplays2) Console.Printf(IPDisipateIcon);
			}
			
			// IP Gains
			if (exex_ikaripointsenabled)
			{
				FontScale = (0.9375, 0.9375);
				double HUDNumHitValueD = 0;
				HUDHitAlpha = 1.00;
				If (MiscItem)
				{
					if (MiscItem.IPGainHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.IPGainHUDTimer))));
					else HUDHitAlpha = 1.00;
					//if (MiscItem.IPGainHUDTimer) Console.Printf("IPGainHUDTimer: %d, IPGainHUDAmt: %.8f", MiscItem.IPGainHUDTimer, MiscItem.IPGainHUDAmt);
				}
				HUDNumHitValueD = 0;
				If (MiscItem) HUDNumHitValueD = MiscItem.IPGainHUDAmt;
				HUDStringHit = "+";
				HUDStringHit.AppendFormat("%.2f%%", HUDNumHitValueD);
				DigX = 35; // 35;
				DigY = -95; // -95;
				if (HUDNumHitValueD > 0.00) DrawString(mConFont, HUDStringHit, (DigX, DigY), DI_TEXT_ALIGN_CENTER, font.CR_DarkGreen, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				
				// IP Loss
				FontScale = (0.9375, 0.9375);
				HUDNumHitValueD = 0;
				HUDHitAlpha = 1.00;
				If (MiscItem)
				{
					if (MiscItem.IPLossHUDTimer <= 35) HUDHitAlpha = (FontAlpha * (1.00 - (0.0285714285714286 * (35 - MiscItem.IPGainHUDTimer))));
					else HUDHitAlpha = 1.00;
					//if (MiscItem.IPLossHUDTimer) Console.Printf("IPLossHUDTimer: %d, IPLossHUDAmt: %.8f", MiscItem.IPLossHUDTimer, MiscItem.IPGainHUDAmt);
				}
				HUDNumHitValueD = 0;
				If (MiscItem) HUDNumHitValueD = MiscItem.IPLossHUDAmt;
				HUDStringHit = "-";
				HUDStringHit.AppendFormat("%.2f%%", HUDNumHitValueD);
				DigX = 35; // 35;
				DigY = -115; // -95;
				if (HUDNumHitValueD > 0.00) DrawString(mConFont, HUDStringHit, (DigX, DigY), DI_TEXT_ALIGN_CENTER, font.CR_Red, HUDHitAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				FontScale = (1.25, 1.25);
			}
			
			//
			if (MiscItem && dyduhud_showextraatkdefspd && exex_expenabled)
			{
				FontScale = (1.0, 1.0);
				int sepery = 6;
				DigX = 68 + (Digits * Spacing); // 176
				DigY = -90; // -90
				string hudstat;
				hudstat = "ATK+: ";
				hudstat.AppendFormat("%d", VisiblePlayerATK);
				if (dyduhud_showextraatkdefspd >= 2) hudstat.AppendFormat(" [%d]", VisiblePlayerLevel);
				DrawString(mConFont, hudstat, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.cr_red, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				hudstat = "DEF+: ";
				hudstat.AppendFormat("%d", VisiblePlayerDEF);
				if (dyduhud_showextraatkdefspd >= 2) hudstat.AppendFormat(" [%d]", VisiblePlayerLevel);
				DigY += sepery; // -82 / -132
				DrawString(mConFont, hudstat, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.cr_olive, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				hudstat = "SPD+: ";
				hudstat.AppendFormat("%d", VisiblePlayerSPD);
				if (dyduhud_showextraatkdefspd >= 2) hudstat.AppendFormat(" [%d]", VisiblePlayerLevel);
				DigY += sepery; // -82 / -132
				DrawString(mConFont, hudstat, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.cr_blue, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				if (dyduhud_showluck)
				{
					hudstat = "LUCK: ";
					hudstat.AppendFormat("%d", MiscItem.PlayerLuck);
					DigY += sepery; // -82 / -132
					DrawString(mConFont, hudstat, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.cr_gold, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
				}
				FontScale = (1.25, 1.25);
			}
			else
			{
				FontScale = (1.0, 1.0);
				if (dyduhud_showluck && exex_expenabled)
				{
					int sepery = 6;
					DigX = 68 + (Digits * Spacing); // 176
					DigY = -90; // -90
					string hudstat;
					if (MiscItem)
					{
						hudstat = "LUCK: ";
						hudstat.AppendFormat("%d", MiscItem.PlayerLuck);
						DrawString(mConFont, hudstat, (DigX, DigY), DI_TEXT_ALIGN_LEFT, font.cr_gold, FontAlpha, FontWrapWidth, FontLineSpace, FontScale); // 41, -43
					}
				}
				FontScale = (1.25, 1.25);
			}
			
			//**************
			//* Key Legend *
			//**************
			int legendtimer;
			int LX;
			int LY;
			int LYInc = 4; // 5
			double LegendAlpha = 0.9;
			vector2 LegendScale = (0.625, 0.625); // (0.75, 0.75);
			int LegendFontCLR = font.cr_gray;
			int LegendFlags = DI_TEXT_ALIGN_LEFT;
			// Quick Kick Bind
			string LegendStr = "";
			LX = -296;
			LY = -35;
			bool cankick = true;
			if (MiscItem) cankick = MiscItem.cankick;
			if (PlayerWeapon is 'DinahWeapon' && cankick)
			{
				LY += LYInc;
				string UserKeyString;
				Array<String> UserKeys;
				UserKeyString = UIKeybinds.getKeyboard("+user1");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					if (UserKeys[0] == "Space") UserKeys[0] = "SBar";
					if (UserKeys[0] == "CapsLock") UserKeys[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				LegendStr.AppendFormat(" = \c[blue]KICK\c-");
				if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			// IP Mode Binds
			if (exex_ikaripointsenabled)
			{
				LY += LYInc;
				LegendStr = "";
				string UserKeyString2;
				Array<String> UserKeys2;
				UserKeyString2 = UIKeybinds.getKeyboard("+use");
				if (UserKeyString2 != "")
				{
					UserKeyString2.Split(UserKeys2,", ");
					if (UserKeys2[0] == "Space") UserKeys2[0] = "SBar";
					if (UserKeys2[0] == "CapsLock") UserKeys2[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys2[0]);
				}
				else
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				LegendStr.AppendFormat("+");
				string UserKeyString3;
				Array<String> UserKeys3;
				UserKeyString3 = UIKeybinds.getKeyboard("+speed");
				if (UserKeyString3 != "")
				{
					UserKeyString3.Split(UserKeys3,", ");
					if (UserKeys3[0] == "Space") UserKeys3[0] = "SBar";
					if (UserKeys3[0] == "CapsLock") UserKeys3[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys3[0]);
				}
				else
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				if (exex_ikaripointtechpresstype >= 1) 
				{
					if (MiscItem.IPUseMode) LegendStr.AppendFormat(" = \c[blue]IP OFF\c-");
																					 else LegendStr.AppendFormat(" = \c[blue]IP ON\c-");
					LegendStr.AppendFormat(" \c[blue][TAP]\c-");
				}
				else
				{
					LegendStr.AppendFormat(" = \c[blue]IP MODE\c-");
					LegendStr.AppendFormat(" \c[blue][HOLD]\c-");
				}
				if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			// Dash
			LegendStr = "";
			string UserKeyString4;
			Array<String> UserKeys4;
			if (DashMaxCharge >= dashcost && candash)
			{
				LY += LYInc;
				UserKeyString4 = UIKeybinds.getKeyboard("+user3");
				if (UserKeyString4 != "")
				{
					UserKeyString4.Split(UserKeys4,", ");
					if (UserKeys4[0] == "Space") UserKeys4[0] = "SBar";
					if (UserKeys4[0] == "CapsLock") UserKeys4[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys4[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				if (PlayerWeapon is "EvilWarriorShield" && CPlayerPawn.CountInv("EWShieldDefendMode")) LegendStr.AppendFormat(" = \c[gold]SHIELD DASH\c-");
				else if (PlayerWeapon is "CricketBat" && CPlayerPawn.CountInv("IsInBatGuardFrame")) LegendStr.AppendFormat(" = \c[gold]CRICKET-BAT DASH\c-");
																									 else LegendStr.AppendFormat(" = \c[blue]DASH\c-");
				if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			// Weapon Specific Binds
			let Sigl = SigilDD(PlayerWeapon);
			LegendStr = "";
			string UserKeyString5;
			Array<String> UserKeys5;
			if (PlayerWeapon is "HandToHand" || PlayerWeapon is "EvilWarriorShield" || PlayerWeapon is "FosnianCandle" || PlayerWeapon is "CricketBat" || (PlayerWeapon is "SigilDD" && Sigl && Sigl.health > 1))
			{
				LY += LYInc;
				if (PlayerWeapon is "EvilWarriorShield") UserKeyString5 = UIKeybinds.getKeyboard("+altattack");
				else UserKeyString5 = UIKeybinds.getKeyboard("+user4");
				if (UserKeyString5 != "")
				{
					UserKeyString5.Split(UserKeys5,", ");
					if (UserKeys5[0] == "Space") UserKeys5[0] = "SBar";
					if (UserKeys5[0] == "CapsLock") UserKeys5[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys5[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				if (PlayerWeapon is "EvilWarriorShield") 
				{
					if (exex_hwshieldaltfirekeytype)
					{
						if (MiscItem.owner.CountInv("EWShieldDefendMode")) LegendStr.AppendFormat(" = \c[blue]UN-SHIELD\c- \c[blue][TAP]\c-");
																											else LegendStr.AppendFormat(" = \c[blue]SHIELD\c- \c[blue][TAP]\c-");
					}
					else
					{
						LegendStr.AppendFormat(" = \c[blue]SHIELD\c- \c[blue][HOLD]\c-");
					}
				}
				else if (PlayerWeapon is "SigilDD" || PlayerWeapon is "FosnianCandle") LegendStr.AppendFormat(" = \c[blue]CHANGE MODE\c-");
				else if (PlayerWeapon is "HandToHand") LegendStr.AppendFormat(" = \c[blue]GUARD MODE\c-");
				else if (PlayerWeapon is "CricketBat") 
				{
					if (exex_cricketbatguardtype) 
					{
						if (CPlayerPawn.CountInv("IsInBatGuardFrame")) LegendStr.AppendFormat(" = \c[blue]UNPARRY\c-");
																										 else LegendStr.AppendFormat(" = \c[blue]PARRY\c-");
						LegendStr.AppendFormat(" \c[blue][TAP]\c-");
					}
					else
					{
						LegendStr.AppendFormat(" = \c[blue]PARRY\c-");
						LegendStr.AppendFormat(" \c[blue][HOLD]\c-");
					}
				}
				if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			LegendStr = "";
			string UserKeyString6;
			Array<String> UserKeys6;
			string UserKeyString7;
			Array<String> UserKeys7;
			string UserKeyString8;
			Array<String> UserKeys8;
			if ((PlayerWeapon is "CricketBat" && (MiscItem && VisiblePlayerLevel >= exex_cricketspinlvlrequirement)) ||
					(PlayerWeapon is "Scrambler" && (MiscItem && VisiblePlayerLevel >= exex_scramblerelnomolvlreq)) ||
					(PlayerWeapon is "WizardPike" && (MiscItem && VisiblePlayerLevel >= exex_pikeinvisolvlreq)))
			{
				LY += LYInc;
				UserKeyString6 = UIKeybinds.getKeyboard("+moveleft");
				if (UserKeyString6 != "")
				{
					UserKeyString6.Split(UserKeys6,", ");
					if (UserKeys6[0] == "Space") UserKeys6[0] = "SBar";
					if (UserKeys6[0] == "CapsLock") UserKeys6[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys6[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				LegendStr.AppendFormat("+");
				UserKeyString7 = UIKeybinds.getKeyboard("+moveright");
				if (UserKeyString7 != "")
				{
					UserKeyString7.Split(UserKeys7,", ");
					if (UserKeys7[0] == "Space") UserKeys7[0] = "SBar";
					if (UserKeys7[0] == "CapsLock") UserKeys7[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys7[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				LegendStr.AppendFormat("+");
				if (PlayerWeapon is "WizardPike" && (MiscItem && VisiblePlayerLevel >= exex_pikeinvisolvlreq))
				{
					if (Level.time % 70 > 35) UserKeyString8 = UIKeybinds.getKeyboard("+altattack");
					else UserKeyString8 = UIKeybinds.getKeyboard("+attack");
				}
				if (PlayerWeapon is "Scrambler" && (MiscItem && VisiblePlayerLevel >= exex_scramblerelnomolvlreq))
				{
					if (Level.time % 70 > 35) UserKeyString8 = UIKeybinds.getKeyboard("+altattack");
					else UserKeyString8 = UIKeybinds.getKeyboard("+attack");
				}
				else UserKeyString8 = UIKeybinds.getKeyboard("+attack");
				if (UserKeyString8 != "")
				{
					UserKeyString8.Split(UserKeys8,", ");
					if (UserKeys8[0] == "Space") UserKeys8[0] = "SBar";
					if (UserKeys8[0] == "CapsLock") UserKeys8[0] = "CapsL";
					LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys8[0]);
				}
				else 
				{
					LegendStr.AppendFormat("\c[red][unb]\c-");
				}
				if (PlayerWeapon is "WizardPike" && (MiscItem && VisiblePlayerLevel >= exex_pikeinvisolvlreq)) LegendStr.AppendFormat(" = \c[blue]INVISO MODE\c-");
				else if (PlayerWeapon is "Scrambler" && (MiscItem && VisiblePlayerLevel >= exex_scramblerelnomolvlreq)) LegendStr.AppendFormat(" = \c[green]COOK A EGG [HEALS]\c-");
				else LegendStr.AppendFormat(" = \c[blue]SPIN ATTACK\c-");
				if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			LegendStr = "";
			string UserKeyString9;
			Array<String> UserKeys9;
			if (MiscItem && MiscItem.canuseflowercrown)
			{
				int FlashTimer = level.time % 10;
				if (MiscItem.canuseflowercrown >= 2)
				{
					LY += LYInc;
					if (MiscItem.TrueIPCooldownTimer > 0)
					{
						if (FlashTimer >= 0 && FlashTimer <= 4) LegendStr.AppendFormat("\c[red]ON COOLDOWN!\c- [%d SECS]", (MiscItem.TrueIPCooldownTimer / TICRATE));
																							 else LegendStr.AppendFormat("\c[purple]ON COOLDOWN!\c- [%d SECS]", (MiscItem.TrueIPCooldownTimer / TICRATE));
					}
					else
					{
						if (MiscItem.TrueIPLevelGate <= 0)
						{
							UserKeyString9 = UIKeybinds.getKeyboard("+zoom");
							if (UserKeyString9 != "")
							{
								UserKeyString9.Split(UserKeys9,", ");
								if (UserKeys9[0] == "Space") UserKeys9[0] = "SBar";
								if (UserKeys9[0] == "CapsLock") UserKeys9[0] = "CapsL";
								if (FlashTimer >= 0 && FlashTimer <= 4) LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys9[0]);
																									 else LegendStr.AppendFormat("\c[sapphire]%s\c-", UserKeys9[0]);
							}
							else 
							{
								LegendStr.AppendFormat("\c[red][unb]\c-");
							}
							if (FlashTimer >= 0 && FlashTimer <= 4) LegendStr.AppendFormat(" = \c[gold]FLOWER CROWN IP\c-");
																								 else LegendStr.AppendFormat(" = \c[sapphire]FLOWER CROWN IP\c-");
						}
						else
						{
							if (FlashTimer >= 0 && FlashTimer <= 4) LegendStr.AppendFormat("\c[red]GAIN %d LEVELS TO USE AGAIN!\c-", MiscItem.TrueIPLevelGate);
																								 else LegendStr.AppendFormat("\c[purple]GAIN %d LEVELS TO USE AGAIN!", MiscItem.TrueIPLevelGate);
						}
					}
					if (LegendStr != "") DrawString(mConFont, LegendStr, (LX, LY), LegendFlags, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
				}
			}

			//******************
			//** weapon slots **
			//******************
			int x;
			int y;
			int wsspace = 14; // 14
			double wsalpha = 0.667;
			double wsalphadefault = 0.667;
			double wsalphadefault2 = 1.00;
			vector2 wsscale = (1.0, 1.0); // (1.0, 1.0)
			vector2 wsscaledefault = (1.0, 1.0); // (1.0, 1.0)
			vector2 wsscaledefault2 = (1.125, 1.125); // (1.0, 1.0)
			int wsfontclr = font.cr_gray;
			int startposx = -150; // -150
			int startposy = ((wsspace * -2) - (wsspace * 0.1));
			int wsflags = DI_TEXT_ALIGN_LEFT;
			let wsweapon = PlayerWeapon;
			string wsname;
			string wsammoname;
			int wsnum;
			int AmmoRatio;
			int baseinc = 1;
			int weaponsincurslot;
			int priority = 0;

			x = startposx;
			y = startposy;
			// Slot 1
			weaponsincurslot = 1;
			wsname = "HandToHand";
			if (CPlayerPawn.CountInv(wsname))
			{
				int FlashTimer = level.time % 20;
				double cost = A_GetIPCost(-1);
				bool IPModeReady;
				if (!ddafd_disableflowercrownip && exex_ikaripointsenabled && MiscItem.ItemPoints >= cost && VisiblePlayerLevel > 0 && MiscItem.TrueIPCooldownTimer <= 0 && MiscItem.TrueIPLevelGate <= 0) IPModeReady = true;

				wsnum = 1;
				wsfontclr = font.cr_gray;
				if (IPModeReady && (FlashTimer >= 10 && FlashTimer <= 19)) wsfontclr = font.cr_fire;
				
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x += wsspace;
			
			// Slot 2
			weaponsincurslot = 1;
			if (MiscItem.CompatPackMode & 8) weaponsincurslot = 2;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "CricketBat";
			wsammoname = "MalletAmmo";
			let ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 2;
				if (wsweapon is wsname) 
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			if (weaponsincurslot > 1)
			{
				x += (baseinc * 2);
				y += (baseinc * 2);
				if (MiscItem.CompatPackMode & 8)
				{
					wsname = "GutFlingerNew";
					wsammoname = "ClownSouls";
				}
				ammotype = CPlayerPawn.FindInventory(wsammoname);
				if (CPlayerPawn.CountInv(wsname))
				{
					AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
					if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
					else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
					else wsfontclr = font.cr_gray;
	
					wsnum = 2;
					if (wsweapon is wsname)
					{
						wsalpha = wsalphadefault2;
						wsscale = wsscaledefault2;
					}
					DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
					wsalpha = wsalphadefault;
					wsscale = wsscaledefault;
				}
				x -= baseinc;
				y -= baseinc;
			}
			x += wsspace;
			
			// Slot 3
			weaponsincurslot = 2;
			baseinc = 2;
			x -= baseinc;
			y -= baseinc;
			wsname = "BlunderAxe";
			wsammoname = "BlunderAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 3;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x += (baseinc * 2);
			y += (baseinc * 2);
			wsname = "Scrambler";
			wsammoname = "EggAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 3;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x -= baseinc;
			y -= baseinc;

			x += wsspace;
			// Slot 4
			weaponsincurslot = 1;
			if (MiscItem.CompatPackMode & 8) weaponsincurslot = 2;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "AppleJack";
			wsammoname = "JackAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 4;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			if (weaponsincurslot > 1)
			{
				x += (baseinc * 2);
				y += (baseinc * 2);
				if (MiscItem.CompatPackMode & 8)
				{
					wsname = "GoreBalloonNew";
					wsammoname = "GoreBalloons";
				}
				ammotype = CPlayerPawn.FindInventory(wsammoname);
				if (CPlayerPawn.CountInv(wsname))
				{
					AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
					if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
					else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
					else wsfontclr = font.cr_gray;
	
					wsnum = 4;
					if (wsweapon is wsname)
					{
						wsalpha = wsalphadefault2;
						wsscale = wsscaledefault2;
					}
					DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
					wsalpha = wsalphadefault;
					wsscale = wsscaledefault;
				}
				x -= baseinc;
				y -= baseinc;
			}

			x += wsspace;
			// Slot 5
			weaponsincurslot = 1;
			if (MiscItem.CompatPackMode & 8) weaponsincurslot = 2;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "WizardPike";
			wsammoname = "PikeAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 5;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			if (weaponsincurslot > 1)
			{
				x += (baseinc * 2);
				y += (baseinc * 2);
				if (MiscItem.CompatPackMode & 8)
				{
					wsname = "GasRocketLauncherNew";
					wsammoname = "ClownSouls";
				}
				ammotype = CPlayerPawn.FindInventory(wsammoname);
				if (CPlayerPawn.CountInv(wsname))
				{
					AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
					if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
					else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
					else wsfontclr = font.cr_gray;
	
					wsnum = 5;
					if (wsweapon is wsname)
					{
						wsalpha = wsalphadefault2;
						wsscale = wsscaledefault2;
					}
					DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
					wsalpha = wsalphadefault;
					wsscale = wsscaledefault;
				}
				x -= baseinc;
				y -= baseinc;
			}
			
			// Starts a new row
			x = startposx;
			y += wsspace;
			// Slot 6
			weaponsincurslot = 1;
			if (MiscItem.CompatPackMode & 8) weaponsincurslot = 2;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "SuperVac";
			wsammoname = "VacAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 6;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			if (weaponsincurslot > 1)
			{
				x += (baseinc * 2);
				y += (baseinc * 2);
				if (MiscItem.CompatPackMode & 8)
				{
					wsname = "ClownGrenadeNew";
					wsammoname = "CGrenadeAmmo";
				}
				ammotype = CPlayerPawn.FindInventory(wsammoname);
				if (CPlayerPawn.CountInv(wsname))
				{
					AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
					if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
					else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
					else wsfontclr = font.cr_gray;
	
					wsnum = 6;
					if (wsweapon is wsname)
					{
						wsalpha = wsalphadefault2;
						wsscale = wsscaledefault2;
					}
					DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
					wsalpha = wsalphadefault;
					wsscale = wsscaledefault;
				}
				x -= baseinc;
				y -= baseinc;
			}

			x += wsspace;
			// Slot 7
			weaponsincurslot = 1;
			if (MiscItem.CompatPackMode & 8) weaponsincurslot = 2;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "Grimophone";
			wsammoname = "MusicAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 7;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			if (weaponsincurslot > 1)
			{
				x += (baseinc * 2);
				y += (baseinc * 2);
				if (MiscItem.CompatPackMode & 8)
				{
					wsname = "PopcornGunNew";
					wsammoname = "PopcornPiece";
				}
				ammotype = CPlayerPawn.FindInventory(wsammoname);
				if (CPlayerPawn.CountInv(wsname))
				{
					AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
					if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
					else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
					else wsfontclr = font.cr_gray;
	
					wsnum = 7;
					if (wsweapon is wsname)
					{
						wsalpha = wsalphadefault2;
						wsscale = wsscaledefault2;
					}
					DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
					wsalpha = wsalphadefault;
					wsscale = wsscaledefault;
				}
				x -= baseinc;
				y -= baseinc;
			}

			baseinc = 2;
			x -= baseinc;
			y -= baseinc;
			x += wsspace;
			// Slot 8
			weaponsincurslot = 2;
			wsname = "SigilDD";
			wsammoname = "";
			//ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = CurrHealth * 100 / PlayerMaxHP;
				if (CurrHealth <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (AmmoRatio >= 100 && AmmoRatio <= 199) wsfontclr = font.cr_sapphire;
				else if (AmmoRatio >= 200 && AmmoRatio <= 299) wsfontclr = font.cr_purple;
				else if (AmmoRatio >= 300) wsfontclr = font.cr_gold;
				else wsfontclr = font.cr_gray;
				
				wsnum = 8;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x += (baseinc * 2);
			y += (baseinc * 2);
			wsname = "CandleWhip";
			wsammoname = "CandleAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 8;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x -= baseinc;
			y -= baseinc;

			baseinc = 2;
			x -= baseinc;
			y -= baseinc;
			x += wsspace;
			// Slot 9
			weaponsincurslot = 2;
			wsname = "CrazyBallDD";
			wsammoname = "CzBall";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;
				
				wsnum = 9;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}

			x += (baseinc * 2);
			y += (baseinc * 2);
			wsname = "EvilWarriorShield";
			wsammoname = "PikeAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 9;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			x -= baseinc;
			y -= baseinc;

			x += wsspace;
			wsname = "";
			// Slot 0
			weaponsincurslot = 1;
			if (weaponsincurslot > 1)
			{
				baseinc = 2;
				x -= baseinc;
				y -= baseinc;
			}
			wsname = "FosnianCandle";
			wsammoname = "FCandleAmmo";
			ammotype = CPlayerPawn.FindInventory(wsammoname);
			if (CPlayerPawn.CountInv(wsname))
			{
				AmmoRatio = ammotype.Amount * 100 / ammotype.MaxAmount;
				if (ammotype.Amount <= 0) wsfontclr = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) wsfontclr = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) wsfontclr = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) wsfontclr = font.cr_darkgreen;
				else if (ammotype.Amount >= ammotype.MaxAmount) wsfontclr = font.cr_sapphire;
				else wsfontclr = font.cr_gray;

				wsnum = 0;
				if (wsweapon is wsname)
				{
					wsalpha = wsalphadefault2;
					wsscale = wsscaledefault2;
				}
				DrawString(mDDLFont, FormatNumber((wsnum%10)), (x, y), wsflags, wsfontclr, wsalpha, -1, 4, wsscale);
				wsalpha = wsalphadefault;
				wsscale = wsscaledefault;
			}
			
			//ammo
			Ammo ammo1, ammo2;
			[ammo1, ammo2] = GetCurrentAmmo();
			x = -4;
			y = -22;
			int barx = -42;
			int bary = -48;
			if (ammo1 != null)
			{
				if (PlayerWeapon is "EvilWarriorShield")
				{
					int shieldenergy;
					int shieldenergymax = 1000;
					int shieldenergypercent;
					double shieldmeterlength = 0.4; // 0.2 vertical, 0.4 horizontal
					if (shieldmeterlength > 1.5) shieldmeterlength = 1.5;
					dun = TexMan.CheckForTexture("SHLDUNIT", TexMan.TYPE_MiscPatch);
					let EWS = EvilWarriorShield(CPlayerPawn.FindInventory("EvilWarriorShield"));
					if (EWS && MiscItem)
					{
						shieldenergy = EWS.shieldenergy;
						shieldenergymax = MiscItem.HellWarriorMaxCharge;
					}
					if (shieldenergymax)
					{
						shieldenergypercent = shieldenergy * 100 / shieldenergymax;
						int shieldbarunits = shieldenergypercent * shieldmeterlength;
						for (int i; i < (100 * shieldmeterlength); i++) DrawTexture(TexMan.CheckForTexture("BLAKUNIT", TexMan.TYPE_MiscPatch), (barx+i, bary), 0, HX_SHADOW);
						for (int i; i < shieldbarunits; i++) DrawTexture(dun, (barx+i, bary), 0, HX_SHADOW); // -46, -1
					}
					
					int upgrades = MiscItem.HellWarriorShieldLevel;
					if (upgrades)
					{
						int jx, jy;
						jx = -50;
						jy = bary + -40;
						textureid blimg = TexMan.CheckForTexture("WIEVWASH", TexMan.TYPE_MiscPatch);
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.25, 0.25)); // 51, -3
						jx += 48;
						jy += 8;
						DrawString(mDDLFont, FormatNumber(upgrades, 1), (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, font.cr_gray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					}
				}
				if (PlayerWeapon is "Grimophone")
				{
					int recordenergy;
					int recordenergymax = 42;
					if (CPlayerPawn.CountInv("GrimophoneUpgrade") <= 0) recordenergymax = 42;
					if (CPlayerPawn.CountInv("GrimophoneUpgrade") == 1) recordenergymax = 44;
					if (CPlayerPawn.CountInv("GrimophoneUpgrade") == 2) recordenergymax = 46;
					if (CPlayerPawn.CountInv("GrimophoneUpgrade") >= 3) recordenergymax = 48;
					int recordpercent;
					double recordmeterlength = 0.4; // 0.2 vertical, 0.4 horizontal
					if (recordmeterlength > 1.5) recordmeterlength = 1.5;
					dun = TexMan.CheckForTexture("GRIMUNIT", TexMan.TYPE_MiscPatch);
					let Grim = Grimophone(CPlayerPawn.FindInventory("Grimophone"));
					if (Grim) recordenergy = Grim.recordenergy;
					if (recordenergymax && (MiscItem && MiscItem.grimophonealt)) 
					{
						recordpercent = recordenergy * 100 / recordenergymax;
						int recordbarunits = recordpercent * recordmeterlength;
						for (int i; i < (100 * recordmeterlength); i++) DrawTexture(TexMan.CheckForTexture("BLAKUNIT", TexMan.TYPE_MiscPatch), (barx+i, bary), 0, HX_SHADOW);
						for (int i; i < recordbarunits; i++) DrawTexture(dun, (barx+i, bary), 0, HX_SHADOW); // -46, -1
					}

					int upgrades = CPlayerPawn.CountInv("GrimophoneUpgrade");
					if (upgrades)
					{
						int jx, jy;
						jx = -22;
						jy = bary + 6;
						textureid blimg = TexMan.CheckForTexture("GMCPA0", TexMan.TYPE_MiscPatch);
						if (upgrades == 2) blimg = TexMan.CheckForTexture("GMCPG0", TexMan.TYPE_MiscPatch);
						if (upgrades >= 3) blimg = TexMan.CheckForTexture("GMCPH0", TexMan.TYPE_MiscPatch);
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
						jx += 19;
						jy -= 32;
						DrawString(mDDLFont, FormatNumber(upgrades, 1), (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, font.cr_sapphire, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					}
				}
				if (PlayerWeapon is "SuperVac")
				{
					int VacBagUnits = CPlayerPawn.CountInv("VacAmmoCounter");
					int VacBagPercent;
					double VacBagMeterLength = 0.4; // 0.2 vertical, 0.4 horizontal
					if (VacBagMeterLength > 1.5) VacBagMeterLength = 1.5;
					dun = TexMan.CheckForTexture("VBAGUNIT", TexMan.TYPE_MiscPatch);
					int revbagunits = 100;

					wsammoname = "VacAmmo";
					ammotype = CPlayerPawn.FindInventory(wsammoname);
					if (ammotype.Amount >= ammotype.MaxAmount) 
					{
						DrawString(mConFont, "FULL!", (barx+21, bary-8), DI_TEXT_ALIGN_CENTER, font.cr_sapphire); // -46, -1
					}
					else
					{
						if (MiscItem && MiscItem.SuperVacBagSize)
						{
							VacBagPercent = VacBagUnits * 100 / MiscItem.SuperVacBagSize;
							int VacBagBarUnits = VacBagPercent * VacBagMeterLength;
							revbagunits -= VacBagBarUnits;
							if (revbagunits < 0) revbagunits = 0;
							if (revbagunits >= 100) revbagunits = 100;
							for (int i; i < (100 * VacBagMeterLength); i++) DrawTexture(TexMan.CheckForTexture("BLAKUNIT", TexMan.TYPE_MiscPatch), (barx+i, bary), 0, HX_SHADOW);
							for (int i; i < VacBagBarUnits; i++) DrawTexture(dun, (barx+i, bary), 0, HX_SHADOW); // -46, -1
						}
					}
				}
				if (PlayerWeapon is "BlunderAxe")
				{
					int jx, jy;
					jx = -30;
					jy = -76;
					if (MiscItem && VisiblePlayerLevel >= exex_axecombolvlrequirement)
					{
						textureid blimg = TexMan.CheckForTexture("BLUNQKST", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 1.0)) blimg = TexMan.CheckForTexture("BLUNQKS1", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 1.4)) blimg = TexMan.CheckForTexture("BLUNQKS2", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 2.0)) blimg = TexMan.CheckForTexture("BLUNQKS3", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 3.0)) blimg = TexMan.CheckForTexture("BLUNQKS4", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 4.5)) blimg = TexMan.CheckForTexture("BLUNQKS5", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 6.5)) blimg = TexMan.CheckForTexture("BLUNQKS6", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 9.0)) blimg = TexMan.CheckForTexture("BLUNQKS7", TexMan.TYPE_MiscPatch);
						if (MiscItem && VisiblePlayerLevel >= (exex_axequickshotlvlrequirement * 12.0)) blimg = TexMan.CheckForTexture("BLUNQKS8", TexMan.TYPE_MiscPatch);
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
					}
					int upgrades = CPlayerPawn.CountInv("BlunderShotUpgrade");
					if (upgrades)
					{
						jx = -22;
						jy = -40;
						if (MiscItem && VisiblePlayerLevel >= exex_axecombolvlrequirement) 
						{
							jy -= 31;
						}
						DrawTexture(TexMan.CheckForTexture("BSHMA0", TexMan.TYPE_MiscPatch), (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
						jx += 19;
						jy -= 24;
						DrawString(mDDLFont, FormatNumber(upgrades, 1), (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, font.cr_sapphire, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					}
				}
				if (PlayerWeapon is "AppleJack")
				{
					int jx, jy;
					jx = -30;
					jy = -76;
					if (MiscItem && VisiblePlayerLevel >= exex_jackcrisislvlrequirement)
					{
						if (MiscItem.oldhealthratio >= 1 && MiscItem.oldhealthratio <= 3)
						{
							textureid blimg = TexMan.CheckForTexture("APJKCRS1", TexMan.TYPE_MiscPatch);
							if (MiscItem.oldhealthratio == 1) blimg = TexMan.CheckForTexture("APJKCRS1", TexMan.TYPE_MiscPatch);
							if (MiscItem.oldhealthratio == 2) blimg = TexMan.CheckForTexture("APJKCRS2", TexMan.TYPE_MiscPatch);
							if (MiscItem.oldhealthratio == 3) blimg = TexMan.CheckForTexture("APJKCRS3", TexMan.TYPE_MiscPatch);
							DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
						}
					}
				}
				if (PlayerWeapon is "Scrambler")
				{
					int jx, jy;
					jx = -30;
					jy = -76;
					if (MiscItem && VisiblePlayerLevel >= exex_scramblernoArmorBonuslvlreq && (armor && armor.Amount <= 0))
					{
						textureid blimg = TexMan.CheckForTexture("SCRMBOST", TexMan.TYPE_MiscPatch);
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
					}
				}
				if (PlayerWeapon is "WizardPike")
				{
					int jx, jy;
					jx = -30;
					jy = -76;
					if (MiscItem && VisiblePlayerLevel >= exex_pikeinvisolvlreq)
					{
						textureid blimg = TexMan.CheckForTexture("WZPKINVS", TexMan.TYPE_MiscPatch);
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FontAlpha, (-1,-1), (0.375, 0.375)); // 51, -3
					}
				}
				if (PlayerWeapon is "CricketBat")
				{
					int spinIconScaletimer = level.time % 32;
					double spinIconScale2 = 0.375;
					vector2 spinIconScale = (spinIconScale2, spinIconScale2);
					double spiniconalpha = (FontAlpha * 0.75);
					if (CPlayerPawn && (CPlayerPawn.buttons & BT_MOVELEFT && CPlayerPawn.buttons & BT_MOVERIGHT))
					{
						if (spinIconScaletimer == 0) spinIconScale2 = 0.375;
						if (spinIconScaletimer == 1 || spinIconScaletimer == 31) spinIconScale2 = 0.37890625;
						if (spinIconScaletimer == 2 || spinIconScaletimer == 30) spinIconScale2 = 0.3828125;
						if (spinIconScaletimer == 3 || spinIconScaletimer == 29) spinIconScale2 = 0.38671875;
						if (spinIconScaletimer == 4 || spinIconScaletimer == 28) spinIconScale2 = 0.390625;
						if (spinIconScaletimer == 5 || spinIconScaletimer == 27) spinIconScale2 = 0.39453125;
						if (spinIconScaletimer == 6 || spinIconScaletimer == 26) spinIconScale2 = 0.3984375;
						if (spinIconScaletimer == 7 || spinIconScaletimer == 25) spinIconScale2 = 0.40234375;
						if (spinIconScaletimer == 8 || spinIconScaletimer == 24) spinIconScale2 = 0.40625;
						if (spinIconScaletimer == 9 || spinIconScaletimer == 23) spinIconScale2 = 0.41015625;
						if (spinIconScaletimer == 10 || spinIconScaletimer == 22) spinIconScale2 = 0.4140625;
						if (spinIconScaletimer == 11 || spinIconScaletimer == 21) spinIconScale2 = 0.41796875;
						if (spinIconScaletimer == 12 || spinIconScaletimer == 20) spinIconScale2 = 0.421875;
						if (spinIconScaletimer == 13 || spinIconScaletimer == 19) spinIconScale2 = 0.42578125;
						if (spinIconScaletimer == 14 || spinIconScaletimer == 18) spinIconScale2 = 0.4296875;
						if (spinIconScaletimer == 15 || spinIconScaletimer == 17) spinIconScale2 = 0.43359375;
						if (spinIconScaletimer == 16) spinIconScale2 = 0.4375;
						spinIconScale = (spinIconScale2, spinIconScale2);
						spiniconalpha *= 1.5;
						if (spiniconalpha > 1.0) spiniconalpha = 1.0;
					}
					bool canspinattack;
					if (exex_cricketbatcanspinattack && (MiscItem && VisiblePlayerLevel >= exex_cricketspinlvlrequirement)) canspinattack = true;
					vector2 poss = (-16, -64);
					if (canspinattack) DrawTexture(TexMan.CheckForTexture("DINSPINA", TexMan.TYPE_MiscPatch), poss, DI_ITEM_CENTER, spiniconalpha, (-1,-1), spinIconScale); // 51, -3
				}
				if (PlayerWeapon is "FosnianCandle")
				{
					textureid candmode = TexMan.CheckForTexture("FCANFIRE");
					if (MiscItem.FCandleShotType == 0) candmode = TexMan.CheckForTexture("FCANFIRE");
					if (MiscItem.FCandleShotType == 1) candmode = TexMan.CheckForTexture("FCANICE");
					if (MiscItem.FCandleShotType >= 2)
					{
						if (MiscItem.FCandleAntipodeShot % 2) candmode = TexMan.CheckForTexture("FCANCOM1");
						else candmode = TexMan.CheckForTexture("FCANCOM2");
					}
					vector2 poss = (-32, -40); // -16, -64
					DrawTexture(candmode, poss, DI_ITEM_CENTER, FontAlpha, (-1,-1), (0.667, 0.667)); // 51, -3
				}
				
				int AmmoFontCLR = font.cr_gray;
				AmmoRatio = ammo1.Amount * 100 / ammo1.MaxAmount;
				if (ammo1.Amount <= 0) AmmoFontCLR = font.cr_red;
				else if (AmmoRatio >= 0 && AmmoRatio <= 33) AmmoFontCLR = font.cr_fire;
				else if (AmmoRatio >= 34 && AmmoRatio <= 66) AmmoFontCLR = font.cr_yellow;
				else if (AmmoRatio >= 67 && AmmoRatio <= 99) AmmoFontCLR = font.cr_darkgreen;
				else if (ammo1.Amount >= ammo1.MaxAmount) AmmoFontCLR = font.cr_sapphire;
				else AmmoFontCLR = font.cr_gray;
				int DigitPush = 0;
				if (ammo1.MaxAmount > 99) DigitPush = 5;
				if (ammo1.MaxAmount > 999) DigitPush = 10;

				if (CPlayerPawn.CountInv("BackpackTier2")) DrawString(mDDMFont, FormatNumber(ammo1.MaxAmount, 3), (x+4, y+15), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				if (CPlayerPawn.CountInv("BackpackTier1")) DrawString(mDDMFont, FormatNumber(ammo1.MaxAmount, 3), (x+3, y+14), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				DrawString(mDDMFont, FormatNumber(ammo1.MaxAmount, 3), (x+2, y+13), DI_TEXT_ALIGN_RIGHT, font.cr_DarkGray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);

				if (CPlayerPawn.CountInv("BackpackTier2")) DrawString(mDDMFont, "/", ((x+2-27-DigitPush), y+9), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				if (CPlayerPawn.CountInv("BackpackTier1")) DrawString(mDDMFont, "/", ((x+1-27-DigitPush), y+8), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				DrawString(mDDMFont, "/", ((x-27-DigitPush), y+7), DI_TEXT_ALIGN_RIGHT, font.cr_DarkGray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);

				if (CPlayerPawn.CountInv("BackpackTier2")) DrawString(mDDLFont, FormatNumber(ammo1.Amount, 3), (x+4, y-1), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				if (CPlayerPawn.CountInv("BackpackTier1")) DrawString(mDDLFont, FormatNumber(ammo1.Amount, 3), (x+3, y-2), DI_TEXT_ALIGN_RIGHT, font.cr_black, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
				DrawString(mDDLFont, FormatNumber(ammo1.Amount, 3), (x+2, y-3), DI_TEXT_ALIGN_RIGHT, AmmoFontCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);

				DrawTexture(ammo1.Icon, (x-10, y), DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), (0.75,0.75)); // -17, y
				y -= 40;
			}
			else
			{
				if (PlayerWeapon is "HandToHand")
				{
					double FLCRAlpha = FontAlpha * 0.5;
					vector2 FLCRScale = (0.75, 0.75);
					int jx, jy;
					jx = -56; // -30;
					jy = -56; // -76;
					if (VisiblePlayerLevel > 0 && !ddafd_disableflowercrownip)
					{
						textureid blimg = TexMan.CheckForTexture("FLCRNIP0", TexMan.TYPE_MiscPatch);
						if (MiscItem.TrueIPLevelGate <= 0 && MiscItem.TrueIPCooldownTimer <= 0)
						{
							blimg = TexMan.CheckForTexture("FLCRNIP2", TexMan.TYPE_MiscPatch);
							double cost = A_GetIPCost(-1);
							if (MiscItem.ItemPoints >= cost)
							{
								if (MiscItem.IPUseMode)
								{
									int FlashTimer = level.time % 20;
									if (FlashTimer >= 10 && FlashTimer <= 19) 
									{
										blimg = TexMan.CheckForTexture("FLCRNIP1", TexMan.TYPE_MiscPatch);
										FLCRAlpha *= 1.25;
									}
								}
								else
								{
									int FlashTimer = level.time % 80;
									if (FlashTimer >= 40 && FlashTimer <= 79) 
									{
										blimg = TexMan.CheckForTexture("FLCRNIP1", TexMan.TYPE_MiscPatch);
										FLCRAlpha *= 1.0625;
									}
								}
							}
						}
						else
						{
							blimg = TexMan.CheckForTexture("FLCRNIP0", TexMan.TYPE_MiscPatch);
							FLCRAlpha *= 0.25;
							FLCRScale *= 0.5;
							jx = -30; // -30;
							jy = -30; // -76;
						}
						DrawTexture(blimg, (jx, jy), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, FLCRAlpha, (-1, -1), FLCRScale); // 51, -3
					}
				}
				
				if (PlayerWeapon is "SigilDD")
				{
					int AmmoFontCLR = font.cr_gray;
					
					AmmoRatio = CurrHealth * 100 / PlayerMaxHP;
					if (CurrHealth <= 0) AmmoFontCLR = font.cr_red;
					else if (AmmoRatio >= 0 && AmmoRatio <= 33) AmmoFontCLR = font.cr_fire;
					else if (AmmoRatio >= 34 && AmmoRatio <= 66) AmmoFontCLR = font.cr_yellow;
					else if (AmmoRatio >= 67 && AmmoRatio <= 99) AmmoFontCLR = font.cr_darkgreen;
					else if (AmmoRatio >= 100 && AmmoRatio <= 199) AmmoFontCLR = font.cr_sapphire;
					else if (AmmoRatio >= 200 && AmmoRatio <= 299) AmmoFontCLR = font.cr_purple;
					else if (AmmoRatio >= 300) AmmoFontCLR = font.cr_gold;
					else AmmoFontCLR = font.cr_gray;
					
					DrawString(mDDMFont, FormatNumber(PlayerMaxHP, 3), (x+2, y+13), DI_TEXT_ALIGN_RIGHT, font.cr_DarkGray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					DrawString(mDDMFont, "/", (x-27, y+7), DI_TEXT_ALIGN_RIGHT, font.cr_DarkGray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					DrawString(mDDLFont, FormatNumber(CurrHealth, 3), (x+2, y-3), DI_TEXT_ALIGN_RIGHT, AmmoFontCLR, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					
					vector2 IconScale = (0.334, 0.334);
					let Sigl = SigilDD(PlayerWeapon);
					if (Sigl)
					{
						textureid Sigl1Icon;
						if ((Sigl.health) <= 1) Sigl1Icon = TexMan.CheckForTexture("WISIGILA", TexMan.TYPE_MiscPatch);
						if ((Sigl.health) == 2) Sigl1Icon = TexMan.CheckForTexture("WISIGILB", TexMan.TYPE_MiscPatch);
						if ((Sigl.health) == 3) Sigl1Icon = TexMan.CheckForTexture("WISIGILC", TexMan.TYPE_MiscPatch);
						if ((Sigl.health) == 4) Sigl1Icon = TexMan.CheckForTexture("WISIGILD", TexMan.TYPE_MiscPatch);
						if ((Sigl.health) >= 5) Sigl1Icon = TexMan.CheckForTexture("WISIGILE", TexMan.TYPE_MiscPatch);
						DrawTexture(Sigl1Icon, (x-10, y), DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), IconScale); // -17, y
						string Sigl2Icon;
						if ((CPlayerPawn.CountInv("SigilModeType")) <= 1) Sigl1Icon = TexMan.CheckForTexture("WISIGIL1", TexMan.TYPE_MiscPatch);
						if ((CPlayerPawn.CountInv("SigilModeType")) == 2) Sigl1Icon = TexMan.CheckForTexture("WISIGIL2", TexMan.TYPE_MiscPatch);
						if ((CPlayerPawn.CountInv("SigilModeType")) == 3) Sigl1Icon = TexMan.CheckForTexture("WISIGIL3", TexMan.TYPE_MiscPatch);
						if ((CPlayerPawn.CountInv("SigilModeType")) == 4) Sigl1Icon = TexMan.CheckForTexture("WISIGIL4", TexMan.TYPE_MiscPatch);
						if ((CPlayerPawn.CountInv("SigilModeType")) >= 5) Sigl1Icon = TexMan.CheckForTexture("WISIGIL5", TexMan.TYPE_MiscPatch);
						DrawTexture(Sigl1Icon, (x-10, y), DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), IconScale); // -17, y
						string SiglLvl = "";
						SiglLvl.AppendFormat("\c[gold]%d\c-/\c[yellow]%d\c-", CPlayerPawn.CountInv("SigilModeType"), (Sigl.health));
						DrawString(mDDMFont, SiglLvl, (x+3, y-41), DI_TEXT_ALIGN_RIGHT, font.cr_DarkGray, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
						DrawString(mDDLFont, FormatNumber(Sigl.truedrainamt, 3), (x-25, y-25), DI_TEXT_ALIGN_RIGHT, font.cr_brick, FontAlpha, FontWrapWidth, FontLineSpace, FontScale);
					}
					y -= 40;
				}
			}

			// IP Icons [Weapons]
			if (exex_ikaripointsenabled)
			{
				string IPIcon = "IPIconUN";
				vector2 IPIconPos = (0, 0); // (324, -25) + (0, yadd)
				vector2 IPIconPosV = (0, 0); // (324, -25) + (0, yadd)
				//Console.Printf("ipos: %d / %d, x: %d [%d], y: %d [%d]", i, NumFields, IPIconPos.x, position.x, IPIconPos.y, position.y);
				bool HasIPIcon = false;
				int CanUseIPATK = 0;
				int IPIconTimer = level.time % 8;
				int IPIconSpeed = 1;
				int icontype; // 0 = Fire, 1 = Alt-Fire, 2 = Special1, 3 = Special2[?], etc.
				vector2 IPIconScale = (1.5, 1.5);
				double IPIconScale2 = 1.5;
				if (CPlayerPawn && MiscItem.IPUseMode) IPIconSpeed = 2;
				if (MiscItem)
				{
					double IPCost;
					
					//***********************
					//* Main Attack Icon[s] *
					//***********************
					if (PlayerWeapon is "CricketBat")
					{
						// Cricket Bat [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(101);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "BlunderAxe")
					{
						// Blunderaxe [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(111);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "Scrambler")
					{
						// Blunderaxe [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(121);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "AppleJack")
					{
						// Blunderaxe [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(131);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "WizardPike")
					{
						// Blunderaxe [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.334;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(141);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "SuperVac")
					{
						// Blunderaxe [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(151);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "Grimophone")
					{
						// Grimophone [Normal Ranged Attack]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(161);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "CandleWhip")
					{
						// CandleWhip [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(171);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "SigilDD")
					{
						// Sigil
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.75;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						double sigilcost = (3.0 * CPlayerPawn.CountInv("SigilModeType"));
						IPCost = A_GetIPCost(181,true,sigilcost);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "EvilWarriorShield")
					{
						// Hell Warrior Shield [Fireball]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.75;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(191);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "FosnianCandle")
					{
						// Fosnian CandleVulcan [Normal Melee]
						IPIconPos = (-50, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(201);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					IPIconPosV = IPIconPos;
					if (dydudebug_ipdisplays && HasIPIcon) Console.Printf("\c[blue][SBAR Weapon [Main] (%s)] Cost: %.4f", PlayerWeapon.GetClassName(), IPCost);
					
					// Shows the Proper Icon if the above meets criteria
					if (HasIPIcon) 
					{
						if (CanUseIPATK) 
						{
							if (IPIconSpeed <= 1) IPIcon = "IPIcon1U";
							if (IPIconSpeed >= 2) IPIcon = "IPIcon2U";
							if (CanUseIPATK == 1)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 32;
									if (IPIconTimer >= 0 && IPIconTimer <= 7) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 8 && IPIconTimer <= 15) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 16 && IPIconTimer <= 23) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 24 && IPIconTimer <= 31) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 24;
									if (IPIconTimer >= 0 && IPIconTimer <= 5) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 11) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 12 && IPIconTimer <= 17) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 18 && IPIconTimer <= 23) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
							if (CanUseIPATK == 2)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 16;
									if (IPIconTimer >= 0 && IPIconTimer <= 3) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 4 && IPIconTimer <= 7) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 8 && IPIconTimer <= 11) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 12 && IPIconTimer <= 15) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 12;
									if (IPIconTimer >= 0 && IPIconTimer <= 2) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 3 && IPIconTimer <= 5) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 8) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 9 && IPIconTimer <= 11) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
							if (CanUseIPATK >= 3)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 8;
									if (IPIconTimer >= 0 && IPIconTimer <= 1) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 2 && IPIconTimer <= 3) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 4 && IPIconTimer <= 5) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 7) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 4;
									if (IPIconTimer == 0) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer == 1) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer == 2) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer == 3) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
						}
						else
						{
							IPIcon = "IPIconUN";
						}
						DrawTexture(TexMan.CheckForTexture(IPIcon, TexMan.TYPE_MiscPatch), IPIconPos, DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), IPIconScale);

						int IPCharges;
						if (IPCost > 0.001) 
						{
							int TextSize = 1;
							IPCharges = (MiscItem.ItemPoints / IPCost);
							string ChargeDigits = FormatNumber(IPCharges);
							int ChargeDigitsI = ChargeDigits.Length();
							double valscale = 0.667;
							double valAlpha = 0.875;
							vector2 ValPos = ((2 + ((ChargeDigitsI - 1) * 2)), 2);
							int ValColor = font.CR_GREY;
							if (IPIconSpeed <= 1) ValColor = font.CR_FIRE;
							if (IPIconSpeed >= 2) ValColor = font.CR_SAPPHIRE;
							if (IPCost)
							{
								if (IPCharges) DrawString(mDDLFont, FormatNumber(IPCharges, 0, 6), IPIconPosV + ValPos, DI_TEXT_ALIGN_CENTER, ValColor, ValAlpha, -1, 4, (valscale, valscale));
							}
						}
					}
					
					//**********************
					//* Alt Attack Icon[s] *
					//**********************
					HasIPIcon = false;
					if (PlayerWeapon is "CricketBat")
					{ 
						// Cricket Bat [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(102);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "BlunderAxe")
					{
						// Blunderaxe [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(112);
						int ammocost = 3;
						if (dydudebug_infiniteip) ammocost = 1;
						if (CPlayerPawn.CountInv("BlunderAmmo") >= ammocost)
						{
							if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
							else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
							if (dydudebug_infiniteip) CanUseIPATK = 3;
						}
					}
					if (PlayerWeapon is "Scrambler")
					{
						// Scrambler [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(122);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "AppleJack")
					{
						// AppleJack [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(132);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "WizardPike")
					{
						// Pike [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 2.25;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(142);
						int ammocost = 3;
						if (dydudebug_infiniteip) ammocost = 1;
						if (CPlayerPawn.CountInv("PikeAmmo") >= ammocost)
						{
							if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
							else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
							if (dydudebug_infiniteip) CanUseIPATK = 3;
						}
					}
					if (PlayerWeapon is "SuperVac")
					{
						// Pike [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.875;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(152);
						if (CPlayerPawn.CountInv("VacAmmo") >= MiscItem.VacCost)
						{
							if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
							else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
							if (dydudebug_infiniteip) CanUseIPATK = 3;
						}
					}
					if (PlayerWeapon is "Grimophone")
					{
						// Grimophone [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(162);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "CandleWhip")
					{
						// CandleWhip [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(172);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					if (PlayerWeapon is "FosnianCandle")
					{ 
						// Fosnian CandleVulcan [Alt Attack]
						IPIconPos = (-62, -10);
						IPIcon = "IPIconUN";
						HasIPIcon = true;
						CanUseIPATK = 0;
						IPIconScale2 = 1.5;
						IPIconScale = (IPIconScale2, IPIconScale2);
						IPIconTimer = level.time % 8;
						IPCost = A_GetIPCost(201);
						if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
						else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
						if (dydudebug_infiniteip) CanUseIPATK = 3;
					}
					IPIconPosV = IPIconPos;
					if (dydudebug_ipdisplays && HasIPIcon) Console.Printf("\c[blue][SBAR Weapon [Alt] (%s)] Cost: %.4f", PlayerWeapon.GetClassName(), IPCost);
					
					// Shows the Proper Icon if the above meets criteria
					if (HasIPIcon) 
					{
						if (CanUseIPATK) 
						{
							if (IPIconSpeed <= 1) IPIcon = "IPIcon1U";
							if (IPIconSpeed >= 2) IPIcon = "IPIcon2U";
							if (CanUseIPATK == 1)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 32;
									if (IPIconTimer >= 0 && IPIconTimer <= 7) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 8 && IPIconTimer <= 15) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 16 && IPIconTimer <= 23) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 24 && IPIconTimer <= 31) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 24;
									if (IPIconTimer >= 0 && IPIconTimer <= 5) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 11) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 12 && IPIconTimer <= 17) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 18 && IPIconTimer <= 23) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
							if (CanUseIPATK == 2)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 16;
									if (IPIconTimer >= 0 && IPIconTimer <= 3) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 4 && IPIconTimer <= 7) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 8 && IPIconTimer <= 11) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 12 && IPIconTimer <= 15) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 12;
									if (IPIconTimer >= 0 && IPIconTimer <= 2) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 3 && IPIconTimer <= 5) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 8) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 9 && IPIconTimer <= 11) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
							if (CanUseIPATK >= 3)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 8;
									if (IPIconTimer >= 0 && IPIconTimer <= 1) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 2 && IPIconTimer <= 3) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer >= 4 && IPIconTimer <= 5) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer >= 6 && IPIconTimer <= 7) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
								else
								{
									IPIconTimer = level.time % 4;
									if (IPIconTimer == 0) IPIconPos += ((0 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer == 1) IPIconPos += ((1 * IPIconScale2), (0 * IPIconScale2));
									if (IPIconTimer == 2) IPIconPos += ((1 * IPIconScale2), (1 * IPIconScale2));
									if (IPIconTimer == 3) IPIconPos += ((0 * IPIconScale2), (1 * IPIconScale2));
								}
							}
						}
						else
						{
							IPIcon = "IPIconUN";
						}
						DrawTexture(TexMan.CheckForTexture(IPIcon, TexMan.TYPE_MiscPatch), IPIconPos, DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), IPIconScale);

						int IPCharges;
						if (IPCost > 0.001) 
						{
							int TextSize = 1;
							IPCharges = (MiscItem.ItemPoints / IPCost);
							string ChargeDigits = FormatNumber(IPCharges);
							int ChargeDigitsI = ChargeDigits.Length();
							double valscale = 0.667;
							double valAlpha = 0.875;
							vector2 ValPos = ((-2 - ((ChargeDigitsI - 1) * 2)), 2);
							int ValColor = font.CR_GREY;
							if (IPIconSpeed <= 1) ValColor = font.CR_FIRE;
							if (IPIconSpeed >= 2) ValColor = font.CR_SAPPHIRE;
							if (IPCost)
							{
								if (IPCharges) DrawString(mDDLFont, FormatNumber(IPCharges, 0, 6), IPIconPosV + ValPos, DI_TEXT_ALIGN_CENTER, ValColor, ValAlpha, -1, 4, (valscale, valscale));
							}
						}
					}
						
					
					//**********************
					//* Special[1] Icon[s] *
					//**********************
					HasIPIcon = false;
					if (PlayerWeapon is "CricketBat")
					{
						// Cricket Bat [Spin Attack]
						bool canspinattack;
						if (exex_cricketbatcanspinattack && (MiscItem && VisiblePlayerLevel >= exex_cricketspinlvlrequirement)) canspinattack = true;
						if (canspinattack)
						{
							IPIconPos = (-50, -54);
							IPIcon = "IPIconUN";
							HasIPIcon = true;
							CanUseIPATK = 0;
							IPIconScale2 = 2.0;
							IPIconScale = (IPIconScale2, IPIconScale2);
							IPIconTimer = level.time % 8;
							IPCost = A_GetIPCost(103);
							if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
							else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
							if (dydudebug_infiniteip) CanUseIPATK = 3;
						}
					}
					if (PlayerWeapon is "WizardPike")
					{
						// Pike [Inviso Mode]
						bool caninviso;
						if (exex_cricketbatcanspinattack && (MiscItem && VisiblePlayerLevel >= exex_pikeinvisolvlreq)) caninviso = true;
						if (caninviso)
						{
							IPIconPos = (-50, -54);
							IPIcon = "IPIconUN";
							HasIPIcon = true;
							CanUseIPATK = 0;
							IPIconScale2 = 2.0;
							IPIconScale = (IPIconScale2, IPIconScale2);
							IPIconTimer = level.time % 8;
							IPCost = A_GetIPCost(143);
							if (MiscItem.ItemPoints >= (IPCost*2)) CanUseIPATK = 2;
							else if (MiscItem.ItemPoints >= (IPCost*1)) CanUseIPATK = 1;
							if (dydudebug_infiniteip) CanUseIPATK = 3;
						}
					}
					IPIconPosV = IPIconPos;
					if (dydudebug_ipdisplays && HasIPIcon) Console.Printf("\c[blue][SBAR Weapon [Special1] (%s)] Cost: %.4f", PlayerWeapon.GetClassName(), IPCost);
					
					// Shows the Proper Icon if the above meets criteria
					if (HasIPIcon) 
					{
						if (CanUseIPATK) 
						{
							if (IPIconSpeed <= 1) IPIcon = "IPIcon1U";
							if (IPIconSpeed >= 2) IPIcon = "IPIcon2U";
							if (CanUseIPATK == 1)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 32;
									if (IPIconTimer >= 0 && IPIconTimer <= 7) IPIconPos += (0, 0);
									if (IPIconTimer >= 8 && IPIconTimer <= 15) IPIconPos += (1, 0);
									if (IPIconTimer >= 16 && IPIconTimer <= 23) IPIconPos += (1, 1);
									if (IPIconTimer >= 24 && IPIconTimer <= 31) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 24;
									if (IPIconTimer >= 0 && IPIconTimer <= 5) IPIconPos += (0, 0);
									if (IPIconTimer >= 6 && IPIconTimer <= 11) IPIconPos += (1, 0);
									if (IPIconTimer >= 12 && IPIconTimer <= 17) IPIconPos += (1, 1);
									if (IPIconTimer >= 18 && IPIconTimer <= 23) IPIconPos += (0, 1);
								}
							}
							if (CanUseIPATK == 2)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 16;
									if (IPIconTimer >= 0 && IPIconTimer <= 3) IPIconPos += (0, 0);
									if (IPIconTimer >= 4 && IPIconTimer <= 7) IPIconPos += (1, 0);
									if (IPIconTimer >= 8 && IPIconTimer <= 11) IPIconPos += (1, 1);
									if (IPIconTimer >= 12 && IPIconTimer <= 15) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 12;
									if (IPIconTimer >= 0 && IPIconTimer <= 2) IPIconPos += (0, 0);
									if (IPIconTimer >= 3 && IPIconTimer <= 5) IPIconPos += (1, 0);
									if (IPIconTimer >= 6 && IPIconTimer <= 8) IPIconPos += (1, 1);
									if (IPIconTimer >= 9 && IPIconTimer <= 11) IPIconPos += (0, 1);
								}
							}
							if (CanUseIPATK >= 3)
							{
								if (IPIconSpeed == 1)
								{
									IPIconTimer = level.time % 8;
									if (IPIconTimer >= 0 && IPIconTimer <= 1) IPIconPos += (0, 0);
									if (IPIconTimer >= 2 && IPIconTimer <= 3) IPIconPos += (1, 0);
									if (IPIconTimer >= 4 && IPIconTimer <= 5) IPIconPos += (1, 1);
									if (IPIconTimer >= 6 && IPIconTimer <= 7) IPIconPos += (0, 1);
								}
								else
								{
									IPIconTimer = level.time % 4;
									if (IPIconTimer == 0) IPIconPos += (0, 0);
									if (IPIconTimer == 1) IPIconPos += (1, 0);
									if (IPIconTimer == 2) IPIconPos += (1, 1);
									if (IPIconTimer == 3) IPIconPos += (0, 1);
								}
							}
						}
						else
						{
							IPIcon = "IPIconUN";
						}
						DrawTexture(TexMan.CheckForTexture(IPIcon, TexMan.TYPE_MiscPatch), IPIconPos, DI_TEXT_ALIGN_RIGHT, 1.0, (-1, -1), IPIconScale);
						

						int IPCharges;
						if (IPCost > 0.001) 
						{
							int TextSize = 1;
							IPCharges = (MiscItem.ItemPoints / IPCost);
							string ChargeDigits = FormatNumber(IPCharges);
							int ChargeDigitsI = ChargeDigits.Length();
							double valscale = 0.8334;
							double valAlpha = 0.875;
							vector2 ValPos = (0, 2);
							int ValColor = font.CR_GREY;
							if (IPIconSpeed <= 1) ValColor = font.CR_FIRE;
							if (IPIconSpeed >= 2) ValColor = font.CR_SAPPHIRE;
							if (IPCost)
							{
								if (IPCharges) DrawString(mDDLFont, FormatNumber(IPCharges, 0, 6), IPIconPosV + ValPos, DI_TEXT_ALIGN_CENTER, ValColor, ValAlpha, -1, 4, (valscale, valscale));
							}
						}
					}

					HasIPIcon = false;
					//**********************
					//* Special[2] Icon[s] *
					//**********************
					// None Yet Available :V

				}
			}

			if (CPlayerPawn && !automapactive)
			{
				DigY = 0;
				string mapnam = "";
				int mapnametimerbase = 38;
				int mapnametimer = level.time % mapnametimerbase;
				if (mapnametimer == 0)
				{
					mapnametimerbase = randompick(23,28,28,32,32,32,35,35,35,35,35,38,38,38,42,42,47);
					mapnametimer = level.time % mapnametimerbase;
				}
				bool mapnameflickermode = 0;
				int stattalLYtimerbase = 140;
				int stattalLYtimer = level.time % stattalLYtimerbase;
				int stattalLYshowall = (stattalLYtimerbase * 0.75);
				double talLYpercent = 100.0;
				bool showtotaltallies = false;
				if (dyduhud_leveltallies >= 2)
				{
					if (dyduhud_leveltallies == 4) showtotaltallies = true;
					if (dyduhud_leveltallies == 3)
					{
						if (stattalLYtimer > stattalLYshowall && MiscItem) showtotaltallies = false;
																													else showtotaltallies = true;
					}
					if (dyduhud_leveltallies == 2)
					{
						if (stattalLYtimer > stattalLYshowall && MiscItem) showtotaltallies = true;
																													else showtotaltallies = false;
					}
				}
				
				if (level.AllMap)
				{
					if (mapnametimer > (mapnametimerbase * 0.5)) mapnameflickermode = 1;
				}

				if (mapnameflickermode)
				{
					if (gameinfo.gametype != GAME_Hexen && !MiscItem.isDDTrilogy)
					{
						if (gameinfo.gametype == GAME_Doom) mapnam.AppendFormat("\c[sapphire]%s: ", level.mapname);
						if (gameinfo.gametype == GAME_Heretic || gameinfo.gametype == GAME_Strife) mapnam.AppendFormat("\c[sapphire]%s: ", level.mapname);
					}
					mapnam.AppendFormat("\c[fire]%s", level.levelname);
				}
				else
				{
					if (gameinfo.gametype != GAME_Hexen && !MiscItem.isDDTrilogy) 
					{
						if (gameinfo.gametype == GAME_Doom) mapnam.AppendFormat("\c[red]%s: ", level.mapname);
						if (gameinfo.gametype == GAME_Heretic || gameinfo.gametype == GAME_Strife) mapnam.AppendFormat("\c[gold]%s: ", level.mapname);
					}
					mapnam.AppendFormat("\c[white]%s", level.levelname);
				}
				if (dyduhud_showlevelnames)
				{
					DigY -= 40;
					DrawString(mConFont, mapnam, (0, DigY), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, font.cr_darkgray);
				}
				
				string talLYtemp = "";
				if (dyduhud_showleveltimes)
				{
					int timeTicks =
							hud_showtime < 4
								? Level.maptime
								: (hud_showtime < 6
									? Level.time
									: Level.totaltime);
									// Time Stats
					int leveltime = level.totaltime;
					int rawseconds = Thinker.Tics2Seconds(leveltime);
					int leveltimedays = ((rawseconds / 86400));
					int dayaddx = 0;
					if (leveltimedays > 0 && leveltimedays <= 9) dayaddx = 12;
					if (leveltimedays >= 10 && leveltimedays <= 99) dayaddx = 24;

					talLYtemp = "TIME: ";
					leveltime = level.time;
					rawseconds = Thinker.Tics2Seconds(leveltime);
					int leveltimesec = (rawseconds % 60);
					int leveltimemin = ((rawseconds % 3600) / 60);
					int leveltimehrs = ((rawseconds % 86400) / 3600);
					leveltimedays = ((rawseconds / 86400));

					if (leveltimedays) talLYtemp.AppendFormat("%dd ", leveltimedays);
					if (leveltimehrs >= 0 && leveltimehrs <= 9) talLYtemp.AppendFormat("0%d:", leveltimehrs);
																								 else talLYtemp.AppendFormat("%d:", leveltimehrs);
					if (leveltimemin >= 0 && leveltimemin <= 9) talLYtemp.AppendFormat("0%d:", leveltimemin);
																								 else talLYtemp.AppendFormat("%d:", leveltimemin);
					if (leveltimesec >= 0 && leveltimesec <= 9) talLYtemp.AppendFormat("0%d", leveltimesec);
																								 else talLYtemp.AppendFormat("%d", leveltimesec);
					DigY -= 8;
					DrawString(mConFont, talLYtemp, (-120-dayaddx, DigY), DI_TEXT_ALIGN_LEFT|DI_SCREEN_CENTER_BOTTOM, font.cr_darkgray);
					// Total Time
					talLYtemp = "TOTAL: ";
					leveltime = level.totaltime;
					rawseconds = Thinker.Tics2Seconds(leveltime);
					leveltimesec = (rawseconds % 60);
					leveltimemin = ((rawseconds % 3600) / 60);
					leveltimehrs = ((rawseconds % 86400) / 3600);
					leveltimedays = ((rawseconds / 86400));

					if (leveltimedays) talLYtemp.AppendFormat("%dd ", leveltimedays);
					if (leveltimehrs >= 0 && leveltimehrs <= 9) talLYtemp.AppendFormat("0%d:", leveltimehrs);
																								 else talLYtemp.AppendFormat("%d:", leveltimehrs);
					if (leveltimemin >= 0 && leveltimemin <= 9) talLYtemp.AppendFormat("0%d:", leveltimemin);
																								 else talLYtemp.AppendFormat("%d:", leveltimemin);
					if (leveltimesec >= 0 && leveltimesec <= 9) talLYtemp.AppendFormat("0%d", leveltimesec);
																								 else talLYtemp.AppendFormat("%d", leveltimesec);
					DrawString(mConFont, talLYtemp, (120+dayaddx, DigY), DI_TEXT_ALIGN_RIGHT|DI_SCREEN_CENTER_BOTTOM, font.cr_gray);
				}
				
				if (dyduhud_leveltallies)
				{
					// Level Stats
					DigY += 8;
					if (dyduhud_showleveltimes) DigY -= 8;
					int talLYfontclr;
					int flashinterval = 24;
					if (showtotaltallies) flashinterval = 12;
					int scrtcnt = level.found_secrets;
					int maxscrtcnt = level.total_secrets;
					if (showtotaltallies)
					{
						scrtcnt = MiscItem.totalsecretsgame;
						maxscrtcnt = MiscItem.totalmaxsecrets;
					}
					if (maxscrtcnt == 0) talLYpercent = 100.0;
					else talLYpercent = scrtcnt * 100.0 / maxscrtcnt;
					if (maxscrtcnt)
					{
						talLYfontclr = font.cr_gold;
						if (scrtcnt >= maxscrtcnt && level.time % flashinterval >= (flashinterval*0.5)) talLYfontclr = font.cr_darkgreen;
						DigY -= 8;
						talLYtemp = "Secrets: ";
						if (showtotaltallies) talLYtemp = "Secrets [ALL]: ";
						if (dyduhud_leveltalLYpercents != 2)
						{
							talLYtemp.AppendFormat("%d", scrtcnt);
							talLYtemp.AppendFormat("/");
							talLYtemp.AppendFormat("%d", maxscrtcnt);
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat(" ");
							talLYtemp.AppendFormat("[");
						}
						if (dyduhud_leveltalLYpercents)
						{
							talLYtemp.AppendFormat("%.2f", talLYpercent);
							talLYtemp.AppendFormat("%%");
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat("]");
						}
						DrawString(mConFont, talLYtemp, (0, DigY), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, talLYfontclr);
					}
					int itemcnt = level.found_items;
					int maxitemcnt = level.total_items;
					if (showtotaltallies)
					{
						itemcnt = MiscItem.totalitemsgame;
						maxitemcnt = MiscItem.totalmaxitems;
					}
					if (maxitemcnt == 0) talLYpercent = 100.0;
					else talLYpercent = itemcnt * 100.0 / maxitemcnt;
					if (maxitemcnt)
					{
						talLYfontclr = font.cr_lightblue;
						if (itemcnt >= maxitemcnt && level.time % flashinterval >= (flashinterval*0.5)) talLYfontclr = font.cr_brick;
						DigY -= 8;
						talLYtemp = "Items: ";
						if (showtotaltallies) talLYtemp = "Items [ALL]: ";
						if (dyduhud_leveltalLYpercents != 2)
						{
							talLYtemp.AppendFormat("%d", itemcnt);
							talLYtemp.AppendFormat("/");
							talLYtemp.AppendFormat("%d", maxitemcnt);
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat(" ");
							talLYtemp.AppendFormat("[");
						}
						if (dyduhud_leveltalLYpercents)
						{
							talLYtemp.AppendFormat("%.2f", talLYpercent);
							talLYtemp.AppendFormat("%%");
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat("]");
						}
						DrawString(mConFont, talLYtemp, (0, DigY), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, talLYfontclr);
					}
					int killcnt = level.killed_monsters;
					int maxkillcnt = level.total_monsters;
					if (showtotaltallies)
					{
						killcnt = MiscItem.totalkillsgame;
						maxkillcnt = MiscItem.totalmaxkills;
					}
					if (maxkillcnt == 0) talLYpercent = 100.0;
					else talLYpercent = killcnt * 100.0 / maxkillcnt;
					if (maxkillcnt)
					{
						talLYfontclr = font.cr_brick;
						if (killcnt >= maxkillcnt && level.time % flashinterval >= (flashinterval*0.5)) talLYfontclr = font.cr_lightblue;
						DigY -= 8;
						talLYtemp = "Kills: ";
						if (showtotaltallies) talLYtemp = "Kills [ALL]: ";
						if (dyduhud_leveltalLYpercents != 2)
						{
							talLYtemp.AppendFormat("%d", killcnt);
							talLYtemp.AppendFormat("/");
							talLYtemp.AppendFormat("%d", maxkillcnt);
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat(" ");
							talLYtemp.AppendFormat("[");
						}
						if (dyduhud_leveltalLYpercents)
						{
							talLYtemp.AppendFormat("%.2f", talLYpercent);
							talLYtemp.AppendFormat("%%");
						}
						if (dyduhud_leveltalLYpercents == 1)
						{
							talLYtemp.AppendFormat("]");
						}
						DrawString(mConFont, talLYtemp, (0, DigY), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, talLYfontclr);
					}
				}
			}
			
			
			// Inventory Bar
			int yadd = 0;
			if (CPlayer && automapactive) 
			{
				if (gameinfo.gametype == GAME_Doom) yadd -= 10;
				if (gameinfo.gametype == GAME_Heretic) yadd -= 16;
				if (gameinfo.gametype == GAME_Hexen) yadd -= 16;
				if (gameinfo.gametype == GAME_Strife) yadd -= 12;
			}
			int numboxes = exex_inventorybarboxes;

			if (numboxes <= 0) numboxes = 1;
			DrawInventoryBar(diparms, (0,0+yadd), numboxes, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
			//Console.Printf("End Of ScreenBlocks Check");
		}
		
		if (CPlayerPawn.CountInv("BlackScreenHUD")) DrawTexture(TexMan.CheckForTexture("BLAKSCRN", TexMan.TYPE_MiscPatch), (0, 540), DI_SCREEN_CENTER); // -46, -1
	}
}