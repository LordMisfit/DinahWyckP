// Bullet Tracers
class ZombieBulletTracer : EEBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 2;
		Height 2;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		A_ScaleVelocity(exex_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (5 * random(1,3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("ZombieBulletTracerTrail",6,-2.5);
			loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("BulletPuff");
			stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("BulletPuff");
			stop;
	}
}

class ZombieBulletTracerTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			stop;
	}
}


class RepeaterPuff : EEProjectile
{
	default
	{
		Tag "Plasma Repeater";
		Radius 3;
		Height 3;
		RenderStyle "Add";
		Alpha 0.75;
		+ALWAYSPUFF;
		+PUFFONACTORS;
		+NOGRAVITY;
		+NOBLOCKMAP
		+PUFFGETSOWNER;
		+FORCERADIUSDMG;
		+BLOODLESSIMPACT;
		-BLOODSPLATTER;
		DamageType "Plasma";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			RPUF A 1 Bright;
			RPUF A 0 Bright A_StartSound("Weapons/RepeaterHit");
			RPUF A 2 Bright A_Explode(14, 44, 0, 0, 22);
			RPUF BCDEFG 3 Bright;
			Stop;
	}
}

class ZombieRepeaterTracer : EEBulletTracer
{
	default
	{
		Tag "Plasma Repeater";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 2;
		Height 2;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 1.0;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		A_ScaleVelocity(exex_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (6 * random(2,6));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("ZombieRepeaterTracerTrail",6,-2.5);
			loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("RepeaterPuff");
			stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("RepeaterPuff");
			stop;
	}
}

class ZombieRepeaterTracerTrail : EEBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 1;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			stop;
	}
}

// Death Incarnate Glare Tracer
class IncarnateGlareTracer : EEBulletTracer
{
	default
	{
		Tag "Dark Glare";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		A_ScaleVelocity(exex_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (5 * random(1,3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("IncarnateGlareTracerTrail",6,-2.5);
			loop;
		XDeath:
			INPF ABCDE 3 Bright;
			stop;
		Death:
		Crash:
			INPF ABCDE 3 Bright;
			stop;
	}
}

class IncarnateGlareTracerTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			RTAC A 2 bright;
			stop;
	}
}

//MusicBall
class BaseMusicAtk : EEProjectile
{
	default
	{
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		DamageType "Beats";
	}
}
class MusicBall : BaseMusicAtk
{
	double seekintensity;
	double seekintensity2;
	default
	{
		Tag "Bad Music";
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt);
		+SEEKERMISSILE
		+NOEXTREMEDEATH
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		Projectile;
		Renderstyle "Add";
		DamageType "Beats";
		PoisonDamage 32;
		DeathSound "virtuoso/musichit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
		PoisonDamage = A_CalcDamageFormula2(32,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
		PoisonDamage = A_CalcDamageFormula2(32,0.005,5,0.334,2,0.1667,0.005);

		seekintensity = 7;
		seekintensity2 = 7;
		if (target)
		{
			if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
			{
				seekintensity += (target.CountInv("MonsterLevel") * 0.0625);
				seekintensity2 += (target.CountInv("MonsterLevel") * 0.0625);
			}
		}
		if (seekintensity > 15) seekintensity = 15;
		if (seekintensity2 > seekintensity) seekintensity2 = seekintensity;
	}
	
	States
	{
		Spawn:
			GBAL A 2 Bright NoDelay
			{
				A_GenNoteSpawnT("notetrail");
				A_SeekerMissile(seekintensity,seekintensity2,SMF_LOOK);
			}
			GBAL B 2 Bright;
			Loop;
    Death:
			TNT1 AAAAAA 1 A_GenNoteSpawn("Mininote");
			Stop;
	}
}

class MusicBall2 : BaseMusicAtk
{
	double seekintensity;
	double seekintensity2;
	default
	{
		Tag "Very Bad Music";
		Radius 8;
		Height 6;
		Speed 15;
		DamageFunction (finaldamagedealt);
		+SEEKERMISSILE
		+NOEXTREMEDEATH
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		Projectile;
		Renderstyle "Add";
		DamageType "Beats";
		PoisonDamage 64;
		DeathSound "virtuoso/musichit";
	}
	
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
		PoisonDamage = A_CalcDamageFormula2(64,0.005,5,0.334,2,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
		PoisonDamage = A_CalcDamageFormula2(64,0.005,5,0.334,2,0.1667,0.005);

		seekintensity = frandom(3,4);
		seekintensity2 = frandom(3,4);
		if (target)
		{
			if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
			{
				seekintensity += (target.CountInv("MonsterLevel") * 0.125);
				seekintensity2 += (target.CountInv("MonsterLevel") * 0.125);
			}
		}
		if (seekintensity > 22.5) seekintensity = 22.5;
		if (seekintensity2 > seekintensity) seekintensity2 = seekintensity;
	}
	
	States
	{
		Spawn:
			PBAL A 0 Bright A_GenNoteSpawnT("notetrail2");
			PBAL A 1 Bright 
			{
				A_SeekerMissile(seekintensity,seekintensity2,SMF_LOOK);
				int basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.08);
					}
				}
				if (random(1,8) <= basechance) { A_Weave(frandom(-5,5), frandom(-5,5), 1.0, 1.0); }
			}
			PBAL B 1 Bright 
			{
				int basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.04);
					}
				}
				if (random(1,4) <= basechance) { A_SeekerMissile(seekintensity,seekintensity2,SMF_LOOK); }

				basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.08);
					}
				}
				if (random(1,4) <= basechance) { A_Weave(frandom(-5,5), frandom(-5,5), 1.0, 1.0); }
			}
			PBAL C 1 Bright 
			{
				A_SeekerMissile(seekintensity,seekintensity2,SMF_LOOK);
				int basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.08);
					}
				}
				if (random(1,8) <= basechance) { A_Weave(frandom(-5,5), frandom(-5,5), 1.0, 1.0); }
			}
			PBAL D 1 Bright 
			{
				int basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.04);
					}
				}
				if (random(1,4) <= basechance) { A_SeekerMissile(seekintensity,seekintensity2,SMF_LOOK); }

				basechance = 1;
				if (target)
				{
					if (exex_monsterlevelenabledflags && A_CheckMonsterLevel(0,2,true,target))
					{
						basechance += (target.CountInv("MonsterLevel") * 0.16);
					}
				}
				if (random(1,4) <= basechance) { A_Weave(frandom(-5,5), frandom(-5,5), 1.0, 1.0); }
			}
			Loop;
    Death:
			TNT1 AAAAAA 1 A_GenNoteSpawn("Mininote2");
			Stop;
	}
}

//*************
//* Diabloist *
//*************

// Diabloist Flare
class MFlareFX : EEBaseZSC
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			FDFX ABCDEF 4 Bright;
			Stop;
	}
}

class DFlare : EEProjectile
{
	default
	{
		Tag "Diabloist Flare";
		Radius 5;
		Height 5;
		Speed 25;
		DamageFunction (finaldamagedealt);
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.85;
		PROJECTILE;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/firmfi";
		DeathSound "weapons/firex4";
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			VBAL A 0;
			"####" A 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" AA 1 Bright;
			"####" B 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" BB 1 Bright;
			loop;
		Death:
			CBAL CDEFG 3 Bright;
			stop;
	}
}

class DMissile : CFlameMissileNew
{
	default
	{
		Tag "Diabloist Fireblast";
		DamageType "Fire";
		DamageFunction (finaldamagedealt);
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			CFFX A 0;
			"####" AAAA 1 Bright;
			"####" A 1 A_CFlamePuff();
			Goto Death+1;
		Death:
			"####" A 1 Bright A_CFlameMissile("DMissileCircle");
			"####" ABC 3 Bright;
			"####" D 4 Bright;
			"####" E 3 Bright;
			"####" F 4 Bright;
			"####" G 3 Bright;
			"####" H 4 Bright;
			"####" I 3 Bright;
			"####" J 4 Bright;
			"####" K 3 Bright;
			"####" L 4 Bright;
			"####" M 3 Bright;
			Stop;
	}
}

class DTracer : EEProjectile
{
	default
	{
		Tag "Diabloist Tracer";
		Radius 5;
		Height 5;
		Speed 15;
		ReactionTime 175;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/diasht";
		DeathSound "weapons/firex3";   
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			TNT1 A 1 Bright A_SeekerMissile(10,15);
			TNT1 A 0 Bright A_Countdown();
			TNT1 A 0 Bright A_SpawnProjectile("DTracerPuff",0,0,0,0);
			loop;
		Death:
			FTRA K 4 Bright;
			FTRA L 4 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(64,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,64,0);
			}
			FTRA MNO 3 Bright;
			stop;
	}
}

class DTracerPuff : EEProjectile
{
	int etimer;
	default
	{
		Tag "Diabloist Tracer";
		Radius 1;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.67;
		PROJECTILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	void A_TracerExp(int basedmg = 4, int basemult = 1, int baserad = 16, int basefullrad = 8)
	{
		int dmg = A_CalcDamageFormula(basedmg,basemult,0.005,0.3334,0.1667,0.005);
		A_Explode(dmg,baserad,0,0,basefullrad);
	}

	States
	{
		Spawn:
			FTRA A 0;
			"####" AAABBBCCCDDDEEEFFFGGGHHHIIIJJJ 1 Bright 
			{
				int base = 3;
				if (target)
				{
					if (A_CheckMonsterLevel(30,2,true,target)) base = 2;
					if (A_CheckMonsterLevel(60,2,true,target)) base = 1;
				}
				if (etimer <= 0) 
				{
					A_TracerExp(4,1,16,8);
					etimer += base;
				}
				etimer--;
			}
			stop;
	}
}

class DMissileCircle : CircleFlameNew 
{ 
	default
	{
		Tag "Diabloist Fireblast";
		+THRUSPECIES;
		Species "Diabloist";
	}
}

class DFire : EEProjectile
{
	default
	{
		Tag "Diabloic FireHex";
		Obituary "%o got was set ablaze by a Diabloist.";
		Radius 0;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 1.00;
		+NOGRAVITY;
		+SEEKERMISSILE;
		+NOTARGET;
		+NODAMAGETHRUST;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	States
	{
		Spawn:
			HLFR A 2 Bright
			{
				A_StartFire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR BABCB 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR CBCDCDCDEDED 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(5,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR E 2 Bright
			{
				A_FireCrackle();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR FEF 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(3,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR EFG 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(2,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR HGHGH 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(1,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			stop;
	}
}

class DiabloistGravityHPTargeter : EEProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT AB 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistHPGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer = 0; 
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}

class DiabloistGravityHPTargeter2 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}

class DiabloistGravityHPTargeter3 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}

class DiabloistGravityManaTargeter : EEProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT F 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT FG 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistManaGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}

class DiabloistGravityManaTargeter2 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}

class DiabloistGravityManaTargeter3 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}

class ReviveProj : EEProjectile
{
	default
	{
		//+FLOAT;
		//+NOBLOCKMONST;
		//+NOGRAVITY;
		+FRIENDLY;
		+NOCLIP;
		Radius 50;
		Height 5;
		PROJECTILE;
		RenderStyle "None";
		Speed 7;
	}
	
	States
	{
		Spawn:
			TNT1 AAAAA 6 
			{
				A_Chase(null,null,CHF_RESURRECT);
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
		Heal:
			TNT1 A 1;
			Stop;
	}
}

// Revive Projectiles [used by monsters]
class ReviveProj2 : ReviveProj
{
	default
	{
		-FRIENDLY
	}
}
// Diabloist Gravity Glitter

class DiabloistHPGlitter : TeleGlitterGenerator1
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}
class DiabloistManaGlitter : TeleGlitterGenerator2
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}

// Diabloist Missile Trail
class DMissileTrail : CFlameFloor { }

// Pinky FireBreath
class DemonFire : SingleDamageRipper
{
	default
	{
		Tag "Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}

class BloodDemonFire : SingleDamageRipper
{
	default
	{
		Tag "Blood Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}

class NightmareSpectreFire : DemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}

class NightmareBloodSpectreFire : BloodDemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}

class EESpawnedItem : EEBaseZSC abstract
{
	override void PostBeginPlay()
	{
		basealpha = alpha;
		if (GetClassName() == "DSFX3") basealpha *= 0.90;

		//This space for rent.
		super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
}

class CacodemonShadowSplitAfterImage : EEBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class CacodemonShadowSplit1 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit2 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit3 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit4 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplitAfterImage : EEBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			PNSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class PElementalShadowSplit1 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit2 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit3 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit4 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}


// Hell Cleric Shot 1
class HellClericBall : EEProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}

// Hell Cleric Shot 2
class HellClericDarkBall : EEProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}

class FlyingBalrogShot1 : EEProjectile // FatShotNew
{
	default
	{
		Tag "Flamer Shot";
		scale 1.25;
		Radius 6;
		Height 8;
		Speed 30; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MANF AABB 2 Bright;
			Loop;
		Death:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class FlyingBalrogShot2 : EEProjectile // RevenantTracerNew
{
	double user_tracetightness;
	int LevelOfShooter;
	default
	{
		Tag "Tracer Missile";
		scale 1.25;
		Radius 11;
		Height 8;
		Speed 15; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE;
		+RANDOMIZE;
		SeeSound "Imp/Attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	
	void A_Tracer(double tang = 12.65625)
	{
		// killough 1/18/98: this is why some missiles do not have smoke
		// and some do. Also, internal demos start at random gametics, thus
		// the bug in which revenants cause internal demos to go out of sync.

		if (level.maptime & 3)	return;
	
		// spawn a puff of smoke behind the rocket
		SpawnPuff ("BulletPuff", pos, angle, angle, 3);
		Actor smoke = Spawn ("RevenantTracerSmoke", Vec3Offset(-Vel.X, -Vel.Y, 0.), ALLOW_REPLACE);
	
		if (smoke != null)
		{
			smoke.Vel.Z = 1.;
			smoke.tics -= random[Tracer](0, 3);
			if (smoke.tics < 1)
				smoke.tics = 1;
		}

		// The rest of this function was identical with Strife's version, except for the angle being used.
		A_Tracer2(tang);
	}
	
	States
	{
		Spawn:
			FATB AB 2 Bright 
			{
				double s1 = 12.65625;
				double s2 = 12.65625;
				if (target && exex_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.001875);
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.001875);
					if (A_CheckMonsterLevel(30,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0009375);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0009375);
					}
					if (A_CheckMonsterLevel(60,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00046875);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00046875);
					}
				}
				A_Tracer(s1);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("skeleton/tracex",CHAN_7);
				A_Quake(1, 8, 0, 192, "nosound/silent");
				A_Quake(3, 8, 0, 96, "nosound/silent");
			}
			FBXP A 8 Bright;
			FBXP B 6 Bright;
			FBXP C 4 Bright;
			Stop;
	}
}

// Suicide Bomber Explosions
class SuicideBomb : EEProjectile
{
	default
	{
		Tag "Suicide Bomb";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		Scale 0.75;
		PROJECTILE;
		RenderStyle "Add";
		DontHurtShooter;
		Obituary "%o was exploded by a crazy suicide bomber.";
		SeeSound "weapons/rocklx";
		DamageType "Explosion";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright 
			{
				int dmg = A_CalcDamageFormulaEx((64+random(-16,16)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (96+random(-24,24)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}

class SuicideBombStrong : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Strong]";
		Alpha 0.925;
		Scale 1.10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright 
			{
				int dmg = A_CalcDamageFormulaEx((128+random(-64,64)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (128+random(-64,64)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}

class SuicideBombUltra : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Ultra]";
		Alpha 0.95;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				int dmg = A_CalcDamageFormulaEx((256+random(-128,128)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (224+random(-112,112)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}

// Death Incarnate Glare Puff
class DIPuff : EEProjectile
{
	default
	{
		Tag "Dark Glare";
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		+PUFFONACTORS;
		RENDERSTYLE "Add";
		DamageType "IncarnateGlare";
	}
	
	States
	{
		Spawn:
			INPF ABCDE 3 Bright;
			Stop;
	}
}

// Hades Sphere Explosions
class HSBoom : EEProjectile
{
	default
	{
		Tag "Explosion";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		PROJECTILE;
		RENDERSTYLE "ADD";
		DONTHURTSHOOTER;
		Obituary "%o was blown away by a Hades Sphere.";
		SeeSound "monster/hadexp";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			HADE M 4 Bright 
			{
				A_HadesSphereExplode(112,112);
			}
			HADE NOPQ 5 Bright;
			Stop;
	}
}

class DBTPuff : EEPuff //replaces BulletPuff
{
	default
	{
		Tag "shot";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		+NOINTERACTION;
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 1;
		DamageType "Bullet";
	}
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,2);
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7);
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32);
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32);
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360));
			TNT1 A 1;
			Stop;
	}
}

class DBTPuffSmoke : EEBaseZSC
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		Scale 0.03;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,"T2");
		T1:
			X143 J 1 A_FadeOut(0.03);
			Wait;
		T2:
			X143 K 1 A_FadeOut(0.03);
			Wait;
	}
}

class DBTYellowSpark : EEBaseZSC
{
	default
	{
		+NOINTERACTION;
		Scale 0.16;
		RenderStyle "Add";
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(255,"Type1","Type2");
		Type1:
			FX26 A 2 Bright;
			FX26 BCD 2 Bright;
			FX26 EFGHI 2 Bright;
			FX26 J 1 Bright A_FadeOut();
			Wait;
		Type2:
			FX26 P 2 Bright;
			FX26 QRS 2 Bright;
			FX26 TUVWX 2 Bright;
			FX26 Y 1 Bright A_FadeOut();
			Wait;
	}
}

class DBTSparkExtra : EEProjectile
{
	default
	{
		Height 1;
		Radius 1;
		Speed 3;
		Scale 0.15;
		+NOCLIP;
		PROJECTILE;
		-NOGRAVITY;
		Gravity 0.09;
		+DONTSPLASH;
		+DONTBLAST;
		+THRUACTORS;
		RenderStyle "Add";
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			FX26 K 1 Bright ThrustThingZ(0,frandom(0.8,3.5),0,1);
			FX26 KKKLMNO 3 Bright A_FadeOut(0.05);
			Stop;
	}
}

class DBTRailPuff : DBTPuff
{
	default
	{
		Tag "Railgun Blast";
		DamageType "Railgun";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,2);
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7);
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32);
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32);
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360));
			TNT1 A 1;
			Stop;
	}
}

// Bruiser Demon Ball 1 Trail
class BruiserBallTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.70;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
			BRBA CDEFGHIJ 4 Bright;
			Stop;
	}
}

class BruiserBall : EEProjectile
{
	default
	{
		Tag "Bruiser Ball";
		Radius 16;
		Height 16;
		Speed 18;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.9;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "Scorch";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(16,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(16,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			BRBA AABB 2 BRIGHT A_SpawnItemEx("BruiserBallTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			BRBA KLMNOPQRSTUVWX 3 Bright;
			Stop;
	}
}

class BruiserBall2 : EEProjectile
{
	default
	{
		Tag "Bruiser Shot";
		Radius 8;
		Height 8;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.9;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "BaronScorch";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BRB2 AB 6 BRIGHT;
			Loop;
		Death:
			BRB2 CDEFGHI 3 Bright;
			Stop;
	}
}

class BruiserFireSpawner : EEProjectile
{
	default
	{
		Tag "Bruiser FireWave";
		Radius 8;
		Height 8;
		Speed 12;
		Damage 0;
		+RIPPER;
		+FLOORHUGGER;
		+BLOODLESSIMPACT;
		Projectile;
		MissileType "BruiserFire";
		Missileheight 0;
		DamageType "Fire";
	}
	
	States
	{
		Spawn: 
			TNT1 A 3 Bright A_SpawnProjectile("BruiserFire",0,0,0,4); // A_MissileAttack
			TNT1 AA 3;
			Loop;
		Death:
			TNT1 A 6;
			Stop;
	}
}

class BruiserFire : EEProjectile
{
	default
	{
		Tag "Bruiser FireWave";
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.9;
		DamageType "Fire";
		+NOCLIP;
		+FLOORHUGGER;
		SeeSound "weapons/rocklx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			XXBF AB 3 Bright;
			XXBF C 3 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(48,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,0,0,32, damagetype:"Fire");
			}
			XXBF DEFGHIJKLMNOPQRST 3 Bright;
			Stop;
	}
}

// Rockets (Monsters)
class RocketMonster : RocketBase
{
	default
	{
		Tag "Rocket";
		DamageFunction (finaldamagedealt);
		DamageType "Explosive";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

// Annihilator Rocket
class Rocket2 : EEProjectile
{
	default
	{
		Tag "Rocket";
		DamageType "Explosive";
		obituary "%o rode %k's rocket.";
		radius 11;
		height 8;
		speed 20;
		DamageFunction (finaldamagedealt);
		seesound "weapons/rocklf";
		deathsound "weapons/rocklx";
		PROJECTILE;
		+RANDOMIZE;
		+ROCKETTRAIL;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}

	States
	{
		Spawn:
			MISL A 1 bright;
			loop;
		Death:
			MISL B 0 bright A_SetTranslucent(0.67,1);
			MISL B 8 bright 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");

				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 bright;
			MISL D 4 bright;
			stop;
	}
}

class HomRocket1 : EEProjectile
{
	default
	{
		Tag "Homing Rocket";
		DamageType "Explosive";
		Radius 8;
		Height 11;
		Speed 30;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+SeekerMissile;
		+Rockettrail;
		SeeSound "";
		DeathSound "";
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HMIS A 0 NoDelay A_StartSound("weapons/hrlfir",CHAN_7);
			HMIS A 2 Bright A_SeekerMissile(25,35);
			HMIS A 2 Bright;
			HMIS A 2 Bright A_SeekerMissile(10,25);
			HMIS A 2 Bright;
			goto Spawn+2;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1);
			BAL3 C 8 Bright
			{
				int dmg = A_CalcDamageFormulaEx(96,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BAL3 DE 5 Bright;
			stop;
	}
}
	
class DoomImpBallNew : EEProjectile
{
	Default
	{
		Tag "Imp Fireball";
		Radius 6;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 1;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL1 AB 4 BRIGHT;
			Loop;
		Death:
			BAL1 CDE 6 BRIGHT;
			Stop;
	}
}

class CacodemonBallNew : EEProjectile replaces CacodemonBall
{
	Default
	{
		Tag "Lightning Ball";
		Radius 6;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL2 AB 4 BRIGHT;
			Loop;
		Death:
			BAL2 CDE 6 BRIGHT;
			Stop;
	}
}

class KnightBallNew : EEProjectile
{
	Default
	{
		Tag "Knight Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}

class RevenantTracerNew : EEProjectile replaces RevenantTracer
{
	Default
	{
		Tag "Tracer Missile";
		Radius 11;
		Height 8;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+SEEKERMISSILE 
		+RANDOMIZE
		+ZDOOMTRANS
		SeeSound "skeleton/attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	void A_Tracer(double tang = 16.875)
	{
		// killough 1/18/98: this is why some missiles do not have smoke
		// and some do. Also, internal demos start at random gametics, thus
		// the bug in which revenants cause internal demos to go out of sync.

		if (level.maptime & 3)	return;
	
		// spawn a puff of smoke behind the rocket
		SpawnPuff ("BulletPuff", pos, angle, angle, 3);
		Actor smoke = Spawn ("RevenantTracerSmoke", Vec3Offset(-Vel.X, -Vel.Y, 0.), ALLOW_REPLACE);
	
		if (smoke != null)
		{
			smoke.Vel.Z = 1.;
			smoke.tics -= random[Tracer](0, 3);
			if (smoke.tics < 1)
				smoke.tics = 1;
		}

		// The rest of this function was identical with Strife's version, except for the angle being used.
		A_Tracer2(tang);
	}
	
	States
	{
		Spawn:
			FATB AB 2 BRIGHT 
			{
				double s1 = 16.875;
				double s2 = 16.875;
				if (target && exex_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0025);
					if (A_CheckMonsterLevel(30,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00125);
					}
					if (A_CheckMonsterLevel(60,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.000625);
					}
				}
				A_Tracer(s1);
			}
			Loop;
		Death:
			FBXP A 8 BRIGHT;
			FBXP B 6 BRIGHT;
			FBXP C 4 BRIGHT;
			Stop;
		}
}

class FatShotNew : EEProjectile replaces FatShot
{
	Default
	{
		Tag "Flamer Shot";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 1;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MANF AB 4 BRIGHT;
			Loop;
		Death:
			MISL B 8 BRIGHT;
			MISL C 6 BRIGHT;
			MISL D 4 BRIGHT;
			Stop;
	}
}

class ArachnotronPlasmaNew : EEProjectile replaces ArachnotronPlasma
{
	Default
	{
		Tag "Plasma Ball";
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "baby/attack";
		DeathSound "baby/shotx";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			APLS AB 5 BRIGHT;
			Loop;
		Death:
			APBX ABCDE 5 BRIGHT;
			Stop;
	}
}

class BaronBallNew : EEProjectile replaces BaronBall
{
	Default
	{
		Tag "Baron Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}

class BelphegorBall : BaronBallNew
{
	default
	{
		Tag "Belphegor Plasma";
		decal "BaronScorch";
		Speed 20;
		DamageFunction (finaldamagedealt);
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 Bright;
			Loop;
		Death:
			BAL7 CDE 6 Bright;
			Stop;
	}
}

