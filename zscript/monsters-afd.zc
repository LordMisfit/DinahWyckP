// AFD MONSTERS AND THINGS 
//MEISTER KRAG
class Teacher_Krag : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		Speed 18;
		PainChance 128;
		Painchance "Suck", 64;
		Painchance "Breakfast", 0;
		Painchance "Beats", 0;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Beats", 0.25;
		DamageFactor "Chop", 2;
		DamageFactor "Breakfast", 0;
		DamageFactor "Suck", 0;
		MeleeThreshold 208;
		MeleeRange 80;
		Mass 5000;
		Scale 1.5;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+DONTHARMCLASS;
		+NORADIUSDMG;
		SeeSound "krag/sight";
		PainSound "krag/pain";
		DeathSound "krag/death";
		ActiveSound "krag/active";
		MeleeSound "mallethit";
		Obituary "%o was flunked by Meister Krag.";
		Tag "Meister Krag";
	}
	
	void A_KragAtk(int type = 0, int subtype = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		string projtype = "KragBall";
		int dmg = A_CalcDamageFormula2(random(35,50),0.005,random(17,34),0.3334,random(8,26),0.1667,0.005);
		if (subtype == 1) dmg = A_CalcDamageFormula2(random(45,65),0.005,random(22,44),0.3334,random(10,34),0.1667,frandom(0.005,0.005625));
		if (type == 0) A_CustomComboAttack(projtype, 32, (dmg), "malletswing");
		else
		{
			if (CheckMeleeRange())
			{
				A_CustomMeleeAttack(dmg, "mallethit", "malletswing","bonk", 1);
			}
			else
			{
				A_SpawnProjectile(projtype,40,(0+xyoff),frandom(-3.0,3.0),0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			MKRG J 10 A_Look();
			Loop;
		See:
			MKRG A 0 
			{
				actor player = players[0].mo;
				if (player.CountInv("IsAppetite") && level.levelnum == 28) ACS_Execute(902,0,3,0,0);
				A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.667),"SeeFast");
			}
			MKRG AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		SeeFast:
			MKRG AABBCCDD 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			MKRG E 0 A_DynamicMusic();
			MKRG E 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.667), "MeleeFast");
			MKRG E 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG EF 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_FaceTarget();
			}
			MKRG G 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_KragAtk(0,0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(0,0,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(0,0,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(0,0,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(0,0,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(0,0,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(0,0,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG HIJ 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			Goto See;
		MeleeFast:
			MKRG E 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG EF 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG G 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_KragAtk(0,1,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(0,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(0,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(0,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(0,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(0,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(0,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG HIJ 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			Goto See;
		Missile:
			MKRG K 0 A_DynamicMusic();
			MKRG K 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.53334),"MissileFast");
			MKRG K 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG KL 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_FaceTarget();
			}
			MKRG M 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_KragAtk(1,0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,0,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,0,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,0,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,0,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,0,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,0,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG N 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			Goto See;
		MissileFast:
			MKRG K 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG K 0 A_DynamicMusic();
			MKRG KL 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG M 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_KragAtk(1,1,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG N 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			MKRG Q 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG QR 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG S 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_KragAtk(1,1,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG T 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			Goto See;
		Pain:
			MKRG F 6 A_EEPain();
			MKRG F 3; //A_DynamicMusic();
			Goto See;
		Death:
			MKRG E 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsAppetite"))
				{
					if (MiscItem && !MiscItem.AFD_Krag)
					{
						MiscItem.AFD_Krag += 1;
						A_PrintPowerupDDTNoRPG(0);
					}
				}
			}
			MKRG E 5 
			{
				A_StartSound("krag/death2",9,CHANF_DEFAULT,1.5,ATTN_NORM,0.8);
				A_StartSound("krag/death2",8,CHANF_DEFAULT,1.5,ATTN_NORM,0.9);
				A_StartSound("krag/death2",CHAN_7,CHANF_DEFAULT,1.25,ATTN_NORM,0.8);
				A_StartSound("krag/death2",CHAN_6,CHANF_DEFAULT,1.25,ATTN_NORM,0.9);
				A_Scream();
			}
			MKRG OP 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Teacher_KragClone : Teacher_Krag
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		ProjectilePassHeight 99;
		Speed 18;
		PainChance 32; // 128
		Painchance "Suck", 16;
		Painchance "Breakfast", 0;
		Painchance "Beats", 0;
		DamageFactor "Bonk", 0.5;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Beats", 0.25;
		DamageFactor "Chop", 2;
		DamageFactor "Breakfast", 0;
		DamageFactor "Suck", 0.5;
		MeleeThreshold 208;
		MeleeRange 80;
		Mass 5000;
		Scale 1.5;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+NORADIUSDMG
		SeeSound "krag/sight";
		PainSound "krag/pain";
		DeathSound "krag/death";
		ActiveSound "krag/active";
		MeleeSound "mallethit";
		Obituary "%o got flunked by a clone of Meister Krag.";
		Tag "Meister Krag!?";
		//DropItem "JackAmmo", 256;
		//DropItem "JackAmmo", 224;
		//DropItem "JackAmmo", 192;
		//DropItem "JackAmmo", 160;
		//DropItem "JackAmmo", 128;
		//DropItem "JackAmmoBig", 128;
		//DropItem "JackAmmoBig", 112;
		//DropItem "JackAmmoBig", 96;
		//DropItem "JackAmmoBig", 80;
		//DropItem "JackAmmoBig", 64;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame())
		{ 
			A_DropItem("JackAmmo",1,256);
			A_DropItem("JackAmmo",1,160);
			A_DropItem("JackAmmo",1,64);
		}
		else
		{
			A_DropItem("AppleJack",1,256,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,192,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,128,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,64,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,256,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,224,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,192,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,160,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,128,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,128,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,112,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,96,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,80,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,64,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	States
	{
		Spawn:
			MKRG J 10 NoDelay
			{
				A_Look();
			}
			Loop;
		See:
			MKRG A 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.667),"SeeFast");
			MKRG AABBCCDD 3 
			{
				if (random(1,8) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		SeeFast:
			MKRG AABBCCDD 2 
			{
				if (random(1,4) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MKRG E 0 A_DynamicMusic();
			MKRG E 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.667),"MeleeFast");
			MKRG E 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG EF 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_FaceTarget();
			}
			MKRG G 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_KragAtk(0,0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(0,0,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(0,0,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(0,0,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(0,0,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(0,0,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(0,0,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG HIJ 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			Goto See;
		MeleeFast:
			MKRG E 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG EF 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG G 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(0,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(0,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(0,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(0,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(0,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(0,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG HIJ 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			Goto See;
		Missile:
			MKRG K 0 A_DynamicMusic();
			MKRG K 0 A_JumpIfHealthLower(((SpawnHealth() + Stamina) * 0.53334),"MissileFast");
			MKRG K 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG KL 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_FaceTarget();
			}
			MKRG M 6 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
				A_KragAtk(1,0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,0,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,0,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,0,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,0,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,0,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,0,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG N 6
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30) A_SetTics(5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(4);
			}
			Goto See;
		MissileFast:
			MKRG K 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG K 0 A_DynamicMusic();
			MKRG KL 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG M 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
				A_KragAtk(1,1,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG N 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			MKRG Q 0 A_StartSound("krag/throw",CHAN_VOICE);
			MKRG QR 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 120) A_SetTics(1);
				A_FaceTarget();
			}
			MKRG S 4 
			{
				A_KragAtk(1,1,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_KragAtk(1,1,-15.0);
						angle += 15;

						angle += 15;
						A_KragAtk(1,1,-15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_KragAtk(1,1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_KragAtk(1,1,-22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_KragAtk(1,1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_KragAtk(1,1,-7.5);
						angle -= 7.5;
					}
				}
			}
			MKRG T 4
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 45) A_SetTics(3);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90) A_SetTics(2);
			}
			Goto See;
		Pain:
			MKRG F 6 A_EEPain();
			MKRG F 3; //A_DynamicMusic();
			Goto See;
		Death:
			MKRG E 5
			{
				let globalvars = DDGlobalVariables.Get();
				if (globalvars) globalvars.KilledKragClone = true;
			}
			MKRG E 5 
			{
				A_StartSound("krag/death2",9,CHANF_DEFAULT,1.5,ATTN_NORM,0.8);
				A_StartSound("krag/death2",8,CHANF_DEFAULT,1.5,ATTN_NORM,0.9);
				A_StartSound("krag/death2",CHAN_7,CHANF_DEFAULT,1.25,ATTN_NORM,0.8);
				A_StartSound("krag/death2",CHAN_6,CHANF_DEFAULT,1.25,ATTN_NORM,0.9);
				A_Scream();
			}
			MKRG OP 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class KragBall : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 15;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		Projectile;
		Gravity 0.125;
		-NOGRAVITY
		DontHurtShooter;
		BounceType "Hexen";
		Bouncefactor 1.4;
		Bouncecount 8;
		BounceSound "axe/hit";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			KRBL ABCD 4;
			Loop;
		Death:
			KRBL A 4 Bright A_Explode(10,96);
			KRBL E 10 Bright;
			Stop;
	}
}

class QuisSpawnCookie : Inventory
{
	default
	{
		inventory.amount 1;
		inventory.maxamount 1;
	}
}
class QuisSpawnCookie2 : QuisSpawnCookie
{
}

//MEISTER QUISLING
class Teacher_Quis : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1200;
		Radius 20;
		Height 64;
		Speed 18;
		PainChance 200;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		Painchance "Suck", 50;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0;
		Alpha 0.75;
		renderstyle "Add";
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+NOTARGET
		SeeSound "quisling/sight";
		PainSound "quisling/pain";
		DeathSound "quisling/death";
		Obituary "%o was flunked by Meister Quisling.";
		Tag "Meister Quisling";
		Species "Quisling";
	}
	
	States
	{
		Spawn:
			MQIS E 10 A_Look();
			Loop;
		See:
			TNT1 A 0 
			{
				actor player = players[0].mo;
				if (player.CountInv("IsAppetite") && level.levelnum == 28) ACS_Execute(902,0,2,0,0);
			}
			TNT1 A 0 A_JumpIfInventory("QuisSpawnCookie2", 1, "See3");
			TNT1 A 0 A_GiveInventory("QuisSpawnCookie2");
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS E 0 { bINVULNERABLE = false; }
			goto See3;
		See3:
			MQIS AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			loop;
		SpawnClones:
			MQIS A 0 A_KillChildren();
			MQIS A 0 { bINVULNERABLE = true; }
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0,0);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS A 0 A_SpawnItemEx("QuisFake",0,0,0, 0,0,0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS A 0 A_SpawnItemEx ("QuisFake",0,0,0, 0,0,0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS A 0 { bINVULNERABLE = false; }
			goto See3;
		Missile:
			MQIS E 0 A_DynamicMusic();
			MQIS E 0 A_Jump(128,"MissileZap");
			MQIS E 0 A_StartSound("quisling/sight",CHAN_VOICE);
			MQIS E 8 A_FaceTarget();
			MQIS FGFGFG 2 bright;
			MQIS H 0 A_StartSound("teacher/chargeup",CHAN_BODY);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0,45);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0-45);
			Goto See3;
		MissileZap:
			MQIS H 0 A_StartSound("Handmother/Zap");
			MQIS EE 3 bright;
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40);
			MQIS H 3 bright;
			MQIS H 0 bright A_SpawnProjectile("BadZapshot",40,-48);
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40,48);
			MQIS H 3 bright;
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40);
			MQIS HH 3 bright;
			Goto See3;
		Pain:
			MQIS I 4 A_EEPain();
			MQIS J 6 A_DynamicMusic();
			MQIS J 0 A_KillChildren();
			MQIS J 0 { bINVULNERABLE = true; }
			MQIS J 3 A_SetTranslucent(0.8,0);
			MQIS J 3 A_SetTranslucent(0.6,0);
			MQIS J 3 A_SetTranslucent(0.4,0);
			MQIS J 3 A_SetTranslucent(0.2,0);
			MQIS J 3 A_SetTranslucent(0,0);
			Goto SpawnClones +25;
		Death:
			MQIS I 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsAppetite"))
				{
					if (MiscItem && !MiscItem.AFD_Quisling)
					{
						MiscItem.AFD_Quisling += 1;
						A_PrintPowerupDDTNoRPG(0);
					}
				}
			}
			MQIS I 5 A_Scream();
			MQIS J 5 A_KillChildren();
			MQIS KL 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Teacher_QuisClone : Teacher_Quis
{
	default
	{
		//$Category EE Teachers
		Health 1200;
		Radius 20;
		Height 64;
		ProjectilePassHeight 64;
		Speed 18;
		PainChance 50; // 200
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		Painchance "Suck", 13;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0.25;
		Alpha 0.75;
		renderstyle "Add";
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+NOTARGET
		SeeSound "quisling/sight";
		PainSound "quisling/pain";
		DeathSound "quisling/death";
		Obituary "%o got flunked by a clone of Meister Quisling.";
		Tag "Meister Quisling!?";
		Species "Quisling";
		//DropItem "PikeAmmo", 192;
		//DropItem "PikeAmmo", 24;
		//DropItem "PikeAmmoBig", 24;
		//DropItem "PikeAmmoBig", 3;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame()) 
		{ 
		}
		else
		{
			A_DropItem("RatPotion",1,4,ADI_FULLAMMO);
			A_DropItem("RatPotion",1,1,ADI_FULLAMMO);
			A_DropItem("PikeAmmo",1,192,ADI_FULLAMMO);
			A_DropItem("PikeAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("PikeAmmoBig",1,24,ADI_FULLAMMO);
			A_DropItem("PikeAmmoBig",1,3,ADI_FULLAMMO);
				
			A_DropItem("WizardPike",1,24);
		}
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	States
	{
		Spawn:
			MQIS E 10 NoDelay
			{
				A_Look();
			}
			Loop;
		See:
			TNT1 A 0
			{
			}
			TNT1 A 0 A_JumpIfInventory("QuisSpawnCookie2", 1, "See3");
			TNT1 A 0 A_GiveInventory("QuisSpawnCookie2");
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS E 0 { bINVULNERABLE = false; }
			goto See3;
		See3:
			MQIS AABBCCDD 3 
			{
				if (random(1,8) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			loop;
		SpawnClones:
			MQIS A 0 A_KillChildren();
			MQIS A 0 { bINVULNERABLE = true; }
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0,0);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS A 0 A_SpawnItemEx ("QuisFakeClone",0,0,0, 0,0,0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS A 0 A_SpawnItemEx ("QuisFakeClone",0,0,0, 0,0,0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION);
			MQIS AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS A 0 { bINVULNERABLE = false; }
			goto See3;
		Missile:
			MQIS E 0 A_DynamicMusic();
			MQIS E 0 A_Jump(128,"MissileZap");
			MQIS E 0 A_StartSound("quisling/sight",CHAN_VOICE);
			MQIS E 8 A_FaceTarget();
			MQIS FGFGFG 2 bright;
			MQIS H 0 A_StartSound("teacher/chargeup",CHAN_BODY);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0,45);
			MQIS H 6 bright A_SpawnProjectile("CheeseFX",40,0-45);
			Goto See3;
		MissileZap:
			MQIS H 0 A_StartSound("Handmother/Zap");
			MQIS EE 3 bright;
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40);
			MQIS H 3 bright;
			MQIS H 0 bright A_SpawnProjectile("BadZapshot",40,-48);
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40,48);
			MQIS H 3 bright;
			MQIS H 3 bright A_SpawnProjectile("BadZapshot",40);
			MQIS HH 3 bright;
			Goto See3;
		Pain:
			MQIS I 4 A_EEPain();
			MQIS J 6 A_DynamicMusic();
			MQIS J 0 A_KillChildren();
			MQIS J 0 { bINVULNERABLE = true; }
			MQIS J 3 A_SetTranslucent(0.8,0);
			MQIS J 3 A_SetTranslucent(0.6,0);
			MQIS J 3 A_SetTranslucent(0.4,0);
			MQIS J 3 A_SetTranslucent(0.2,0);
			MQIS J 3 A_SetTranslucent(0,0);
			Goto SpawnClones +25;
		Death:
			MQIS I 0
			{
				let globalvars = DDGlobalVariables.Get();
				if (globalvars) globalvars.KilledQuislingClone = true;
			}
			MQIS I 5 A_Scream();
			MQIS J 5 A_KillChildren();
			MQIS KL 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class QuisFake : DDOrigBoss
{
	default
	{
		Health 100;
		Radius 20;
		Height 64;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Fire", 2;
		DamageFactor "CherryBomb", 2;
		DamageFactor "Spinner", 2;
		DamageFactor "Popper", 2;
		DamageFactor "BRocket", 2;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "quisling/sight";
		PainSound "quisling/pain";
		Obituary "%o was flunked by Meister Quisling.";
		Tag "Meister Quisling";
		Species "Quisling";
		+LOOKALLAROUND;
	}
	States
	{
		Spawn:
			TNT1 A 0 { bINVULNERABLE = true; }
			TNT1 A 1 A_SetTranslucent(0,0);
			MQIS A 25;
			MQIS A 0 { bSOLID = true; }
		IseeU:
			MQIS A 3 A_Look();
		See:
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS E 3 { bINVULNERABLE = false; }
			goto See2;
		See2:
			MQIS AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			MQIS E 0 A_DynamicMusic();
			MQIS E 0 A_StartSound("quisling/sight",CHAN_VOICE);
			MQIS E 8 A_FaceTarget();
			MQIS H 0 bright A_StartSound("zappo",CHAN_BODY);
			MQIS H 8 bright A_SpawnProjectile("BadZapShot",48,0);
			MQIS H 6;
			Goto See2;
		Pain:
			MQIS I 4 A_EEPain();
			Goto See2;
		Death:
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class QuisFakeClone : QuisFake
{
	default
	{
		Health 100;
		Radius 20;
		Height 64;
		ProjectilePassHeight 64;
		Speed 18;
		PainChance 100;
		Painchance "Suck", 50;
		DamageFactor "Fire", 2;
		DamageFactor "CherryBomb", 2;
		DamageFactor "Spinner", 2;
		DamageFactor "Popper", 2;
		DamageFactor "BRocket", 2;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0.5;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "quisling/sight";
		PainSound "quisling/pain";
		Obituary "%o got flunked by a clone of Meister Quisling.";
		Tag "Meister Quisling!?";
		Species "Quisling";
		+LOOKALLAROUND;
		//DropItem "PikeAmmo", 24;
		//DropItem "PikeAmmoBig", 3;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame()) 
		{ 
		}
		else
		{
			A_DropItem("PikeAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("PikeAmmoBig",1,3,ADI_FULLAMMO);
			
			A_DropItem("WizardPike",1,24);
		}
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	States
	{
		Spawn:
			MLTZ J 0 NoDelay;
			TNT1 A 0 { bINVULNERABLE = true; }
			TNT1 A 1 A_SetTranslucent(0,0);
			MQIS A 25;
			MQIS A 0 { bSOLID = true; }
		IseeU:
			MQIS A 3 A_Look();
		See:
			MQIS E 3 A_SetTranslucent(0.2,0);
			MQIS E 3 A_SetTranslucent(0.4,0);
			MQIS E 3 A_SetTranslucent(0.6,0);
			MQIS E 3 A_SetTranslucent(0.8,0);
			MQIS E 3 A_SetTranslucent(1,0);
			MQIS E 3 { bINVULNERABLE = false; }
			goto See2;
		See2:
			MQIS AABBCCDD 3 
			{
				if (random(1,12) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			MQIS E 0 A_StartSound("quisling/sight",CHAN_VOICE);
			MQIS E 8 A_FaceTarget();
			MQIS H 0 bright A_StartSound("zappo",CHAN_BODY);
			MQIS H 8 bright A_SpawnProjectile("BadZapshot",48,0);
			MQIS H 6;
			Goto See2;
		Pain:
			MQIS I 4 A_EEPain();
			Goto See2;
		Death:
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

//MEISTER LAURITZ
class Teacher_Lauritz : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		Painchance "Beats", 0;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Cricket", 2;
		DamageFactor "Suck", 0;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "lauritz/sight";
		PainSound "lauritz/pain";
		DeathSound "lauritz/death";
		ActiveSound "lauritz/active";
		Obituary "%o was flunked by Meister Lauritz.";
		Tag "Meister Lauritz";
	}
	
	States
	{
		Spawn:
			MLTZ E 10 A_Look();
			Loop;
		See:
			TNT1 A 0 
			{
				actor player = players[0].mo;
				if (player.CountInv("IsAppetite") && level.levelnum == 28) ACS_Execute(902,0,1,0,0);
			}
			MLTZ AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			MLTZ E 0 A_DynamicMusic();
			MLTZ EF 4 A_FaceTarget();
			MLTZ G 6 A_FaceTarget();
			MLTZ H 6;
			MLTZ I 0 A_StartSound("lauritz/tuba",CHAN_BODY);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48),0,-35);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48),0,35);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48));
			MLTZ J 6;
			Goto See;
		Escape:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 A_SpawnItemEx("Vitriola", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Pain:
			MLTZ J 6 A_EEPain();
			MLTZ J 3 A_Jump(208,"Escape");
			Goto See;
		Pain.Chop:
			MLTZ J 6 A_EEPain();
			MLTZ J 3 A_Jump(52,"Escape");
			MLTZ JJ 3;
			Goto See;
		Death.Chop:
			MLTZ J 0
			{
				if (random(1,256) <= 256) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 256) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 256) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 256) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 240) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 240) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 240) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 240) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 224) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 224) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 224) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 224) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 208) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 208) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 208) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 208) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 192) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 192) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 176) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 176) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 160) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 160) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 144) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 144) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 128) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 112) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 96) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 80) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 64) A_DropItem("MusicAmmo",1,256);
				if (random(1,256) <= 32) A_DropItem("MusicAmmo",1,256);
			}
		Death:
			MLTZ J 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsAppetite"))
				{
					if (MiscItem && !MiscItem.AFD_Lauritz)
					{
						MiscItem.AFD_Lauritz += 1;
						A_PrintPowerupDDTNoRPG(0);
					}
				}
			}
			MLTZ J 5 A_Scream();
			MLTZ KL 5 bright A_KillChildren();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Teacher_LauritzClone : Teacher_Lauritz
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		ProjectilePassHeight 68;
		Speed 18;
		PainChance 50;
		Painchance "Suck", 13;
		Painchance "Beats", 0;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Cricket", 2;
		DamageFactor "Suck", 0.25;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "lauritz/sight";
		PainSound "lauritz/pain";
		DeathSound "lauritz/death";
		ActiveSound "lauritz/active";
		Obituary "%o got flunked by a clone of Meister Lauritz.";
		Tag "Meister Lauritz!?";
		//DropItem "MusicAmmo", 128;
		//DropItem "MusicAmmo", 32;
		//DropItem "MusicAmmo", 8;
		//DropItem "MusicAmmoBig", 64;
		//DropItem "MusicAmmoBig", 16;
		//DropItem "MusicAmmoBig", 2;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame()) 
		{ 
		}
		else
		{
			A_DropItem("MusicAmmo",1,128,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,32,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,8,ADI_FULLAMMO);
			A_DropItem("MusicAmmoBig",1,32,ADI_FULLAMMO);
			A_DropItem("MusicAmmoBig",1,8,ADI_FULLAMMO);
			A_DropItem("MusicAmmoBig",1,2,ADI_FULLAMMO);
			
			A_DropItem("Grimophone",1,8,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	States
	{
		Spawn:
			MLTZ E 10 NoDelay A_Look();
			Loop;
		See:
			MLTZ AABBCCDD 3 
			{
				if (random(1,8) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			MLTZ E 0 A_DynamicMusic();
			MLTZ EF 4 A_FaceTarget();
			MLTZ G 6 A_FaceTarget();
			MLTZ H 6;
			MLTZ I 0 A_StartSound("lauritz/tuba",CHAN_BODY);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48),0,-35);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48),0,35);
			MLTZ I 3 A_SpawnProjectile("MusicBall",random(40,48));
			MLTZ J 6;
			Goto See;
		Escape:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 
			{
				string spawntype = "Vitriola";
				if (random(1,4) <= 1) spawntype = "VitriolaFuzzy";
				A_SpawnItemEx(spawntype, 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Pain:
			MLTZ J 6 A_EEPain();
			MLTZ J 3 A_Jump(208,"Escape");
			Goto See;
		Pain.Chop:
			MLTZ J 6 A_EEPain();
			MLTZ J 3 A_Jump(52,"Escape");
			MLTZ JJ 3;
			Goto See;
		Death.Chop:
			MLTZ J 0
			{
				if (random(1,256) <= 256)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 256)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 256)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 256)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 240)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 240)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 240)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 240)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 224)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 224)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 224)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 224)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 208)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 208)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 208)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 208)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 192)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 192)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 176)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 176)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 160)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 160)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 144)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 144)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 128)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 112)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 96)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 80)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 64)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
				if (random(1,256) <= 32)
				{
					if (random(1,32) <= 1) A_DropItem("MusicAmmoBig",1,256);
					else A_DropItem("MusicAmmo",1,256);
				}
			}
		Death:
			MLTZ J 0
			{
				let globalvars = DDGlobalVariables.Get();
				if (globalvars) globalvars.KilledLauritzClone = true;
			}
			MLTZ J 5 A_Scream();
			MLTZ KL 5 bright A_KillChildren();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

//JUFFRAU JORGENSEN
class Teacher_Jorg : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Beats", 0;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0;
		MeleeRange 80;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+MISSILEMORE
		SeeSound "jorg/sight";
		PainSound "jorg/pain";
		DeathSound "jorg/death";
		ActiveSound "jorg/active";
		Obituary "%o was flunked by Juffrau Jorgensen.";
		Tag "Juffrau Jorgensen";
	}
	
	States
	{
		Spawn:
			JORG E 10 A_Look();
			Loop;
		See:
			JORG A 0 A_DynamicMusic();
			JORG AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			JORG E 0 A_DynamicMusic();
			JORG EF 4 A_FaceTarget;
			JORG G 4 A_StartSound("jorg/attack",CHAN_BODY);
			JORG H 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
				int dmg = A_CalcDamageFormula2(random(35,50),0.005,random(17,34),0.3334,random(8,26),0.1667,0.005);
				A_CustomMeleeAttack (dmg, "", "", "chop", 1);
			}
			JORG IJ 4;
			Goto See;
		Missile:
			JORG E 0 A_DynamicMusic();
			JORG EN 4 A_FaceTarget();
			JORG N 0 A_Jump(96,"DeathSong");
			JORG O 6 A_SpawnProjectile("JorgTeeth",40);
			JORG PQ 6;
			Goto See;
		DeathSong:
			JORG OOOOOOOOOOOO 1 A_SpawnProjectile("JorgSong",40);
			JORG PQ 6;
			Goto See;
		Pain:
			JORG K 6 A_EEPain();
			JORG N 3 A_DynamicMusic();
			JORG Q 3
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 9;
					if (skill == 1) basechance = 10;
					if (skill == 2) basechance = 11;
					if (skill == 3) basechance = 12;
					if (skill >= 4) basechance = 13;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 7;
					if (skill == 1) basechance = 8;
					if (skill == 2) basechance = 9;
					if (skill == 3) basechance = 10;
					if (skill >= 4) basechance = 11;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingBG:
			JORG K 2 A_EEPain();
			JORG N 3;
			JORG QQQQQQ 3
			{
				A_SetTics(random(2,5) * 3);
			}
			JORG Q 0
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 9;
					if (skill == 1) basechance = 10;
					if (skill == 2) basechance = 11;
					if (skill == 3) basechance = 12;
					if (skill >= 4) basechance = 13;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 7;
					if (skill == 1) basechance = 8;
					if (skill == 2) basechance = 9;
					if (skill == 3) basechance = 10;
					if (skill >= 4) basechance = 11;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingSD:
			JORG K 2 A_EEPain();
			JORG N 3;
			JORG QQQQQQ 3
			{
				A_SetTics(random(3,4) * 8);
			}
			JORG Q 0
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 6;
					if (skill == 1) basechance = 7;
					if (skill == 2) basechance = 8;
					if (skill == 3) basechance = 9;
					if (skill >= 4) basechance = 10;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 4;
					if (skill == 1) basechance = 5;
					if (skill == 2) basechance = 6;
					if (skill == 3) basechance = 7;
					if (skill >= 4) basechance = 8;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Escape:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_UnsetSolid();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Escape2:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Escape3:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_Facetarget();
			TNT1 A 0 A_SpawnProjectile("JorgTeeth",40);
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto Missile;
		Death:
			JORG K 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsAppetite"))
				{
					if (MiscItem) 
					{
						if (!MiscItem.AFD_Jorgensen1)
						{
							MiscItem.AFD_Jorgensen1 += 1;
							A_PrintPowerupDDTNoRPG(0);
						}
						else
						{
							if (!MiscItem.AFD_Jorgensen2)
							{
								MiscItem.AFD_Jorgensen2 += 1;
								A_PrintPowerupDDTNoRPG(0);
							}
						}
					}
				}
			}
			JORG K 5 A_Scream();
			JORG LM 5 bright A_KillChildren();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Teacher_JorgClone : Teacher_Jorg
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 32;
		Height 80;
		ProjectilePassHeight 88;
		Speed 18;
		PainChance 50;
		DamageFactor "DashingBG", 3;
		Painchance "DashingBG", 150;
		DamageFactor "DashingSD", 3;
		Painchance "DashingSD", 150;
		Painchance "Suck", 200;
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Beats", 0;
		DamageFactor "Breakfast", 0.5;
		DamageFactor "Suck", 0.25;
		MeleeRange 80;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		+MISSILEMORE
		SeeSound "jorg/sight";
		PainSound "jorg/pain";
		DeathSound "jorg/death";
		ActiveSound "jorg/active";
		Obituary "%o got flunked by a clone of Juffrau Jorgensen.";
		Tag "Juffrau Jorgensen!?";
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	states
	{
		Spawn:
			JORG E 10 NoDelay A_Look();
			Loop;
		See:
			JORG A 0 A_DynamicMusic();
			JORG AABBCCDD 3
			{
				int basefastchance = 8;
				int basefastchance2 = 4;
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) 
				{
					A_SetTics(2);
					basefastchance = 5;
					basefastchance2 = 3;
				}
				if (random(1,basefastchance) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,basefastchance2) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																					 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			JORG E 0 A_DynamicMusic();
			JORG EF 4 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(3);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(2);
				A_FaceTarget();
			}
			JORG G 4 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(3);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(2);
				A_StartSound("jorg/attack",CHAN_BODY);
			}
			JORG H 4 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
				int dmg = A_CalcDamageFormula2(random(35,50),0.005,random(17,34),0.3334,random(8,26),0.1667,0.005);

				if (health <= ((SpawnHealth() + Stamina) * 0.334)) 
				{
					A_SetTics(3);
					dmg = A_CalcDamageFormula2(random(45,65),0.005,random(22,44),0.3334,random(10,34),0.1667,frandom(0.005,0.005625));
				}
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) 
				{
					A_SetTics(2);
					dmg = A_CalcDamageFormula2(random(60,85),0.005,random(29,58),0.3334,random(13,45),0.1667,frandom(0.005,0.005625));
				}
				A_CustomMeleeAttack(dmg, "", "", "Chop", 1);
			}
			JORG IJ 4
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(3);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(2);
			}
			Goto See;
		Missile:
			JORG E 0 A_DynamicMusic();
			JORG EN 4 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(3);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(2);
				A_FaceTarget();
			}
			JORG N 0 A_Jump(96,"DeathSong");
			JORG O 6 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(4);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(3);
				A_SpawnProjectile("JorgTeeth",40);
			}
			JORG PQ 6
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(4);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(3);
			}
			Goto See;
		DeathSong:
			JORG OOOOOOOOOOOO 1 
			{
				double angerror = frandom(-3.5,3.5);
				A_SpawnProjectile("JorgSong",40);
				if (health <= ((SpawnHealth() + Stamina) * 0.25))
				{
					A_SetAngle(angle+angerror);
					if (random(1,3) <= 2) A_SpawnProjectile("JorgSong",40);
					A_SetAngle(angle-(angerror*2));
					if (random(1,3) <= 2) A_SpawnProjectile("JorgSong",40);
					A_SetAngle(angle+angerror);
				}
			}
			JORG PQ 6
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.334)) A_SetTics(4);
				if (health <= ((SpawnHealth() + Stamina) * 0.05)) A_SetTics(3);
			}
			Goto See;
		Pain:
			JORG K 6 A_EEPain();
			JORG N 3 A_DynamicMusic();
			JORG Q 3; 
			JORG Q 0
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.2))
				{
					if (skill <= 0) basechance = 8;
					if (skill == 1) basechance = 9;
					if (skill == 2) basechance = 10;
					if (skill == 3) basechance = 11;
					if (skill >= 4) basechance = 12;
					if (random(1,16) <= basechance) return resolvestate("Escape4");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 7;
					if (skill == 1) basechance = 8;
					if (skill == 2) basechance = 9;
					if (skill == 3) basechance = 10;
					if (skill >= 4) basechance = 11;
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 4;
					if (skill == 1) basechance = 5;
					if (skill == 2) basechance = 6;
					if (skill == 3) basechance = 7;
					if (skill >= 4) basechance = 8;
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.Suck:
			JORG K 3 A_EEPain();
			JORG N 3 
			{
				A_SetTics(random(1,2));
				A_DynamicMusic();
			}
			JORG Q 3
			{
				A_SetTics(random(1,2));
			}
			JORG Q 0
			{
				int basechance;
				if (random(1,8) <= 1)
				{
					if (health <= ((SpawnHealth() + Stamina) * 0.2))
					{
						if (skill <= 0) basechance = 3;
						if (skill == 1) basechance = 3;
						if (skill == 2) basechance = 4;
						if (skill == 3) basechance = 4;
						if (skill >= 4) basechance = 5;
						if (random(1,16) <= basechance) return resolvestate("Escape4");
					}
					else
					if (health <= ((SpawnHealth() + Stamina) * 0.4))
					{
						if (skill <= 0) basechance = 3;
						if (skill == 1) basechance = 3;
						if (skill == 2) basechance = 3;
						if (skill == 3) basechance = 4;
						if (skill >= 4) basechance = 4;
						if (random(1,16) <= basechance) return resolvestate("Escape3");
					}
					else
					if (health <= ((SpawnHealth() + Stamina) * 0.6))
					{
						if (skill <= 0) basechance = 2;
						if (skill == 1) basechance = 3;
						if (skill == 2) basechance = 3;
						if (skill == 3) basechance = 3;
						if (skill >= 4) basechance = 4;
						if (random(1,16) <= basechance) return resolvestate("Escape2");
					}
					else
					if (health <= ((SpawnHealth() + Stamina) * 0.8))
					{
						if (skill <= 0) basechance = 2;
						if (skill == 1) basechance = 2;
						if (skill == 2) basechance = 2;
						if (skill == 3) basechance = 2;
						if (skill >= 4) basechance = 3;
						if (random(1,16) <= basechance) return resolvestate("Escape");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingBG:
			JORG K 2 A_EEPain();
			JORG N 3;
			JORG QQQQQQ 3
			{
				A_SetTics(random(2,5) * 3);
			}
			JORG Q 0
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.2))
				{
					if (skill <= 0) basechance = 11;
					if (skill == 1) basechance = 12;
					if (skill == 2) basechance = 13;
					if (skill == 3) basechance = 14;
					if (skill >= 4) basechance = 15;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape4");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 9;
					if (skill == 1) basechance = 10;
					if (skill == 2) basechance = 11;
					if (skill == 3) basechance = 12;
					if (skill >= 4) basechance = 13;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 7;
					if (skill == 1) basechance = 8;
					if (skill == 2) basechance = 9;
					if (skill == 3) basechance = 10;
					if (skill >= 4) basechance = 11;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingSD:
			JORG K 2 A_EEPain();
			JORG N 3;
			JORG QQQQQQ 3
			{
				A_SetTics(random(3,4) * 6);
			}
			JORG Q 0
			{
				int basechance;
				if (health <= ((SpawnHealth() + Stamina) * 0.2))
				{
					if (skill <= 0) basechance = 11;
					if (skill == 1) basechance = 12;
					if (skill == 2) basechance = 13;
					if (skill == 3) basechance = 14;
					if (skill >= 4) basechance = 15;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape4");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.4))
				{
					if (skill <= 0) basechance = 9;
					if (skill == 1) basechance = 10;
					if (skill == 2) basechance = 11;
					if (skill == 3) basechance = 12;
					if (skill >= 4) basechance = 13;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape3");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.6))
				{
					if (skill <= 0) basechance = 7;
					if (skill == 1) basechance = 8;
					if (skill == 2) basechance = 9;
					if (skill == 3) basechance = 10;
					if (skill >= 4) basechance = 11;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape2");
				}
				else
				if (health <= ((SpawnHealth() + Stamina) * 0.8))
				{
					if (skill <= 0) basechance = 5;
					if (skill == 1) basechance = 6;
					if (skill == 2) basechance = 7;
					if (skill == 3) basechance = 8;
					if (skill >= 4) basechance = 9;
					basechance = int(basechance * 0.25);
					if (random(1,16) <= basechance) return resolvestate("Escape");
				}
				return resolvestate(null);
			}
			Goto See;
		Escape:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_UnsetSolid();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Escape2:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto See;
		Escape3:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_Facetarget();
			TNT1 A 0 A_SpawnProjectile("JorgTeeth",40);
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto Missile;
		Escape4:
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 0 A_Wander();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 A 0 A_UnsetSolid();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_Facetarget();
			TNT1 A 0 A_SpawnProjectile("JorgTeeth",40);
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_Facetarget();
			TNT1 A 0 A_SpawnProjectile("JorgTeeth",40);
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 A_Facetarget();
			TNT1 A 0 A_SpawnProjectile("JorgTeeth",40);
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 0 
			{
				if (random(1,8) <= 1)  A_SpawnItemEx("KilletanteSoloist", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
				else A_SpawnItemEx("Killetante", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION,0,995);
			}
			TNT1 AAAAAAAA 1 A_Wander();
			TNT1 A 4 A_SetSolid();
			TNT1 A 0 A_SpawnItemEx("TeleportFogDD");
			Goto Missile;
		Death:
			TNT1 A 0
			{
				let globalvars = DDGlobalVariables.Get();
				globalvars.KilledJorgensenClone = true;
			}
			JORG K 5 A_Scream();
			JORG LM 5 bright A_KillChildren();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class JorgTeeth : EEProjectile
{
	default
	{
		Radius 10;
		Height 12;
		Speed 10;
		Health 5;
		DamageFunction (finaldamagedealt);
		+SEEKERMISSILE
		+SHOOTABLE
		+NOBLOOD
		+NOEXTREMEDEATH
		Projectile;
		renderstyle "Normal";
		SeeSound "birdy/sight";
		DeathSound "jorg/bite";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			JOBL ABAB 2 A_SeekerMissile(10,10);
			Loop;
		Death:
			JOBL ABBB 4;
			Stop;
	}
}

class JorgSong : EEProjectile
{
	default
	{
		Radius 2;
		Height 4;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 0.50;
		Projectile;
		+FLOATBOB
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(1,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			GBAL A 0 Bright A_StartSound("jorg/spit");
			GBAL A 1 Bright A_CStaffMissileSlither;
			GBAL A 0 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 0, 128);
			GBAL A 1 Bright A_CStaffMissileSlither;
			GBAL A 0 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 0, 128);
			GBAL A 1 Bright A_CStaffMissileSlither;
			GBAL A 0 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 0, 128);
			GBAL A 1 Bright A_CStaffMissileSlither;
			GBAL A 0 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 0, 128);
			GBAL A 0 Bright;
			loop;
		Death:
			TNT1 A 1 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			stop;
	}
}

//NURSE
class Nurse : DDOrigCreature
{
	default
	{
		//$Category EE Teachers
		Health 300;
		Radius 26; // 32
		Height 64; // 80
		Speed 18;
		PainChance 192;
		DamageFactor "Fire", 2;
		DamageFactor "CherryBomb", 2;
		DamageFactor "Spinner", 2;
		DamageFactor "Popper", 2;
		DamageFactor "BRocket", 2;
		DamageFactor "Chop", 2;
		MeleeRange 80;
		Mass 1000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "jorg/sight";
		PainSound "jorg/pain";
		DeathSound "jorg/death";
		ActiveSound "jorg/active";
		Obituary "%o was vaccinated by a demented nurse.";
		HitObituary "%o was whipped into shape by a demented nurse.";
		Tag "Nurse";
		//DropItem "CandleWhip", 64;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame()) 
		{ 
			A_DropItem("CandleWhip",1,16);
			A_DropItem("CandleWhip",1,4);
			A_DropItem("CandleWhip",1,1);
		}
		else
		{
			A_DropItem("CandleWhip",1,64,ADI_FULLAMMO);
			A_DropItem("CandleWhip",1,16,ADI_FULLAMMO);
			A_DropItem("CandleWhip",1,4,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			NURS E 10 fast A_Look();
			Loop;
		See:
			NURS AABBCCDD 3 fast
			{
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			NURS E 0 fast A_DynamicMusic();
			NURS EF 4 fast A_FaceTarget();
			NURS G 4 fast A_StartSound("jorg/attack",CHAN_BODY);
			NURS H 4 fast 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(3);
				int dmg = A_CalcDamageFormula2(random(35,50),0.005,random(17,34),0.3334,random(8,26),0.1667,0.005);
				
				A_CustomMeleeAttack(dmg, "", "", "Chop", 1);
			}
			NURS IJ 4 fast;
			Goto See;
		Pain:
			NURS K 6 fast A_EEPain();
			Goto See;
		/*
		Death.Suck:
			NURS K 5 A_StartSound("VacDed",CHAN_BODY);
			NURS K 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			NURS K 5 A_Scream();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class NurseFuzzy : Nurse
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Nurse (Spectre)";
		Obituary "%o was vaccinated by a demented spectral nurse.";
		HitObituary "%o was whipped into shape by a demented spectral nurse.";
	}
}

class NightmareNurse : Nurse
{
	default
	{
		//$Category EE Teachers
		Health 600;
		Radius 32;
		Height 80;
		Speed 21;
		PainChance 144;
		DamageFactor "Fire", 1.5;
		DamageFactor "CherryBomb", 1.5;
		DamageFactor "Spinner", 1.5;
		DamageFactor "Popper", 1.5;
		DamageFactor "BRocket", 1.5;
		DamageFactor "Chop", 1.5;
		MeleeRange 80;
		Mass 1500;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "jorg/sight";
		PainSound "jorg/pain";
		DeathSound "jorg/death";
		ActiveSound "jorg/active";
		RenderStyle "Subtract";
		Alpha 0.7;
		Tag "Nurse (Nightmare)";
		Obituary "%o was vaccinated by a demented Nightmare Nurse.";
		HitObituary "%o was whipped into shape by a demented Nightmare Nurse.";
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			NURS EE 5 fast A_Look();
			Loop;
		See:
			NURS AABBCCDD 3 fast 
			{
				A_SetTics(randompick(2,3,3,3));
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			NURS EF 3 fast
			{
				A_SetTics(randompick(2,2,3,3,3));
				A_FaceTarget();
			}
			NURS G 3 fast
			{
				A_SetTics(randompick(2,2,3,3,3));
				A_StartSound("jorg/attack",CHAN_BODY);
			}
			NURS H 3 fast
			{
				A_SetTics(randompick(2,2,3,3,3));

				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60) A_SetTics(2);
				int dmg = A_CalcDamageFormula2(random(50,80),0.005,random(26,52),0.3334,random(12,40),0.1667,0.005);
				A_CustomMeleeAttack(dmg, "", "", "Chop", 1);
			}
			NURS IJ 3 fast
			{
				A_SetTics(randompick(2,2,3,3,3));
			}
			Goto See;
		Pain:
			NURS K 3 fast A_EEPain();
			Goto See;
		/*
		Death.Suck:
			NURS K 5 A_StartSound("VacDed",CHAN_BODY);
			NURS K 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			NURS K 3 A_Scream();
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 3 bright;
			TBUM I 3 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

//BARON VOKTER
class Teacher_Vokter : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 20;
		Height 80;
		Speed 18;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Suck", 0;
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		PainSound "vokter/pain";
		DeathSound "vokter/death";
		Obituary "%o was flunked by Baron Vokter.";
		Tag "Baron Vokter";
	}
	
	States
	{
		Spawn:
			VOKT Z 10 A_Look();
			Loop;
		See:
			VOKT AABBCCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			VOKT F 0 A_DynamicMusic();
			VOKT F 4 A_FaceTarget();
			VOKT H 0 A_StartSound("Handmother/Zap");
			VOKT HIJKHI 3 bright;
			VOKT J 3 bright A_SpawnProjectile("badZapshot",40);
			VOKT K 3 bright;
			VOKT J 0 bright A_SpawnProjectile("badZapshot",40,-48);
			VOKT J 3 bright A_SpawnProjectile("badZapshot",40,48);
			VOKT K 3 bright;
			VOKT J 3 bright A_SpawnProjectile("badZapshot",40);
			VOKT KH 3 bright;
			Goto See;
		Pain:
			VOKT E 6 A_EEPain();
			VOKT L 6; //A_DynamicMusic();
			Goto See;
		Death:
			VOKT E 10 A_Scream();
			VOKT L 10;
			VOKT M 8 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Teacher_VokterClone : Teacher_Vokter
{
	bool truezap;
	int phase;
	bool paintele;
	default
	{
		//$Category EE Teachers
		Health 1500;
		Radius 20;
		Height 64; // 80
		ProjectilePassHeight 64;
		Speed 18;
		PainChance 50; // 200
		DamageFactor "Fire", 0.5;
		DamageFactor "CherryBomb", 0.5;
		DamageFactor "Spinner", 0.5;
		DamageFactor "Popper", 0.5;
		DamageFactor "BRocket", 0.5;
		Painchance "Suck", 13;
		Painchance "DashingBG", 150;
		Painchance "DashingSD", 150;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Suck", 0;
		Mass 5000;
		ReactionTime 28;
		Scale 1;
		MONSTER;
		+FLOORCLIP
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+DONTHARMCLASS
		SeeSound "vokter/sight";
		ActiveSound "vokter/active";
		PainSound "vokter/pain";
		DeathSound "vokter/death";
		Obituary "%o was put into permanent time-out by a clone of Baron Vokter.";
		Tag "Baron Vokter?!";
		//RenderStyle "AddStencil";
		StencilColor "Blue";
		//DropItem "WizardPike", 256;
		//DropItem "PikeAmmo", 256;
		//DropItem "PikeAmmo", 32;
		//DropItem "PikeAmmoBig", 32;
		//DropItem "PikeAmmoBig", 4;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (A_CheckDDGame()) 
		{ 
			A_DropItem("WizardPike",1,256);
		}
		else
		{
			A_DropItem("PikeAmmo",1,256,ADI_FULLAMMO);
			A_DropItem("PikeAmmo",1,32,ADI_FULLAMMO);
			A_DropItem("PikeAmmoBig",1,32,ADI_FULLAMMO);
			A_DropItem("PikeAmmoBig",1,4,ADI_FULLAMMO);

			A_DropItem("WizardPike",1,256,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	void A_VokShieldDown()
	{
		A_SetInventory("VokterCloneShield2",0);
		A_SetInventory("VokterCloneShield",0);
	}
	
	void A_VokInstaClearTeleBlock()
	{
		A_SetInventory("VokterTeleportCooldown",0);
		A_SetInventory("VokterTeleportCooldown2",0);
	}
	
	void A_VokReactSet()
	{
		ReactionTime = (random(25,32) * frandom(1.0,1.5));
		phase = 1;
		if (health > ((SpawnHealth() + Stamina) * 0.5)) 
		{
			phase = 1;
			ReactionTime = (random(25,32) * frandom(1.0,1.5));
		}
		else if (health >= ((SpawnHealth() + Stamina) * 0.25) || health < ((SpawnHealth() + Stamina) * 0.50))
		{
			phase = 2;
			ReactionTime = (random(25,32) * frandom(0.667,0.75));
		}
		else 
		{
			phase = 3;
			ReactionTime = (random(25,32) * frandom(0.334,0.5));
		}
	}
	
	void A_VokSuperPain()
	{
		A_StopSound(CHAN_VOICE);
		A_StopSound(112);
		A_StopSound(113);
		A_StopSound(114);
		A_StartSound("vokter/pain",CHAN_VOICE,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.9,1.0));
		A_StartSound("vokter/pain",112,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.9,1.0));
		A_StartSound("vokter/pain",113,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.8,0.9));
		A_StartSound("vokter/pain",114,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.7,0.8));
	}
	
	void A_VokSuperRage()
	{
		string ragesnd = "vokter/anger1";
		int ragepick = random(1,6);
		if (ragepick >= 1 && ragepick <= 2) ragesnd = "vokter/anger1";
		if (ragepick >= 3 && ragepick <= 4) ragesnd = "vokter/anger2";
		if (ragepick >= 5 && ragepick <= 6) ragesnd = "vokter/anger3";
		A_StopSound(CHAN_VOICE);
		A_StopSound(112);
		A_StopSound(113);
		A_StopSound(114);
		A_StartSound(ragesnd,CHAN_VOICE,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.9,1.0));
		A_StartSound(ragesnd,112,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.9,1.0));
		A_StartSound(ragesnd,113,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.8,0.9));
		A_StartSound(ragesnd,114,CHANF_DEFAULT,frandom(1.2,1.5),ATTN_NONE,frandom(0.7,0.8));
	}
	
	void A_VokShieldCheck()
	{
		if (phase <= 1)
		{
			if (random(1,8) <= 1)
			{
				A_SetInventory("VokterCloneShield2",1);
				A_SetInventory("VokterCloneShield",0);
			}
			else
			{
				A_SetInventory("VokterCloneShield",1);
				A_SetInventory("VokterCloneShield2",0);
			}
		}
		if (phase == 2)
		{
			if (random(1,4) <= 1)
			{
				A_SetInventory("VokterCloneShield2",1);
				A_SetInventory("VokterCloneShield",0);
			}
			else
			{
				A_SetInventory("VokterCloneShield",1);
				A_SetInventory("VokterCloneShield2",0);
			}
		}
		if (phase == 3)
		{
			if (random(1,8) <= 5)
			{
				A_SetInventory("VokterCloneShield2",1);
				A_SetInventory("VokterCloneShield",0);
			}
			else
			{
				A_SetInventory("VokterCloneShield",1);
				A_SetInventory("VokterCloneShield2",0);
			}
		}
	}
	
	States
	{
		Spawn:
			VOKT Z 10 NoDelay
			{
				A_Look();
				A_VokShieldCheck();
				A_VokReactSet();
			}
			Loop;
		See:
			VOKT AABBCCDD 3 
			{
				A_VokShieldCheck();
				if (random(1,8) <= 1) 
				{
					if (A_JumpIfTargetInLOS(null, 90.0))
					{
						A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					}
					else 
					{
						if (random(1,4) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
														 else A_EEChase("Melee","Missile",0,1,3,1,1);
					}
				}
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			VOKT A 0
			{
				if (A_JumpIfTargetInLOS("Teleport", 90.0))
				{
					if (!(CountInv("VokterTeleportCooldown") || CountInv("VokterTeleportCooldown2")))
					{
						if (random(1,4) <= 1) return resolvestate("TeleportFast");
						else return resolvestate("Teleport");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Loop;
		Teleport:
			VOKT A 0 
			{
				A_SetRenderStyle(12,1.00);
				SetShade("Blue");
				A_UnSetshootable();
				A_UnsetSolid();
			}
			VOKT A 1 A_StartSound("vokter/tele");
			VOKT A 1 A_SetTranslucent(0.91);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.73);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.55);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.37);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.19);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.01);
			VOKT A 0 A_Jump(128,25);
			VOKT AAAAAAAAAAAAAAAAAAAAAAAA 0 A_Wander();
			VOKT A 0 A_Jump(128,25);
			VOKT AAAAAAAAAAAAAAAAAAAAAAAA 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			VOKT A 1 A_StartSound("vokter/tele2");
			VOKT A 1 A_SetTranslucent(0.01);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.19);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.37);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.55);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.73);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.91);
			VOKT A 1 A_SetTranslucent(1.0);
			VOKT A 0
			{
				A_SetSolid();
				A_SetShootable();
				A_SetRenderStyle(1,1.00);
				SetShade("Blue");
				A_GiveInventory("VokterTeleportCooldown", 1);
				A_VokReactSet();
			}
			goto See;
		TeleportFast:
			VOKT A 0 
			{
				A_SetRenderStyle(12,1.00);
				SetShade("Blue");
				A_UnSetshootable();
				A_UnsetSolid();
			}
			VOKT A 1 A_StartSound("vokter/tele");
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 0 A_Jump(128,25);
			VOKT AAAAAAAAAAAAAAAAAAAAAAAA 0 A_Wander();
			VOKT A 0 A_Jump(128,25);
			VOKT AAAAAAAAAAAAAAAAAAAAAAAA 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			VOKT A 1 A_StartSound("vokter/tele2");
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(1.0);
			VOKT A 0
			{
				A_SetSolid();
				A_SetShootable();
				A_SetRenderStyle(1,1.00);
				SetShade("Blue");
				A_GiveInventory("VokterTeleportCooldown2", 1);
			}
			goto See;
		TeleportMissile:
			VOKT F 0 
			{
				A_SetRenderStyle(12,1.00);
				SetShade("0F 52 BA");
				A_UnSetshootable();
				A_UnsetSolid();
			}
			VOKT F 1 A_StartSound("vokter/tele");
			VOKT A 1 A_SetTranslucent(0.91);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.73);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.55);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.37);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.19);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.01);
			VOKT F 0 A_Jump(128,25);
			VOKT FFFFFFFFFFFFFFFFFFFFFFFF 0 A_Wander();
			VOKT F 0 A_Jump(128,25);
			VOKT FFFFFFFFFFFFFFFFFFFFFFFF 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			VOKT F 1 A_StartSound("vokter/tele2");
			VOKT A 1 A_SetTranslucent(0.01);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.19);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.37);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.55);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.73);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.91);
			VOKT A 1 A_SetTranslucent(1.0);
			VOKT F 0
			{
				A_SetSolid();
				A_SetShootable();
				A_SetRenderStyle(1,1.00);
				SetShade("0F 52 BA");
				A_GiveInventory("VokterTeleportCooldown", 1);
			}
			goto MissileNext;
		TeleportMissileFast:
			VOKT F 0 
			{
				A_SetRenderStyle(12,1.00);
				SetShade("0F 52 BA");
				A_UnSetshootable();
				A_UnsetSolid();
			}
			VOKT F 1 A_StartSound("vokter/tele");
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT F 0 A_Jump(128,25);
			VOKT FFFFFFFFFFFFFFFFFFFFFFFF 0 A_Wander();
			VOKT F 0 A_Jump(128,25);
			VOKT FFFFFFFFFFFFFFFFFFFFFFFF 0 A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			VOKT F 1 A_StartSound("vokter/tele2");
			VOKT A 1 A_SetTranslucent(0.10);
			VOKT A 1 A_SetTranslucent(0.28);
			VOKT A 1 A_SetTranslucent(0.46);
			VOKT A 1 A_SetTranslucent(0.64);
			VOKT A 1 A_SetTranslucent(0.82);
			VOKT A 1 A_SetTranslucent(1.0);
			VOKT F 0
			{
				A_SetSolid();
				A_SetShootable();
				A_SetRenderStyle(1,1.00);
				SetShade("0F 52 BA");
				A_GiveInventory("VokterTeleportCooldown2", 1);
			}
			goto MissileNext;
		Missile:
			VOKT F 0
			{
				A_DynamicMusic();
				A_VokShieldCheck();
				A_StartSound("teacher/chargeup",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
				A_StartSound("teacher/chargeup",CHAN_ITEM,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
				A_StartSound("teacher/chargeup",CHAN_5,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.667,1.334));
				if (random(1,4) <= 1) truezap = true;
			}
			VOKT F 4 
			{
				A_VokShieldCheck();
				A_FaceTarget();

				if (A_JumpIfTargetInLOS("TeleportMissile", 90.0))
				{
					if (!(CountInv("VokterTeleportCooldown") || CountInv("VokterTeleportCooldown2")))
					{
						if (random(1,8) <= 1) 
						{
							if (random(1,4) <= 1) return resolvestate("TeleportMissileFast");
							else return resolvestate("TeleportMissile");
						}
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileNext:
			VOKT H 0 bright
			{
				if (random(1,8) <= 5)
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound("vokter/attack",CHAN_VOICE);
				}
			}
			VOKT HIJKHI 2 bright
			{
				A_VokShieldDown();
				A_FaceTarget();
				if (truezap) 
				{
					
					if (phase <= 1) A_SetTics(randompick(4,4,5,5,6));
					if (phase == 2) A_SetTics(randompick(3,3,4,4,5));
					if (phase == 3) A_SetTics(randompick(1,2,2,2,3));
				}
				else
				{
					if (phase <= 1) A_SetTics(2);
					if (phase == 2) A_SetTics(randompick(1,2,2));
					if (phase == 3) A_SetTics(randompick(1,1,1,2));
				}
			}
			VOKT JKHIJK 0 bright
			{
				if (truezap) 
				{
					A_VokShieldDown();
					A_FaceTarget();
					if (phase <= 1) A_SetTics(randompick(4,4,5,5,6));
					if (phase == 2) A_SetTics(randompick(3,3,4,4,5));
					if (phase == 3) A_SetTics(randompick(1,2,2,2,3));
				}
			}
			VOKT J 0 A_StartSound("Handmother/Zap");
			VOKT J 3 bright 
			{
				A_VokShieldDown();
				A_FaceTarget();
				if (truezap) A_SpawnProjectile("BadZapShot2",40);
								else A_SpawnProjectile("BadZapShot",40);
			}
			VOKT K 3 bright
			{
				A_VokShieldDown();
				A_FaceTarget();
			}
			VOKT J 0 bright
			{
				A_VokShieldDown();
				A_FaceTarget();
				if (truezap) A_SpawnProjectile("BadZapShot2",40,-48);
								else A_SpawnProjectile("BadZapShot",40,-48);
			}
			VOKT J 0 A_StartSound("Handmother/Zap");
			VOKT J 3 bright 
			{
				A_VokShieldDown();
				A_FaceTarget();
				if (truezap) 
				{
					A_SpawnProjectile("BadZapShot2",40,-48);
					A_SpawnProjectile("BadZapShot2",40,48);
				}
				else
				{
					A_SpawnProjectile("BadZapShot",40,-48);
					A_SpawnProjectile("BadZapShot",40,48);
				}
			}
			VOKT K 3 bright
			{
				A_VokShieldDown();
				A_FaceTarget();
			}
			VOKT J 0 A_StartSound("Handmother/Zap");
			VOKT J 3 bright
			{
				A_VokShieldDown();
				A_FaceTarget();
				if (truezap) A_SpawnProjectile("BadZapShot2",40);
								else A_SpawnProjectile("BadZapShot",40);
			}
			VOKT KH 3 bright
			{
				A_VokShieldCheck();
				A_FaceTarget();
				A_VokReactSet();
			}
			Goto See;
		Pain:
			VOKT E 6 
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
					if (random(1,64) <= 1) 
					{
						A_VokInstaClearTeleBlock();
						if (random(1,16) <= 11) paintele = true;
					}
					else
					{
						if (random(1,16) <= 5) paintele = true;
					}
				}
				else
				{
					if (phase <= 1) A_SetTics(6);
					if (phase == 2) A_SetTics(5);
					if (phase == 3) A_SetTics(3);
					A_EEPain();
					if (random(1,8) <= 1) 
					{
						A_VokInstaClearTeleBlock();
						if (random(1,16) <= 15) paintele = true;
					}
					else
					{
						if (random(1,16) <= 7) paintele = true;
					}
				}
			}
			VOKT L 6
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
				}
				else
				{
					if (phase <= 1) A_SetTics(6);
					if (phase == 2) A_SetTics(5);
					if (phase == 3) A_SetTics(3);
				}
			}
			VOKT L 0 
			{
				int tauntchance = 1;
				if (phase <= 1) tauntchance = 1;
				if (phase == 2) tauntchance = 3;
				if (phase == 3) tauntchance = 6;
				
				if (random(1,8) <= tauntchance) 
				{
					if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound("vokter/shieldtaunt",CHAN_VOICE);
						Console.Printf("\c[sapphire]vokter/shieldtaunt");
					}
					else
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound("vokter/anger",CHAN_VOICE);
						//Console.Printf("\c[sapphire]vokter/anger");
					}
				}
				A_VokShieldCheck();
				A_VokReactSet();
				
				if (paintele)
				{
					paintele = false;
					if (!(CountInv("VokterTeleportCooldown") || CountInv("VokterTeleportCooldown2")))
					{
						if (random(1,4) <= 1) 
						{
							if (random(1,2) <= 1) return resolvestate("TeleportMissile");
															 else return resolvestate("TeleportMissileFast");
						}
						else
						{
							if (random(1,2) <= 1) return resolvestate("Teleport");
															 else return resolvestate("TeleportFast");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingBG:
			VOKT E 6 
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
					if (random(1,8) <= 5)
					{
						A_SetInventory("VokterCloneShield",0);
						A_SetInventory("VokterCloneShield2",0);
						A_SetInventory("VokterCloneStun",1);
						if (phase <= 1) A_SetTics(30);
						if (phase == 2) A_SetTics(25);
						if (phase == 3) A_SetTics(15);
						
						A_VokSuperPain();
						bNOPAIN = true;
						if (random(1,8) <= 1) 
						{
							A_VokInstaClearTeleBlock();
							if (random(1,16) <= 5) paintele = true;
						}
						else
						{
							if (random(1,16) <= 2) paintele = true;
						}
					}
					else
					{
						if (random(1,64) <= 1) 
						{
							A_VokInstaClearTeleBlock();
							if (random(1,16) <= 3) paintele = true;
						}
						else
						{
							if (random(1,16) <= 1) paintele = true;
						}
					}
				}
				else
				{
					A_SetInventory("VokterCloneStun",1);
					if (phase <= 1) A_SetTics(30);
					if (phase == 2) A_SetTics(25);
					if (phase == 3) A_SetTics(15);

					A_VokSuperPain();
					bNOPAIN = true;
					if (random(1,8) <= 1) 
					{
						A_VokInstaClearTeleBlock();
						if (random(1,16) <= 5) paintele = true;
					}
					else
					{
						if (random(1,16) <= 2) paintele = true;
					}
				}
			}
			VOKT L 6
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
				}
				else
				{
					if (phase <= 1) A_SetTics(30);
					if (phase == 2) A_SetTics(25);
					if (phase == 3) A_SetTics(15);
				}
			}
			VOKT L 0 
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
				}
				else
				{
					A_VokSuperRage();
					//Console.Printf("\c[sapphire]vokter/anger");
				}
				A_VokShieldCheck();
				A_VokReactSet();
				A_SetInventory("VokterCloneStun",0);
				bNOPAIN = false;
				
				if (paintele)
				{
					paintele = false;
					if (!(CountInv("VokterTeleportCooldown") || CountInv("VokterTeleportCooldown2")))
					{
						if (random(1,16) <= 1) 
						{
							if (random(1,2) <= 1) return resolvestate("TeleportMissile");
															 else return resolvestate("TeleportMissileFast");
						}
						else
						{
							if (random(1,2) <= 1) return resolvestate("Teleport");
															 else return resolvestate("TeleportFast");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain.DashingSD:
			VOKT E 6 
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
					if (random(1,8) <= 5)
					{
						A_SetInventory("VokterCloneShield",0);
						A_SetInventory("VokterCloneShield2",0);
						A_SetInventory("VokterCloneStun",1);
						if (phase <= 1) A_SetTics(35);
						if (phase == 2) A_SetTics(30);
						if (phase == 3) A_SetTics(20);
						
						A_VokSuperPain();
						bNOPAIN = true;
						if (random(1,8) <= 1) 
						{
							A_VokInstaClearTeleBlock();
							if (random(1,16) <= 4) paintele = true;
						}
						else
						{
							if (random(1,32) <= 1) paintele = true;
						}
					}
					else
					{
						if (random(1,64) <= 1) 
						{
							A_VokInstaClearTeleBlock();
							if (random(1,32) <= 1) paintele = true;
						}
						else
						{
							if (random(1,64) <= 1) paintele = true;
						}
					}
				}
				else
				{
					A_SetInventory("VokterCloneStun",1);
					if (phase <= 1) A_SetTics(35);
					if (phase == 2) A_SetTics(30);
					if (phase == 3) A_SetTics(20);

					A_VokSuperPain();
					bNOPAIN = true;
					if (random(1,8) <= 1) 
					{
						A_VokInstaClearTeleBlock();
						if (random(1,16) <= 2) paintele = true;
					}
					else
					{
						if (random(1,32) <= 1) paintele = true;
					}
				}
			}
			VOKT L 6
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
					A_SetTics(0);
				}
				else
				{
					if (phase <= 1) A_SetTics(35);
					if (phase == 2) A_SetTics(30);
					if (phase == 3) A_SetTics(20);
				}
			}
			VOKT L 0 
			{
				if (CountInv("VokterCloneShield") || CountInv("VokterCloneShield2"))
				{
				}
				else
				{
					A_VokSuperRage();
					//Console.Printf("\c[sapphire]vokter/anger");
				}
				A_VokShieldCheck();
				A_VokReactSet();
				A_SetInventory("VokterCloneStun",0);
				bNOPAIN = false;
				
				if (paintele)
				{
					paintele = false;
					if (!(CountInv("VokterTeleportCooldown") || CountInv("VokterTeleportCooldown2")))
					{
						if (random(1,16) <= 1) 
						{
							if (random(1,2) <= 1) return resolvestate("TeleportMissile");
															 else return resolvestate("TeleportMissileFast");
						}
						else
						{
							if (random(1,2) <= 1) return resolvestate("Teleport");
															 else return resolvestate("TeleportFast");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Death:
			VOKT E 0 
			{
				let globalvars = DDGlobalVariables.Get();
				A_VokShieldDown();
				globalvars.KilledVokterClone = true;
			}
			VOKT E 10 A_Scream();
			VOKT L 10;
			VOKT M 8;
			VOKT M 8 bright;
			VOKT M 8;
			VOKT M 8 bright;
			VOKT M 8;
			VOKT M 8 bright;
			VOKT M 8;
			VOKT M 8 bright;
			VOKT M 8;
			VOKT M 8 bright;
			VOKT M 8;
			VOKT M 8 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 4 bright;
			TBUM I 4 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Manchineel_Ceiling : Manchineel 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Height 96;
		+NOGRAVITY
		+SPAWNCEILING
		Tag "Man-Chineel (Flipped)";
	}
	
	States
	{
		Spawn:
			URNT A 10 A_Look();
			Loop;
		See:
			URNT AA 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			URNT BCD 6;
			URNT E 0 A_StartSound("gard/sight",CHAN_VOICE);
			URNT E 0 A_DynamicMusic();
			URNT E 6 A_FaceTarget();
			URNT F 6 
			{
				A_ManchineelAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 25)
					{
						angle -= 15;
						A_ManchineelAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_ManchineelAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 50)
					{
						angle -= 22.5;
						A_ManchineelAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_ManchineelAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						angle -= 7.5;
						A_ManchineelAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_ManchineelAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			URNT G 6;
			URNT DCB 4;
			Goto See;
		Pain:
			URNT H 6 A_EEPain();
			URNT DCB 2;
			Goto See;
		/*
		Death.Suck:
			URNT H 5 A_StartSound("VacDed",CHAN_BODY);
			URNT H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			URNT I 0 A_Scream();
			URNT I 0 
			{
				A_NoBlocking();
				A_Drop();
			}
			URNT I 0 A_NoGravity();
			URNT I 5 Bright;
			URNT JK 5 Bright;
			TNT1 A 5;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class ManchineelEE_Ceiling : ManchineelEE
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Height 96;
		+NOGRAVITY
		+SPAWNCEILING
		Tag "Man-Chineel (Flipped)";
	}
	
	void A_ManchineelAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(15,25),0.005,random(5,10),0.3334,random(0,5),0.1667,0.005);
		if (type == 0) A_CustomComboAttack("SeedBall", 32, (dmg), "gard/swing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "gard/swing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("SeedBall",64,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			URNT A 10 A_Look();
			Loop;
		See:
			URNT AA 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
		Missile:
			URNT BCD 3;
			URNT E 0 
			{
				A_DynamicMusic();
				A_StartSound("gard/sight",CHAN_VOICE);
			}
			URNT E 3 A_FaceTarget();
			URNT F 3 
			{
				A_ManchineelAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 25)
					{
						angle -= 15;
						A_ManchineelAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_ManchineelAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 50)
					{
						angle -= 22.5;
						A_ManchineelAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_ManchineelAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						angle -= 7.5;
						A_ManchineelAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_ManchineelAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			URNT G 3;
			URNT DCB 2;
			Goto See;
		Pain:
			URNT H 3 A_EEPain();
			URNT DCB 1;
			Goto See;
		/*
		Death.Suck:
			URNT H 5 A_StartSound("VacDed",CHAN_BODY);
			URNT H 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,6);
			Stop;
		*/
		Death:
			URNT I 0 A_Scream();
			URNT I 0 A_NoBlocking();
			URNT I 0 A_NoGravity();
			URNT I 5 Bright;
			URNT JK 5 Bright;
			TNT1 A 5;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

//BELLEFISH
class Bellefish_Fly : Bellefish
{
	default
	{
		-FLOORCLIP
		+FLOAT
		+DONTMORPH
		+DONTHARMCLASS
		+DONTHARMSPECIES
		Obituary "%o was zapped by a flying bellefish.";
		Tag "Bellefish (Flying)";
		Species "Bellefish";
	}
	
	override void Tick()
	{
		super.Tick();
		A_BellefishRangeCheck();
	}
	
	States
	{
		Spawn:
			SHLF ABCB 10 fast bright A_FloatLook(16);
			Loop;
		See:
			SHLF ABCB 5 fast bright A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Melee:
			SHLF D 0 fast bright A_DynamicMusic();
			SHLF E 0 fast bright A_StartSound("bellefish/charge",CHAN_BODY);
			SHLF EFG 3 fast bright A_FaceTarget();
			SHLF HIHI 3 bright A_BelleFishZap();
			SHLF G 8 fast bright;
			Goto See;
		Pain:
			SHLF J 9 fast bright A_EEPain();
			SHLF D 3 fast bright;
			Goto See;
		/*
		Death.Suck:
			SHLF J 5 A_StartSound("VacDed",CHAN_BODY);
			SHLF J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,2);
			Stop;
		*/
		Death:
			SHLF J 0 bright A_StartSound("aqua/kill1");
			SHLF J 7 Bright A_Scream();
			SHLF KLM 7 Bright;
			SHLF N 7 Bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class Bellefish_FlyFuzzy : Bellefish_Fly
{
	default
	{
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+SHADOW
		RenderStyle "OptFuzzy";
		Species "Bellefish";
	}
	
	override void Tick()
	{
		super.Tick();
		A_BellefishRangeCheck();
	}
}

class NightmareBellefish_Fly : Bellefish_Fly
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "EE Monsters"
		Health 300;
		Radius 20;
		Height 56;
		Speed 14;
		Mass 750;
		MeleeRange 128;
		PainChance 192;
		DamageFactor "Fire", 0.125;
		DamageFactor "CherryBomb", 0.125;
		DamageFactor "Spinner", 0.125;
		DamageFactor "Popper", 0.125;
		DamageFactor "BRocket", 0.125;
		DamageFactor "Boiling", 0;
		DamageFactor "Bap", 1;
		PainChance "Bap", 200;
		MONSTER;
		+DONTHARMCLASS
		+DONTHARMSPECIES
		+NOBLOOD
		+NOINFIGHTING
		+NOTARGET
		+FLOAT
		+NOGRAVITY
		+DONTMORPH
		Obituary "%o was zapped by a flying Nightmare Bellefish.";
		PainSound "aqua/kill2";
		Deathsound "aqua/kill2";
		Tag "Bellefish (Flying) [Nightmare]";
		RenderStyle "Subtract";
		Alpha 0.35;
		Species "Bellefish";
	}
	
	void A_BellefishRangeCheck(int type = 0)
	{
		if (type == 0)
		{
			dmgbase = A_CalcDamageFormula2(random(2,6),frandompick(0.005,0.005,0.00625,0.00625,0.00625,0.008334,0.008334,0.008334,0.01,0.01),random(1,4),frandompick(0.40,0.40,0.5,0.5,0.5,0.667,0.667,0.667,1,1),random(2,8),frandompick(0.20,0.20,0.25,0.25,0.25,0.334,0.334,0.334,0.5,0.5),0.005);

			if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 2.5)))
			{
				dmgbase *= 1.5;
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 1.25))) 
				{
					dmgbase *= 1.5;
					if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0625)))
					{
						dmgbase *= 1.5;
						if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.01625))) dmgbase *= 1.5;
					}
				}
			}
		}
		if (type == 1)
		{
			dmgbase = A_CalcDamageFormula2(random(1,5),frandompick(0.004167,0.005,0.00625,0.008334),random(0,2),frandompick(0.3334,0.40,0.5,0.6667),random(0,5),frandompick(0.16667,0.20,0.25,0.3334),0.005);
	
			if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 2.5)))
			{
				dmgbase *= 1.5;
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 1.25))) 
				{
					dmgbase *= 1.5;
					if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0625)))
					{
						dmgbase *= 1.5;
						if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.01625))) dmgbase *= 1.5;
					}
				}
			}
		}
		dmgbase *= random(1,2);
		
		rangebase = frandom(72.0,88.0);
		if (exex_monsterlevelenabledflags) rangebase += (CountInv("MonsterLevel") * frandom(1.44,1.76));
		if (waterlevel >= 2)
		{
			rangebase *= 2;
			dmgbase *= frandom(1.5,2.5);
		}
		MeleeRange = rangebase;
	}
	
	void A_NightmareBelleFishZap()
	{
		if (random(1,3) <= 2) A_SetTics(2);
		A_BellefishRangeCheck(0);
		
		A_StartSound("bellefish/charge",CHAN_WEAPON);
		A_StartSound("bellefish/zap",CHAN_ITEM);
		A_Explode(dmgbase,128,XF_NOTMISSILE|XF_NOSPLASH,0,rangebase,0,0,"","Melee");
		
		if (random(1,3) <= 1)
		{
			A_BellefishRangeCheck(1);
			
			A_StartSound("bellefish/charge",CHAN_WEAPON);
			A_StartSound("bellefish/zap",CHAN_ITEM);
			A_Explode(dmgbase,128,XF_NOTMISSILE|XF_NOSPLASH,0,rangebase,0,0,"","Melee");
			
			if (random(1,3) <= 1)
			{
				A_BellefishRangeCheck(1);
				
				A_StartSound("bellefish/charge",CHAN_WEAPON);
				A_StartSound("bellefish/zap",CHAN_ITEM);
				A_Explode(dmgbase,128,XF_NOTMISSILE|XF_NOSPLASH,0,rangebase,0,0,"","Melee");
			}
		}
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
		A_BellefishRangeCheck(0);
	}
	
	States
	{
		Spawn:
			SHLF ABCB 8 fast bright 
			{
				A_Look();
			}
			Loop;
		See:
			SHLF ABCB 4 fast bright 
			{
				if (random(1,8) <= 5) 
				{
					A_SetTics(3);
					if (random(1,8) <= 3) A_SetTics(2);
				}
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			SHLF D 0 fast A_DynamicMusic();
			SHLF E 0 fast A_StartSound("bellefish/charge",CHAN_BODY);
			SHLF EFG 3 fast bright 
			{
				if (random(1,3) <= 2) A_SetTics(2);
				A_FaceTarget();
			}
			SHLF HIHI 3 fast bright A_NightmareBelleFishZap();
			SHLF G 7 fast bright
			{
				if (random(1,6) <= 5) A_SetTics(6);
			}
			Goto See;
		Pain:
			SHLF J 7 fast bright A_EEPain();
			SHLF D 2 fast bright;
			Goto See;
		/*
		Death.Suck:
			SHLF J 5 A_StartSound("VacDed",CHAN_BODY);
			SHLF J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,2);
			Stop;
		*/
		Death:
			SHLF J 0 A_StartSound("aqua/kill1");
			SHLF J 7 Bright A_Scream();
			SHLF KLM 7 Bright;
			SHLF N 7 Bright A_NoBlocking();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class VokterCannon : EECreature
{
	default
	{
		//$Category EE Props
		Health 300;
		Painchance 200;
		Speed 0;
		Scale 2;
		Height 80;
		Radius 24;
		Mass 50000;
		+DONTTHRUST
		+NOGRAVITY
		+SPAWNCEILING
		+NOBLOOD
		+MISSILEMORE
		MONSTER;
	}
	States
	{
		Spawn:
			CANN A 10 A_Look();
			Loop;
		See:
			CANN AA 1 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CANN BB 4 A_Facetarget();
			CANN B 0 A_StartSound("jorg/spit",CHAN_WEAPON);
			CANN C 0 bright A_SpawnProjectile("BadZapshot",16,32);
			CANN C 6 bright A_SpawnProjectile("BadZapshot",16,-32);
			CANN D 4 bright;
			CANN B 0 A_DynamicMusic();
			CANN B 2 A_Jump(128,"see");
			CANN B 0 A_StartSound("jorg/spit",CHAN_WEAPON);
			CANN C 0 bright A_SpawnProjectile("BadZapshot",16,32);
			CANN C 6 bright A_SpawnProjectile("BadZapshot",16,-32);
			CANN D 4 bright;
			Goto See;
		Pain:
			CANN A 6;
			Goto See;
		Death:
			CANN A 0 A_SpawnItemEx("TurretHole",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			CANN A 0 A_StartSound("weapons/cherryboom");
			CANN AAAAAA 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-32,32),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			CANN A 0 A_StartSound("weapons/cherryboom");
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class VokterCannon_Flipped : VokterCannon
{
	default
	{
		//$Category EE Props
		Health 300;
		Painchance 200;
		Speed 0;
		Scale 2;
		Height 80;
		Radius 24;
		Mass 50000;
		+DONTTHRUST
		+NOBLOOD
		+MISSILEMORE
		MONSTER;
	}
	States
	{
		Spawn:
			CANF A 10 A_Look();
			Loop;
		See:
			CANF AA 1 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			CANF BB 4 A_Facetarget();
			CANF B 0 A_StartSound("jorg/spit",CHAN_WEAPON);
			CANF C 0 bright A_SpawnProjectile("BadZapshot",32,32);
			CANF C 6 bright A_SpawnProjectile("BadZapshot",32,-32);
			CANF D 4 bright;
			CANF B 0 A_DynamicMusic();
			CANF B 2 A_Jump(128,"see");
			CANF B 0 A_StartSound("jorg/spit",CHAN_WEAPON);
			CANF C 0 bright A_SpawnProjectile("BadZapshot",32,32);
			CANF C 6 bright A_SpawnProjectile("BadZapshot",32,-32);
			CANF D 4 bright;
			Goto See;
		Pain:
			CANF A 6;
			Goto See;
		Death:
			CANF A 0 A_SpawnItemEx("TurretHole_Flipped",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			CANF A 0 A_StartSound("weapons/cherryboom");
			CANF AAAAAA 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-32,32),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			CANF A 0 A_StartSound("weapons/cherryboom");
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class JorgSphereCannon : DDOrigBoss
{
	default
	{
		//$Category EE Teachers
		Health 1000;
		Painchance 200;
		Painchance "Beats", 0;
		DamageFactor "Beats", 0.5;
		Painchance "Zap", 0;
		DamageFactor "Zap", 0.5;
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		Speed 0;
		Scale 1;
		Radius 48;
		Height 120;
		Mass 50000;
		+DONTTHRUST
		+NOGRAVITY
		+SPAWNCEILING
		+NOBLOOD
		+MISSILEMORE
		+MISSILEEVENMORE
		+BOSS
		MONSTER;
		Seesound "jorg/sight";
		Activesound "jorg/sight";
		PainSound "jorg/pain";
		Deathsound "jorg/death";
	}
	
	States
	{
		Spawn:
			JCAN F 10 A_Look();
			Loop;
		See:
			JCAN A 0 A_DynamicMusic();
			JCAN AA 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			JCAN F 0
			{
				bNOPAIN = true;
			}
			JCAN FFF 6 
			{
				A_Facetarget();
			}
			JCAN F 0 A_Jump(128,"Missile2");
		Missile1:
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			goto MissileEnd;
		Missile2:
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 6 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			goto MissileEnd;
		MissileEnd:
			JCAN FA 2;
			JCAN A 0
			{
				bNOPAIN = true;
			}
			Goto See;
		Pain:
			JCAN D 3 A_EEPain();
			JCAN D 3;
			Goto See;
		Death:
			JORG K 0 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsAppetite"))
				{
					if (MiscItem && !MiscItem.AFD_JorgCannon)
					{
						MiscItem.AFD_JorgCannon += 1;
						A_PrintPowerupDDTNoRPG(0);
					}
				}
				
				A_SpawnItemEX ("SphereTurretHole",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
			JORG K 0 A_SetGravity(0.5);
			JORG K 0 A_Scream();
			JORG KKKKKK 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-32,32),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class JorgSphereCannonClone : JorgSphereCannon
{
	int daas;
	default
	{
		//$Category EE Teachers
		Health 1250;
		Painchance 50;
		Painchance "Beats", 0;
		DamageFactor "Beats", 0.125;
		Painchance "Zap", 0;
		DamageFactor "Zap", 0.125;
		DamageFactor 0.25;
		RadiusDamageFactor 0.25;
		Speed 0;
		Scale 1;
		Height 120;
		Radius 48;
		Mass 50000;
		+DONTTHRUST
		+NOGRAVITY
		+SPAWNCEILING
		+NOBLOOD
		+MISSILEMORE
		+MISSILEEVENMORE
		+BOSS
		MONSTER;
		Seesound "jorg/sight";
		Activesound "jorg/sight";
		PainSound "jorg/pain";
		Deathsound "jorg/death";
	}
	
	States
	{
		Spawn:
			JCAN F 10 A_Look();
			Loop;
		See:
			JCAN AA 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			Loop;
		Missile:
			JCAN F 0
			{
				bNOPAIN = true;
			}
			JCAN FFF 2 
			{
				A_Facetarget();
			}
			JCAN F 0 A_Jump(128,"Missile2");
		Missile1:
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			goto MissileEnd;
		Missile2:
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			JCAN C 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,-80);
				A_SpawnProjectile("BadZapshot",32,-80);
			}
			JCAN B 3 bright 
			{
				A_Facetarget();
				A_StartSound("jorg/spit",CHAN_WEAPON);
				A_StartSound("jorg/spit",8);
				A_StartSound("jorg/spit",9);
				A_SpawnProjectile("BadZapshot",64,80);
				A_SpawnProjectile("BadZapshot",32,80);
			}
			goto MissileEnd;
		MissileEnd:
			JCAN FA 2
			{
			}
			JCAN A 0
			{
				bNOPAIN = true;
			}
			Goto See;
		Pain:
			JCAN D 1 A_EEPain();
			JCAN D 1;
			Goto See;
		Death:
			JORG K 0 A_SpawnItemEX ("SphereTurretHole",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			JORG K 0 A_SetGravity(0.5);
			JORG K 0 A_Scream();
			JORG KKKKKK 7 Bright
			{
				if (skill == 0) A_SetTics(9);
				if (skill == 1) A_SetTics(8);
				if (skill == 2) A_SetTics(6);
				if (skill == 3) A_SetTics(4);
				if (skill == 4) A_SetTics(3);
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-32,32),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}

class RatWander : DDMorphedCreature 
{
	default
	{
		//$Category EE NPCs
		Health 10;
		Radius 10;
		Height 20;
		Mass 40;
		Speed 10;
		Monster;
		-COUNTKILL
		+DONTMORPH
		+FLOORCLIP
		+NOBLOOD
		-SHOOTABLE
		+FRIENDLY
		SeeSound "Rat/Pain";
		AttackSound "Rat/Attack";
		PainSound "Rat/Pain";
		DeathSound "Rat/Death";
		ActiveSound "Rat/Active";
		Obituary "$OB_RAT";
	}
	States
	{
		Spawn:
			RATS AA 10 A_Look();
			Goto See;
		See:
			RATS ABC 10 A_Wander();
			RATS AAAAAAAA 10;
			Loop;
		Death:
			RATS D 6 A_Scream();
			RATS E 6 A_NoBlocking();
			RATS F 6;
			TNT1 A -1;
			Stop;
	}
}

class RatFriend : RatWander {}