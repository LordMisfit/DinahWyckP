//"Evil Dinah" / Dinah Doppelganger
// CoS's Original Version - 2k HP, Less AI Powered
class EvilDinah : DDOrigBoss
{
	int spreadtype;
	double angdiff, angdiff2;
	double pitchdiff, pitchdiff2;
	double heightoffset;
	int candleshottype;
	int candleshotalttype;
	int shotangerror;
	int lastweaponused;
	int tauntcooldown;
	int killtauntcooldown;
	int numpikeglows;
	int lasthealth;
	int targlasthealth;
	default
	{
		//$Category RPMonsters;
		Health 2000;
		Radius 20;
		Height 64;
		Speed 10;
		PainChance 128;
		Painchance "Beats", 16;
		Painchance "Fire", 64;
		DamageFactor "Suck", 0;
		DamageFactor "Cricket", 2;
		MeleeRange 64;
		MeleeThreshold 128;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOBLOOD;
		+MISSILEMORE;
		+DONTHARMCLASS;
		SeeSound "dinah/giggle";
		PainSound "evildinah/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dinah/giggle";
		Obituary "%o couldn't stop hitting herself.";
		Tag "Evil Dinah";
	}
	
	states
	{
		Spawn:
			EDIN A 7 A_Look();
			EDIN B 5 A_Look();
			EDIN C 7 A_Look();
			EDIN D 5 A_Look();
			Loop;
		Inactive:
			EDIN A 7;
			EDIN B 5;
			EDIN C 7;
			EDIN D 5;
			Loop;
		Active:
			EDIN A 0;
			Goto Spawn;
		See:
			DINA BBCCDDEEBBCCDDEE 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			DINA BCDE 4 A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			DINA B 0 A_Jump(32,"Missile");
			DINA E 0 A_DynamicMusic();
			Loop;
		Missile:
			DINA F 0 A_DynamicMusic();
			DINA F 0 A_FaceTarget();
			DINA F 0 A_Jump(32,9);
			DINA F 0 A_JumpIf(Accuracy == 1,"cricketattk");
			DINA F 0 A_JumpIf(Accuracy == 2,"blunderattk");
			DINA F 0 A_JumpIf(Accuracy == 3,"jackattk");
			DINA F 0 A_JumpIf(Accuracy == 4,"eggattk");
			DINA F 0 A_JumpIf(Accuracy == 5,"pikeattk");
			DINA F 0 A_JumpIf(Accuracy == 6,"musicattk");
			DINA F 0 A_JumpIf(Accuracy == 7,"suckattk");
			DINA F 0 A_JumpIf(Accuracy == 8,"candleattk");
			DINA F 8 A_StartSound("dinah/giggle",CHAN_VOICE);
			DINA G 8 A_SpawnProjectile("SpinnerShot",40);
			DINA A 4;
			Goto See;
		CricketAttk:
			DINA F 4 A_StartSound("malletswing",1);
			DINA G 8 
			{
				A_StartSound("croquet/ballfire",1);
				if (random(1,2) <= 1) A_FatAttack1("RealBadCroquetBall");
												 else A_FatAttack2("RealBadCroquetBall");
			}
			DINA A 4 A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			Goto See;
		BlunderAttk:
			DWBL A 6;
			DWBL B 9
			{
				A_StartSound("blunderfire2",CHAN_WEAPON);
				A_SpawnProjectile("BadBlundershot",48,0,random(-5,5),0,0);
				A_SpawnProjectile("BadBlundershot",48,0,random(-7,7),0,0);
				A_SpawnProjectile("BadBlundershot",48,0,random(-11,11),0,0);
			}
			DWBL A 4;
			goto See;
		JackAttk:
			DWAJ A 4 A_StartSound("malletswing",1);
			DWAJ B 8
			{
				if (random(1,2) <= 1) A_FatAttack1("RealBadJackShot");
												 else A_FatAttack2("RealBadJackShot");
			}
			DWAJ A 4;
			Goto See;
		EggAttk:
			DWEG A 8 A_StartSound("misc/p_pkup",CHAN_VOICE);
			DWEG A 4 A_FaceTarget();
			DWEG B 8 
			{
				A_StartSound("PanClang",1);
				A_Throwgrenade("EvilEggShot",2,24,random(6,12),0);
			}
			DWEG A 4;
			Goto See;
		PikeAttk:
			DWPK B 0 A_StartSound("Handmother/Zap");
			DWPK BB 3 bright;
			DWPK B 3 bright A_SpawnProjectile("EvilMiniZapshot",40);
			DWPK B 3 bright;
			DWPK B 0 bright A_SpawnProjectile("EvilMiniZapshot",40,-48);
			DWPK B 3 bright A_SpawnProjectile("EvilMiniZapshot",40,48);
			DWPK B 3 bright;
			DWPK B 3 bright A_SpawnProjectile("EvilZapshot",40);
			DWPK AA 3 bright;
			Goto See;
		MusicAttk:
			DWGP A 8 A_StartSound("misc/p_pkup",CHAN_VOICE);
			DWGP A 5 A_SpawnProjectile("BadRecordShot",40,0,45);
			DWGP A 5;
			DWGP A 5 A_SpawnProjectile("BadRecordShot",40,0,0);
			DWGP A 5;
			DWGP A 5 A_SpawnProjectile("BadRecordShot",40,0,-45);
			DWGP A 5 A_CPosRefire;
			Goto MusicAttk+1;
		SuckAttk:
			DWSV A 8 A_StartSound("misc/p_pkup",CHAN_VOICE);
			DWSV B 12 A_SpawnProjectile("BadVacShot",40,0);
			DWSV A 7;
			Goto See;
		CandleAttk:
			DWFC A 10 A_StartSound("dinah/giggle",CHAN_VOICE);
			DWBL B 0 A_StartSound("weapons/FCandlefire",CHAN_WEAPON);
			DWBL B 3 A_SpawnProjectile("badcandleshot",40,0,random(-5,5));
			DWBL B 0 A_StartSound("weapons/FCandlefire",CHAN_WEAPON);
			DWBL B 3 A_SpawnProjectile("badcandleshot",40,0,random(-5,5));
			DWBL B 0 A_StartSound("weapons/FCandlefire",CHAN_WEAPON);
			DWBL B 3 A_SpawnProjectile("badcandleshot",40,0,random(-5,5));
			DWBL B 0 A_StartSound("weapons/FCandlefire",CHAN_WEAPON);
			DWBL B 3 A_SpawnProjectile("badcandleshot",40,0,random(-5,5));
			DINA A 2 A_CPosRefire();
			Goto CandleAttk+2;
		Melee:
			DINA F 0 A_DynamicMusic();
			DINA F 2 A_FaceTarget();
			DINA FF 2 A_Recoil(-2);
			DINA G 0 ThrustThingz (0, 27, 0, 0);
			DINA F 2 ThrustThing (angle*256/360, 18, 0, 0);
			DINA G 2;
			DINA G 4 A_CustomMeleeAttack (random(25,40), "mallethit", "malletswing", "", 1);
			Goto See;
		Pain:
			DINA H 0 A_DynamicMusic();
			DINA H 2 A_FaceTarget();
			DINA H 0 ThrustThingZ (0, 24, 0, 0);
			DINA H 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DINA H 6 A_EEPain();
			DINA A 6 A_Jump(128,"Missile");
			Goto See;
		Death:
			DINA H 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (MiscItem && !MiscItem.CoS_EvilDinah)
					{
						MiscItem.CoS_EvilDinah += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			DINA HHHHHHHH 4 Bright
			{
				A_StartSound("weapons/cherryboom",CHAN_BODY);
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DINA H 3 A_FaceTarget();
			DINA H 0 ThrustThingZ (0, 24, 0, 0);
			DINA H 0 ThrustThing (angle*256/360+180, 6, 0, 0);
			DINA H 5 A_Scream();
			DINA H 2 bright A_NoBlocking();
			DANS RSTUVWXYZ 2 bright;
			Stop;
	}
}

// EE Version - 500 HP, Much More AI Powered
class EvilDinahEE : EvilDinah
{
	int musictype;
	string musicplay;
	default
	{
		//$Category RPMonsters
		Health 500; //2000;
		Radius 12; // 20;
		Height 48; // 64;
		Speed 5; // 10
		XScale 1.0; //0.8572;
		YScale 0.95; //0.8572;
		PainChance 128;
		Painchance "Beats", 16;
		Painchance "Fire", 64;
		DamageFactor "Suck", 0;
		DamageFactor "Cricket", 2;
		MeleeRange 104;
		MeleeThreshold 160;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+MISSILEMORE;
		+DONTHARMCLASS;
		SeeSound "dinah/giggle";
		PainSound "evildinah/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dinah/giggle";
		Obituary "%o couldn't stop hitting herself.";
		Tag "Dinah Wyck...?";
	}
	
	void A_JumpPreAttack()
	{
		if (random(1,12) <= random(1,3))
		{
			ThrustThingZ(0, (random(16,24)*randompick(1,1,1,1,1,1,2,2,3)), 0, 0);
			if (random(1,3) <= 1) ThrustThing (angle*256/360+random(0,359), (random(1,3)*randompick(1,1,1,1,1,1,2,2,3)), 0, 0);
		}
	}
	
	void A_UseRandomWeapon()
	{
		state ATKState;
		int atktype = random(1,8);
		if (atktype == 1) ATKState = FindState("CricketAttk");
		if (atktype == 2) ATKState = FindState("BlunderAttk");
		if (atktype == 3) ATKState = FindState("JackAttk");
		if (atktype == 4) ATKState = FindState("EggAttk");
		if (atktype == 5) ATKState = FindState("PikeAttk");
		if (atktype == 6) ATKState = FindState("MusicAttk");
		if (atktype == 7) ATKState = FindState("SuckAttk");
		if (atktype == 8) ATKState = FindState("CandleAttk");
		lastweaponused = atktype;
		if (ATKState != null) 
		{
			A_JumpPreAttack();
			SetState(ATKState);
		}
	}
	
	void A_EvilPain()
	{
		if (EvilDinahEE(self))
		{
			double MaxHealthTrue = (SpawnHealth() + Stamina);
			double HealthRatio = health / MaxHealthTrue;
			// Console.Printf("%.8f", HealthRatio);
			if (health > 0)
			{
				string painsnd = "";
				if (HealthRatio >= 0.751) painsnd = "Dinah/Pain1A";
				else if (HealthRatio >= 0.501 && HealthRatio < 0.750) painsnd = "Dinah/Pain2A";
				else if (HealthRatio >= 0.251 && HealthRatio <= 0.500) painsnd = "Dinah/Pain3A";
				else if (HealthRatio < 0.251) painsnd = "Dinah/Pain4A";
				A_StopSound(CHAN_VOICE);
				A_StartSound(painsnd,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
	}

	void A_JumpUp()
	{
		state JumpState;
		if (dydudebug_monsterspecialai) Console.Printf("PosZ: %.8f, targetPosZ: %.8f [tic: %d]", pos.z, target.pos.z, gametic);
		if (target && (target.pos.z >= pos.z + (random(1,4) * 8.0)))
		{
			if (dydudebug_monsterspecialai) Console.Printf("\c[sapphire]Target +8 Units Higher than it\c- [tic: %d]", gametic);
			if (random(1,12) <= random(1,3)) JumpState = FindState("JumpUp");
		}
		else
		{
			if (dydudebug_monsterspecialai) Console.Printf("\c[fire]Target less than 8 Units Higher than it\c- [tic: %d]", gametic);
			if (random(1,random(18,24)) <= random(1,random(2,4))) JumpState = FindState("JumpUp");
		}
		if (JumpState != null) 
		{
			A_FaceTarget();
			SetState(JumpState);
		}
	}

	void A_CheckPlayerWeapon()
	{
		actor player = players[0].mo;
		if (target && target == player)
		{
			let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
			let PlayerWeapon = Player.Player.ReadyWeapon;
			if (dydudebug_monsterspecialai) Console.Printf("Weapon [A_CheckPlayerWeapon]: %p (%s)", PlayerWeapon, PlayerWeapon.GetClassName());
			if (random(1,256) >= 32)
			{
				state ATKState;
				if (PlayerWeapon is "CricketBat") 
				{
					lastweaponused = 1;
					ATKState = FindState("CricketAttk");
				}
				else if (PlayerWeapon is "BlunderAxe")
				{
					lastweaponused = 2;
					ATKState = FindState("BlunderAttk");
				}
				else if (PlayerWeapon is "AppleJack")
				{
					lastweaponused = 3;
					ATKState = FindState("JackAttk");
				}
				else if (PlayerWeapon is "Scrambler")
				{
					lastweaponused = 4;
					ATKState = FindState("EggAttk");
				}
				else if (PlayerWeapon is "WizardPike") 
				{
					lastweaponused = 5;
					ATKState = FindState("PikeAttk");
				}
				else if (PlayerWeapon is "Grimophone")
				{
					lastweaponused = 6;
					ATKState = FindState("MusicAttk");
				}
				else if (PlayerWeapon is "SuperVac")
				{
					lastweaponused = 7;
					ATKState = FindState("SuckAttk");
				}
				else if (PlayerWeapon is "FosnianCandle")
				{
					lastweaponused = 8;
					ATKState = FindState("CandleAttk");
				}
				else 
				{
					A_UseRandomWeapon();
					return;
				}
				if (ATKState != null)
				{
					A_JumpPreAttack();
					SetState(ATKState);
				}
			}
		}
		else
		{
			A_UseRandomWeapon();
			return;
		}
	}
	
	void A_JumpChase(int chaseinterval = 3, int jumpchasemaxtimer = 4)
	{
		chasetimer++;
		if (chasetimer >= chaseinterval)
		{
			chasetimer = 0;
			jumpchasetimer++;
			if (jumpchasetimer >= jumpchasemaxtimer) A_EEChase("Melee","Missile");
			else A_EEChase(null,null);
			ThrustThing(angle*256/360, (random(3,6) * 0.75), 0, 0);
		}
		else
		{
			ThrustThing(angle*256/360, random(2,3), 0, 0);
			A_FaceTarget();
		}
	}
	
	void A_EDTauntAtk()
	{
		int voiceroll = random(1,7);
		string voiceplay;
		if (!tauntcooldown)
		{
			if (voiceroll == 1) voiceplay = "dinah/ulikethis";
			if (voiceroll == 2) voiceplay = "dinah/howsthis";
			if (voiceroll == 3) voiceplay = "dinah/playtimeisover";
			if (voiceroll == 4) voiceplay = "dinah/thiswillendit";
			if (voiceroll == 5) voiceplay = "dinah/thiswillhurt";
			if (voiceroll == 6) voiceplay = "dinah/yourmine";
			if (voiceroll == 7) voiceplay = "dinah/NoEscape";
			A_StopSound(CHAN_VOICE);
			A_StartSound(voiceplay,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			tauntcooldown = (frandom(2.25,3.0) * TICRATE);
		}
	}
	
	void A_KillTaunt()
	{
		if (dydudebug_monsterspecialai) Console.Printf("A_KillTaunt");
		if (!killtauntcooldown)
		{
			double maskpitch = 1.00;
			string voicenm;
			double voicevol = frandom(1.25,1.75);
			if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
			int randvoice = random(1,17);
			if (randvoice == 1) voicenm = "Dinah/didthathurt";
			if (randvoice == 2) voicenm = "Dinah/ithinknot";
			if (randvoice == 3) voicenm = "Dinah/nownow";
			if (randvoice == 4) voicenm = "Dinah/thatleaveamark";
			if (randvoice == 5) voicenm = "Dinah/howsavage";
			if (randvoice == 6) voicenm = "Dinah/Gotcha";
			if (randvoice == 7) voicenm = "Dinah/IWinG";
			if (randvoice == 8) voicenm = "Dinah/BitOfALetdown";
			if (randvoice == 9) voicenm = "Dinah/NahAhAh";
			if (randvoice == 10) voicenm = "Dinah/OverSoSoon";
			if (randvoice == 11) voicenm = "Dinah/HowRude";
			if (randvoice == 12) voicenm = "dinah/OhWell";
			if (randvoice == 13) voicenm = "dinah/ThatsAShame";
			if (randvoice == 14) voicenm = "dinah/OhMy";
			if (randvoice == 15) voicenm = "dinah/YourMine";
			if (randvoice == 16) voicenm = "dinah/TakeCareT";
			if (randvoice == 17) voicenm = "dinah/NoEscape";
			A_StopSound(CHAN_VOICE);
			A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,1.0);
			killtauntcooldown = (frandom(2.25,3.0) * TICRATE);
		}
	}
	
	void A_CandleShotMode(int type = 0)
	{
		int prevcandleshottype = candleshottype;
		if (type == 0 && random(1,8) <= random(6,7)) candleshottype = random(0,2); // Init
		if (type >= 1) // Refire
		{
			if (candleshottype == 2)
			{
				if (random(1,12) <= randompick(1,1,1,2)) candleshottype = random(0,2);
			}
			else
			{
				if (random(1,4) <= randompick(1,1,1,2)) candleshottype = random(0,2);
			}
		}

		if (candleshottype != prevcandleshottype)
		{
			A_StopSound(210);
			A_StartSound("weapons/fcandlemode",210,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
		}
	}
	
	void A_EDinalSetBombProp(actor BadCBomb, int level)
	{
		//Console.Printf("angdiff: %.8f, angdiff2: %.8f, pitchdiff: %.8f, pitchdiff2: %.8f", angdiff, angdiff2, pitchdiff, pitchdiff2);
		BadCherryBomb FndBomb;
		if (BadCBomb) 
		{
			FndBomb = BadCherryBomb(BadCBomb);
			if (FndBomb) FndBomb.MudBomb = level;
		}
	}
	
	void A_EDinahBlunderShotAtk()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int spawnheight = 32;
		double angspread;
		double pitchspread;
		A_StartSound("blunderfire2",CHAN_WEAPON);
		
		if (player.CountInv("BlunderShotUpgrade") >= 3)
		{
			if (random(1,4) <= 1)
			{
				angspread = 1.0;
				pitchspread = 1.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 3.0;
				pitchspread = 1.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
			if (random(1,12) <= 1)
			{
				angspread = 1.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 7.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
		}
		else
		if (player.CountInv("BlunderShotUpgrade") >= 2)
		{
			if (random(1,8) <= 1)
			{
				angspread = 1.0;
				pitchspread = 1.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 5.0;
				pitchspread = 1.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
			if (random(1,16) <= 1)
			{
				angspread = 1.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 9.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
		}
		else
		if (player.CountInv("BlunderShotUpgrade") >= 1)
		{
			if (random(1,12) <= 1)
			{
				angspread = 1.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 7.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
		}
		else
		{
			if (random(1,16) <= 1)
			{
				angspread = 1.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
				angspread = 9.0;
				pitchspread = 2.0;
				if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
												 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
			}
		}
		if (player.CountInv("BlunderShotUpgrade") >= 3) 
		{
			angspread = 2.0;
			pitchspread = 2.0;
			if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
											 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		}
		angspread = 3.0;
		pitchspread = 1.0;
		if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
										 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		if (player.CountInv("BlunderShotUpgrade") >= 1) 
		{
			angspread = 4.0;
			pitchspread = 1.0;
			if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
											 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		}
		angspread = 5.0;
		pitchspread = 1.0;
		if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
										 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		if (player.CountInv("BlunderShotUpgrade") >= 1) 
		{
			angspread = 6.0;
			pitchspread = 1.0;
			if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
											 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		}
		angspread = 7.0;
		pitchspread = 1.0;
		if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
										 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		if (player.CountInv("BlunderShotUpgrade") >= 3) 
		{
			angspread = 8.0;
			pitchspread = 1.0;
			if (random(1,2) == 1) A_SpawnProjectile("BadBlundershot",spawnheight,angle:frandom(-angspread,angspread),pitch:frandom(-pitchspread,pitchspread));
											 else A_SpawnProjectile("BadBlundershot",spawnheight,angle:random(-angspread,angspread),pitch:random(-pitchspread,pitchspread));
		}
		
		// Smoke
		if (exex_blunderaxesmoke)
		{
			string smoketype;
			
			int smokechance = random(248,256);
			if (skill <= 0) smokechance = random(254,256);
			if (skill == 1) smokechance = random(252,256);
			if (skill == 2) smokechance = random(248,256);
			if (skill == 3) smokechance = random(240,256);
			if (skill >= 4) smokechance = random(224,256);

			double angvar = frandompick(10.0,12.5,12.5,12.5,15.0,15.0,15.0,15.0,15.0,17.5,17.5,17.5,20.0);
			if (player.CountInv("BlunderShotUpgrade") == 1) 
			{
				angvar *= frandom(1.125,1.25);
				smokechance *= 0.75;
			}
			if (player.CountInv("BlunderShotUpgrade") == 2)
			{
				angvar *= frandom(1.167,1.25);
				smokechance *= 0.45;
			}
			if (player.CountInv("BlunderShotUpgrade") >= 3)
			{
				angvar *= frandom(1.333,1.5);
				smokechance *= 0.1;
			}
			if (random(1,256) <= smokechance)
			{
				if (player.CountInv("BlunderShotUpgrade") >= 1)
				{
					if (player.CountInv("BlunderShotUpgrade") >= 3)
					{
						smoketype = "BlunderSmokeSmallF";
						if (random(1,32) <= 1) smoketype = "BlunderSmokeSmallH";
						A_SpawnProjectile(smoketype,spawnheight,angle:0,pitch:0);
						
						smoketype = "BlunderSmokeSmall";
						if (random(1,32) <= 1) smoketype = "BlunderSmokeSmallD";
						A_SpawnProjectile(smoketype,spawnheight,angle:angvar,pitch:0);
						A_SpawnProjectile(smoketype,spawnheight,angle:-angvar,pitch:0);
						
						if (random(1,2) <= 1)
						{
							if (random(1,2) <= 1)
							{
								smoketype = "BlunderSmokeSmallD";
								if (random(1,8) <= 6) smoketype = "BlunderSmokeSmallF";
								A_SpawnProjectile(smoketype,spawnheight,angle:0,pitch:(angvar*0.5));
								A_SpawnProjectile(smoketype,spawnheight,angle:0,pitch:(-angvar*0.5));
							}

							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 6) 
							{
								smoketype = "BlunderSmokeSmallD";
								if (random(1,8) <= 3) smoketype = "BlunderSmokeSmallF";
							}
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*0.667),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*0.667),pitch:0);

							smoketype = "BlunderSmokeSmall";
							if (random(1,2) <= 1) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:angvar,pitch:(angvar*0.5));
							A_SpawnProjectile(smoketype,spawnheight,angle:-angvar,pitch:(-angvar*0.5));

							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 1) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*1.334),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*1.334),pitch:0);
						}
						else
						{
							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 6) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*0.667),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*0.667),pitch:0);
							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 2) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*1.334),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*1.334),pitch:0);
						}
					}
					else
					{
						smoketype = "BlunderSmokeSmallF";
						if (random(1,32) <= 3) smoketype = "BlunderSmokeSmallH";
						A_SpawnProjectile(smoketype,spawnheight,angle:0,pitch:0);
						
						smoketype = "BlunderSmokeSmall";
						if (random(1,32) <= 3) smoketype = "BlunderSmokeSmallD";
						A_SpawnProjectile(smoketype,spawnheight,angle:angvar,pitch:0);
						A_SpawnProjectile(smoketype,spawnheight,angle:-angvar,pitch:0);

						if (CountInv("BlunderShotUpgrade") >= 1 && random(1,2) <= 1 || CountInv("BlunderShotUpgrade") >= 2)
						{
							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 6) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*0.667),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*0.667),pitch:0);
							smoketype = "BlunderSmokeSmall";
							if (random(1,8) <= 2) smoketype = "BlunderSmokeSmallD";
							A_SpawnProjectile(smoketype,spawnheight,angle:(angvar*1.334),pitch:0);
							A_SpawnProjectile(smoketype,spawnheight,angle:(-angvar*1.334),pitch:0);
						}
					}
				}
				else
				{
					smoketype = "BlunderSmokeSmallF";
					if (random(1,16) <= 5) smoketype = "BlunderSmokeSmallH";
					A_SpawnProjectile(smoketype,spawnheight,angle:0,pitch:0);
					
					smoketype = "BlunderSmokeSmall";
					if (random(1,16) <= 3) smoketype = "BlunderSmokeSmallD";
					A_SpawnProjectile(smoketype,spawnheight,angle:angvar,pitch:0);
					A_SpawnProjectile(smoketype,spawnheight,angle:-angvar,pitch:0);
				}
			}
		}

		// Recoil
		double baserecoil = frandom(4.8,7.2);
		baserecoil *= frandom(1.625,1.875);
		double RecoilReduceRate = 1.00;
		RecoilReduceRate = (1.00 - (CountInv("MonsterLevel") * 0.00875));
		if (RecoilReduceRate <= 0.125) RecoilReduceRate = 0.125;
		baserecoil *= RecoilReduceRate;
		A_Recoil(baserecoil);
	}
	
	override void PostBeginPlay()
	{
		DDOrigBoss.PostBeginPlay();
		lasthealth = health;
	}
	
	override void Tick()
	{
		DDOrigBoss.Tick();
		if (tauntcooldown) tauntcooldown--;
		if (killtauntcooldown) killtauntcooldown--;
		if (health < lasthealth) A_EvilPain();
		lasthealth = health;
		
		if (target)
		{
			if (targlasthealth > 0 && target.health <= 0)
			{
				if (dydudebug_monsterspecialai) Console.Printf("EDinah Has Killed Her Target");
				A_KillTaunt();
			}
			targlasthealth = target.health;
			if (dydudebug_monsterspecialai) Console.Printf("(%s) target.health: %d, targlasthealth: %d", target.GetClassName(), target.health, targlasthealth);
		}
		else targlasthealth = 0;
		
		// Allow her Pike to emit dynlights when "equipped"
		if (health > 0)
		{
			//Console.Printf("Attempt - lastweaponused: %d, exex_glowingpike: %d", lastweaponused, exex_glowingpike);
			if (lastweaponused == 5 && exex_glowingpike)
			{
				//Console.Printf("Found");
				numpikeglows = 0;
				ThinkerIterator GlowAttach = ThinkerIterator.Create("PikeGlowAttachED");
				Actor mo;
				while (mo = PikeGlowAttachED(GlowAttach.Next()))
				{
					//Console.Printf("Attach");
					numpikeglows++;
					if (numpikeglows) break;
				}
				if (!numpikeglows)
				{
					bool success;
					actor PGAED;
					[success, PGAED] = A_SpawnItemEx("PikeGlowAttachED",self.pos.x,self.pos.y,self.pos.z,0,0,0,0,SXF_NOCHECKPOSITION);
					if (success && PGAED)
					{
						numpikeglows++;
						PGAED.target = self;
						//Console.Printf("Add PGA-ED");
					}
					else 
					{
						//Console.Printf("PGA-ED Failed");
					}
				}
			}
			else
			{
				if (numpikeglows)
				{
					//Console.Printf("Check 1");
					ThinkerIterator GlowAttach = ThinkerIterator.Create("PikeGlowAttachED");
					Actor mo;
					while (mo = PikeGlowAttachED(GlowAttach.Next()))
					{
						//Console.Printf("Destroy");
						mo.Destroy();
						numpikeglows--;
					}
					if (numpikeglows) numpikeglows = 0;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			EDIN A 7 A_Look();
			EDIN B 5 A_Look();
			EDIN C 7 A_Look();
			EDIN D 5 A_Look();
			Loop;
		Inactive:
			EDIN A 7;
			EDIN B 5;
			EDIN C 7;
			EDIN D 5;
			Loop;
		Active:
			EDIN A 0;
			Goto Spawn;
		See:
			DINA BBBBCCCCDDDDEEEEBBBBCCCCDDDDEEEE 1 
			{
				A_StopSound(65);
				jumptimer++;
				chasetimer++;
				if (chasetimer >= random(2,3))
				{
					chasetimer = 0;
					A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else
				{
					A_EEChase(null,null,0,1,3,1,1);
				}
				if (jumptimer >= random(16,24))
				{
					jumptimer = 0;
					A_JumpUp();
				}
			}
			DINA BBCCDDEE 2 
			{
				chasetimer++;
				if (chasetimer >= random(2,3))
				{
					chasetimer = 0;
					A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			DINA B 0 
			{
				if (target && 
						Distance3D(target) <= (random(1,4) * 1024) &&
						((bFRIENDLY && !target.bFRIENDLY) || 
						 (!bFRIENDLY && target.bFRIENDLY)))
				{
					if (random(1,8) <= 1) return resolvestate("Missile");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DINA E 0; // A_DynamicMusic();
			Loop;
		JumpUp:
			DINA B 0 
			{
				A_StopSound(65);
				A_DynamicMusic();
				A_StartSound("JumpSND",CHAN_VOICE);
				A_FaceTarget();
			}
			DINA B 2 
			{
				ThrustThing (angle*256/360, 9, 0, 0);
				ThrustThingz (0, 27, 0, 0);
				A_JumpChase(random(2,3),4);
			}
			DINA BBBCCCCDDDDEEEE 2 
			{
				A_JumpChase(random(2,3),4);
			}
			Goto See;
		Missile:
			DINA F 0 
			{
				A_StopSound(65);
				A_FaceTarget();
				spreadtype = random(1,4);
			}
			DINA F 0 
			{
				A_StopSound(65);
				user_shotsfired = 0;
				bFORCERADIUSDMG = false;
				if (random(1,256) <= 32) A_UseRandomWeapon();
				else A_CheckPlayerWeapon();
			}
			DINA F 8 
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA G 8 
			{
				if (Distance3D(target) <= 384)
				{
					if (random(1,16) <= random(1,3)) A_SpawnProjectile("BadBrocketShot",40);
					else if (random(1,8) <= random(1,3)) A_SpawnProjectile("SpinnerShotEvil",40);
					else
					{
						pitchdiff = frandom(-2.5,2.5);
						pitchdiff2 = 0;
						A_FaceTarget();
						angdiff = abs(frandom(4.5,9.0));
						angdiff2 = 0;
						if (spreadtype <= 1) angdiff2 = 0.0;
						if (spreadtype == 2) angdiff2 = frandom(4.5,9.0);
						if (spreadtype == 3) angdiff2 = frandom(-4.5,-9.0);
						if (spreadtype >= 4) angdiff2 = frandom(-9.0,9.0);
						actor BadCBomb;
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(-angdiff+angdiff2),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,(pitchdiff+pitchdiff2));
						A_EDinalSetBombProp(BadCBomb,2);
					}
				}
				else
				{
					if (random(1,16) <= random(1,3)) A_SpawnProjectile("BadBrocketShot",40);
					else A_SpawnProjectile("SpinnerShotEvil",40);
				}
				A_DynamicMusic();
			}
			DINA A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		CricketAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA F 4 
			{
				A_StartSound("malletswing",CHAN_WEAPON);
				A_DynamicMusic();
			}
			DINA F 4 
			{
				A_DynamicMusic();
			}
			DINA G 8 
			{
				A_DynamicMusic();
				A_StartSound("croquet/ballfire",CHAN_WEAPON);
				
				double izvel = random(0,16) * 0.625;
				int angtype = random(1,3);
				if (angtype == 1) 
				{
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					
					A_SetAngle(angle+11.25);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle-11.25);
				}
				else 
				if (angtype == 2) 
				{
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					
					A_SetAngle(angle-11.25);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle+11.25);
				}
				else 
				if (angtype == 3) 
				{
					A_SetAngle(angle-5.625);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle+5.625);
					
					A_SetAngle(angle+5.625);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle-5.625);
				}
			}
			DINA A 4 
			{
				if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
				else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
			}
			Goto See;
		BlunderAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWBL A 6
			{
				A_DynamicMusic();
			}
			DWBL B 9 
			{
				A_DynamicMusic();
				A_EDinahBlunderShotAtk();
			}
			DWBL A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		JackAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWAJ A 4 
			{
				A_DynamicMusic();
				A_StartSound("malletswing",CHAN_WEAPON);
			}
			DWAJ A 4
			{
				A_DynamicMusic();
			}
			DWAJ B 8 
			{
				A_DynamicMusic();
				if (random(1,2) <= 1) A_FatAttack1("RealBadJackShot");
				else A_FatAttack2("RealBadJackShot");
			}
			DWAJ A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		EggAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWEG A 8 
			{
				//A_StartSound("misc/p_pkup",CHAN_VOICE);
				A_DynamicMusic();
			}
			DWEG A 4 
			{
				A_Facetarget();
				A_DynamicMusic();
			}
			DWEG B 8 
			{
				A_DynamicMusic();
				A_StartSound("PanClang",CHAN_WEAPON);
				A_ThrowGrenade("EvilEggShot",2,24,random(6,12),0);
			}
			DWEG A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		PikeAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWPK B 0 
			{
				A_StartSound("Handmother/Zap",CHAN_WEAPON);
				A_DynamicMusic();
			}
			DWPK BB 3 bright;
			DWPK B 3 bright 
			{
				A_SpawnProjectile("EvilMiniZapshot",40);
				A_DynamicMusic();
			}
			DWPK B 3 bright;
			DWPK B 3 bright
			{
				A_SpawnProjectile("EvilMiniZapshot",40,-48);
				A_SpawnProjectile("EvilMiniZapshot",40,48);
				A_DynamicMusic();
			}
			DWPK B 3 bright;
			DWPK B 3 bright 
			{
				A_SpawnProjectile("EvilZapshot",40);
				A_DynamicMusic();
			}
			DWPK A 4 bright;
			DWPK A 2 bright
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		MusicAttk:
			DINA F 0
			{
				int user_type = random(1,16);
				actor player = players[0].mo;
				if (player.CountInv("GrimophoneUpgrade") <= 0)
				{
					user_type = random(1,16);
					if (user_type >= 1 && user_type <= 14) musictype = 0;
					else if (user_type == 15) musictype = 1;
					else if (user_type == 16) musictype = 2;
				}
				if (player.CountInv("GrimophoneUpgrade") == 1)
				{
					user_type = random(1,14);
					if (user_type >= 1 && user_type <= 12) musictype = 0;
					else if (user_type == 13) musictype = 1;
					else if (user_type == 14) musictype = 2;
				}
				if (player.CountInv("GrimophoneUpgrade") == 2)
				{
					user_type = random(1,13);
					if (user_type >= 1 && user_type <= 11) musictype = 0;
					else if (user_type == 12) musictype = 1;
					else if (user_type == 13) musictype = 2;
				}
				if (player.CountInv("GrimophoneUpgrade") >= 3)
				{
					user_type = random(1,11);
					if (user_type >= 1 && user_type <= 9) musictype = 0;
					else if (user_type == 10) musictype = 1;
					else if (user_type == 11) musictype = 2;
				}
				
				if (musictype <= 0) musicplay = "grimophone/jam";
				if (musictype == 1) musicplay = "sa/rickroll";
				if (musictype >= 2) musicplay = "sa/vuvuzela";

				user_shotsfiredmax = (12 + (skill * 3));
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
				
				int dist3d = 1024;
				if (player.CountInv("GrimophoneUpgrade")) 
				{
					dist3d *= (1.0 + (player.CountInv("GrimophoneUpgrade") * 0.667));
				}
				int altchance = (1 + (CountInv("MonsterLevel") * 0.125));
				if (random(1,5) <= 1)
				{
					if (random(1,5) <= 1)
					{
						if (altchance >= 10) altchance = 10;
					}
					else
					{
						if (altchance >= 9) altchance = 9;
					}
				}
				else
				{
					if (altchance >= 8) altchance = 8;
				}
				if (random(1,16) <= (1 + altchance) && Distance3D(target) <= dist3d) return resolvestate("MusicAttkAlt");
				return resolvestate(null);
			}
		MusicAttkNorm:
			DWGP A 8
			{
				shotangerror = (random(1,4) * 11.25);
				A_StartSound(musicplay,65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				actor BombShots;
				BombShots = A_SpawnProjectile("badrecordshot",40,0,shotangerror);
				if (BombShots)
				{
					if (musictype == 1) { BombShots.stamina = 3; }
					if (musictype == 2) { BombShots.stamina = 5; }
				}

				A_StartSound(musicplay,65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
				user_shotsfired++;
			}
			DWGP A 5
			{
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				actor BombShots;
				BombShots = A_SpawnProjectile("badrecordshot",40,0,shotangerror);
				if (BombShots)
				{
					if (musictype == 1) { BombShots.stamina = 3; }
					if (musictype == 2) { BombShots.stamina = 5; }
				}

				A_StartSound(musicplay,65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
				user_shotsfired++;
			}
			DWGP A 5
			{
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				actor BombShots;
				BombShots = A_SpawnProjectile("badrecordshot",40,0,shotangerror);
				if (BombShots)
				{
					if (musictype == 1) { BombShots.stamina = 3; }
					if (musictype == 2) { BombShots.stamina = 5; }
				}

				A_StartSound(musicplay,65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
				user_shotsfired++;
			}
			DWGP A 5 
			{
				if (user_shotsfired >= (12 + (skill * 3)))
				{
					A_StopSound(65);
					user_shotsfired = 0;
					bFORCERADIUSDMG = false;
					return resolvestate("See");
				}
				else
				{
					A_DynamicMusic();
					A_CPosRefire();
				}
				return resolvestate(null);
			}
			Goto MusicAttkNorm+1;
		MusicAttkAlt:
			DWGP A 0
			{
				bFORCERADIUSDMG = true;
				int user_type = random(1,5);
				if (user_type == 1) user_shotsfiredmax = (24 + (skill * 3));
				if (user_type == 2) user_shotsfiredmax = (12 + (skill * 1.5));
				if (user_type == 3) user_shotsfiredmax = (18 + (skill * 2.25));
				if (user_type == 4) user_shotsfiredmax = (6 + (skill * 0.75));
				if (user_type == 5) user_shotsfiredmax = (30 + (skill * 3.75));
			}
			DWGP AAAA 2 
			{
				bFORCERADIUSDMG = true;
				actor player = players[0].mo;
				int dmg = randompick(2,3,4);
				if (player.CountInv("GrimophoneUpgrade")) dmg *= (1.0 + (player.CountInv("GrimophoneUpgrade") * frandompick(0.667,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.334)));
				int dist = 1024;
				int dist3d = 1024;
				if (player.CountInv("GrimophoneUpgrade")) 
				{
					dist *= (1.0 + (player.CountInv("GrimophoneUpgrade") * frandompick(0.334,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.667)));
					dist3d *= (1.0 + (player.CountInv("GrimophoneUpgrade") * 0.667));
				}
				int fulldist = (dist * frandompick(0.375,0.5,0.625));
				dmg *= (1.0 + (CountInv("MonsterLevel") * 0.01));
				dist *= (1.0 + (CountInv("MonsterLevel") * 0.01));
				fulldist *= (1.0 + (CountInv("MonsterLevel") * 0.01));
				int altflags = XF_NOTMISSILE|XF_NOSPLASH;
				int altflags2 = RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE;
				if (Distance3D(target) >= dist3d && random(1,8) <= randompick(2,3,3,3,3,4,5,5,5,5,6))
				{
					A_StopSound(65);
					user_shotsfired = 0;
					bFORCERADIUSDMG = false;
					return resolvestate("See");
				}
				else
				{
					A_Explode(dmg,dist,altflags,1,fulldist,0,0,"","Beats");
					A_RadiusThrust((dmg*-1),dist,altflags2,(fulldist*-1));

					A_StartSound(musicplay,65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
					A_DynamicMusic();
					user_shotsfired++;
				}
				return resolvestate(null);
			}
			DWGP A 0
			{
				if (user_shotsfired >= user_shotsfiredmax)
				{
					A_StopSound(65);
					user_shotsfired = 0;
					bFORCERADIUSDMG = false;
					return resolvestate("See");
				}
				else
				{
					A_DynamicMusic();
					A_CPosRefire();
				}
				return resolvestate(null);
			}
			Goto MusicAttkAlt+1;
		SuckAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
				A_DynamicMusic();
			}
			DWSV A 8 A_StartSound("misc/p_pkup",CHAN_VOICE);
			DWSV B 12 A_SpawnProjectile("badvacshot",40,0);
			DWSV A 7
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto See;
		CandleAttk:
			DWFC A 10 
			{
				int prevcandleshottype = candleshottype;
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
				
				A_CandleShotMode(0);
				A_DynamicMusic();
			}
			DWBL BBB 3 
			{
				user_shotsfired++;
				A_StartSound("weapons/fcandlepopping",random(511,520),CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("weapons/fcandlefire",CHAN_WEAPON);
				double xyspread;
				double zspread;
				if (Distance3D(target) <= 1024)
				{
					xyspread = 0.25;
					zspread = 0.25;
					A_Recoil(0.25);
				}
				else
				{
					xyspread = 2.5;
					zspread = 2.5;
					A_SetTics(random(1,2));
					A_Recoil(0.625);
				}
				
				if (candleshottype <= 0) A_SpawnProjectile("BadCandleShot",40,0,frandom(-xyspread,0.25),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
				if (candleshottype == 1) A_SpawnProjectile("BadCandleShotIcy",40,0,frandom(-xyspread,0.25),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
				if (candleshottype >= 2)
				{
					if (candleshotalttype % 2) A_SpawnProjectile("BadCandleShot",40,0,frandom(-xyspread,xyspread),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
																else A_SpawnProjectile("BadCandleShotIcy",40,0,frandom(-xyspread,xyspread),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
					candleshotalttype++;
					candleshotalttype = candleshotalttype % 54;
				}
				A_DynamicMusic();
			}
			DINA A 2
			{
				if (user_shotsfired >= (24 + (skill * 6)))
				{
					A_StopSound(65);
					user_shotsfired = 0;
					bFORCERADIUSDMG = false;
					return resolvestate("See");
				}
				else
				{
					if (Distance3D(target) > 1024) A_SetTics(randompick(0,1,1,1,1,2));
					A_CandleShotMode(1);
					A_DynamicMusic();
					A_CPosRefire();
				}
				return resolvestate(null);
			}
			DINA A 2
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_EEChase("Missile","Melee",CHF_FASTCHASE,1,3,1,1);
					else A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
				}
			}
			Goto CandleAttk+1;
		Melee:
			DINA F 0 
			{
				if (target)
				{
					if (Distance3D(target) <= 56)
					{
						if (random(1,256) <= 112)
						{
							A_DynamicMusic();
							A_FaceTarget();
							return resolvestate(null);
						}
						else
						{
							A_FaceTarget();
							A_DynamicMusic();
							return resolvestate("Kick");
						}
					}
					else
					{
						if (random(1,40) <= random(28,36)) 
						{
							A_DynamicMusic();
							return resolvestate("Kick");
						}
						else return resolvestate("See");
					}
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA F 2
			{
				A_Facetarget();
				A_DynamicMusic();
			}
			DINA FF 2 
			{
				A_Recoil(-2);
				A_DynamicMusic();
			}
			DINA F 2 
			{
				ThrustThingz (0, 27, 0, 0);
				ThrustThing (angle*256/360, 18, 0, 0);
				A_DynamicMusic();
				
			}
			DINA G 2
			{
				A_DynamicMusic();
			}
			DINA G 4 
			{
				int dmg = A_CalcDamageFormula2(random(25,40),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				A_CustomMeleeAttack (dmg, "mallethit", "malletswing", "", 1);
				A_DynamicMusic();
			}
			Goto See;
		Kick:
			DINA AAAAA 1 A_Facetarget();
			DINK A 0 A_DynamicMusic();
			DINK A 1 // [6]
			{
				A_DynamicMusic();
			}
			DINK A 1 // [7]
			{
				A_DynamicMusic();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					if (random(1,4) <= 1) A_StartSound("fistswingheavy0",CHAN_BODY);
													 else A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_BODY);
				}
			}
			DINK A 1 // [8]
			{
				A_DynamicMusic();
				int basechance = 128;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(1.5,1.5,1.5,1.625,1.625,1.75);
				if (random(1,256) <= basechance && waterlevel <= 2)
				{
					double maskpitch = 1.00;
					//if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,13);
					if (randvoice == 1) voicenm = "dinah/Jump";
					if (randvoice >= 2 && randvoice <= 4) voicenm = "dinah/kick1";
					if (randvoice >= 5 && randvoice <= 6) voicenm = "dinah/kiai4";
					if (randvoice >= 7 && randvoice <= 8) voicenm = "dinah/kiai5";
					if (randvoice == 9) voicenm = "dinah/kiai6";
					if (randvoice == 10) voicenm = "dinah/kiai7";
					if (randvoice == 11) voicenm = "dinah/kiai8";
					if (randvoice == 12) voicenm = "dinah/kiai9";
					if (randvoice == 13) voicenm = "dinah/kiai10";
					if (exex_dinahextravoices)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			DINK AA 1
			{
				A_DynamicMusic();
			}
			DINK BB 1
			{
				A_DynamicMusic();
			}
			DINK B 1
			{
				A_DynamicMusic();
				int TruePlayerLevel = CountInv("MonsterLevel");
				int BerserkAdd;
				double recl = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recl = recl * (random(7,17) + BerserkAdd);
				double recoilmulti = (1.0 - (TruePlayerLevel * 0.0234375));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recl *= recoilmulti;
				A_Recoil(recl);
				A_CustomBulletAttack(0,0,1,random(28,52),"BadKickPuff", 104);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "EvilKickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * 0.06))) mk = "EvilKickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
			}
			DINK BB 1
			{
				A_DynamicMusic();
			}
			DINK AAAAA 1
			{
				A_DynamicMusic();
			}
			DINK A 0
			{
				if (target)
				{
					if (Distance3D(target) <= 104)
					{
						if (random(1,256) <= 224) 
						{
							A_DynamicMusic();
							return resolvestate("Kick");
						}
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DINA AAAAA 1;
			DINA B 2 
			{
				double backthrust = frandom(16,20);
				ThrustThingZ(0, (backthrust*1.5), 0, 0);
				int dodgetype = random(1,3);
				double dodgeang;
				if (dodgetype <= 1) dodgeang = angle*256/360+128;
				if (dodgetype == 2) dodgeang = angle*256/360+64;
				if (dodgetype >= 3) dodgeang = angle*256/360+192;
				ThrustThing(dodgeang, (backthrust*frandom(0.334,0.5)), 0, 0);
			}
			DINA C 2;
			DINA DE 2;
			Goto See;
		Pain:
			DINA H 2 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			DINA H 6 
			{
				if (random(1,16) <= 13)
				{
					ThrustThingZ(0, 24, 0, 0);
					ThrustThing (angle*256/360+random(96,160), random(6,9), 0, 0);
					A_EEPain();
				}
			}
			DINA A 6 A_Jump(128,"Missile");
			Goto See;
		Death:
			DINA H 0 Bright
			{
				A_StopSound(CHAN_VOICE);
				A_StartSound("EDinal/DScream",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			DINA HHHHHHHH 4 Bright
			{
				A_StartSound("weapons/cherryboom",CHAN_BODY);
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DINA H 3 A_FaceTarget();
			DINA H 5 
			{
				ThrustThingZ(0, random(16,24), 0, 0);
				ThrustThing(angle*256/360+180, (random(2,3) * random(2,4)), 0, 0);
				A_Scream();
			}
			DINA H 2 bright A_NoBlocking();
			DANS RSTUVWXYZ 2 bright;
			Stop;
		}
}

class BadKickPuff : EEPuff
{
	default
	{
		Tag "Kick";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class SpinnerShotEvil : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt);
		DamageType "Spinner";
		+SEEKERMISSILE
		//+NOEXTREMEDEATH
		Projectile;
		renderstyle "Add";
		SeeSound "weapons/spinnerfire";
		DeathSound "";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		finaldamagedealt = (5 * random(1,8));
	}

	States
	{
		Spawn:
			SPNR A 0 Bright NoDelay
			{
				A_SpawnItemEx("Firetrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
			}
			SPNR AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNR C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 2 Bright 
			{
				A_Explode(128,XF_HURTSOURCE,true,32);
				A_StartSound("weapons/cherryboom",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE BCDE 2 Bright;
			Stop;
	}
}

class BadBlunderSmokeSmall : SingleDamageRipper
{
	default
	{
		Height 8;
		Radius 4;
		DamageFunction (finaldamagedealt);
		Speed 5;
		Projectile;
		+STRIFEDAMAGE
		+NOBLOCKMAP
		+NOGRAVITY
		+RANDOMIZE
		RenderStyle "Translucent";
		Alpha 0.3;
		Scale 0.5;
		ProjectileKickback 0; // 34
	}
	
	override void PostBeginPlay()
	{
		basealpha = alpha;
		super.PostBeginPlay();
		finaldamagedealt = 1 * random(1,4);
	}
	
	States
	{
		Spawn:
			LSMK A 1 Bright NoDelay
			{
				A_SetRenderStyle((alpha*exex_bsmokealphamul),STYLE_Translucent);
			}
			Goto Death;
		Death:
			LSMK ABCDEFGH 4 Bright A_FadeOut(basealpha*frandom(0.1,0.125));
			Stop;
	}
}

class BadBlunderSmokeSmallF : BadBlunderSmokeSmall
{
	default
	{
		Speed 10;
		Alpha 0.6;
		ProjectileKickback 0; // 34
	}
}

class RealBadCroquetBall : EEProjectile
{
	default
	{
		Tag "Cricket Ball";
		Radius 8;
		Height 12;
		Speed 40;
		DamageFunction (finaldamagedealt); // 3
		DamageType "Cricket";
		Projectile;
		+RANDOMIZE
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		+USEBOUNCESTATE
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
		BounceType "Hexen";
		BounceCount 0;
		BounceFactor 0.0;
		WallBounceFactor 0.0;
		ProjectileKickback 50; // 50
	}

	int minbouncelvl;
	double bouncelvlfactor;
	int nogravtimer;

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if (target)
		{
			minbouncelvl = 8;
			if (IPAttack) minbouncelvl *= frandompick(0.20,0.25,0.334);
			bouncelvlfactor = (1.0 / (minbouncelvl * 1.5));
			if (IPAttack) bouncelvlfactor = (1.0 / (minbouncelvl * frandompick(1.25,1.375,1.5)));

			int TruePlayerLevel = target.CountInv("MonsterLevel");
			if (TruePlayerLevel >= minbouncelvl)
			{
				double extratimes = ((TruePlayerLevel - minbouncelvl) * bouncelvlfactor);
				if (dydudebug_attackstuff) Console.Printf("[%s] extratimes: %.8f", GetClassName(), extratimes);
				if (extratimes < 0) extratimes = 0;
				bSKYEXPLODE = true;
				bBOUNCEONWALLS = true;
				bBOUNCEONFLOORS = true;
				bBOUNCEONCEILINGS = true;
				bCANBOUNCEWATER = true;
				bDONTBOUNCEONSHOOTABLES = true;
				bALLOWBOUNCEONACTORS = true;
				if (IPAttack) BounceCount = 4 + extratimes;
				else BounceCount = 2 + extratimes;
				BounceFactor = 1.00;
				WallBounceFactor = 1.00;
			}
			else
			{
				if (IPAttack)
				{
					bSKYEXPLODE = true;
					bBOUNCEONWALLS = true;
					bBOUNCEONFLOORS = true;
					bBOUNCEONCEILINGS = true;
					bCANBOUNCEWATER = true;
					bDONTBOUNCEONSHOOTABLES = true;
					bALLOWBOUNCEONACTORS = true;
					BounceCount = 2;
					BounceFactor = 1.00;
					WallBounceFactor = 1.00;
				}
				else
				{
					bBOUNCEONWALLS = false;
					bBOUNCEONFLOORS = false;
					bBOUNCEONCEILINGS = false;
					bCANBOUNCEWATER = false;
					bDONTBOUNCEONSHOOTABLES = true;
					bALLOWBOUNCEONACTORS = false;
					BounceCount = 0;
					BounceFactor = 0;
					WallBounceFactor = 0;
				}
			}
			if (dydudebug_attackstuff) Console.Printf("[%s] BounceCount: %d", GetClassName(), BounceCount);
		}
	}
	
	States
	{
		Spawn:
			CBAL AAABBB 1 NoDelay
			{
				if (bNOGRAVITY && nogravtimer) 
				{
					nogravtimer--;
					if (nogravtimer <= 0) bNOGRAVITY = false;
				}
				else
				{
					nogravtimer = 0;
				}
				if (dydudebug_projectilecollisions) Console.Printf("State: Spawn [%d], NoGrav: %d, NGTimer: %d", frame, bNOGRAVITY, nogravtimer);
			}
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Death [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Crash [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: XDeath [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			stop;
		Bounce:
			TNT1 A 0
			{
				if (vel.x > abs(1.0) || vel.y > abs(1.0) || vel.z > abs(1.0))
				{
					A_StartSound("croquet/ballhit",CHAN_WEAPON,CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(1.2,1.4));
				}
				else
				{
					if (random(1,4) <= 1) A_StartSound("croquet/ballhit",CHAN_WEAPON,CHANF_DEFAULT,frandom(0.4,0.8),ATTN_NORM,frandom(1.4,1.8));
				}
				double scalevel = frandompick(0.8125,0.875,0.9375);
				if (random(1,4) <= random(2,3)) scalevel = 0.75;
				A_ScaleVelocity(scalevel);
				bNOGRAVITY = false;
				nogravtimer = (random(3,5) * randompick(1,2,2,2,2,2,3));
				if (dydudebug_projectilecollisions) Console.Printf("State: Bounce [%d], NoGrav: %d, VelMul: %.3f", frame, bNOGRAVITY, scalevel);
			}
			goto Spawn;
	}
}

class RealBadJackShot : EEProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 50; // 50
		DamageFunction (finaldamagedealt);
		DamageType "Bonk";
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
		ProjectileKickback 30; // 60
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			
			double decenthealthfactor = 0.03125;
			double lowhealthfactor = 0.09375;
			double crisishealthfactor = 0.4375;
			
			finaldamagedealt = (3 * random(1,8));
			if (TruePlayerLevel >= exex_jackcrisislvlrequirement && exex_jackcrisislvlrequirement > 0)
			{
				decenthealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 0.5));
				lowhealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 0.667));
				crisishealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 1.0));
				if (target.CountInv("DecentHealth")) finaldamagedealt *= (1.0 + decenthealthfactor);
				if (target.CountInv("LowHealth")) finaldamagedealt *= (1.0 + lowhealthfactor);
				if (target.CountInv("CriticalHealth")) finaldamagedealt *= (1.0 + crisishealthfactor);
				if (dydudebug_rangedmg) Console.Printf("decenthealthfactor: %.2f, lowhealthfactor: %.2f, crisishealthfactor: %.2f", decenthealthfactor, lowhealthfactor, crisishealthfactor);
			}
		}
		
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	void A_JackShotIPPattern()
	{
		double ca = cos((angle-90)); // X
		double sa = sin((angle-90)); // Y

		double basemove = basespreadspeed;
		if (IPAttack)
		{
			if (zspreadtime != 0)
			{
				if (zspreadtime > 0) // Goes Up
				{
					zspreadtime -= 1;
					AddZ(basemove,true);
				}
				else
				if (zspreadtime < 0) // Goes Down
				{
					zspreadtime += 1; 
					AddZ(-basemove,true);
				}
			}
			Vector2 dpos = (pos.x, pos.y);
			if (xyspreadtime != 0)
			{
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[sapphire](pre) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[sapphire](pre) projid: %d\c-, xpos: %.8f, ypos: %.8f [tic: %d]", ipprojid, pos.x, pos.y, pos.z, gametic);
				}
				if (xyspreadtime > 0) // Goes Left
				{ 
					xyspreadtime -= 1;
					dpos = ((pos.x + (basemove * ca)), (pos.y + (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				else
				if (xyspreadtime < 0) // Goes Right
				{
					xyspreadtime += 1;
					dpos = ((pos.x - (basemove * ca)), (pos.y - (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[fire](post) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[fire](post) projid: %d\c-, xpos: %.8f, ypos: %.8f, zpos: %.8f, xyspreadtime: %d [tic: %d]", ipprojid, dpos.x, dpos.y, pos.z, xyspreadtime, gametic);
				}
			}
		}
	}

	void A_JackShotShieldSetupEnemy(actor BombShots, double scaling = 0.0125)
	{
		if (BombShots)
		{
			int oldrad = BombShots.radius;
			int oldhei = BombShots.height;
			double scalebase = 1.0;
			BombShots.A_SetSize((BombShots.radius * scalebase),(BombShots.height * scalebase));
			//Console.Printf("rad: %d [%d], hei: %d [%d]", BombShots.radius, oldrad, BombShots.height, oldhei);
		}
	}

	States
	{
		Spawn:
			ABAL AABB 1
			{
				A_JackShotIPPattern();
				
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (!(ddafd_disableaggroappleblock && (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))))
				{
					actor BombShots;
					bool success;
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
				}
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class BadCandleShot : EEFastProjectile
{
	default
	{
		Tag "Fosnian Candle Burst [Fiery]";
		Radius 2;
		Height 2;
		Speed 60;
		Damage 6;
		Scale 0.5;
		DamageType "Fire";
		RenderStyle "Add";
		PROJECTILE;
		+RANDOMIZE;
		+BLOODSPLATTER;
		+DONTREFLECT;
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		if (random(1,2) <= 1) bFORCERADIUSDMG = true;
	}
	
	states
	{
		Spawn:
			TNT1 A 1 bright 
			{
				A_SpawnItemEx("CandleTrail",0,0,0, 0,0,0, 0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION|SXF_TRANSFERAMBUSHFLAG);
				double spawndistance = -53.3334;
				double spawnheight = 0;
				A_SpawnItemEx("CandleTrail", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
				spawndistance = -106.6667;
				spawnheight = 0;
				A_SpawnItemEx("CandleTrail", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			}
			loop;
		Death:
			SPNR C 0 A_AlertMonsters();
			FSPE A 4 Bright 
			{
				A_Explode(10,80,true,true,20);
			}
			FSPE BCDE 4 Bright;
			Stop;
	}
}

class BadCandleShotIcy : EEFastProjectile
{
	default
	{
		Tag "Fosnian Candle Burst [Icy]";
		Radius 2;
		Height 2;
		Speed 60;
		Damage 6;
		Scale 0.5;
		DamageType "Ice";
		RenderStyle "Add";
		PROJECTILE;
		+RANDOMIZE;
		+BLOODSPLATTER;
		+DONTREFLECT;
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		if (random(1,2) <= 1) bFORCERADIUSDMG = true;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		DDPlayerPawn playpawn;
		DDPlayerPawn playpawn2;
		Actor DDActor;
		Actor DDActor2;
		playpawn = DDPlayerPawn(target);
		playpawn2 = DDPlayerPawn(other);
		DDActor = Actor(target);
		DDActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					if (A_CheckFriendCollisionProjTypePlayer(self) > 0) return false;
					if (A_CheckFriendCollisionProjTypePlayer2(self) > 0) return false;
				}
			}
			else
			if (DDActor && DDActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			
			let checkedenemy = Actor(other);
			if (!checkedenemy.bICECORPSE == 0) return false; else return true; // Makes the ice projectiles move PAST the frozen monster to hit other monsters.
		}
		// We don't really care about others making the check.

		return true;
	}

	states
	{
		Spawn:
			TNT1 A 1 bright 
			{
				A_SpawnItemEx("CandleTrailIcy",0,0,0, 0,0,0, 0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION|SXF_TRANSFERAMBUSHFLAG);
				double spawndistance = -53.3334;
				double spawnheight = 0;
				A_SpawnItemEx("CandleTrailIcy", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
				spawndistance = -106.6667;
				spawnheight = 0;
				A_SpawnItemEx("CandleTrailIcy", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			}
			loop;
		Death:
			SPNR C 0 A_AlertMonsters();
			ISPE A 4 Bright 
			{
				A_Explode(10,80,true,true,20);
			}
			ISPE BCDE 4 Bright;
			Stop;
	}
}

class BadRecordShot : EEProjectile
{
	int seekstrength;
	int seekchance;
	int seekdist;
	default
	{
		Tag "RazorRecord";
		Radius 6;
		Height 6;
		Speed 20;
		DamageFunction (finaldamagedealt);
		DamageType "Beats";
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		ProjectileKickback 50; // 0

		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		BounceType "Hexen";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		BounceCount 2;
		SeeSound "";
		DeathSound "axe/hit";
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		actor player = players[0].mo;
		double sndpitch = 1.0;
		double sndvol = 1.0;
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
		}
		A_StartSound("axe/throw",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
			A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			if (random(1,4) <= 1)
			{
				sndpitch = frandom(0.75,0.875);
				sndvol = 1.4;
				A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			}
		}

		if (target)
		{
			if (IPAttack) 
			{
				BounceCount = 5;
				BounceFactor = 1.03125;
				WallBounceFactor = 1.03125;
			}
			else 
			{
				BounceCount = 2;
				BounceFactor = 1.0125;
				WallBounceFactor = 1.0125;
			}
		}

		finaldamagedealt = (12*random(1,8));
		if (Stamina == 3) 
		{
			finaldamagedealt *= 3;
			ProjectileKickback *= 3;
		}
		if (Stamina >= 5) 
		{
			finaldamagedealt *= 5;
			ProjectileKickback *= 5;
		}
		if (IPAttack)
		{
			finaldamagedealt = (48*random(1,2));
			if (Stamina == 3) finaldamagedealt *= 3.09;
			if (Stamina >= 5) finaldamagedealt *= 5.15;
		}
		if (IPAttack && random(1,8) <= 1) finaldamagedealt *= frandompick(1.125,1.25,1.25,1.25,1.25,1.375);
		if (player.CountInv("GrimophoneUpgrade"))
		{
			finaldamagedealt *= (1.0 + (target.CountInv("GrimophoneUpgrade") * frandompick(0.334,0.50,0.50,0.50,0.50,0.667)));
		}
		finaldamagedealt *= (1.0 + (target.CountInv("MonsterLevel") * (random(1,6) * 0.005)));
		
		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}

	States
	{
		Spawn:
			RBUL A 0 NoDelay
			{
				seekstrength = 12;
				seekchance = 50;
				seekdist = 10;
				if (target)
				{
					int TruePlayerLevel = target.CountInv("MonsterLevel");
					
					seekstrength += (TruePlayerLevel * 0.36);
					seekchance += (TruePlayerLevel * 0.75);
					seekdist += (TruePlayerLevel * 0.10);
					if (IPAttack)
					{
						seekstrength *= 2.5;
						seekchance *= 2.5;
						seekdist *= 2.5;
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(1,4) == 1) { A_ScaleVelocity(1.0025); }
			}
			RBUL ABAB 1
			{
				if (random(1,2) == 1) { A_ScaleVelocity(1.0375); }
			}
			RBUL ABAB 1
			{
				if (random(1,4) <= 3) 
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.00125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(7,8) <= 7)
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.000125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
		Spawn2:
			RBUL AB 1 
			{
				A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
				A_ScaleVelocity(1.000125);
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
	
	States
	{
		Spawn:
			RBUL ABAB 1;
			RBUL AB 1 A_SeekerMissile (12,12,SMF_LOOK);
			Loop;
	}
}

class BadVacShot : EEProjectile
{
	default
	{
		Tag "Dust Devil";
		Radius 3;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 1;
		health 1;
		Projectile;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Normal";
		seesound "Weapons/RocketFire";
		deathsound "croquet/ballhit";
		ProjectileKickback 0; // 0
	
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		+DONTREFLECT
		+NODAMAGETHRUST
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 5;
		+RIPPER
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (20 * baserand);
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.10 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright NoDelay
			{
				if (IPAttack) A_SetTics(2);

				int dmg, rad, fullrad;
				dmg = 41;
				rad = 64;
				fullrad = rad * 0.25;
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.0,1.125,1.125,1.25);
					rad = randompick(64,72,72,80,80,80,80,80,88,88,96);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			VSHT A 0
			{
				if (IPAttack)
				{
					health--;
					if (health <= 0)
					{
						health = randompick(1,1,1,1,2);
						actor BombShots;
						EEProjectile IPCompat;
						BombShots = A_SpawnProjectile("VacShotMini",0,0,0,CMF_TRACKOWNER);
						if (BombShots && IPAttack) 
						{
							IPCompat = EEProjectile(BombShots);
							if (IPCompat) 
							{
								IPCompat.IPattack = true;
								IPCompat.vel.z = frandompick(-1,-0.5,-0.5,0,0,0,0,0,0,0.5,0.5,1); // VSpeed = Vel.z
								IPCompat.health = randompick(3,4,4,5,5,5,6,6,7);
							}
						}
					}
				}
			}
			loop;
		Death:
			TNT1 A 4 
			{
				if (IPAttack) A_SetTics(3);

				int dmg, rad, fullrad;
				dmg = 82;
				rad = 128;
				fullrad = (rad * 0.25);
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.125,1.125,1.25,1.25);
					rad = randompick(128,144,144,160,16,16,16,16,176,176,192);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			stop;
	}
}

class EvilZapShot : EEFastProjectile
{
	int selfaoe;
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 1;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		ProjectileKickback 125; // 25
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (12 * baserand);
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.06 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 4 Bright 
			{
				int noselfaoecnc = 8;
				int minfullrad = 32;
				int baseaoedmg = 128;
				int baseaoeradius = 128;
				int TruePlayerLevel = CountInv("MonsterLevel");
				noselfaoecnc = 8 + (TruePlayerLevel * 0.6667);
				minfullrad = 32 + (TruePlayerLevel * 1.3334);
				if (IPAttack) minfullrad *= 4;
				if (dydudebug_attackstuff) Console.Printf("\c[green]ZapShot: noselfaoecnc: %d, minfullrad: %d", noselfaoecnc, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);

				if (IPAttack) 
				{
					A_SetTics(3);
				}
			}
			ZBUX BC 4 Bright
			{
				if (IPAttack) A_SetTics(3);
			}
			ZBUX D 4 Bright
			{
				if (IPAttack)
				{
					A_SetTics(3);
					if (random(1,32) <= 3) A_BFGSpray("PikeExtra",40,0,90,2048,32,randompick(15,20,25));
				}
			}
			stop;
	}
}

class EvilMiniZapShot : EvilZapShot
{
	default
	{
		Tag "Mini Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		ProjectileKickback 62; // 25
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (8 * baserand);
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.04 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 3 Bright
			{
				int noselfaoecnc = 8;
				int aoechance = 8;
				int minfullrad = 8;
				int baseaoedmg = 32;
				int baseaoeradius = 32;
				int TruePlayerLevel = CountInv("MonsterLevel");
				baseaoedmg += (TruePlayerLevel * 0.128);
				baseaoedmg *= (1.0 + (TruePlayerLevel * 0.125));
				baseaoeradius += (TruePlayerLevel * 0.128);
				baseaoeradius *= (1.0 + (TruePlayerLevel * 0.125));
				minfullrad = (baseaoeradius * 0.25);

				noselfaoecnc = 8 + (TruePlayerLevel * 0.6667);
				aoechance = 8 + (TruePlayerLevel * 0.1667);
				if (IPAttack) minfullrad *= 4;
				if (dydudebug_attackstuff) Console.Printf("\c[green]MiniZapShot: noselfaoecnc: %d, aoechance: %d, minfullrad: %d", noselfaoecnc, aoechance, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					aoechance = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				if (random(1,256) <= aoechance || IPAttack) 
				{
					if (dydudebug_attackstuff) Console.Printf("\c[sapphire]MiniZapShot: AOE");
					A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);
				}

				if (IPAttack) A_SetTics(2);
			}
			ZBUX BC 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			ZBUX D 3 Bright
			{
				if (IPAttack) 
				{
					A_SetTics(2);
					if (random(1,32) <= 3) A_BFGSpray("MiniPikeExtra",26,0,90,1536,32,randompick(8,12,16));
				}
			}
			stop;
	}
}

class EvilEggShot : EEProjectile
{
	default
	{
		Tag "Large Fractal Egg";
		Radius 3;
		Height 3;
		Speed 70;
		DamageFunction (finaldamagedealt); // Damage 12;
		DamageType "Breakfast";
		Scale 2;
		Projectile;
		-NOGRAVITY
		+ROCKETTRAIL
		+GRENADETRAIL
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 96;
		ProjectileKickback 37; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (12 * random(1,8));
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright 
			{
				int dmg = 24;
				int rad = 96;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.5;
					rad *= 1.5;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggGrenade",2,35,1,6,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EvilEggGrenade : EEProjectile
{
	default
	{
		Tag "Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 9;
		DamageType "Breakfast";
		Scale 1.5;
		Projectile;
		-NOGRAVITY
		+ROCKETTRAIL
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 64;
		BounceCount 1;
		ProjectileKickback 18; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (9 * random(1,8));
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 64;
				int rad = 64;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.25;
					rad *= 1.25;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggMini",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("EvilEggMini",2,35,1,10,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EvilEggMini : EEProjectile
{
	default
	{
		Tag "Small Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 6;
		DamageType "Breakfast";
		Projectile;
		-NOGRAVITY
		+GRENADETRAIL
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 32;
		BounceCount 2;
		ProjectileKickback 9; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (6 * random(1,8));
		if (target)
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 32;
				int rad = 32;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.125;
					rad *= 1.125;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL BC 5 Bright;
			Stop;
	}
}

class EvilKickShieldNoReflect : ShieldPartMeleeNoReflect
{
	override bool CanCollideWith(Actor other, bool passive)
	{
		EvilDinah playpawn;
		EvilDinah playpawn2;
		playpawn = EvilDinah(other);

		if (dydudebug_shieldcollision) Console.Printf("\cyKickShield [%s] (gametic %d):\c- \c[brick]other: %s\c-", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			if (A_CheckCollisionProjShieldExemptionE(other)) return false;

			if (dydudebug_shieldcollision) Console.Printf("\cyKickShield (gametic %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking

			if (other)
			{
				if (other.bISMONSTER)
				{
					if (!other.bFRIENDLY)
					{
						if (other.CountInv("JustKicked") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustKicked (%s) [passive side]", other.GetClassName());
							return false;
						}
						if (other.CountInv("JustPunched") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustPunched (%s) [passive side]", other.GetClassName());
							return false;
						}
						if (other.CountInv("JustUppercutted") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustUppercutted (%s) [passive side]", other.GetClassName());
							return false;
						}
					}
					if (other.bFRIENDLY) return false;
					if (other.health <= 0) return false;
					let ShieldPiece = EvilKickShieldNoReflect(other); if (ShieldPiece) return false;
					let ShieldPiece2 = EvilKickShieldReflect(other); if (ShieldPiece2) return false;
					return true;
				}
			}

			playpawn = EvilDinah(other.target);
			playpawn2 = EvilDinah(master);
			if (playpawn && playpawn2) return false;

			return true;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dydudebug_shieldcollision) Console.Printf("\cyKickShield (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = EvilDinah(other.target);
			playpawn2 = EvilDinah(master);
			if (playpawn && playpawn2) return false;

			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			HEXA C 0 bright NoDelay;
			HEXA C 1 bright;
			stop;
		Pain:
			TNT1 A 0 bright
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 57);
				}
				else
				{
					A_StartSound("FistHitWall", 57); 
				} 
			}
			stop;
	}
}

class EvilKickShieldReflect : EvilKickShieldNoReflect
{
	default
	{
		+REFLECTIVE 
		+AIMREFLECT
	}
}

// Fractal Chicken
class FractalChicken : DDOrigCreature
{
	default
	{
		//$Category RPMonsters;
		Health 100;
		Radius 16;
		Height 32;
		Mass 1000;
		Speed 20;
		PainChance 256;
		DamageFactor "Lead", 5;
		DamageFactor "Dashing", 2.5;
		DamageFactor "DashingBG", 2.5;
		DamageFactor "DashingSD", 2.5;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		SeeSound "chook/sight";
		ActiveSound "chook/sight";
		PainSound "chook/pain";
		DeathSound "aqua/kill1";
		Obituary "%o chooked out thanks to a Fractal Chicken.";
		Tag "Fractal Chicken";
		Species "FractalChicken";
		//DropItem "EggAmmo", 96;
		//DropItem "EggAmmo", 32;
		//DropItem "EggAmmo", 10;
		//DropItem "EggAmmoBig", 10;
		//DropItem "EggAmmoBig", 3;
		//DropItem "EggAmmoBig", 1;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("EggAmmo",1,96);
			A_DropItem("EggAmmo",1,32);
			A_DropItem("EggAmmo",1,10);
		}
		else
		{
			A_DropItem("EggAmmo",1,96,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,32,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,10,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,10,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,3,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,1,ADI_FULLAMMO);
			
			A_DropItem("Scrambler",1,4,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			CHKS ABCB 6 A_Look();
			Loop;
		See:
			CHKS A 0 
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_SetInventory("Chase_Fly",0);
			}
			CHKS A 5;
			CHKS DDEE 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			CHKS FC 3;
			CHKS A 0
			{
				if (random(1,256) <= (0 + (CountInv("MonsterLevel") * 0.03125))) 
				{
					if (A_SetSize(30,56,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(30,56,false);
						return resolvestate("Grow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					actor player = players[0].mo;
					bool ddchookflight = true;
					if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
					{
						if (ddafd_fractalchookflight) ddchookflight = true;
						else ddchookflight = false;
					}
					if (exex_fractalchickflyoptions & 2 && ddchookflight)
					{
						if (random(1,256) <= 16) return resolvestate("TakeOff");
						else
						{
							state JumpState;
							if (target && (target.pos.z >= pos.z + (random(1,4) * 8.0)))
							{
								if (random(1,12) <= random(1,3)) JumpState = FindState("TakeOff");
							}
							else
							{
								if (random(1,random(18,24)) <= random(1,random(2,4))) JumpState = FindState("TakeOff");
							}
							if (JumpState != null) 
							{
								A_FaceTarget();
								SetState(JumpState);
							}
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Loop;
		Takeoff: 
			TNT1 A 0 A_JumpIf(pos.Z + height + (random(1,8) * 3.5) >= CeilingZ, "See");
			TNT1 A 0 
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
				A_SetInventory("Chase_Fly",1);
			}
			Goto Fly;
		Fly:
			CHKS E 0 ThrustThingZ(0,frandom(10,15),0,0);
			CHKS DDEEDDEE 3
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase(null,null,0,1,3,1,1); }
				user_painfastchase = 0;
				
				if (random(1,8) <= 1) ThrustThingZ(0,frandom(0,2),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			Goto Hover;
		Missile:
			CHKS G 0 A_DynamicMusic();
			CHKS G 0 
			{
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.125))) 
				{
					if (A_SetSize(30,56,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(30,56,false);
						return resolvestate("Grow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			CHKS H 0 A_StartSound("chook/sight",1);
			CHKS GHI 5 A_FaceTarget();
			CHKS J 12 A_ThrowGrenade("ChookEggGrenade",2,random(8,12),random(6,12),0);
			CHKS IHG 3;
			Goto See;
		MissileF:
			CHKS D 0 
			{
				if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.0625))) 
				{
					if (A_SetSize(30,56,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(30,56,false);
						return resolvestate("LandToGrow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					actor player = players[0].mo;
					bool ddchookflight = true;
					if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
					{
						if (ddafd_fractalchookflight) ddchookflight = true;
						else ddchookflight = false;
					}
					if (exex_fractalchickflyoptions & 2 && ddchookflight)
					{
						if (random(1,256) <= 32) return resolvestate("Land");
						return resolvestate(null);
					}
					else
					{
						return resolvestate("Land");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			CHKB D 0 
			{
				A_DynamicMusic();
				A_SetInventory("Chase_Fly",1);
			}
			CHKS DD 5 A_FaceTarget();
			CHKS E 0 A_StartSound("chook/sight",1);
			CHKS E 5 A_FaceTarget();
			CHKS E 3 A_ThrowGrenade("ChookEggGrenade",2,random(8,12),random(6,12),0);
			CHKS EDD 3;
			Goto Hover;
		Grow:
			CHKS G 0 
			{
				A_DynamicMusic();
				A_StartSound("chook/sight",1);
				A_StartSound("chook/sight",2,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
			}
			CHKS ABCB 6;
			CHKS ABCBABCB 4;
			CHKS ABCBABCB 2;
			CHKS A 0 
			{
				if (A_CheckIfCCIllusion() == false) A_Die("GrowingPains");
			}
			Goto See;
		Land:
			CHKS DD 4 ThrustThingZ(0,-10,0,0);
			CHKS D 1 A_CheckFloor("See");
			CHKS DDEEDDEE 2 
			{
				A_EEChase(null,null,0,1,3,1,1);
				A_CheckFloor("See");
			}
			CHKS E 1 A_CheckFloor("See");
			Goto Hover;
		LandToGrow:
			CHKS DD 4 ThrustThingZ(0,-10,0,0);
			CHKS D 1 A_CheckFloor("Grow");
			CHKS DDEEDDEE 2 
			{
				A_EEChase(null,null,0,1,3,1,1);
				A_CheckFloor("Grow");
			}
			CHKS E 1 A_CheckFloor("Grow");
			Goto Grow;
		Hover:
			CHKS DDEEDDEE 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance)
				{
					if (random(1,8) <= 2) A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
													 else A_EEChase(null,"MissileF",CHF_FASTCHASE,1,3,1,1);
					A_FloatSetFChaseT(randompick(0,4));
				}
				else
				{
					if (random(1,8) <= 2) A_EEChase(null,null,0,1,3,1,1);
													 else A_EEChase(null,"MissileF",0,1,3,1,1);
				}
				user_painfastchase = 0;
				
				if (random(1,10) <= 1) ThrustThingZ(0,frandom(-1.0,1.0),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			CHKS E 0
			{
				actor player = players[0].mo;
				bool ddchookflight = true;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (ddafd_fractalchookflight) ddchookflight = true;
					else ddchookflight = false;
				}
				if (exex_fractalchickflyoptions & 2 && ddchookflight)
				{
					if (random(1,256) <= 32) return resolvestate("Fly");
					else if (random(1,256) <= 16) return resolvestate("Land");
					else if (random(1,256) <= (1 + (CountInv("MonsterLevel") * 0.03125))) 
					{
						if (A_SetSize(30,56,true) && Distance3D(target) <= 4096)
						{
							A_SetSize(30,56,false);
							return resolvestate("LandToGrow");
						}
						else 
						{
							A_SetSize(default.radius,default.height,false);
							return resolvestate(null);
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					return resolvestate("Land");
				}
				return resolvestate(null);
			}
			Loop;
		Pain:
			CHKS F 6
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				
				if (CountInv("Chase_Fly"))
				{
					A_FloatPain(0,8,64);
					user_painfastchase = 4 * random(1,8);
				}
				else
				{
					A_EEPain();
				}
				
				if (random(1,6) <= 1 || !exex_fractalchickflyoptions & 2)
				{
					if (CountInv("Chase_Fly"))
					{
						bFLOAT = false;
						bNOGRAVITY = false;
						bDROPOFF = false;
						ThrustThingZ(0,-10,0,0);
						A_SetInventory("Chase_Fly",0);
					}
				}
			}
			CHKS CB 3;
			CHKS A 0
			{
				if (CountInv("Chase_Fly")) return resolvestate("Hover");
				return resolvestate("See");
			}
			Goto See;
		/*
		Death.Suck:
			CHKS F 5 A_StartSound("VacDed",CHAN_BODY);
			CHKS F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death.GrowingPains:
			DANS S 2 bright A_SpawnItemEx("FractalHen",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			DANS TUVWXYZ 2 bright;
			Stop;
		Death:
			CHKS F 0
			{
				user_tempvar1 = random(1,8);
				user_tempvar2 = random(1,2);
			}
			CHKS F 3 A_Scream();
			DANS R 1 bright A_ThrowGrenade("ChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright A_ThrowGrenade("ChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1) 
				{
					if (user_tempvar2 <= 1)
					{
						A_ThrowGrenade("ChookGrenade",2,random(2,6),random(6,10),0);
					}
					else A_SetTics(0);
				}
				else 
				{
					A_ThrowGrenade("ChookGrenade",2,random(2,6),random(6,10),0);
				}
			}
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1 && user_tempvar2 <= 1) 
				{
					A_ThrowGrenade("ChookGrenade",2,random(2,6),random(6,10),0);
				}
				else A_SetTics(0);
			}
			DANS S 3 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

class ChookGrenade : EEProjectile
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		Damage 1;
		Scale 0.25;
		PROJECTILE;
		-NOGRAVITY;
		+DONTHARMSPECIES;
		RENDERSTYLE "Normal";
		Tag "Fractal Chicken [Spectral]";
		Species "FractalChicken";
	}
	
	States
	{
		Spawn:
			CHKS D 3;
			loop;
		Death:
			CHKS DEDE 2;
			CHKS E 0 A_SpawnItemEx("FractalChick",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class ChookGrenadeSpectral : ChookGrenade
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		Damage 1;
		Scale 0.25;
		PROJECTILE;
		-NOGRAVITY;
		+DONTHARMSPECIES;
		RenderStyle "OptFuzzy";
		+SHADOW;
		Alpha 0.5;
		Tag "Fractal Chicken [Spectral]";
		Species "FractalChicken";
	}
	
	States
	{
		Spawn:
			CHKS D 3;
			loop;
		Death:
			CHKS DEDE 2;
			CHKS E 0 A_SpawnItemEx("SpectralFractalChick",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class SpectralFractalChicken : FractalChicken
{
	default
	{
		RenderStyle "OptFuzzy";
		+SHADOW
		Alpha 0.5;
	}
	
	states
	{
		Death.GrowingPains:
			DANS S 2 bright A_SpawnItemEx("SpectralFractalHen",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			DANS TUVWXYZ 2 bright;
			Stop;
		Death:
			CHKS F 0
			{
				user_tempvar1 = random(1,8);
				user_tempvar2 = random(1,2);
			}
			CHKS F 3 A_Scream();
			DANS R 1 bright A_ThrowGrenade("ChookGrenadeSpectral",2,random(2,6),random(6,10),0);
			DANS R 1 bright A_ThrowGrenade("ChookGrenadeSpectral",2,random(2,6),random(6,10),0);
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1) 
				{
					if (user_tempvar2 <= 1)
					{
						A_ThrowGrenade("ChookGrenadeSpectral",2,random(2,6),random(6,10),0);
					}
					else A_SetTics(0);
				}
				else 
				{
					A_ThrowGrenade("ChookGrenadeSpectral",2,random(2,6),random(6,10),0);
				}
			}
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1 && user_tempvar2 <= 1) 
				{
					A_ThrowGrenade("ChookGrenadeSpectral",2,random(2,6),random(6,10),0);
				}
				else A_SetTics(0);
			}
			DANS S 3 bright A_NoBlocking();
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

class FractalChick : DDOrigCreature
{
	default
	{
		//$Category RPMonsters;
		Health 30;
		Radius 10; // 20
		Height 20; // 40
		Mass 1000;
		Speed 20;
		Scale 0.5;
		PainChance 256;
		DamageFactor "Lead", 5;
		DamageFactor "Dashing", 2.5;
		DamageFactor "DashingBG", 2.5;
		DamageFactor "DashingSD", 2.5;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		SeeSound "chooks/sight";
		ActiveSound "chooks/sight";
		PainSound "chooks/pain";
		DeathSound "aqua/kill1";
		Obituary "%o chooked out thanks to a Fractal Chick.";
		Tag "Fractal Chick";
		Species "FractalChicken";
		//DropItem "EggAmmo", 24;
		//DropItem "EggAmmo", 6;
		//DropItem "EggAmmo", 2;
		//DropItem "EggAmmoBig", 2;
		//DropItem "EggAmmoBig", 1;
		//DropItem "EggAmmoBig", 1;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("EggAmmo",1,24);
			A_DropItem("EggAmmo",1,6);
			A_DropItem("EggAmmo",1,2);
		}
		else
		{
			A_DropItem("EggAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,6,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,2,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,2,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,1,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,1,ADI_FULLAMMO);
			
			A_DropItem("Scrambler",1,1,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			CHKS ABCB 6 A_Look();
			Loop;
		See:
			CHKS A 0 
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_SetInventory("Chase_Fly",0);
			}
			CHKS A 3;
			CHKS DDEE 2 A_EEChase("Melee","Missile",0,1,3,1,1);
			CHKS FC 2;
			CHKS A 0
			{
				if (random(1,256) <= (0 + (CountInv("MonsterLevel") * 0.0625))) 
				{
					if (A_SetSize(16,32,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(16,32,false);
						return resolvestate("Grow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					actor player = players[0].mo;
					bool ddchookflight = true;
					if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
					{
						if (ddafd_fractalchookflight) ddchookflight = true;
						else ddchookflight = false;
					}
					if (exex_fractalchickflyoptions & 4 && ddchookflight)
					{
						if (random(1,256) <= 16) return resolvestate("TakeOff");
						else
						{
							state JumpState;
							if (target && (target.pos.z >= pos.z + (random(1,4) * 16.0)))
							{
								if (random(1,16) <= random(1,2)) JumpState = FindState("TakeOff");
							}
							else
							{
								if (random(1,random(24,32)) <= random(1,random(2,3))) JumpState = FindState("TakeOff");
							}
							if (JumpState != null) 
							{
								A_FaceTarget();
								SetState(JumpState);
							}
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Loop;
		Takeoff: 
			TNT1 A 0 A_JumpIf(pos.Z + height + (random(1,8) * 2.5) >= CeilingZ, "See");
			TNT1 A 0 
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
				A_SetInventory("Chase_Fly",1);
			}
			Goto Fly;
		Fly:
			CHKS E 0 ThrustThingZ(0,frandom(3,6),0,0);
			CHKS DDEEDDEE 3
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase(null,null,0,1,3,1,1); }
				user_painfastchase = 0;
				
				if (random(1,8) <= 1) ThrustThingZ(0,frandom(0,1),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			Goto Hover;
		Missile:
			CHKS G 0 A_DynamicMusic();
			CHKS G 0 
			{
				if (random(1,256) <= (16 + (CountInv("MonsterLevel") * 0.25))) 
				{
					if (A_SetSize(16,32,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(16,32,false);
						return resolvestate("Grow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			CHKS G 0 A_StartSound("chooks/sight",1);
			CHKS GHI 5 A_FaceTarget();
			CHKS J 12 A_ThrowGrenade("ChookEggMini",1,random(12,14),random(6,10),0);
			CHKS IHG 3;
			Goto See;
		MissileF:
			CHKS D 0 
			{
				if (random(1,256) <= (16 + (CountInv("MonsterLevel") * 0.125))) 
				{
					if (A_SetSize(16,32,true) && Distance3D(target) <= 4096)
					{
						A_SetSize(16,32,false);
						return resolvestate("LandToGrow");
					}
					else 
					{
						A_SetSize(default.radius,default.height,false);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					actor player = players[0].mo;
					bool ddchookflight = true;
					if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
					{
						if (ddafd_fractalchookflight) ddchookflight = true;
						else ddchookflight = false;
					}
					if (exex_fractalchickflyoptions & 4 && ddchookflight)
					{
						if (random(1,256) <= 32) return resolvestate("Land");
						return resolvestate(null);
					}
					else
					{
						return resolvestate("Land");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			CHKS D 0 
			{
				A_DynamicMusic();
				A_SetInventory("Chase_Fly",1);
			}
			CHKS DD 5 A_FaceTarget();
			CHKS E 0 A_StartSound("chooks/sight",1);
			CHKS E 5 A_FaceTarget();
			CHKS E 3 A_ThrowGrenade("ChookEggMini",1,random(12,14),random(6,10),0);
			CHKS EDD 3;
			Goto Hover;
		Grow:
			CHKS G 0 
			{
				A_DynamicMusic();
				A_StartSound("chooks/sight",1);
				A_StartSound("chooks/sight",2,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
			}
			CHKS ABCB 6;
			CHKS ABCBABCB 4;
			CHKS ABCBABCB 2;
			CHKS A 0 
			{
				if (A_CheckIfCCIllusion() == false) A_Die("GrowingPains");
			}
			Goto See;
		Land:
			CHKS DD 4 ThrustThingZ(0,-5,0,0);
			CHKS D 1 A_CheckFloor("See");
			CHKS DDEEDDEE 2 
			{
				A_EEChase(null,null,0,1,3,1,1);
				A_CheckFloor("See");
			}
			CHKS E 1 A_CheckFloor("See");
			Goto Hover;
		LandToGrow:
			CHKS DD 4 ThrustThingZ(0,-5,0,0);
			CHKS D 1 A_CheckFloor("Grow");
			CHKS DDEEDDEE 2 
			{
				A_EEChase(null,null,0,1,3,1,1);
				A_CheckFloor("Grow");
			}
			CHKS E 1 A_CheckFloor("Grow");
			Goto Grow;
		Hover:
			CHKS DDEEDDEE 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance)
				{
					if (random(1,8) <= 5) A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
													 else A_EEChase(null,"MissileF",CHF_FASTCHASE,1,3,1,1);
					A_FloatSetFChaseT(randompick(0,4));
				}
				else
				{
					if (random(1,8) <= 5) A_EEChase(null,null,0,1,3,1,1);
													 else A_EEChase(null,"MissileF",0,1,3,1,1);
				}
				user_painfastchase = 0;
				
				if (random(1,6) <= 1) ThrustThingZ(0,frandom(-0.5,0.5),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			CHKS E 0
			{
				actor player = players[0].mo;
				bool ddchookflight = true;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (ddafd_fractalchookflight) ddchookflight = true;
					else ddchookflight = false;
				}
				if (exex_fractalchickflyoptions & 4 && ddchookflight)
				{
					if (random(1,256) <= 32) return resolvestate("Fly");
					else if (random(1,256) <= 16) return resolvestate("Land");
					else if (random(1,256) <= (2 + (CountInv("MonsterLevel") * 0.0625))) 
					{
						if (A_SetSize(16,32,true) && Distance3D(target) <= 4096)
						{
							A_SetSize(16,32,false);
							return resolvestate("LandToGrow");
						}
						else 
						{
							A_SetSize(default.radius,default.height,false);
							return resolvestate(null);
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					return resolvestate("Land");
				}
				return resolvestate(null);
			}
			Loop;
		Pain:
			CHKS F 6 
			{
				if (height != default.height || radius != default.radius) A_SetSize(default.radius,default.height,false);
				
				if (CountInv("Chase_Fly"))
				{
					A_FloatPain(0,8,64);
					user_painfastchase = 4 * random(1,4);
				}
				else
				{
					A_EEPain();
				}
				
				if (random(1,6) <= 1 || !exex_fractalchickflyoptions & 4)
				{
					if (CountInv("Chase_Fly"))
					{
						bFLOAT = false;
						bNOGRAVITY = false;
						bDROPOFF = false;
						ThrustThingZ(0,-5,0,0);
						A_SetInventory("Chase_Fly",0);
					}
				}
			}
			CHKS CB 3;
			CHKS A 0
			{
				if (CountInv("Chase_Fly")) return resolvestate("Hover");
				return resolvestate("See");
			}
			Goto See;
		/*
		Death.Suck:
			CHKS F 5 A_StartSound("VacDed",CHAN_BODY);
			CHKS F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,1);
			Stop;
		*/
		Death.GrowingPains:
			DANS S 2 bright A_SpawnItemEx("FractalChicken",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			DANS TUVWXYZ 2 bright;
			Stop;
		Death:
			CHKS F 0
			{
				user_tempvar1 = random(1,8);
				user_tempvar2 = random(1,2);
			}
			CHKS F 3 A_Scream();
			DANS R 3 bright;
			DANS S 3 bright
			{
				A_NoBlocking();
				A_Drop();
			}
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

class SpectralFractalChick : FractalChick
{
	default
	{
		RenderStyle "OptFuzzy";
		+SHADOW
		Tag "Fractal Chick [Spectral]";
		Alpha 0.5;
	}
	
	states
	{
		Death.GrowingPains:
			DANS S 2 bright A_SpawnItemEx("SpectralFractalChicken",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

// Fractal Hens
class FractalHen : DDOrigBoss
{
	default
	{
		//$Category RPMonsters;
		Health 1000;
		Radius 30;
		Height 56;
		Mass 1000;
		Speed 20;
		PainChance 160;
		DamageFactor "Lead", 1.25;
		DamageFactor "Dashing", 1.375;
		DamageFactor "DashingBG", 1.375;
		DamageFactor "DashingSD", 1.375;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+NORADIUSDMG;
		SeeSound "chookb/sight";
		ActiveSound "chookb/sight";
		PainSound "chookb/pain";
		DeathSound "aqua/kill1";
		Obituary "%o chooked out thanks to a Great Fractal Hen.";
		Tag "Fractal Hen";
		//DropItem "EggAmmo";
		//DropItem "EggAmmo", 224;
		//DropItem "EggAmmo", 192;
		//DropItem "EggAmmo", 160;
		//DropItem "EggAmmo", 128;
		//DropItem "EggAmmoBig", 160;
		//DropItem "EggAmmoBig", 53;
		//DropItem "EggAmmoBig", 17;
		//DropItem "EggAmmoBig", 5;
		Species "FractalChicken";
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("EggAmmo",1,224);
			A_DropItem("EggAmmo",1,192);
			A_DropItem("EggAmmo",1,160);
			A_DropItem("EggAmmo",1,128);
		}
		else
		{
			A_DropItem("EggAmmo",1,224,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,192,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,160,ADI_FULLAMMO);
			A_DropItem("EggAmmo",1,128,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,160,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,53,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,17,ADI_FULLAMMO);
			A_DropItem("EggAmmoBig",1,5,ADI_FULLAMMO);
			
			A_DropItem("Scrambler",1,16,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			CHKB A 6 A_Look();
			Loop;
		See:
			CHKB A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				bDROPOFF = false;
				A_SetInventory("Chase_Fly",0);
			}
			CHKB C 5;
			CHKB DDEE 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			CHKB CA 4;
			CHKB C 0
			{
				actor player = players[0].mo;
				bool ddchookflight = true;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (ddafd_fractalchookflight) ddchookflight = true;
					else ddchookflight = false;
				}
				if (exex_fractalchickflyoptions & 1 && ddchookflight)
				{
					if (random(1,256) <= 16) return resolvestate("TakeOff");
					else
					{
						state JumpState;
						if (target && (target.pos.z >= pos.z + (random(1,4) * 8.0)))
						{
							if (random(1,12) <= random(1,3)) JumpState = FindState("TakeOff");
						}
						else
						{
							if (random(1,random(18,24)) <= random(1,random(2,4))) JumpState = FindState("TakeOff");
						}
						if (JumpState != null) 
						{
							A_FaceTarget();
							SetState(JumpState);
						}
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Loop;
		Takeoff:
			TNT1 A 0 A_JumpIf(pos.Z + height + (random(1,8) * 7) >= CeilingZ, "See");
			TNT1 A 0 
			{
				bFLOAT = true;
				bNOGRAVITY = true;
				bDROPOFF = true;
				A_SetInventory("Chase_Fly",1);
			}
			Goto Fly;
		Fly:
			CHKB E 0 ThrustThingZ(0,frandom(12,18),0,0);
			CHKB DDEEDDEE 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase(null,null,0,1,3,1,1); }
				user_painfastchase = 0;
				
				if (random(1,8) <= 1) ThrustThingZ(0,frandom(0,2),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			Goto Hover;
		Missile:
			CHKB A 0 A_Jump(48,"Takeoff");
			CHKB A 0 
			{
				A_DynamicMusic();
				A_SetInventory("Chase_Fly",0);
			}
			CHKB AB 5 A_FaceTarget();
			CHKB F 8 
			{
				A_StartSound("chookb/sight",1);
				A_Throwgrenade("ChookEggShot",2,random(8,12),random(6,12),0);
			}
			CHKB A 5;
			CHKB F 8 
			{
				A_StartSound("chookb/sight",1);
				A_Throwgrenade("ChookEggShot",2,random(8,12),random(6,12),0);
			}
			CHKB A 5;
			Goto See;
		MissileF:
			CHKB D 0
			{
				actor player = players[0].mo;
				bool ddchookflight = true;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (ddafd_fractalchookflight) ddchookflight = true;
					else ddchookflight = false;
				}
				if (exex_fractalchickflyoptions & 1 && ddchookflight)
				{
					if (random(1,256) <= 32) return resolvestate("Land");
					return resolvestate(null);
				}
				else
				{
					return resolvestate("Land");
				}
				return resolvestate(null);
			}
			CHKB D 0 
			{
				A_DynamicMusic();
				A_SetInventory("Chase_Fly",1);
			}
			CHKB D 6 A_FaceTarget();
			CHKB D 6 
			{
				A_StartSound("chookb/sight",1);
				A_Throwgrenade("ChookEggShot",2,random(8,12),random(6,12),0);
			}
			CHKB E 6 A_FaceTarget();
			CHKB E 6 
			{
				A_StartSound("chookb/sight",1);
				A_Throwgrenade("ChookEggShot",2,random(8,12),random(6,12),0);
			}
			Goto Hover;
		Land:
			CHKB DD 4 ThrustThingZ(0,-25,0,0);
			CHKB D 1 A_CheckFloor("See");
			CHKB DDEEDDEE 2 
			{
				A_EEChase(null,null,0,1,3,1,1);
				A_CheckFloor("See");
			}
			CHKB E 1 A_CheckFloor("See");
			Goto Hover;
		Hover:
			CHKB DDEEDDEE 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance)
				{
					if (random(1,16) <= randompick(1,1,1,2)) A_EEChase(null,null,CHF_FASTCHASE,1,3,1,1);
																							else A_EEChase(null,"MissileF",CHF_FASTCHASE,1,3,1,1);
					A_FloatSetFChaseT(randompick(0,4));
				}
				else
				{
					if (random(1,16) <= randompick(1,1,1,2)) A_EEChase(null,null,0,1,3,1,1);
																							else A_EEChase(null,"MissileF",0,1,3,1,1);
				}
				user_painfastchase = 0;

				if (random(1,20) <= randompick(1,1,1,2)) ThrustThingZ(0,frandom(-1.25,1.25),0,0);
				A_SetInventory("Chase_Fly",1);
			}
			CHKB E 0
			{
				actor player = players[0].mo;
				bool ddchookflight = true;
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (ddafd_fractalchookflight) ddchookflight = true;
					else ddchookflight = false;
				}
				if (exex_fractalchickflyoptions & 1 && ddchookflight)
				{
					if (random(1,256) <= 32) return resolvestate("Fly");
					else if (random(1,256) <= 16) return resolvestate("Land");
					return resolvestate(null);
				}
				else
				{
					return resolvestate("Land");
				}
				return resolvestate(null);
			}
			Loop;
		Pain:
			CHKB C 6 
			{
				if (CountInv("Chase_Fly"))
				{
					A_FloatPain(0,8,64);
					user_painfastchase = 8 * random(1,4);
				}
				else
				{
					A_EEPain();
				}

				if (random(1,6) <= 1 || !exex_fractalchickflyoptions & 1) 
				{
					if (CountInv("Chase_Fly"))
					{
						bFLOAT = false;
						bNOGRAVITY = false;
						bDROPOFF = false;
						ThrustThingZ(0,-25,0,0);
						A_SetInventory("Chase_Fly",0);
					}
				}
			}
			CHKB A 3 A_Jump(192,2);
			CHKB B 3 A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
			CHKB AA 1;
			CHKB A 0
			{
				if (CountInv("Chase_Fly")) return resolvestate("Hover");
				return resolvestate("See");
			}
			Goto See;
		/*
		Death.Suck:
			CHKB C 5 A_StartSound("VacDed",CHAN_BODY);
			CHKB C 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			CHKS F 0
			{
				user_tempvar1 = random(1,8);
				user_tempvar2 = random(1,2);
			}
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			DANS R 1 bright A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1) 
				{
					if (user_tempvar2 <= 1)
					{
						A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
					}
					else A_SetTics(0);
				}
				else 
				{
					A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
				}
			}
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1 && user_tempvar2 <= 1) 
				{
					A_ThrowGrenade("BigChookGrenade",2,random(2,6),random(6,10),0);
				}
				else A_SetTics(0);
			}
			DANS S 3 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

class SpectralFractalHen : FractalHen
{
	default
	{
		RenderStyle "OptFuzzy";
		+SHADOW
		Alpha 0.5;
		Tag "Fractal Hen [Spectral]";
	}
	
	states
	{
		Pain:
			CHKB C 6 
			{
				A_EEPain();
				if (random(1,6) <= 1 || !exex_fractalchickflyoptions & 1) 
				{
					if (CountInv("Chase_Fly"))
					{
						bFLOAT = false;
						bNOGRAVITY = false;
						bDROPOFF = false;
						ThrustThingZ(0,-25,0,0);
						A_SetInventory("Chase_Fly",0);
					}
				}
			}
			CHKB A 3 A_Jump(192,2);
			CHKB B 3 A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
			CHKB AA 1;
			CHKB A 0
			{
				if (CountInv("Chase_Fly")) return resolvestate("Hover");
				return resolvestate("See");
			}
			Goto See;
		Death:
			CHKS F 0
			{
				user_tempvar1 = random(1,8);
				user_tempvar2 = random(1,2);
			}
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			CHKB C 3 Bright A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			CHKB C 0 A_StartSound("weapons/cherryboom");
			DANS R 1 bright A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1) 
				{
					if (user_tempvar2 <= 1)
					{
						A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
					}
					else A_SetTics(0);
				}
				else 
				{
					A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
				}
			}
			DANS R 1 bright 
			{
				if (user_tempvar1 <= 1 && user_tempvar2 <= 1) 
				{
					A_ThrowGrenade("SpectralBigChookGrenade",2,random(2,6),random(6,10),0);
				}
				else A_SetTics(0);
			}
			DANS S 3 bright A_NoBlocking();
			DANS TUVWXYZ 2 bright;
			Stop;
	}
}

class BigChookGrenade : EEProjectile
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		Damage 1;
		Scale 0.5;
		PROJECTILE;
		-NOGRAVITY;
		RENDERSTYLE "Normal";
		+DONTHARMSPECIES;
		Species "FractalChicken";
	}
	
	States
	{
		Spawn:
			CHKS D 3;
			loop;
		Death:
			CHKS DEDE 2;
			CHKS E 0 A_SpawnItemEx("FractalChicken",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class SpectralBigChookGrenade : BigChookGrenade
{
	default
	{
		Radius 3;
		Height 3;
		Speed 10;
		Damage 1;
		Scale 0.5;
		PROJECTILE;
		-NOGRAVITY;
		RenderStyle "OptFuzzy";
		+SHADOW;
		Alpha 0.5;
		+DONTHARMSPECIES;
		Species "FractalChicken";
	}
	
	States
	{
		Spawn:
			CHKS D 3;
			loop;
		Death:
			CHKS DEDE 2;
			CHKS E 0 A_SpawnItemEx("SpectralFractalChicken",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Stop;
	}
}

class ChookEggShot : EEProjectile
{
	default
	{
		Tag "Large Fractal Egg";
		Radius 3;
		Height 3;
		Speed 70;
		DamageFunction (finaldamagedealt); // Damage 12;
		DamageType "Breakfast";
		Scale 2;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 96;
		ProjectileKickback 37; // 75
		Species "FractalChicken";
		+DONTHARMSPECIES;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright 
			{
				int dmg = 18;
				int rad = 72;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.5;
					rad *= 1.5;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggGrenade",2,35,1,6,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class ChookEggGrenade : EEProjectile
{
	default
	{
		Tag "Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 9;
		DamageType "Breakfast";
		Scale 1.5;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 64;
		BounceCount 1;
		ProjectileKickback 18; // 75
		Species "FractalChicken";
		+DONTHARMSPECIES;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 43;
				int rad = 43;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.25;
					rad *= 1.25;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggMini",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EvilEggGrenades("ChookEggMini",2,35,1,10,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class ChookEggMini : EEProjectile
{
	default
	{
		Tag "Small Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 6;
		DamageType "Breakfast";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 32;
		BounceCount 2;
		ProjectileKickback 9; // 75
		Species "FractalChicken";
		+DONTHARMSPECIES;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 21;
				int rad = 21;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.125;
					rad *= 1.125;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL BC 5 Bright;
			Stop;
	}
}

// Creme La Bratte
class CremeDeBratte : DDOrigCreature 
{
	default
	{
		//$Category RPMonsters;
		Health 150;
		Radius 16; // 20
		Height 48; // 56
		Mass 1000;
		Speed 20;
		PainChance 256;
		DamageFactor "Cricket", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Fire", 4;
		DamageFactor "CherryBomb", 2.5;
		DamageFactor "BRocket", 2.5;
		DamageFactor "Spinner", 2.5;
		DamageFactor "Breakfast", 0.4;
		PainChance "Breakfast", 112;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		PainSound "tart/pain";
		DeathSound "aqua/kill1";
		Obituary "%o was creamed by a Creme de Bratte.";
		Tag "Creme De Bratte";
		Species "DeBratte";
	}
	
	override void Tick()
	{
		DDOrigCreature.Tick();
		if (GetAge() <= 3) 
		{
			user_ranktransfer = CountInv("MonsterRating");
			user_leveltransfer = CountInv("MonsterLevel");
		}
		if (GetAge() % 5 == 0)
		{
			if (random(1,16) <= randompick(5,5,6,6,7)) bNOINFIGHTING = false;
																						else bNOINFIGHTING = true;
		}
	}
	
	States
	{
		Spawn:
			TART AB 10 A_Look();
			Loop;
		See:
			TART AB 5;
			TART C 0 A_StartSound("tart/hop",CHAN_BODY);
			TART CCDD 3 A_EEChase("Melee","Missile",0,1,3,1,1);
			TART EAE 2;
			TART A 2;
			Loop;
		Missile:
			TART H 0 A_DynamicMusic();
			TART H 0 A_StartSound("aqua/kill2",1);
			TART HIJ 5;
			TART K 12 A_SpawnProjectile("SeedBall",40,0,0);
			TART H 3;
			Goto See;
		Pain:
			TART F 3 A_EEPain();
			TART GFG 3;
			Goto See;
		Pain.Fire:
		Pain.BRocket:
		Pain.Spinner:
			BART F 3 A_EEPain();
			BART G 3 A_Die("Fire");
			Goto Death.Fire;
		Pain.Cherrybomb:
			TART F 3 A_EEPain();
			TART G 3 
			{
				if (random(1,2) <= 1) A_Die("Cherrybomb");
			}
			TART FG 3;
			Goto See;
		/*
		Death.Suck:
			TART F 5 A_StartSound("VacDed",CHAN_BODY);
			TART F 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			TART F 3 A_EEPain();
			TART GFG 3;
			DANS R 5 bright A_Scream();
			DANS S 3 bright A_NoBlocking();
			DANS TUVWXYZ 2 bright;
			Stop;
		Death.Fire:
		Death.Cherrybomb:
		Death.BRocket:
		Death.Spinner:
			BART F 3 bright;
			BART G 0 
			{
				actor TorchedBratte;
				bool success;
				[success, TorchedBratte] = A_SpawnItemEx("CremeDeBratte_Torched",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				if (TorchedBratte && success)
				{
					EECreature spawn2;
					spawn2 = EECreature(TorchedBratte);
					if (spawn2)
					{
						spawn2 = EECreature(TorchedBratte);
						spawn2.user_levelpreset = user_leveltransfer;
						spawn2.user_rankpreset = user_ranktransfer;
						//Console.Printf("user_levelpreset: %d", spawn2.user_levelpreset);
						//Console.Printf("user_rankpreset: %d", spawn2.user_rankpreset);
					}
				}
				//user_leveltransfer;
			}
			Stop;
	}
}

class CremeDeBratteFuzzy : CremeDeBratte
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Creme De Bratte (Spectral)";
	}
	
	states
	{
		Death.Fire:
		Death.Cherrybomb:
		Death.BRocket:
		Death.Spinner:
			BART F 3 bright;
			BART G 0 
			{
				actor TorchedBratte;
				bool success;
				[success, TorchedBratte] = A_SpawnItemEx("CremeDeBratte_TorchedFuzzy",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				if (TorchedBratte && success)
				{
					EECreature spawn2;
					spawn2 = EECreature(TorchedBratte);
					if (spawn2)
					{
						spawn2 = EECreature(TorchedBratte);
						spawn2.user_levelpreset = user_leveltransfer;
						spawn2.user_rankpreset = user_ranktransfer;
						//Console.Printf("user_levelpreset: %d", spawn2.user_levelpreset);
						//Console.Printf("user_rankpreset: %d", spawn2.user_rankpreset);
					}
				}
				//user_leveltransfer;
			}
			Stop;
	}
}

// Torched Bratte
class CremeDeBratte_Torched : DDOrigCreature
{
	int burndmgint;
	int burndmgbase;
	bool peeved;
	default
	{
		//$Category RPMonsters
		Health 150;
		Radius 16; // 20
		Height 48; // 56
		Mass 1000;
		Speed 20;
		PainChance 256;
		DamageType "Fire";
		DamageFactor "Fire", 0.25;
		PainChance "Fire", 64;
		DamageFactor "Ice", 4;
		DamageFactor "CherryBomb", 0.625;
		PainChance "CherryBomb", 160;
		DamageFactor "BRocket", 0.625;
		PainChance "BRocket", 160;
		DamageFactor "Spinner", 0.625;
		PainChance "Spinner", 160;
		DamageFactor "Breakfast", 2.5;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		PainSound "tart/pain";
		DeathSound "aqua/kill1";
		Obituary "%o was creamed by a Torched Creme de Bratte.";
		Tag "Torched Creme De Bratte";
		Species "DeBratte";
	}
	
	override void PostBeginPlay()
	{
		if (skill <= 0) 
		{
			burndmgbase = 2;
			burndmgint = 7;
		}
		if (skill == 1) 
		{
			burndmgbase = 3;
			burndmgint = 6;
		}
		if (skill == 2) 
		{
			burndmgbase = 3;
			burndmgint = 5;
		}
		if (skill == 3) 
		{
			burndmgbase = 4;
			burndmgint = 4;
		}
		if (skill >= 4) 
		{
			burndmgbase = 5;
			burndmgint = 3;
		}
		DDOrigCreature.PostBeginPlay();
	}
	
	override void Tick()
	{
		DDOrigCreature.Tick();
		if (!IsFrozen() &&
				health > 0 &&
				GetAge() % burndmgint == 0 &&
				target &&
				Distance3D(target) <= 4096 &&
				CheckIfTargetInLOS(90.0, JLOSF_DEADNOJUMP, 4096))
		{
			int firedmg = burndmgbase;
			if (peeved) firedmg *= frandompick(1,1.125,1.125,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.375,1.375,1.5);
			A_Explode(firedmg,(random(24,28)*2),XF_NOTMISSILE|XF_NOSPLASH,false,(random(24,28)*1));
		}

		if (peeved) bNOINFIGHTING = false;
		else
		{
			if (GetAge() % 4 == 0)
			{
				if (random(1,12) <= randompick(5,5,6,6,7)) bNOINFIGHTING = false;
																							else bNOINFIGHTING = true;
			}
		}
	}
	
	States
	{
		Spawn:
			BART AB 10 bright A_Look();
			Loop;
		See:
			BART AB 4 bright
			{
				if (peeved) A_SetTics(2);
			}
			BART C 0 bright A_StartSound("tart/hop",CHAN_BODY);
			BART CCDD 3 bright 
			{
				if (peeved) A_EEChase("Melee",null,0,1,3,1,1);
							 else A_EEChase(null,"Missile",0,1,3,1,1);
				if (peeved) A_SetTics(randompick(1,1,2));
			}
			BART E 2 bright
			{
				if (peeved) A_SetTics(1);
			}
			BART AE 2 bright
			{
				if (peeved) A_SetTics(0);
			}
			BART A 2 bright
			{
				if (peeved) A_SetTics(1);
			}
			Loop;
		Melee:
			BART A 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_SetInvulnerable();
					A_Die("Death");
				}
				else
				{
					A_Die("Illus");
				}
			}
			goto Death;
		Illus:
			#### # 1 A_CCIllusionDisperse();
			stop;
		Missile:
			BART B 0 bright A_DynamicMusic();
			BART B 0 bright A_StartSound("aqua/kill2",1);
			BART BE 5 bright;
			BART E 12 bright A_SpawnProjectile("StarBall",40,0,0);
			BART A 3 bright;
			Goto See;
		Pain:
			BART F 3 bright
			{
				A_EEPain();
				if ((health < ((SpawnHealth() + Stamina) * 0.25)) && random(1,4) <= 1) peeved = true;
				else if ((health < ((SpawnHealth() + Stamina) * 0.10)) && random(1,4) <= 3) peeved = true;
				if (peeved) A_SetTics(randompick(1,1,2));
			}
			BART GFG 3 bright
			{
				if (peeved) A_SetTics(randompick(1,1,2));
			}
			Goto See;
		/*
		Death.Suck:
			BART F 5 bright A_StartSound("VacDed",CHAN_BODY);
			BART F 2 bright A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			BART F 3 bright 
			{
				A_EEPain();
				if (peeved) A_SetTics(randompick(1,1,2));
			}
			BART GFG 3 bright
			{
				if (peeved) A_SetTics(randompick(1,1,2));
			}
			BMX2 A 0 Bright
			{
				if (bSHADOW) 
				{
					bSHADOW = false;
					A_SetRenderStyle(1.0,STYLE_Normal);
				}
			}
			BMX2 A 3 Bright 
			{
				A_StartSound("weapons/cherryboom");
				A_AlertMonsters();
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(28,32);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 B 3 Bright 
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(42,48);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 C 3 Bright
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(56,64);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 D 3 Bright
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(70,80);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 E 3 Bright
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(84,96);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 F 3 Bright
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(98,112);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			BMX2 G 3 Bright
			{
				A_SetTics(randompick(2,2,3,3,3,4,4));
				int expdmg = random(112,128);
				int exprad = expdmg;
				if (peeved) expdmg *= frandom(0.667,0.75);
				A_Explode(expdmg,exprad,XF_NOTMISSILE|XF_NOSPLASH|XF_THRUSTZ,false,(exprad*0.25),0,0,"","Explosive");
			}
			Stop;
	}
}

class CremeDeBratte_TorchedFuzzy : CremeDeBratte_Torched
{
	default
	{
		+SHADOW
		RenderStyle "OptFuzzy";
		Tag "Torched Creme De Bratte (Spectral)";
	}
}

// Reaper
class Reaper : DDOrigCreature
{
	default
	{
		//$Category RPMonsters;
		Health 100;
		Radius 20;
		Height 56;
		Speed 12;
		Scale 1;
		Mass 500;
		PainChance 256;
		DamageFactor "Zap", 5;
		DamageFactor "Cricket", 2;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+FLOAT;
		+FLOATBOB;
		+NOGRAVITY;
		+DONTTHRUST;
		+DONTFALL;
		SeeSound "reaper/sight";
		PainSound "gard/pain";
		DeathSound "gard/death";
		ActiveSound "reaper/sight";
		MeleeSound "gard/swing";
		MissileType "JuggerAxe";
		Obituary "%o was harvested.";
		Tag "Reaper";
	}
	
	void A_ReaperAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
		if (type == 0) A_CustomComboAttack("JuggerAxe", 32, (dmg), "gard/swing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "gard/swing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile("JuggerAxe",32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}
	
	States
	{
		Spawn:
			REP2 A 10 A_FloatLook(16);
			Loop;
		See:
			REP2 BBCC 3 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			REP2 D 0 A_StartSound("reaper/sight",CHAN_BODY);
		Melee:
			REP2 D 0 A_DynamicMusic();
			REP2 DEFG 4 A_FaceTarget();
			REP2 H 6
			{
				A_ReaperAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 15;
						A_ReaperAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_ReaperAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 75)
					{
						angle -= 22.5;
						A_ReaperAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_ReaperAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 105)
					{
						angle -= 7.5;
						A_ReaperAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_ReaperAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			REP2 I 6;
			Goto See;
		Pain:
			REP2 J 6 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			REP2 J 3;
			Goto See;
		/*
		Death.Suck:
			REP2 J 5 A_StartSound("VacDed",CHAN_BODY);
			REP2 J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,4);
			Stop;
		*/
		Death:
			REP2 J 5 Bright A_Scream();
			REP2 T 4 Bright { bFLOATBOB = false; }
			REPR K 4 Bright A_NoBlocking();
			REPR LMNOPQRS 4 Bright;
			Stop;
	}
}

// Big Hulking Devil
class Devil : DDOrigCreature
{
	default
	{
		//$Category RPMonsters
		Health 450;
		Radius 32;
		Height 80;
		Speed 18; // 18
		PainChance 200; // 200
		DamageFactor "Suck", 0.96;
		Painchance "Suck", 192;
		DamageFactor "Chop", 0.75;
		PainChance "Chop", 150;
		DamageFactor "Bonk", 0.75;
		PainChance "Bonk", 150;
		DamageFactor "Cricket", 1.25;
		PainChance "Cricket", 250;
		DamageFactor "Zap", 3; // 5
		PainChance "Zap", 256;
		MeleeThreshold 208;
		MeleeRange 88; // 80
		MaxTargetRange 2048; // 512
		Mass 50000; // 5000
		Scale 1.5;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+DONTHARMCLASS;
		SeeSound "muddy/sight";
		PainSound "muddy/pain";
		DeathSound "virtuoso/death";
		ActiveSound "muddy/active";
		MeleeSound "mallethit";
		Obituary "%o was flattened by a big hulking devil.";
		Tag "Big Hulking Devil";
		MissileType "BadJackshot";
		//DropItem "JackAmmo";
		//DropItem "JackAmmo", 64;
		//DropItem "JackAmmo", 16;
		//DropItem "JackAmmo", 4;
		//DropItem "JackAmmoBig", 200;
		//DropItem "JackAmmoBig", 50;
		//DropItem "JackAmmoBig", 13;
		//DropItem "JackAmmoBig", 4;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("JackAmmo",1,256);
			A_DropItem("JackAmmo",1,64);
			A_DropItem("JackAmmo",1,16);
			A_DropItem("JackAmmo",1,4);
			
			A_DropItem("AppleJack",1,16);
		}
		else
		{
			A_DropItem("JackAmmo",1,256,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,64,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,16,ADI_FULLAMMO);
			A_DropItem("JackAmmo",1,4,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,200,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,50,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,13,ADI_FULLAMMO);
			A_DropItem("JackAmmoBig",1,4,ADI_FULLAMMO);
			
			A_DropItem("AppleJack",1,192,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,48,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,12,ADI_FULLAMMO);
			A_DropItem("AppleJack",1,3,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		if (health > 0)
		{
			if (InStateSequence(curstate,ResolveState("Melee")))
			{
				A_SetInventory("DevilMeleeWeakness",1);
			}
			else
			{
				A_SetInventory("DevilMeleeWeakness",0);
			}
			//Console.Printf("visdir: %d, Cloak: %d [tic: %d]", visdir, CountInv("ForsakenCloakResist"), gametic);
		}
		DDOrigCreature.Tick();
	}
	
	void A_DevilAtk(int type = 0, double xyoff = 0.0)
	{
		//Console.Printf("type: %d, angle: %.8f", type, angle);
		string projtype = "BadJackshot";
		if (random(1,100) <= (20 + CountInv("MonsterLevel") * 0.334)) projtype = "KragBall";
		int dmg = A_CalcDamageFormula2(random(50,80),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
		if (type == 0) A_CustomComboAttack(projtype, 32, (dmg), "malletswing");
		else
		{
			if (CheckMeleeRange())
			{
				A_EECustomMeleeAttack((dmg), "malletswing", "", 'Melee', true, false);
			}
			else
			{
				A_SpawnProjectile(projtype,32,(0+xyoff),0.0,0,0.0,AAPTR_TARGET);
			}
		}
		//Console.Printf("angle: %.8f", angle);
	}

	States
	{
		Spawn:
			ONII A 10 A_Look();
			Loop;
		See:
			ONII AABBCCDD 3 fast
			{
				if (random(1,128) <= (1 + (CountInv("MonsterLevel") * 0.75))) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				else A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			ONII E 0 fast A_DynamicMusic();
			ONII EF 4 fast A_FaceTarget();
			ONII G 6 fast
			{
				int dmg = A_CalcDamageFormula2(randompick(55,70,70,70,85,85,85,100,100,100,115),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				A_CustomMeleeAttack (dmg, "mallethit", "malletswing", "bonk", 1);
			}
			ONII HIJ 6 fast;
			Goto See;
		Missile:
			ONII J 0 fast A_StartSound("muddy/sight",CHAN_BODY);
			ONII J 0 fast A_DynamicMusic();
			ONII JI 6 fast A_FaceTarget();
			ONII F 7 fast
			{
				A_DevilAtk(0,0.0);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						angle -= 15;
						A_DevilAtk(1,-15.0);
						angle += 15;

						angle += 15;
						A_DevilAtk(1,15.0);
						angle -= 15;
					}
					if (CountInv("MonsterLevel") >= 45)
					{
						angle -= 22.5;
						A_DevilAtk(1,-22.5);
						angle += 22.5;

						angle += 22.5;
						A_DevilAtk(1,22.5);
						angle -= 22.5;
					}
					if (CountInv("MonsterLevel") >= 60)
					{
						angle -= 7.5;
						A_DevilAtk(1,-7.5);
						angle += 7.5;

						angle += 7.5;
						A_DevilAtk(1,7.5);
						angle -= 7.5;
					}
				}
			}
			ONII J 6 fast;
			Goto See;
		Pain:
			ONII E 6 fast A_EEPain(1,random(36,66),12,0,0,46);
			ONII J 3 fast; //A_DynamicMusic();
			Goto See;
		/*
		Death.Suck:
			ONII E 5 A_StartSound("VacDed",CHAN_BODY);
			ONII E 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			ONII E 8 A_StartSound("slots/death",1);
			ONII K 8 bright A_Scream();
			DANS R 5 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			DANS STUVWXYZ 5 bright;
			Stop;
	}
}

// Pushy Angel
class PushyAngel : DDOrigCreature
{
	default
	{
		//$Category RPMonsters;
		Health 350;
		Radius 20;
		Height 80;
		Speed 10;
		PainChance 256;
		Mass 1500;
		DamageFactor "Fire", 2;
		DamageFactor "CherryBomb", 1.5;
		DamageFactor "Spinner", 1.5;
		DamageFactor "BRocket", 1.5;
		DamageFactor "Popper", 0.125;
		PainChance "Popper", 32;
		DamageFactor "Chop", 2;
		DamageFactor "Holy", 0.125;
		PainChance "Holy", 32;
		DamageFactor "Sigil", 0.25;
		PainChance "Sigil", 64;
		DamageFactor "SpectralLow", 0.25;
		PainChance "SpectralLow", 64;
		DamageFactor "Zap", 2.5; // 5
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+FLOAT;
		+NOGRAVITY;
		+FLOATBOB;
		+DONTFALL;
		SeeSound "angel/active";
		ActiveSound "angel/active";
		DeathSound "virtuoso/death";
		Obituary "%o was punished by a pushy angel.";
		Tag "Angel (Pushy)";
		Species "PushyAngel";
		//DropItem "ItemSatchel", 1;
		//DropItem "MusicAmmo", 96;
		//DropItem "MusicAmmo", 24;
		//DropItem "MusicAmmo", 6;
		//DropItem "MusicAmmo", 1;
		//DropItem "AppleWine", 96;
		//DropItem "AppleWine", 6;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("AppleWine",1,96);
			A_DropItem("AppleWine",1,6);
		}
		else
		{
			A_DropItem("ItemSatchel",1,1,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,96,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,6,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,1,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,96,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,6,ADI_FULLAMMO);
			
			A_DropItem("Grimophone",1,1,ADI_FULLAMMO);
		}
	}
	
	States
	{
		Spawn:
			ANGL C 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			ANGL ABC 8 fast A_FloatLook(16);
			Loop;
		See:
			ANGL AABBCC 3 fast
			{
				A_FloatChaseCheck(4,8,12,16,0.2,0.2);
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { bAVOIDMELEE = true; }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			ANGL C 0 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			Loop;
		Missile:
			ANGA A 0 fast A_DynamicMusic();
			ANGA A 0 fast A_Jump(128,"DeathSong");
			ANGA A 0 fast A_Jump(160,"AnnoyingSong");
			ANGA A 0 fast A_StartSound("Handmother/Zap");
			ANGA AB 5 fast bright A_FaceTarget();
			ANGA C 3 fast bright A_SpawnProjectile("BadZapShot",48);
			ANGA B 3 fast bright A_FaceTarget();
			ANGA C 3 fast bright A_SpawnProjectile("BadZapShot",48);
			ANGA B 3 fast bright A_FaceTarget();
			ANGA C 3 fast bright A_SpawnProjectile("BadZapShot",48);
			ANGA C 5 fast bright;
			ANGL A 3 fast;
			Goto See;
		AnnoyingSong:
			ANGL A 0 fast A_StartSound("angel/ballattack",CHAN_VOICE);
			ANGL A 8 fast A_FaceTarget();
			ANGA D 8 fast A_StartSound("virtuoso/musicfire");
			ANGA D 6 fast 
			{
				A_SpawnProjectile("MusicBall",48);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						if (CountInv("MonsterLevel") >= 45)
						{
							A_SpawnProjectile("MusicBall",48,24);
							A_SpawnProjectile("MusicBall",48,-24);
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall",48,12);
								A_SpawnProjectile("MusicBall",48,-12);
							}
						}
						else
						{
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall",48,24);
								A_SpawnProjectile("MusicBall",48,-24);
								if (random(1,16) <= random(1,3))
								{
									A_SpawnProjectile("MusicBall",48,12);
									A_SpawnProjectile("MusicBall",48,-12);
								}
							}
						}
					}
					else
					{
						if (random(1,16) <= random(1,3))
						{
							A_SpawnProjectile("MusicBall",48,24);
							A_SpawnProjectile("MusicBall",48,-24);
						}
					}
				}
			}
			ANGA D 10 fast;
			ANGL BA 4 fast;
			Goto See;
		DeathSong:
			ANGL A 0 fast A_StartSound("angel/deathsong",CHAN_VOICE);
			ANGL A 8 fast A_FaceTarget();
			ANGA D 8 fast;
			ANGA DDDDDD 6 fast A_SpawnProjectile("JorgSong",48);
			ANGA D 10 fast;
			ANGL BA 4 fast;
			Goto See;
		Pain:
			ANGP A 3 fast
			{
				A_FloatPain(0,8,64);
				A_EEPain(1,random(36,66),12,0,0,46);
				user_painfastchase = 8 * random(4,12);
			}
			ANGP A 6 fast; //A_DynamicMusic
			ANGA A 6 fast;
			Goto See;
		/*
		Death.Suck:
			ANGP A 5 A_StartSound("VacDed",CHAN_BODY);
			ANGP A 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,12);
			Stop;
		*/
		Death:
			ANGL D 6 bright A_Scream();
			ANGL EF 5 bright;
			ANGL G 4 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			Stop;
	}
}


class AAngelSong : EEProjectile
{
	default
	{
		Tag "Refined Death Song";
		Radius 2;
		Height 4;
		Speed 24; // 20;
		DamageFunction (finaldamagedealt);
		Scale 0.75;
		Projectile;
		+FLOATBOB
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,8),0.0225,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,8),0.0225,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			PBAL A 0 Bright A_StartSound("jorg/spit");
			PBAL AAAA 1 Bright 
			{
				A_SpawnItemEx("notetrail2", 0, 0, 0, 0, 0, 0, 0, 128);
				A_CStaffMissileSlither();
				if (random(1,4) <= 1) A_CStaffMissileSlither();
				if (random(1,16) <= 1) A_CStaffMissileSlither();
			}
			PBAL A 0 Bright;
			loop;
		Death:
			TNT1 A 1 A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			stop;
	}
}

// Pushy [Arch]-Angel*
class PushyArchAngel : DDOrigCreature
{
	double tempspd;
	int warpchance;
	int painextwarpchance;
	int dthsongangchance;
	default
	{
		//$Category RPMonsters;
		Health 1750; // 350
		Radius 15; // 20
		Height 60; // 80
		Scale 0.75;
		Speed 20; // 10
		PainChance 83; // 256
		Mass 75000; // 1500
		DamageFactor "Fire", 0.5;
		PainChance "Fire", 41;
		DamageFactor "CherryBomb", 0.75;
		PainChance "CherryBomb", 62;
		DamageFactor "Spinner", 0.75;
		PainChance "Spinner", 62;
		DamageFactor "BRocket", 0.75;
		PainChance "BRocket", 62;
		DamageFactor "Popper", 1.5;
		PainChance "Popper", 125;
		DamageFactor "Chop", 1;
		PainChance "Chop", 83;
		DamageFactor "Lead", 2;
		PainChance "Lead", 166;
		DamageFactor "Cricket", 1.5;
		PainChance "Cricket", 125;
		DamageFactor "Bonk", 0.25;
		PainChance "Bonk", 21;
		DamageFactor "Holy", 0.0;
		PainChance "Holy", 0;
		DamageFactor "Sigil", 0.75;
		PainChance "Sigil", 62;
		DamageFactor "SpectralLow", 0.85;
		PainChance "SpectralLow", 62;
		DamageFactor "Zap", 0.25; // 5
		PainChance "Zap", 21;
		DamageFactor "Beats", 0.5; // 5
		PainChance "Beats", 41;
		MONSTER;
		+FLOORCLIP;
		+NOTARGET;
		+NOINFIGHTING;
		+NOBLOOD;
		+FLOAT;
		+NOGRAVITY;
		+FLOATBOB;
		+DONTFALL;
		SeeSound "angel/active2";
		ActiveSound "angel/active2";
		DeathSound "angel/aangeldie";
		Obituary "%o was punished by a pushy arch-angel.";
		Tag "Arch-Angel (Pushy)";
		Species "PushyAngel";
		//DropItem "ItemSatchel", 1;
		//DropItem "ItemSatchel", 1;
		//DropItem "ItemSatchel", 1;
		//DropItem "ItemSatchel", 1;
		//DropItem "MusicAmmo", 192;
		//DropItem "MusicAmmo", 96;
		//DropItem "MusicAmmo", 48;
		//DropItem "MusicAmmo", 24;
		//DropItem "MusicAmmo", 12;
		//DropItem "MusicAmmo", 6;
		//DropItem "MusicAmmo", 3;
		//DropItem "MusicAmmo", 2;
		//DropItem "MusicAmmo", 1;
		//DropItem "AppleWine", 192;
		//DropItem "AppleWine", 96;
		//DropItem "AppleWine", 48;
		//DropItem "AppleWine", 24;
		//DropItem "AppleWine", 12;
		//DropItem "AppleWine", 6;
	}
	
	void A_Drop()
	{
		actor player = players[0].mo;
		if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls")) 
		{ 
			A_DropItem("AppleWine",1,192);
			A_DropItem("AppleWine",1,48);
			A_DropItem("AppleWine",1,12);
		}
		else
		{
			A_DropItem("ItemSatchel",1,1,ADI_FULLAMMO);
			A_DropItem("ItemSatchel",1,1,ADI_FULLAMMO);
			A_DropItem("ItemSatchel",1,1,ADI_FULLAMMO);
			A_DropItem("ItemSatchel",1,1,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,192,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,96,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,48,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,24,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,12,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,6,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,3,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,2,ADI_FULLAMMO);
			A_DropItem("MusicAmmo",1,1,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,192,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,96,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,48,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,24,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,12,ADI_FULLAMMO);
			A_DropItem("AppleWine",1,6,ADI_FULLAMMO);
			
			A_DropItem("Grimophone",1,1,ADI_FULLAMMO);
		}
	}
	
	override void Tick()
	{
		if (GetAge() % 34 == 0)
		{
			if (health < (SpawnHealth() + Stamina)) health += randompick(1,1,1,2,2,3);
			if (health < ((SpawnHealth() + Stamina) * 0.5)) health += randompick(1,1,1,2,2,3);
			if (health < ((SpawnHealth() + Stamina) * 0.25)) health += randompick(1,1,1,2,2,3);
			if (health < ((SpawnHealth() + Stamina) * 0.1)) health += randompick(1,1,1,2,2,3);
			if (health < ((SpawnHealth() + Stamina) * 0.05)) health += randompick(1,1,1,2,2,3);
		}
		if (GetAge() % 34 == 17)
		{
			if (random(1,8) <= 1)
			{
				if (health < (SpawnHealth() + Stamina)) health += randompick(1,1,1,2,2,3);
				if (health < ((SpawnHealth() + Stamina) * 0.5)) health += randompick(1,1,1,2,2,3);
				if (health < ((SpawnHealth() + Stamina) * 0.25)) health += randompick(1,1,1,2,2,3);
				if (health < ((SpawnHealth() + Stamina) * 0.1)) health += randompick(1,1,1,2,2,3);
				if (health < ((SpawnHealth() + Stamina) * 0.05)) health += randompick(1,1,1,2,2,3);
			}
		}
		DDOrigCreature.Tick();
	}
	
	void A_ArchAChase()
	{
		A_FloatChaseCheck(4,8,12,16,0.1,0.1);
		if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { bAVOIDMELEE = true; }
		
		A_FastChaseCalc(6,12);
		if (random(1,256) <= user_fastchasechance) { A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_EEChase("Melee","Missile",0,1,3,1,1); }
		user_painfastchase = 0;
	}
	
	States
	{
		Spawn:
			AANL C 0 A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			AANL ABC 8 fast A_FloatLook(16);
			Loop;
		See:
			AANL AABBCC 3 fast A_ArchAChase();
			AANL B 0 A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			AANL AABBCC 3 fast A_ArchAChase();
			AANL C 0 
			{
				A_SpawnItemEx("Mininote2", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
				
				warpchance = (random(1,3) + (CountInv("MonsterLevel") * 0.0875));
				if (target)
				{
					if (random(1,64) <= (warpchance + painextwarpchance)) 
					{
						if (CheckIfTargetInLOS(90.0, JLOSF_DEADNOJUMP, 16384))
						{
							painextwarpchance = 0;
							return resolvestate("QuickWarp");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				painextwarpchance--;
				if (painextwarpchance < 0) painextwarpchance = 0;
				return resolvestate(null);
			}
			Loop;
		QuickWarp:
			AANL A 0
			{
				int roll = random(1,3);
				if (roll == 1) return resolvestate("QWarpF1");
				if (roll == 2) return resolvestate("QWarpF2");
				if (roll == 3) return resolvestate("QWarpF3");
				return resolvestate(null);
			}
			goto QWarpF1;
		QWarpF1:
			AANL A 0
			{
				tempspd = speed;
				speed *= 0.5;
				specialspeed1 = 0;
				A_SetRenderStyle(12,1.00);
				SetShade("Purple");
				A_UnSetshootable();
				A_UnsetSolid();
				A_SetInvulnerable();
			}
			goto QWarp;
		QWarpF2:
			AANL B 0
			{
				tempspd = speed;
				speed *= 0.5;
				specialspeed1 = 0;
				A_SetRenderStyle(12,1.00);
				SetShade("Purple");
				A_UnSetshootable();
				A_UnsetSolid();
				A_SetInvulnerable();
			}
			goto QWarp;
		QWarpF3:
			AANL C 0
			{
				tempspd = speed;
				speed *= 0.5;
				specialspeed1 = 0;
				A_SetRenderStyle(12,1.00);
				SetShade("Purple");
				A_UnSetshootable();
				A_UnsetSolid();
				A_SetInvulnerable();
			}
			goto QWarp;
		QWarp:
			#### # 1
			{
				A_FadeOut(0.2);
				A_StartSound("vokter/tele");
			}
			#### #### 1 A_FadeOut(0.2);
			#### ############### 0 
			{
				if (random(1,16) <= random(5,8)) A_Wander();
			}
			#### ############### 0 
			{
				if (random(1,16) <= random(8,11)) A_Wander();
			}
			#### ############### 0 
			{
				if (random(1,16) <= random(6,9)) A_Wander();
			}
			#### ############### 0 
			{
				if (random(1,16) <= random(7,10)) A_Wander();
			}
			#### # 1
			{
				A_FadeIn(0.2);
				A_StartSound("vokter/tele2");
			}
			#### #### 1 A_FadeIn(0.2);
			#### # 0
			{
				speed = tempspd;
				specialspeed1 = 0;
				A_SetSolid();
				A_SetShootable();
				A_UnSetInvulnerable();
				A_SetRenderStyle(1,1.00);
				SetShade("Purple");
				
				if (random(1,32) <= random(1,3)) return resolvestate("Missile");
				return resolvestate(null);
			}
			goto See;
		Missile:
			AANG A 0 fast A_DynamicMusic();
			AANG A 0 fast A_Jump(128,"DeathSong");
			AANG A 0 fast A_Jump(160,"AnnoyingSong");
			AANG A 0 fast A_StartSound("Handmother/Zap");
			AANG AB 4 fast bright A_FaceTarget();
			AANG C 2 fast bright 
			{
				A_SpawnProjectile("BadZapShot",60,-24);
				A_SpawnProjectile("BadZapShot",60,24);
				A_SpawnProjectile("BadZapShot",36,24);
				A_SpawnProjectile("BadZapShot",36,-24);
			}
			AANG B 2 fast bright A_FaceTarget();
			AANG C 2 fast bright 
			{
				A_SpawnProjectile("BadZapShot",60,-24);
				A_SpawnProjectile("BadZapShot",60,24);
				A_SpawnProjectile("BadZapShot",36,24);
				A_SpawnProjectile("BadZapShot",36,-24);
			}
			AANG B 2 fast bright A_FaceTarget();
			AANG C 2 fast bright 
			{
				A_SpawnProjectile("BadZapShot",60,-24);
				A_SpawnProjectile("BadZapShot",60,24);
				A_SpawnProjectile("BadZapShot",36,24);
				A_SpawnProjectile("BadZapShot",36,-24);
			}
			AANG C 4 fast bright;
			AANL A 2 fast;
			Goto See;
		AnnoyingSong:
			AANL A 0 fast A_StartSound("angel/ballattack2",CHAN_VOICE);
			AANL A 5 fast A_FaceTarget();
			AANG D 5 fast A_StartSound("virtuoso/musicfire");
			AANG D 4 fast 
			{
				A_SpawnProjectile("MusicBall2",48);
				if (exex_monsterlevelenabledflags)
				{
					if (CountInv("MonsterLevel") >= 30)
					{
						if (CountInv("MonsterLevel") >= 45)
						{
							A_SpawnProjectile("MusicBall2",48,24);
							A_SpawnProjectile("MusicBall2",48,-24);
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall2",48,12);
								A_SpawnProjectile("MusicBall2",48,-12);
							}
						}
						else
						{
							if (random(1,4) <= random(1,3))
							{
								A_SpawnProjectile("MusicBall2",48,24);
								A_SpawnProjectile("MusicBall2",48,-24);
								if (random(1,16) <= random(1,3))
								{
									A_SpawnProjectile("MusicBall2",48,12);
									A_SpawnProjectile("MusicBall2",48,-12);
								}
							}
						}
					}
					else
					{
						if (random(1,16) <= random(1,3))
						{
							A_SpawnProjectile("MusicBall2",48,24);
							A_SpawnProjectile("MusicBall2",48,-24);
						}
					}
				}
			}
			AANG D 0 fast A_Jump(160,"EndAnnoySong");
			AANG D 0 fast A_MonsterRefire(32,"EndAnnoySong");
			AANG D 0 fast A_JumpIfHealthLower(1,"EndAnnoySong",AAPTR_TARGET);
			loop;
		EndAnnoySong:
			AANG D 7 fast;
			AANL BA 3 fast;
			Goto See;
		DeathSong:
			AANL A 0 fast A_StartSound("angel/deathsong2",CHAN_VOICE);
			AANL A 6 fast A_FaceTarget();
			AANG D 6 fast
			{
				dthsongangchance = 16;
				if (target && PlayerPawn(target))
				{
					int roll = random(1,20);
					if (roll >= 1 && roll <= 4) dthsongangchance = 16;
					if (roll >= 5 && roll <= 8) dthsongangchance = 8;
					if (roll >= 9 && roll <= 11) dthsongangchance = 32;
					if (roll >= 12 && roll <= 14) dthsongangchance = 4;
					if (roll >= 15 && roll <= 16) dthsongangchance = 64;
					if (roll >= 17 && roll <= 18) dthsongangchance = 2;
					if (roll == 19) dthsongangchance = 128;
					if (roll >= 20) dthsongangchance = 1;
				}
				else
				{
					int roll = random(1,4);
					if (roll >= 1 && roll <= 3) dthsongangchance = 4;
					if (roll == 4) dthsongangchance = 16;
				}
			}
		SongLoop:
			AANG DDDDDDDDD 4 fast 
			{
				int currang = angle;
				int curpitch = pitch;
				if (random(1,dthsongangchance) <= randompick(0,1,1,1,1,2,2,3))
				{
					A_SpawnProjectile("AAngelSong",random(45,51),0,frandom(-22.5,22.5),CMF_OFFSETPITCH,frandom(-5.625,5.625));
				}
				else
				{
					A_SpawnProjectile("AAngelSong",48);
				}
			}
			AANG D 0 fast A_Jump(32,"SongEnd");
			AANG D 0 fast A_MonsterRefire(32,"SongEnd");
			AANG D 0 fast A_JumpIfHealthLower(1,"SongEnd",AAPTR_TARGET);
			loop;
		SongEnd:
			AANG D 7 fast;
			AANL BA 3 fast;
			Goto See;
		Pain:
			AANP A 3 fast
			{
				if (!painextwarpchance) painextwarpchance += random(9,13);
													 else painextwarpchance += random(3,7);
				A_FloatPain(0,8,64);
				A_EEPain(1,random(36,66),12,0,0,46);
				user_painfastchase = 8 * random(4,12);
			}
			AANP A 6 fast; //A_DynamicMusic
			AANG A 6 fast;
			Goto See;
		Pain.Lead:
			AANP A 3 fast
			{
				if (!painextwarpchance) painextwarpchance += random(7,10);
													 else painextwarpchance += random(1,4);

				A_FloatPain(0,8,64);
				A_EEPain(1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			AANP A 3 fast; //A_DynamicMusic
			AANP A 6 fast; //A_DynamicMusic
			AANG A 6 fast;
			Goto See;
		Pain.Beats:
			AANP A 1 fast
			{
				if (!painextwarpchance) painextwarpchance += random(3,4);
													 else painextwarpchance += randompick(0,0,0,1);

				A_FloatPain(0,8,64);
				A_EEPain(1,random(5,6),4,0,0,5);
				user_painfastchase = 1 * random(1,8);
			}
			AANP A 2 fast; //A_DynamicMusic
			AANG A 2 fast;
			Goto See;
		/*
		Death.Suck:
			AANP A 5 A_StartSound("VacDed",CHAN_BODY);
			AANP A 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,60);
			Stop;
		*/
		Death:
			AANL D 6 bright 
			{
				A_StartSound("virtuoso/death",CHAN_7,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_Scream();
			}
			AANL EF 5 bright;
			AANL G 4 bright 
			{
				A_NoBlocking();
				A_Drop();
			}
			Stop;
	}
}

// Fosaken [default type]
class GhostCloudSpawner : EEBaseZSC
{
	default
	{
		radius 0;
		height 0;
		-SOLID;
		+NOGRAVITY;
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("GhostCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1), 0.0, SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			Stop;
	}
}

class GhostCloud : EEBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.5;
		radius 0;
		height 0;
		-SOLID;
		+NOGRAVITY;
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
		+DONTSPLASH;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.05);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.05);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.05);
			Goto Spawn+12;
	}
}

class Forsaken : CoSForsaken
{
	default
	{
		//$Category RPMonsters;
		Health 100;
		Radius 20;
		Height 56;
		Speed 12;
		Scale 1;
		Mass 200;
		PainChance 100;
		DamageFactor "Zap", 5;
		DamageFactor "Lead", 0.5;
		DamageFactor "Suck", 4;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		+STEALTH;
		Renderstyle "Add";
		Alpha 0.75;
		SeeSound "forsaken/sight";
		PainSound "forsaken/pain";
		DeathSound "forsaken/death";
		ActiveSound "forsaken/active";
		Obituary "%o became one of the Forsaken.";
		Tag "Forsaken";
	}
	
	void A_ForsChase()
	{
		A_FloatChaseCheck(4,8,12,16,0.5,0.5);

		A_FastChaseCalc(4,16);
		int flag2 = 0;
		if (random(1,256) <= user_fastchasechance) 
		{
			if (health < ((SpawnHealth() + Stamina) * 0.334))
			{
				if (health < ((SpawnHealth() + Stamina) * 0.1))
				{
					if (random(1,32) <= random(29,32)) flag2 = CHF_FASTCHASE|CHF_RESURRECT;
																				else flag2 = CHF_FASTCHASE;
				}
				else
				{
					if (random(1,16) <= random(1,3)) flag2 = CHF_FASTCHASE|CHF_RESURRECT;
																			else flag2 = CHF_FASTCHASE;
				}
			}
			else 
			{
				flag2 = CHF_FASTCHASE;
			}
			A_FloatSetFChaseT(randompick(0,4));
		}
		else
		{
			if (health < ((SpawnHealth() + Stamina) * 0.334))
			{
				if (health < ((SpawnHealth() + Stamina) * 0.1))
				{
					if (random(1,32) <= random(29,32)) flag2 = CHF_RESURRECT;
																				else flag2 = 0;
				}
				else
				{
					if (random(1,16) <= random(1,3)) flag2 = CHF_RESURRECT;
																			else flag2 = 0;
				}
			}
			if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
			
			A_EEChase("Melee",null,flag2,1,3,1,1);
		}
		user_painfastchase = 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 6 fast A_FloatLook(16);
			Loop;
		See:
			GOST AABBCC 3 fast A_ForsChase();
			TNT1 A 0 fast A_ForSpawnCloud(0);
			GOST DDEEFF 3 fast A_ForsChase();
			TNT1 AAA 0 fast A_ForSpawnCloud(1);
			Loop;
		Melee:
			GOST G 0 fast
			{
				A_DynamicMusic();
			}
			GOST GH 6 fast A_FaceTarget();
			GOST I 6 fast
			{
				int dmg = A_CalcDamageFormula2(random(15,35),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				A_CustomMeleeAttack (dmg, "ghost/bite", "ghost/bite", "", 1);
			}
			GOST I 6 fast;
			GOST C 6 fast;
			Goto See;
		Pain:
			GOST K 6 fast
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			TNT1 AA 0 fast 
			{
				if (A_CheckIfCCIllusion() == false) A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
				else
				{
					if (random(1,8) <= 1) A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
				}
			}
			GOST G 3 fast;
			Goto See;
		/*
		Death.Suck:
			GOST K 5 A_StartSound("VacDed",CHAN_BODY);
			GOST K 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,3);
			TNT1 AAA 0 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
		*/
		Heal:
			GOST A 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true);
					A_SetInvulnerable();
					A_Die();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			GOST AABBCCDDEEFF 1;
			GOST J 3 A_Scream();
			GOST KLM 2 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			GOST N 3 A_NoBlocking();
			Stop;
		Death:
			GOST J 5 A_Scream();
			GOST KLM 4 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			GOST N 5 A_NoBlocking();
			Stop;
	}
}

// Fosaken [Quisling type]*
class Forsaken_Quisling : CoSForsaken
{
	default
	{
		//$Category RPMonsters;
		Health 250;
		Radius 20;
		Height 56;
		Speed 12;
		Scale 1;
		Mass 200;
		PainChance 200;
		DamageFactor "Zap", 2.5;
		DamageFactor "Lead", 1;
		DamageFactor "Suck", 0.2;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		+GHOST;
		+STEALTH;
		Renderstyle "Add";
		Alpha 0.75;
		SeeSound "quisling/sight";
		PainSound "quisling/pain";
		DeathSound "quisling/death";
		ActiveSound "quisling/active";
		Obituary "%o became one of the Forsaken.";
		Tag "Forsaken Quisling";
	}
	
	void A_ForsChase()
	{
		A_FloatChaseCheck(4,8,12,16,0.2,0.2);

		A_FastChaseCalc(6,12);
		actor player = players[0].mo;
		if (random(1,256) <= user_fastchasechance) 
		{
			if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
			{
				A_EEChase("Melee",null,CHF_FASTCHASE,1,3,1,1);
			}
			else
			{
				A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			A_FloatSetFChaseT(randompick(0,4));
		}
		else
		{
			if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
			{
				A_EEChase("Melee",null,0,1,3,1,1); 
			}
			else
			{
				A_EEChase("Melee","Missile",0,1,3,1,1); 
			}
		}
		user_painfastchase = 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 6 fast A_FloatLook(16);
			Loop;
		See:
			QORG AABBCC 2 fast A_ForsChase();
			TNT1 AAA 0 fast A_ForSpawnCloud(0);
			QORG DDEEFF 2 fast A_ForsChase();
			TNT1 AAA 0 fast A_ForSpawnCloud(1);
			Loop;
		Melee:
		Missile:
			QORG G 0 fast A_DynamicMusic();
			QORG GH 6 fast A_FaceTarget();
			QORG I 6 fast 
			{
				actor player = players[0].mo;
				int dmg = A_CalcDamageFormula2(random(20,40),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					A_CustomMeleeAttack(dmg, "ghost/bite", "ghost/bite", "", 1);
				}
				else
				{
					A_CustomComboAttack("BadZapShot", 32, (dmg), "ghost/bite");
					if (!CheckMeleeRange()) A_StartSound("zappo",CHAN_BODY);
				}
			}
			QORG I 6 fast;
			QORG C 6 fast;
			Goto See;
		Pain:
			QORG J 6 fast
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 6 * random(2,8);
			}
			TNT1 AA 0 fast A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			QORG G 3 fast;
			Goto See;
		/*
		Death.Suck:
			QORG J 5 A_StartSound("VacDed",CHAN_BODY);
			QORG J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,3);
			TNT1 AAA 0 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
		*/
		Death:
			QORG J 5 A_Scream();
			QOST KLM 4 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			QOST N 5 A_NoBlocking();
			Stop;
	}
}

// Fosaken [Jorgensen type]
class Forsaken_Jorgensen : CoSForsaken
{
	default
	{
		//$Category RPMonsters;
		Health 300;
		Radius 20;
		Height 56;
		Speed 12;
		Scale 1;
		Mass 200;
		PainChance 200;
		DamageFactor "Zap", 5;
		DamageFactor "Lead", 0.5;
		DamageFactor "Suck", 0.1;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+NOTARGET;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		+GHOST;
		+STEALTH;
		Renderstyle "Add";
		Alpha 0.75;
		SeeSound "jorg/sight";
		PainSound "jorg/pain";
		DeathSound "jorg/death";
		ActiveSound "jorg/active";
		Obituary "%o became one of the Forsaken.";
		Tag "Forsaken Jorgensen";
	}
	
	void A_ForsChase()
	{
		A_FloatChaseCheck(4,8,12,16,0.125,0.125);

		A_FastChaseCalc(8,8);
		actor player = players[0].mo;
		if (random(1,256) <= user_fastchasechance) 
		{
			if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
			{
				A_EEChase("Melee",null,CHF_FASTCHASE,1,3,1,1);
			}
			else
			{
				A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
			}
			A_FloatSetFChaseT(randompick(0,4));
		}
		else
		{
			if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
			{
				A_EEChase("Melee",null,0,1,3,1,1); 
			}
			else
			{
				A_EEChase("Melee","Missile",0,1,3,1,1); 
			}
		}
		user_painfastchase = 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 6 A_FloatLook(16);
			Loop;
		See:
			GORG AABBCC 2 fast A_ForsChase();
			TNT1 AAA 0 fast A_ForSpawnCloud(0);
			GORG DDEEFF 2 fast A_ForsChase();
			TNT1 AAA 0 fast A_ForSpawnCloud(1);
			Loop;
		Melee:
		Missile:
			GORG G 0 fast A_DynamicMusic();
			GORG GH 6 fast A_FaceTarget();
			GORG I 6 fast
			{
				actor player = players[0].mo;
				int dmg = A_CalcDamageFormula2(random(25,45),0.0667,random(10,20),0.05,random(5,15),0.035,0.005);
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					A_CustomMeleeAttack(dmg, "ghost/bite", "ghost/bite", "", 1);
				}
				else
				{
					A_CustomComboAttack("MusicBall2", 32, (dmg), "ghost/bite");
					if (!CheckMeleeRange()) A_StartSound("virtuoso/musicfire",CHAN_VOICE);
				}
			}
			GORG I 6 fast;
			GORG C 6 fast;
			Goto See;
		Pain:
			GORG J 6 fast 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 8 * random(4,8);
			}
			TNT1 AA 0 fast A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			GORG G 3 fast;
			Goto See;
		/*
		Death.Suck:
			GORG J 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (tid == 994 && level.levelnum == 44 && MiscItem && !MiscItem.CoS_ForsakenJorg)
					{
						MiscItem.CoS_ForsakenJorg += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			GORG J 5 A_StartSound("VacDed",CHAN_BODY);
			GORG J 2 A_RadiusGive("VacAmmo",128,RGF_PLAYERS,3);
			TNT1 AAA 0 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
		*/
		Death:
			GORG J 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (tid == 994 && level.levelnum == 44 && MiscItem && !MiscItem.CoS_ForsakenJorg)
					{
						MiscItem.CoS_ForsakenJorg += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			GORG J 5 A_Scream();
			GOST KLM 4 A_SpawnItemEx("GhostCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			GOST N 5 A_NoBlocking();
			Stop;
	}
}

// ?????? [????]
class TempSpawnCookie : CustomInventoryExt
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}
class TempSpawnCookie2 : TempSpawnCookie
{
}

class KillCard : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "Killer Card";
		Obituary "%o was struck down by one of Delila Dorsey's magic cards.";
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_Chase();
				if (tracer) Console.Printf("tracer [KillCard]: %s", tracer.GetClassName());
			}
			Loop;
		Missile:
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 0 A_Die();
			Goto Death;
		Death:
			ZBUX A 4 bright;
			ZBUX BCD 4 Bright;
			stop;
	}
}

class HealCard : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0;
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+NOTARGET;
		+NOINFIGHTING;
		-COUNTKILL;
		+CANTSEEK;
		Tag "Healing Card";
		Obituary "%o was struck down by one of Delila Dorsey's magic cards.";
	}
	
	void A_CheckForTempest()
	{
		// Send the healing projectile to Tempest.
		if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) 
		{
			Thing_Hate(0,996,0); 
		}
		else
		{
			ThinkerIterator TempestFinder = ThinkerIterator.Create("Tempest_Boss");
			Actor mo;
			Tempest_Boss mo2;
			int numfound = 0;
			while (mo = Actor(TempestFinder.Next()))
			{
				mo2 = Tempest_Boss(mo);
				if (mo2 && mo2.health > 0) 
				{
					target = mo2;
					//Console.Printf("Found a Tempest_Boss! - health: %d, [%s]", mo2.health, mo2.GetClassName());
				}
			}
		}
	}
	
	States
	{
		Spawn:
			DCRD A 0 NoDelay;
			DCRD A 0 A_CheckForTempest();
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_Chase();
				if (tracer) Console.Printf("tracer [KillCard]: %s", tracer.GetClassName());
			}
			Loop;
		Missile:
			DCRD E 10 A_Stop();
			DCRD E 1
			{
				A_FaceTarget();
			}
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1))
				{ 
					A_SpawnProjectile("HealBall",8,0);
				}
				else
				{
					ThinkerIterator TempestFinder = ThinkerIterator.Create("Tempest_Boss");
					Actor mo;
					Tempest_Boss mo2;
					int numfound = 0;
					while (mo = Actor(TempestFinder.Next()))
					{
						mo2 = Tempest_Boss(mo);
						if (mo2 && mo2.health > 0) 
						{
							target = mo2;
							A_SpawnProjectile("HealBall",8,0);
							//Console.Printf("Found a Tempest_Boss to Shoot HealBall at! - health: %d, [%s]", mo2.health, mo2.GetClassName());
						}
					}
				}
			}
			DCRD E 0 A_Die();
			Goto Death;
		Death:
			SPNR C 4 bright;
			SPNR DEFG 4 Bright;
			stop;
	}
}

class HealBall : EEEffectProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (0);
		+SEEKERMISSILE;
		+NOEXTREMEDEATH;
		PROJECTILE;
		DamageType "HealingSpell";
		DeathSound "virtuoso/musichit";
	}
	
	override int SpecialMissileHit (Actor victim) // HealMissile
 	{
		EECreature healee;
		DDPlayerPawn healee2;
		if (victim) healee = EECreature(victim);
		if (victim) healee2 = DDPlayerPawn(victim);

		if (healee && healee.bISMONSTER)
		{
			int maxhp = (healee.SpawnHealth() + healee.Stamina);
			if (healee.health > 0 && healee.health < maxhp)
			{
				healee.health += (maxhp * 0.166667); 
				if (healee.health > maxhp) healee.health = maxhp;
			}
			else
			{
				healee.health += (maxhp * 0.053334); 
				if (healee.health > maxhp*1.5) healee.health = (maxhp*1.5);
			}
		}
		else
		{
			if (healee2)
			{
				int PlayerHP = healee2.health;
				let MiscItem = PlayerStatItem(healee2.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					int maxhp = MiscItem.MaxHealthTrue;
					//Console.Printf("health: %d, maxhp: %d", PlayerHP, maxhp);
					if (PlayerHP > 0 && PlayerHP < maxhp)
					{
						PlayerHP += (maxhp * 0.33334);
						if (PlayerHP > maxhp) PlayerHP = maxhp;
					}
					else
					{
						PlayerHP += (maxhp * 0.11112); 
						if (PlayerHP > maxhp*3) PlayerHP = (maxhp*3);
					}
				}
				//Console.Printf("PlayerHP: %d, healee.health: %d", PlayerHP, healee2.health);
				if (PlayerHP > healee2.health) 
				{
					actor player = players[0].mo;
					player.health = PlayerHP;
					healee2.health = PlayerHP;
					player.A_StartSound("Dinah/Giggle",CHAN_VOICE);
				}
			}
		}
		return -1;
	}

	void A_CheckForTempest()
	{
		// Send the healing projectile to Tempest.
		if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) 
		{
			Thing_Hate(0,996,0); 
		}
		else
		{
			ThinkerIterator TempestFinder = ThinkerIterator.Create("Tempest_Boss");
			Actor mo;
			Tempest_Boss mo2;
			int numfound = 0;
			while (mo = Actor(TempestFinder.Next()))
			{
				mo2 = Tempest_Boss(mo);
				if (mo2 && mo2.health > 0) 
				{
					tracer = mo2;
					//Console.Printf("Found a Tempest_Boss! - health: %d, [%s]", mo2.health, mo2.GetClassName());
				}
			}
		}
	}
	
	void A_TracerCheck()
	{
		if (tracer)
		{
			if (!Tempest_Boss(tracer)) A_CheckForTempest();
			//Console.Printf("\c[green]tracer: %s", tracer.GetClassName());
		}
		else 
		{
			//Console.Printf("\c[orange]no tracer");
			A_CheckForTempest();
		}
		//if (target) Console.Printf("target: %s", target.GetClassName());
		//			 else Console.Printf("no target");
		A_SeekerMissile(10,10,SMF_LOOK);
	}
	
	States
	{
		Spawn:
			CBOM A 1 Bright A_TracerCheck();
			CBOM A 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM B 1 Bright A_TracerCheck();
			CBOM B 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM C 1 Bright A_TracerCheck();
			CBOM C 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM D 1 Bright A_TracerCheck();
			CBOM D 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			Loop;
		
		Death:
			TNT1 A 0; //A_Explode(1,128,0,0,1);
			TNT1 AAAAAAAAAAAA 1 A_SpawnItemEx("Mininote", 0, 0, 25, 2, 0, random(-2,2), random(0,359));
			Stop;
	}
}
// ?????? ??????
class Delila_Boss : DDOrigBoss
{
	default
	{
		//$Category RPBosses;
		Health 30;
		Radius 20;
		Height 56;
		Speed 0;
		Scale 1;
		PainChance 256;
		Mass 5000;
		DamageFactor "HealingSpell", 0;
		MONSTER;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOBLOOD;
		+DONTTHRUST;
		+LOOKALLAROUND;
		+NOGRAVITY;
		+FLOATBOB;
		+NOTARGET;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Tag "Delila Dorsey";
	}
	
	bool A_DownedCheckForTempest()
	{
		// Send the healing projectile to Tempest.
		if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) { }
		else
		{
			ThinkerIterator TempestFinder = ThinkerIterator.Create("Tempest_Boss");
			Actor mo;
			Tempest_Boss mo2;
			int numfound = 0;
			while (mo = Actor(TempestFinder.Next()))
			{
				mo2 = Tempest_Boss(mo);
				if (mo2 && mo2.health > 0) 
				{
					target = mo2;
					//Console.Printf("Found a Tempest_Boss! - health: %d, [%s]", mo2.health, mo2.GetClassName());
					return true;
				}
				return false;
			}
			return false;
		}
		return false;
	}

	States
	{
		Spawn:
			DLIL G 0 ThrustThingz(0,0,0,0);
			DLIL GG 10 A_Look();
			Goto See;
		See:
			DLIL GGGG 2 A_Chase();
			Loop;
		Pain:
			DLIL E 8;
			Goto See;
		Missile:
			DLIL G 0 A_FaceTarget();
			DLIL G 0 A_StartSound("dancer/danceattk");
			DLIL HHHHHHHHHHHH 2 A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			DLIL G 2 A_Jump(128,"HealCardAttk");
			DLIL I 0 A_SpawnItemEx("KillCard",0,0,0,8,0,0,90); //Cards are spawned via SpawnItemEx now.
			DLIL I 12 A_SpawnItemEx("KillCard",0,0,0,8,0,0,-90);
			Goto Teleporting;
		HealCardAttk:
			DLIL I 12 A_SpawnItemEx("HealCard",0,0,0,8,0,0,90);
			Goto Teleporting;
		Teleporting:
			DLIL I 6 A_Jump(160,3);
			DLIL I 12
			{
				if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) { ACS_Execute(897,0,0,0,0); }
			}
			DLIL III 3;
			Goto See;
		Death:
			DLIL E 0
			{
				if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) { }
				else
				{
					if (A_DownedCheckForTempest() == false) return resolvestate("Death.Defeated");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DLIL E 20 { bFLOATBOB = false; }
			DLIL FFFFFF 20;
			DLIL F 1 A_CheckProximity("Death","DinahPlayer",40);
			DLIL F -1 Thing_Raise(0);
		Raise:
			DLIL GG 2 ThrustThingz(0,16,0,1);
			DLIL GG 2 ThrustThingz(0,8,1,1);
			DLIL G 0 { bFLOATBOB = true; }
			DLIL G 2
			{
				if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) { ACS_Execute(995,0,0,0,0); } // Teleport(897,0,FALSE);
			}
			Goto Spawn;
		Death.Defeated:
			DLIL E 0 { bFLOATBOB = false; }
			DLIL E 0 A_SetGravity(0.25);
			DLIL E 0;
			DLIL EEEEEEEE 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DLIL F 0 A_NoBlocking();
			DLIL F 0
			{
				if (CountInv("IsCarnOfSouls",AAPTR_PLAYER1)) return resolvestate(null);
																								else return resolvestate("FadeOut");
			}
			DLIL F -1;
			Stop;
		FadeOut:
			DLIL F 105;
			DLIL F 0 
			{
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.925,1.075));
				A_StartSound("vokter/tele",20,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.85,1.15));
				A_StartSound("vokter/tele",21,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.775,1.225));
			}
			DLIL F 1 A_Fadeout(frandompick(0.019,0.020,0.021),FTF_REMOVE);
			wait;
	}
}

class KillCardEE : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "Killer Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_EEChase();
			}
			Loop;
		Missile:
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 0
			{
				if (random(1,4) <= 1)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 0
			{
				if (random(1,2) <= 1) 
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 10 A_Stop();
			DCRD D 1 A_FaceTarget();
			DCRD D 0 A_StartSound("zappo");
			DCRD D 1 Bright A_SpawnProjectile("BadZapShot",8,0);
			DCRD D 0 A_Die();
			Goto Death;
		Death:
			ZBUX A 4 bright;
			ZBUX BCD 4 Bright;
			stop;
	}
}

class SummonCardEE : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "Summon Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCBABCD 2 Bright 
			{
				A_EEChase();
			}
		Missile:
			DCRD F 10 A_Stop();
			DCRD F 1 A_FaceTarget();
			Goto Death;
		Death:
			DCRD F 0 bright
			{
				int user_type;
				string spawntype;
				bool isabosssummon = false;
				bool lolewat = true;
				if (master && Delila_BossClone(master))
				{
					Delila_BossClone DBC;
					DBC = Delila_BossClone(master);
					if (DBC.health <= ((DBC.SpawnHealth() + DBC.Stamina) * frandompick(0.125,0.125,0.125,0.125,0.1667,0.1667,0.1667,0.2,0.2,0.25) * randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3)))
					{
						isabosssummon = true;
						user_type = random(1,111);
						if (user_type >= 1 && user_type <= 10) spawntype = "SphinxMotherClone";
						if (user_type >= 11 && user_type <= 20) spawntype = "GameMotherClone";
						if (user_type >= 21 && user_type <= 30) spawntype = "MossMotherClone";
						if (user_type >= 31 && user_type <= 40) spawntype = "RoseMotherClone";
						if (user_type >= 41 && user_type <= 50) spawntype = "HandMotherVacClone";
						if (user_type >= 51 && user_type <= 60) spawntype = "Teacher_KragClone";
						if (user_type >= 61 && user_type <= 70) spawntype = "Teacher_QuisClone";
						if (user_type >= 71 && user_type <= 80) spawntype = "Teacher_LauritzClone";
						if (user_type >= 81 && user_type <= 90) spawntype = "Teacher_JorgClone";
						if (user_type >= 91 && user_type <= 100) spawntype = "Teacher_VokterClone";
						if (user_type >= 101 && user_type <= 110) spawntype = "Tempest_BossClone";
						if (user_type >= 111)
						{
							if (random(1,5) <= random(2,3)) 
							{
								isabosssummon = false;
								lolewat = false;
							}
							spawntype = "Tempest_DelilaClone"; // LOLE yes she has a chance (though very minor) to SELF-DUPLICATE (and possibly with a FULL health pool instead of a reduced one) V:<
						}
						
						if (user_type <= 110 && DBC.health <= ((DBC.SpawnHealth() + DBC.Stamina) * frandompick(0.025,0.025,0.025,0.025,0.0334,0.0334,0.0334,0.04,0.04,0.05) * randompick(1,1,1,1,1,1,1,2)))
						{
							if (random(1,5) <= random(2,3)) isabosssummon = false; // This will make the boss summon spawn with their FULL health pool instead of a greatly reduced one.
						}
					}
					else
					{
						user_type = random(1,33);
						if (user_type >= 1 && user_type <= 16) spawntype = "Reaper";
						if (user_type >= 17 && user_type <= 22)
						{
							if (random(1,4) <= 1) spawntype = "CremeDeBratte_Torched";
															 else spawntype = "CremeDeBratte";
						}
						if (user_type >= 23 && user_type <= 27)
						{
							if (random(1,16) <= 1) spawntype = "PushyArchAngel";
																else spawntype = "PushyAngel";
						}
						if (user_type >= 28 && user_type <= 32)
						{
							spawntype = "Devil";
						}
						if (user_type >= 33)
						{
							spawntype = "EvilDinahEE";
						}
					}
					bool success;
					actor spawned;
					[success, spawned] = A_SpawnItemEx(spawntype);
					if (success && spawned)
					{
						EECreature spawn2;
						spawn2 = EECreature(spawned);
						if (spawn2)
						{
							if (DBC)
							{
								if (lolewat) spawn2.master = DBC;
								if (isabosssummon) spawn2.isasummonedclone = true;
								spawn2.user_levelpreset = DBC.user_leveltransfer;
								spawn2.user_rankpreset = DBC.user_ranktransfer;
								if (DBC.target) spawn2.target = DBC.target;
							}
						}
						A_SpawnItemEx("TeleportFogDD",flags:SXF_NOCHECKPOSITION);
					}
				}
			}
			ZBUX A 4 bright A_AlertMonsters(1024);
			ZBUX BCD 4 Bright;
			stop;
	}
}

class HealCardEE : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0;
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+NOTARGET;
		+NOINFIGHTING;
		-COUNTKILL;
		+CANTSEEK;
		Tag "Healing Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	void A_CheckDelilaStatus()
	{
		// Send the healing projectile[s] to Delila.
		if (master && Delila_BossClone(master)) 
		{
			target = master;
			//if (target == master) Console.Printf("$!@D");
		}
	}
	
	States
	{
		Spawn:
			DCRD A 0 NoDelay;
			DCRD A 0 A_CheckDelilaStatus();
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_Chase();
			}
			Loop;
		Missile:
			DCRD E 10 A_Stop();
			DCRD E 1
			{
				A_CheckDelilaStatus();
				A_FaceTarget();
			}
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 5)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 7)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRE E 0
			{
				if (random(1,8) <= 7)
				{
					A_Die();
					return resolvestate("Death");
				}
				return resolvestate(null);
			}
			DCRD E 0 Bright { A_SetTics(random(4,6) * random(2,3)); }
			DCRD E 1 Bright 
			{
				A_StartSound("aqua/kill1");
				A_CheckDelilaStatus();
				A_SpawnProjectile("HealBallEE",8,0);
			}
			DCRD E 0 A_Die();
			Goto Death;
		Death:
			SPNR C 4 bright;
			SPNR DEFG 4 Bright;
			stop;
	}
}

class NoUCardEE : EECreature
{
	default
	{
		Radius 3;
		Height 3;
		Health 1;
		Speed 0; //SpawnItemEx handles the movement of the cards now
		Scale 1;
		MONSTER;
		RENDERSTYLE "Normal";
		+NOEXTREMEDEATH;
		+NOGRAVITY;
		+DONTFALL;
		-SOLID;
		+LOOKALLAROUND;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		-COUNTKILL;
		+NOTARGET;
		+NOINFIGHTING;
		+CANTSEEK;
		Tag "'No U' Card";
		Obituary "%o was struck down by one of a Delila Dorsey clone's magic cards.";
	}
	
	override void Tick()
	{
		super.Tick();
		if (GetAge() == 105)
		{
			state DTHState = FindState("Death");
			if (DTHState != null) SetState(DTHState);
		}
		if (GetAge() >= 140) Destroy();
	}
	
	States
	{
		Spawn:
			DCRD A 1 A_Look();
			Loop;
		See:
			DCRD ABCB 2 Bright 
			{
				A_EEChase();
			}
		Missile:
			UNOU A 10 A_Stop();
			UNOU A 1 A_FaceTarget();
			UNOU A 0
			{
				actor DBC;
				DBC = Delila_BossClone(master);
				Delila_BossClone DBC2;
				DBC2 = Delila_BossClone(DBC);
				if (DBC2) 
				{
					DBC2.A_StopSound(102);
					DBC2.A_StopSound(103);
					DBC2.A_StartSound("NoUStart1",102,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
					DBC2.A_StartSound("NoUStart2",103,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
					DBC2.A_SetInventory("D_NoUCard",1);
					DBC2.NoUCooldown = 525;
				}
			}
			UNOU D 0 A_Die();
			Goto Death;
		Death:
			ZBUX A 4 bright;
			ZBUX BCD 4 Bright;
			stop;
	}
}


class HealBallEE : EEEffectProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (0);
		+SEEKERMISSILE;
		+NOEXTREMEDEATH;
		PROJECTILE;
		DamageType "HealingSpell";
		DeathSound "virtuoso/musichit";
	}
	
	override int SpecialMissileHit (Actor victim) // HealMissile
 	{
		EECreature healee;
		DDPlayerPawn healee2;
		if (victim) healee = EECreature(victim);
		if (victim) healee2 = DDPlayerPawn(victim);

		if (healee && healee.bISMONSTER)
		{
			int maxhp = (healee.SpawnHealth() + healee.Stamina);
			if (healee.health > 0 && healee.health < maxhp)
			{
				healee.health += (maxhp * 0.05); 
				if (healee.health > maxhp) healee.health = maxhp;
			}
			else
			{
				healee.health += (maxhp * 0.016667); 
				if (healee.health > maxhp*3) healee.health = (maxhp*3);
			}
		}
		else
		{
			if (healee2)
			{
				int PlayerHP = healee2.health;
				let MiscItem = PlayerStatItem(healee2.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					int maxhp = MiscItem.MaxHealthTrue;
					//Console.Printf("health: %d, maxhp: %d", PlayerHP, maxhp);
					if (PlayerHP > 0 && PlayerHP < maxhp)
					{
						PlayerHP += (maxhp * 0.16667);
						if (PlayerHP > maxhp) PlayerHP = maxhp;
					}
					else
					{
						PlayerHP += (maxhp * 0.0555566666666667); 
						if (PlayerHP > maxhp*3) PlayerHP = (maxhp*3);
					}
				}
				//Console.Printf("PlayerHP: %d, healee.health: %d", PlayerHP, healee2.health);
				if (PlayerHP > healee2.health) 
				{
					actor player = players[0].mo;
					player.health = PlayerHP;
					healee2.health = PlayerHP;
					player.A_StartSound("Dinah/Giggle",CHAN_VOICE);
				}
			}
		}
		return -1;
	}

	void A_CheckDelilaStatus(bool firsttic)
	{
		actor permtracer;
		if (firsttic)
		{
			if (target)
			{
				if (target.master && Delila_BossClone(target.master))
				{
					tracer = target.master;
					permtracer = target.master;
					//if (tracer == target.master) Console.Printf("B434D");
				}
			}
		}
		else
		{
			if (permtracer) tracer = permtracer;
			//if (tracer == permtracer) Console.Printf("ng34");
		}
	}
	
	void A_TracerCheck()
	{
		if (tracer)
		{
			if (!Delila_BossClone(tracer)) A_CheckDelilaStatus(false);
			//Console.Printf("\c[green]tracer: %s", tracer.GetClassName());
		}
		else 
		{
			//Console.Printf("\c[orange]no tracer");
			A_CheckDelilaStatus(false);
		}
		//if (target) Console.Printf("target: %s", target.GetClassName());
		//			 else Console.Printf("no target");
		A_SeekerMissile(10,10,SMF_LOOK);
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_CheckDelilaStatus(true);
	}
	
	States
	{
		Spawn:
			CBOM A 1 Bright A_TracerCheck();
			CBOM A 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM B 1 Bright A_TracerCheck();
			CBOM B 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM C 1 Bright A_TracerCheck();
			CBOM C 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			CBOM D 1 Bright A_TracerCheck();
			CBOM D 1 Bright A_SpawnItemEx("notetrail", 0, 0, 0, 0, 0, 0, 180, 128);
			Loop;
		
		Death:
			TNT1 A 0; //A_Explode(1,128,0,0,1);
			TNT1 AAAAAAAAAAAA 1 A_SpawnItemEx("Mininote", 0, 0, 25, 2, 0, random(-2,2), random(0,359));
			Stop;
	}
}

class Delila_BossClone : DDOrigBoss
{
	int NoUCooldown;
	bool NoUFlinchCheck;
	default
	{
		//$Category RPBosses;
		Health 1250;
		Height 48;
		Radius 16;
		Speed 12;
		Scale 1;
		PainChance 64;
		Mass 1000;
		MONSTER;
		DamageFactor "CherryBomb", 0.625;
		PainChance "CherryBomb", 40;
		DamageFactor "BRocket", 0.625;
		PainChance "BRocket", 40;
		DamageFactor "Spinner", 1.4375;
		PainChance "Spinner", 115;
		DamageFactor "Popper", 1.5;
		PainChance "Popper", 120;
		DamageFactor "Bonk", 0.75;
		PainChance "Bonk", 48;
		DamageFactor "Chop", 1.25;
		PainChance "Chop", 80;
		DamageFactor "Lead", 0.5;
		PainChance "Lead", 40;
		DamageFactor "Cricket", 1.75;
		PainChance "Cricket", 140;
		DamageFactor "Breakfast", 0.875;
		PainChance "Breakfast", 72;
		DamageFactor "Suck", 0.25;
		PainChance "Suck", 0;
		DamageFactor "Zap", 0.25;
		PainChance "Zap", 16;
		DamageFactor "Fire", 0.25;
		PainChance "Fire", 16;
		DamageFactor "Ice", 0.25;
		PainChance "Ice", 16;
		DamageFactor "Beats", 0.25;
		PainChance "Beats", 16;
		+FLOORCLIP;
		+NOINFIGHTING;
		+NOTARGET;
		+NOBLOOD;
		+DONTTHRUST;
		+LOOKALLAROUND;
		+NOGRAVITY;
		+FLOATBOB;
		+FLOAT;
		//+MISSILEMORE;
		//+MISSILEEVENMORE;
		Tag "Delila Dorsey?!";
	}
	
	int noblockmonsttimer;
	int noblockmonstchance;
	int noblockmonstresist;
	override void Tick()
	{
		super.tick();
		if (GetAge() <= 3) 
		{
			user_ranktransfer = CountInv("MonsterRating");
			user_leveltransfer = CountInv("MonsterLevel");
		}
		if (NoUCooldown > 0) 
		{
			NoUCooldown--;
			//Console.Printf("NoUCooldown: %d", NoUCooldown);
		}
		if (GetAge() % 35 == 5) A_CheckTag();
		
		noblockmonstresist = random(3,5) * (Skill * frandom(0.75,1.25));
		noblockmonstresist *= random(1,3);
		noblockmonstresist *= (1.0 + (CountInv("MonsterLevel") * 0.2));
		noblockmonstchance = 16 + (Skill * 8);
		noblockmonstchance *= random(1,3);
		noblockmonstchance *= (1.0 + (CountInv("MonsterLevel") * 0.05));
		if (!bNOBLOCKMONST)
		{
			if (random(1,1024) <= noblockmonstchance)
			{
				bNOBLOCKMONST = true;
				noblockmonsttimer = noblockmonstresist;
			}
		}
		else
		{
			noblockmonsttimer--;
			if (noblockmonsttimer <= 0) 
			{
				bNOBLOCKMONST = false;
			}
		}
	}
	
	states
	{
		Spawn:
			DLIL G 0 NoDelay ThrustThingZ(0, random(4,16),0,0);
			DLIL GGG 1 ThrustThingZ(0, random(4,16),0,0);
			DLIL G 0 A_ScaleVelocity(0.0);
		Idle:
			DLIL GG 5 
			{
				bFLOATBOB = true;
				bFLOAT = true;
				bNOGRAVITY = true;
				A_FloatLook(16);
			}
			Goto See;
		See:
			DLIL G 0
			{
				bFLOATBOB = true;
				bFLOAT = true;
				if (random(1,4) <= 1) return resolvestate("See1");
				return resolvestate("See2");
			}
		See1:
			DLIL GGGGGGGGGGGGGGGG 2 
			{
				A_FloatChaseCheck(2,4,6,8,0.125,0.125);
				bFLOATBOB = true;
				bFLOAT = true;
				if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(1,1,1,1,1,2,2,2));
				if (health <= (SpawnHealth() + Stamina) * 0.25)
				{
					if (random(1,random(7,9)) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																		 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else
				{
					if (random(1,random(14,18)) <= 1) A_EEChase("Melee","Missile",CHF_RESURRECT|CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",CHF_RESURRECT,1,3,1,1);
				}
			}
			goto See;
		See2:
			DLIL GGGGGGGGGGGGGGGG 2 
			{
				A_FloatChaseCheck(4,8,12,16,0.25,0.25);
				
				bFLOATBOB = true;
				bFLOAT = true;
				if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(1,1,1,2,2,2,2,2));
				if (health <= (SpawnHealth() + Stamina) * 0.25)
				{
					if (random(1,random(28,36)) <= 1) A_EEChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",0,1,3,1,1);
				}
				else
				{
					if (random(1,random(56,72)) <= 1) A_EEChase("Melee","Missile",CHF_RESURRECT|CHF_FASTCHASE,1,3,1,1);
																			 else A_EEChase("Melee","Missile",CHF_RESURRECT,1,3,1,1);
				}
			}
			goto See;
		Heal:
			#### # 0 A_DynamicMusic(forcedplay:true);
			DLIL GHI 8;
			DLIL I 8 { A_SetTics(random(3,7)*2); }
			DLIL HG 8;
			goto See;
		Pain:
			DLIL E 8
			{
				bFLOATBOB = false;
				if (random(1,4) <= 1) 
				{
					bFLOAT = false;
					NoUFlinchCheck = true;
					if (NoUCooldown > 0) NoUCooldown *= 0.25;
				}
				else
				{
					if (random(1,6) <= randompick(1,1,1,2))
					{
						NoUFlinchCheck = true;
						if (NoUCooldown > 0) NoUCooldown *= 0.25;
					}
				}
				A_FloatPain(0,8,64);
				user_painfastchase = 8 * random(4,8);
			}
			DLIL EE 8;
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.5;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.5;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 2;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		Missile:
			DLIL G 0 
			{
				int stopchance = (15 - (CountInv("MonsterLevel") * 0.0125));
				if (health <= (SpawnHealth() + Stamina) * 0.625) 
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.01875));
					stopchance *= 0.8125;
				}
				else if (health <= (SpawnHealth() + Stamina) * 0.3125) 
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.025));
					stopchance *= 0.65625;
				}
				else if (health <= (SpawnHealth() + Stamina) * 0.05)
				{
					stopchance = (15 - (CountInv("MonsterLevel") * 0.0375));
					stopchance *= 0.525;
				}
				if (stopchance < 1) stopchance = 1;

				if (random(1,16) <= stopchance) A_Stop();
				bFLOATBOB = false;
				A_FaceTarget();
			}
			DLIL G 0 A_StartSound("dancer/danceattk");
			DLIL HHHHHHHHHHHH 2 
			{
				A_SetTics(randompick(0,0,1,1,1,2,2,2,2));
				A_SpawnItemEx("Mininote", 0, 0, 25, 0, random(-1, 1), random(-1, 1));
			}
			DLIL H 0 
			{
				int chance = 1 + (CountInv("MonsterLevel") * 0.0225);
				if (NoUFlinchCheck)
				{
					chance *= frandompick(1.5,1.5,2.0,2.0,2.5,3.0);
					NoUFlinchCheck = false;
				}
				if (random(1,8) <= chance && NoUCooldown <= 0 && !FindInventory("D_NoUCard")) return resolvestate("NoUCardAttk");

				chance = 1 + (CountInv("MonsterLevel") * 0.01667);
				if (random(1,10) <= chance) return resolvestate("SummonCardAttk");

				if (!FindInventory("D_NoUCard"))
				{
					chance = 1 + (CountInv("MonsterLevel") * 0.01125);
					if (health <= (SpawnHealth() + Stamina) * 0.625) chance *= 2;
					if (health <= (SpawnHealth() + Stamina) * 0.3125) chance *= 2;
					if (health <= (SpawnHealth() + Stamina) * 0.05) chance *= 4;
					if (random(1,16) <= chance) return resolvestate("HealCardAttk");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = 24;
				if (health <= (SpawnHealth() + Stamina) * 0.625)
				{
					A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
					if (atktype == 2)
					{
						A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("KillCardEE",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		SummonCardAttk:
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = 24;
				if (health <= (SpawnHealth() + Stamina) * 0.3125)
				{
					A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
					if (atktype == 2)
					{
						A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("SummonCardEE",0,0,zoff,8,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		NoUCardAttk:
			DLIL H 0 
			{
				bFLOATBOB = false;
				A_FaceTarget();
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			DLIL I 12
			{
				double randang = frandompick(0,22.5,45,67.5);
				double baseang = randompick(90,180,270,0);
				double zoff = (random(4,8) * 4);
				double velgenx = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				double velgenz = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				if (target && (target.pos.z > (pos.z + 16.0))) velgenz *= -1;
				//Console.Printf("zoff: %.8f, velgenx: %.8f, velgenz: %.8f", zoff, velgenx, velgenz);

				A_SpawnItemEx("NoUCardEE",0,0,zoff,velgenx,0,velgenz,(baseang+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			Goto See;
		HealCardAttk:
			DLIL H 0 
			{
				bFLOATBOB = false;
				A_FaceTarget();
			}
			DLIL HHHHHH 2
			{
				A_SetTics(2);
				if (health <= (SpawnHealth() + Stamina) * 0.8) A_SetTics(randompick(1,1,1,1,1,1,1,2));
				else if (health <= (SpawnHealth() + Stamina) * 0.5) A_SetTics(1);
				else if (health <= (SpawnHealth() + Stamina) * 0.2) A_SetTics(randompick(0,0,0,1));
				else if (health <= (SpawnHealth() + Stamina) * 0.05) A_SetTics(0);
			}
			DLIL I 12 
			{
				double randang = frandompick(0,22.5,45,67.5);
				double zoff = (random(4,8) * 4);
				double velgenx = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				double velgenz = (random(4,12) * frandompick(1,2,2,2,2,2,2,2,2,4));
				if (target && (target.pos.z > (pos.z + 16.0))) velgenz *= -1;
				//Console.Printf("zoff: %.8f, velgenx: %.8f, velgenz: %.8f", zoff, velgenx, velgenz);

				if (health <= (SpawnHealth() + Stamina) * 0.15625)
				{
					A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
				else
				{
					int atktype = random(1,2);
					if (atktype == 1)
					{
						A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					}
					if (atktype == 2)
					{
						A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(0+randang),SXF_SETMASTER);
						A_SpawnItemEx("HealCardEE",0,0,zoff,velgenx,0,velgenz,(180+randang),SXF_SETMASTER);
					}
				}
			}
			DLIL I 0
			{
				int telechance = 1;
				if (health <= (SpawnHealth() + Stamina) * 0.625) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.3125) telechance *= 1.25;
				if (health <= (SpawnHealth() + Stamina) * 0.05) telechance *= 1.5;
				if (random(1,8) <= telechance) return resolvestate("Teleporting");
				return resolvestate(null);
			}
			Goto See;
		Teleporting:
			DLIL I 0
			{
				bFLOATBOB = false;
				A_UnsetShootable();
				A_UnsetSolid();
				A_SetInvulnerable();
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			DLIL I 6;
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0,0);
			#### ######################## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 0 A_Wander();
		TeleportEnd:
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(1.0,0);
			DLIL I 0
			{
				A_SetShootable();
				A_SetSolid();
				A_UnsetInvulnerable();
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele2",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele2",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			DLIL III 3;
			Goto See;
		Death:
			DLIL E 0 
			{
				A_KillChildren("SilentMassacre");
				bFLOATBOB = false; 
				bFLOAT = false; 
				let globalvars = DDGlobalVariables.Get();
				globalvars.KilledDelilaClone = true;
			}
			DLIL E 0 A_SetGravity(0.25);
			DLIL E 0;
			DLIL EEEEEEEE 7 Bright
			{
				A_StartSound("weapons/cherryboom");
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DLIL F 0 A_NoBlocking();
			DLIL F 105
			{
				A_SetTics(15 * random(4,7));
			}
			DLIL F 0 
			{
				A_StopSound(18);
				A_StopSound(19);
				A_StopSound(20);
				A_StopSound(21);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.925,1.075));
				A_StartSound("vokter/tele",20,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.85,1.15));
				A_StartSound("vokter/tele",21,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.775,1.225));
			}
			DLIL F 1 A_Fadeout(frandompick(0.019,0.020,0.021),FTF_REMOVE);
			wait;
	}
}

// ???????? ???????
class Tempest_Boss : DDOrigBoss
{
	int healint;
	default
	{
		//$Category RPBosses
		Health 1500;
		Radius 20;
		Height 80;
		Speed 10;
		MeleeRange 80;
		PainChance 200;
		Painchance "Suck", 64;
		DamageFactor "Bonk", 2;
		DamageFactor "Chop", 2;
		DamageFactor "Zap", 0.25;
		DamageFactor "Beats", 0.25;
		DamageFactor "Suck", 0;
		Painchance "HealingSpell", 256;
		RenderStyle "Normal";
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+DONTHARMCLASS;
		+NOTARGET;
		+DONTRIP;
		+LOOKALLAROUND;
		Seesound "tempest/sight";
		PainSound "tempest/pain";
		//DeathSound "tempest/death";
		Obituary "%o lost a duel with the former Governor Tempest.";
		Tag "Governor Tempest";
	}
	
	void A_TempestTele(int type = 0)
	{	
		if (type == 0) // Teleport In
		{
			A_SetShootable();
			bCANTSEEK = false;
			A_SetSolid();
			A_UnSetInvulnerable();
		}
		else
		{
			A_UnsetShootable();
			bCANTSEEK = true;
			A_UnsetSolid();
			A_SetInvulnerable();
		}
	}
	
	States
	{
		Spawn:
			GVNR A 10 A_Look();
			Loop;
		See:
			TNT1 A 0 A_JumpIfInventory ("TempSpawnCookie2", 1, "See3");
			TNT1 A 0 A_GiveInventory ("TempSpawnCookie2");
			GVNR A 3 A_SetTranslucent(0.2,0);
			GVNR A 3 A_SetTranslucent(0.4,0);
			GVNR A 3 A_SetTranslucent(0.6,0);
			GVNR A 3 A_SetTranslucent(0.8,0);
			GVNR A 3 A_SetTranslucent(1,0);
			GVNR A 0 
			{
				A_TempestTele(0);
			}
			goto See3;
		See3:
			GVNR C 1 A_EEChase("Melee","Missile",0,1,3,1,1);
			Goto Missile;
		SpawnClones:
			GVNR A 0
			{
				A_TempestTele(1);
			}
			GVNR A 3 A_SetTranslucent(0.8,0);
			GVNR A 3 A_SetTranslucent(0.6,0);
			GVNR A 3 A_SetTranslucent(0.4,0);
			GVNR A 3 A_SetTranslucent(0.2,0);
			GVNR A 3 A_SetTranslucent(0,0);
			GVNR AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			GVNR AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
			GVNR A 3 A_SetTranslucent(0.2,0);
			GVNR A 3 A_SetTranslucent(0.4,0);
			GVNR A 3 A_SetTranslucent(0.6,0);
			GVNR A 3 A_SetTranslucent(0.8,0);
			GVNR A 3 A_SetTranslucent(1,0);
			GVNR A 0 
			{
				A_TempestTele(0);
			}
			goto See3;
		Missile:
			GVNR C 0 A_Jump(128,"MissileZap");
			GVNR C 0 A_StartSound("tempest/sight");
			GVNR C 8 A_FaceTarget();
			GVNR DDD 2 A_Recoil(-16);
			GVNR EEE 2 
			{
				int dmg = A_CalcDamageFormula2(random(20,35),0.11356,random(10,20),0.085,random(5,15),0.0595,0.01);
				A_CustomMeleeAttack (random(20,35), "mallethit", "malletmiss","chop", 1);
			}
			GVNR F 2 A_Jump(128,8);
			GVNR F 8 A_FaceTarget();
			GVNR GGG 2 A_Recoil(-10);
			GVNR HHH 2 
			{
				int dmg = A_CalcDamageFormula2(random(35,50),0.11356,random(17,34),0.085,random(8,24),0.0595,0.01);
				A_CustomMeleeAttack (dmg, "mallethit", "malletmiss","chop", 1);
			}
			GVNR IC 10;
			Goto Flee;
		MissileZap:
			GVNR CJ 3;
			GVNR K 5 bright A_StartSound("Handmother/Zap");
			GVNR L 8 bright;
			GVNR M 3 bright A_SpawnProjectile("badZapshot",40);
			GVNR M 3 bright;
			GVNR M 3 bright 
			{
				A_SpawnProjectile("badZapshot",40,-48);
				A_SpawnProjectile("badZapshot",40,48);
			}
			GVNR M 3 bright;
			GVNR M 3 bright A_SpawnProjectile("badZapshot",40);
			GVNR NN 3;
			GVNR JC 3;
			Goto See3;
		Pain:
			GVNR O 10 A_EEPain();
			Goto Flee;
		Pain.Fire: //Make Governor Tempest less cheesable with Fosnian Candle mainly
			GVNR O 4 A_EEPain();
			GVNR L 0
			{ 
				A_TempestTele(1);
			}
			GVNR O 6;
			Goto Flee+1;
		Pain.HealingSpell:
			GVNR L 0
			{ 
				A_TempestTele(1);
			}
			GVNR LLLLLLLLLLLLLLLLLLLL 1 
			{
				//healint++;
				//HealThing((12 + (healint % 2)),(SpawnHealth() + Stamina));
				A_SpawnItemEx("NoteTrail", 0, 0, 25, random(2,3), 0, random(-4,4), random(0,359));
			}
			Goto Flee;
		Flee:
			GVNR C 0
			{ 
				A_TempestTele(1);
			}
			GVNR C 3 A_SetTranslucent(0.8,0);
			GVNR C 3 A_SetTranslucent(0.6,0);
			GVNR C 3 A_SetTranslucent(0.4,0);
			GVNR C 3 A_SetTranslucent(0.2,0);
			GVNR C 3 A_SetTranslucent(0,0);
			Goto SpawnClones+25;
		Death:
			GVNR O 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite") || player.CountInv("IsCarnOfSouls"))
				{
					if (MiscItem && !MiscItem.CoS_Tempest)
					{
						MiscItem.CoS_Tempest += 1;
						A_PrintPowerupDDTNoRPG();
					}
				}
			}
			GVNR O 10 
			{
				A_StopSound(CHAN_VOICE);
				A_StopSound(8);
				A_StopSound(9);
				A_StartSound("Tempest/death",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NONE,1.0); //A_Scream();
				A_StartSound("Tempest/death",8,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.95,1.05)); //A_Scream();
				A_StartSound("Tempest/death",9,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10)); //A_Scream();
			}
			GVNR P 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			Stop;
	}
}

class TempestBadZapShot : BadZapShot
{
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 0.75;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG;
		+DONTHARMSPECIES;
		//+NOEXTREMEDEATH
		ProjectileKickback 62; // 25
		Species "T1";
	}
	
	override void PostBeginPlay()
	{
		EEProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	override void Tick()
	{
		EEProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.01);
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 4 Bright
			{
				int dmg = A_CalcDamageFormula(25,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,25,0,true,6);
			}
			ZBUX BCD 4 Bright;
			stop;
	}
}

class Tempest_BossClone : DDOrigBoss
{
	int healint;
	default
	{
		//$Category RPBosses
		Health 1500;
		Radius 20;
		Height 80;
		Speed 10;
		MeleeRange 80;
		PainChance 200;
		DamageFactor "Suck", 0;
		Painchance "Suck", 64;
		DamageFactor "Cricket", 2;
		Painchance "Cricket", 256;
		DamageFactor "Bonk", 2;
		Painchance "Bonk", 256;
		DamageFactor "Chop", 2;
		Painchance "Chop", 256;
		DamageFactor "Zap", 0.25;
		Painchance "Zap", 50;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 50;
		DamageFactor "Dashing", 0.5;
		Painchance "Dashing", 100;
		DamageFactor "DashingBG", 1.5;
		Painchance "DashingBG", 256;
		DamageFactor "DashingSD", 1.5;
		Painchance "DashingSD", 256;
		RenderStyle "Normal";
		Mass 5000;
		Scale 1;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+NOINFIGHTING;
		+DONTHARMCLASS;
		+NOTARGET;
		+DONTRIP;
		+LOOKALLAROUND;
		+DONTHARMSPECIES;
		Seesound "tempest/sight";
		PainSound "tempest/pain";
		//DeathSound "Tempest/death";
		Obituary "%o lost a duel with a clone of the former Governor Tempest.";
		Tag "Governor Tempest!?";
		Species "T1";
	}
	
	override void Tick()
	{
		super.tick();
		if (GetAge() % 35 == 5) A_CheckTag();
	}
	
	void A_TempestTele(int type = 0)
	{	
		if (type == 0) // Teleport In
		{
			//Become hurtable again
			A_SetTempWeakened(0);
			A_SetShootable();
			bCANTSEEK = false;
			A_SetSolid();
			A_UnSetInvulnerable();
		}
		else
		{
			A_SetTempWeakened(0);
			A_UnsetShootable();
			bCANTSEEK = true;
			A_UnsetSolid();
			A_SetInvulnerable();
		}
	}
	
	void A_SetTempWeakened(int type = 1)
	{
		if (type == 1)
		{
			bNOPAIN = true;
			A_SetInventory("Tempest_Weakened",1);
		}
		else
		if (type == 1)
		{
			bNOPAIN = false;
			A_SetInventory("Tempest_Weakened",0);
		}
	}
	
	bool, actor A_TempHeelSpawn(bool success, actor RHeel)
	{
		if (success && RHeel)
		{
			if (RHeel.master) RHeel.target = RHeel.master.target;
			if (random(1,64) <= 24) RHeel.bALWAYSFAST = true;
			if (random(1,64) <= 12) RHeel.bAVOIDMELEE = true;
		}
		return success, RHeel;
	}
	
	States
	{
		Spawn:
			GVNR A 10 A_Look();
			Loop;
		See:
			TNT1 A 0 A_JumpIfInventory ("TempSpawnCookie2", 1, "See3");
			TNT1 A 0 A_GiveInventory ("TempSpawnCookie2");
			GVNR A 1 A_SetTranslucent(0.1,0);
			GVNR A 1 A_SetTranslucent(0.2,0);
			GVNR A 1 A_SetTranslucent(0.3,0);
			GVNR A 1 A_SetTranslucent(0.4,0);
			GVNR A 1 A_SetTranslucent(0.5,0);
			GVNR A 1 A_SetTranslucent(0.6,0);
			GVNR A 1 A_SetTranslucent(0.7,0);
			GVNR A 1 A_SetTranslucent(0.8,0);
			GVNR A 1 A_SetTranslucent(0.9,0);
			GVNR A 1 A_SetTranslucent(1,0);
			GVNR A 0 
			{
				A_TempestTele(0);
			}
			goto See3;
		See3:
			GVNR A 1 
			{
				A_SetTempWeakened(0);
				if (target && CheckIfTargetInLOS(360.0, JLOSF_DEADNOJUMP))
				{
					A_EEChase(null,"Missile",0,1,3,1,1);
					return resolvestate("Missile");
				}
				else
				{
					if (target && Distance3D(target) <= 4096)
					{
						if (random(1,32) <= 1) return resolvestate("Missile");
						else
						{
							int basec = random(8,12);
							if (random(1,256) <= (basec + (CountInv("MonsterLevel") * (basec * 0.05)))) return resolvestate("SummonHeels");
							return resolvestate(null);
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Teleport;
		Teleport:
			GVNR A 0
			{
				A_TempestTele(1);
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0,0);
		TeleportMov:
			#### ######################## 1 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 1 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 1 A_Wander();
			#### # 0 A_Jump(128,"TeleportEnd");
			#### ######## 1 A_Wander();
		TeleportEnd:
			#### # 1 A_SetTranslucent(0.1,0);
			#### # 1 A_SetTranslucent(0.2,0);
			#### # 1 A_SetTranslucent(0.3,0);
			#### # 1 A_SetTranslucent(0.4,0);
			#### # 1 A_SetTranslucent(0.5,0);
			#### # 1 A_SetTranslucent(0.6,0);
			#### # 1 A_SetTranslucent(0.7,0);
			#### # 1 A_SetTranslucent(0.8,0);
			#### # 1 A_SetTranslucent(0.9,0);
			#### # 1 A_SetTranslucent(1,0);
			#### # 0 
			{
				A_TempestTele(0);
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele2",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele2",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			goto See3;
		Missile:
			GVNR C 0 
			{
				int baserhc = random(16,24);
				if (random(1,256) <= (baserhc + (CountInv("MonsterLevel") * (baserhc * 0.025)))) 
				{
					return resolvestate("SummonHeels");
				}
				else
				{
					if (random(1,256) <= 128) return resolvestate("MissileZap");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			GVNR C 0 A_Jump(128,"MissileZap");
		MissileSlash:
			GVNR C 0 A_StartSound("tempest/sight");
			GVNR C 8 A_FaceTarget();
			GVNR DDD 2 A_Recoil(-16);
			GVNR EEE 2
			{
				int dmg = A_CalcDamageFormula2(random(20,35),0.11356,random(10,20),0.085,random(5,15),0.0595,0.01);
				A_CustomMeleeAttack(random(20,35), "mallethit", "malletmiss","chop", 1);
			}
			GVNR F 2 A_Jump(128,8);
			GVNR F 8 A_FaceTarget();
			GVNR GGG 2 A_Recoil(-10);
			GVNR HHH 2 
			{
				int dmg = A_CalcDamageFormula2(random(35,50),0.11356,random(17,34),0.085,random(8,24),0.0595,0.01);
				A_CustomMeleeAttack(dmg, "mallethit", "malletmiss","chop", 1);
			}
			GVNR I 0
			{
				if (Distance3D(target) <= randompick(1024,2048,2048))
				{
					if (random(1,3) <= randompick(1,1,1,2)) return resolvestate("MissileSlash");
																						 else return resolvestate(null);
				}
				else
				{
					if (random(1,6) <= 1) return resolvestate("MissileSlash");
													 else return resolvestate(null);
				}
			}
			GVNR IC 10;
			Goto Flee;
		MissileZap:
			GVNR CJ 3;
			GVNR K 5 bright A_StartSound("Handmother/Zap");
			GVNR L 8 bright;
			GVNR M 3 bright A_SpawnProjectile("TempestBadZapShot",40);
			GVNR M 3 bright;
			GVNR M 3 bright 
			{
				A_SpawnProjectile("TempestBadZapShot",40,-48);
				A_SpawnProjectile("TempestBadZapShot",40,48);
			}
			GVNR M 3 bright;
			GVNR M 3 bright A_SpawnProjectile("TempestBadZapShot",40);
			GVNR NN 3;
			GVNR JC 3;
			GVNR C 0
			{
				if (random(1,6) <= 1) 
				{
					if (Distance3D(target) >= randompick(1024,2048,2048)) return resolvestate("MissileSlash");
																													 else return resolvestate("MissileZap");
				}
				else return resolvestate(null);
			}
			Goto See3;
		SummonHeels:
			GVNR AA 5;
			GVNR J 5;
			GVNR K 5;
			GVNR K 0
			{
				double randang = frandompick(0,22.5,45,67.5);
				int zoff = 24;
				int xoff = random(8,12);
				int xvel = random(8,12);
				bool success;
				actor RHeel;
				if (health <= (SpawnHealth() + Stamina) * 0.1667)
				{
					xoff *= 1.5; 
					xvel *= 1.5; 
					[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && RHeel) A_TempHeelSpawn(success,RHeel);
					[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && RHeel) A_TempHeelSpawn(success,RHeel);
					[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && RHeel) A_TempHeelSpawn(success,RHeel);
					[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
					if (success && RHeel) A_TempHeelSpawn(success,RHeel);
				}
				else
				{
					if (health <= (SpawnHealth() + Stamina) * 0.5)
					{
						xoff *= 1.25; 
						xvel *= 1.25; 
						int atktype = random(1,2);
						if (atktype == 1)
						{
							[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(90+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
							if (success && RHeel) A_TempHeelSpawn(success,RHeel);
							[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(270+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
							if (success && RHeel) A_TempHeelSpawn(success,RHeel);
						}
						if (atktype == 2)
						{
							[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(0+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
							if (success && RHeel) A_TempHeelSpawn(success,RHeel);
							[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(180+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
							if (success && RHeel) A_TempHeelSpawn(success,RHeel);
						}
					}
					else
					{
						int baseang = randompick(0,90,180,270);
						[success, RHeel] = A_SpawnItemEx("ReelHeelNew",xoff,0,zoff,xvel,0,0,(baseang+randang),SXF_NOCHECKPOSITION|SXF_SETMASTER);
						if (success && RHeel) A_TempHeelSpawn(success,RHeel);
					}
				}
			}
			GVNR J 5;
			GVNR AA 5;
			Goto Flee;
		Pain:
			GVNR O 10 A_EEPain();
			GVNR O 0
			{
				if (random(1,16) <= 5) return resolvestate("Flee");
													else return resolvestate(null);
			}
			Goto See3;
		Pain.Zap:
		Pain.Suck:
			GVNR O 5 A_EEPain();
			GVNR O 0
			{
				if (random(1,64) <= randompick(1,1,2)) return resolvestate("Flee");
																					else return resolvestate(null);
			}
			Goto See3;
		Pain.DashingBG:
		Pain.DashingSD:
			GVNR O 10 A_EEPain();
			GVNR OO 10;
			GVNR O 0
			{
				if (random(1,16) <= randompick(1,1,2)) return resolvestate("Flee");
																					else return resolvestate(null);
			}
			Goto See3;
		Pain.Fire: //Make Governor Tempest less cheesable with Fosnian Candle mainly
		Pain.Ice: //Make Governor Tempest less cheesable with Fosnian Candle mainly
			GVNR O 0
			{
				if (random(1,16) <= 5) return resolvestate("Pain");
													else return resolvestate(null);
			}
			GVNR O 4 A_EEPain();
			GVNR L 0
			{ 
				A_TempestTele(1);
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			GVNR O 6;
			Goto Flee+1;
		Pain.HeelExplosion:
			GVNR B 0
			{
				A_SetTempWeakened(1);
			}
			GVNR B 35
			{
				A_EEPain();
				A_SetTics(random(5,7)*5);
			}
			GVNR B 35
			{
				A_SetTics(random(3,7)*5);
			}
			GVNR B 35
			{
				A_SetTics(random(1,7)*5);
			}
			GVNR A 5
			{
				A_SetTempWeakened(0);
				A_SetTics(random(1,7));
			}
			GVNR L 0
			{ 
				A_TempestTele(1);
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			GVNR O 6;
			Goto Flee+1;
		Flee:
			GVNR C 0
			{ 
				A_TempestTele(1);
				A_StopSound(18);
				A_StopSound(19);
				A_StartSound("vokter/tele",18,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("vokter/tele",19,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
			}
			GVNR C 1 A_SetTranslucent(0.9,0);
			GVNR C 1 A_SetTranslucent(0.8,0);
			GVNR C 1 A_SetTranslucent(0.7,0);
			GVNR C 1 A_SetTranslucent(0.6,0);
			GVNR C 1 A_SetTranslucent(0.5,0);
			GVNR C 1 A_SetTranslucent(0.4,0);
			GVNR C 1 A_SetTranslucent(0.3,0);
			GVNR C 1 A_SetTranslucent(0.2,0);
			GVNR C 1 A_SetTranslucent(0.1,0);
			GVNR C 1 A_SetTranslucent(0,0);
			Goto TeleportMov;
		Death:
			GVNR O 0
			{
				let globalvars = DDGlobalVariables.Get();
				globalvars.KilledTempestClone = true;
				A_KillChildren("SilentMassacre");
			}
			GVNR O 10 
			{
				A_StopSound(CHAN_VOICE);
				A_StopSound(8);
				A_StopSound(9);
				A_StartSound("Tempest/death",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NONE,1.0); //A_Scream();
				A_StartSound("Tempest/death",8,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.95,1.05)); //A_Scream();
				A_StartSound("Tempest/death",9,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.90,1.10)); //A_Scream();
			}
			GVNR P 5 bright;
			TBUM A 0 A_StartSound("teacher/death");
			TBUM ABCDEFGH 5 bright;
			TBUM I 5 bright A_NoBlocking();
			Stop;
	}
}
