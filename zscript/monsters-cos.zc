//EVIL DINAH
class EvilDinah : DDOrigBoss
{
	int spreadtype;
	double angdiff, angdiff2;
	double pitchdiff, pitchdiff2;
	double heightoffset;
	int candleshottype;
	int candleshotalttype;
	int chasetimer;
	int jumpchasetimer;
	int jumptimer;
	int shotangerror;
	default
	{
		//$Category RPMonsters
		Health 500; //2000;
		Radius 12; // 20;
		Height 48; // 64;
		Speed 5; // 10
		XScale 1.0; //0.8572;
		YScale 0.95; //0.8572;
		PainChance 128;
		Painchance "Beats", 16;
		Painchance "Fire", 64;
		DamageFactor "Suck", 0;
		DamageFactor "Cricket", 2;
		MeleeRange 104;
		MeleeThreshold 160;
		MONSTER;
		+FLOORCLIP;
		+NOBLOOD;
		+MISSILEMORE;
		+DONTHARMCLASS;
		SeeSound "dinah/giggle";
		PainSound "evildinah/pain";
		DeathSound "virtuoso/death";
		ActiveSound "dinah/giggle";
		Obituary "%o couldn't stop hitting herself.";
		Tag "Dinah Wyck...?";
	}
	
	void A_JumpPreAttack()
	{
		if (random(1,12) <= random(1,3))
		{
			ThrustThingZ(0, (random(16,24)*randompick(1,1,1,1,1,1,2,2,3)), 0, 0);
			if (random(1,3) <= 1) ThrustThing (angle*256/360+random(0,359), (random(1,3)*randompick(1,1,1,1,1,1,2,2,3)), 0, 0);
		}
	}
	
	void A_UseRandomWeapon()
	{
		state ATKState;
		int atktype = random(1,8);
		if (atktype == 1) ATKState = FindState("CricketAttk");
		if (atktype == 2) ATKState = FindState("BlunderAttk");
		if (atktype == 3) ATKState = FindState("JackAttk");
		if (atktype == 4) ATKState = FindState("EggAttk");
		if (atktype == 5) ATKState = FindState("PikeAttk");
		if (atktype == 6) ATKState = FindState("MusicAttk");
		if (atktype == 7) ATKState = FindState("SuckAttk");
		if (atktype == 8) ATKState = FindState("CandleAttk");
		if (ATKState != null) 
		{
			A_JumpPreAttack();
			SetState(ATKState);
		}
	}
	
	void A_EvilPain()
	{
		if (GetClassName() == "EvilDinah")
		{
			double MaxHealthTrue = (SpawnHealth() + Stamina);
			double HealthRatio = health / MaxHealthTrue;
			// Console.Printf("%.8f", HealthRatio);
			if (health > 0)
			{
				string painsnd = "";
				if (HealthRatio >= 0.751) painsnd = "Dinah/Pain1A";
				else if (HealthRatio >= 0.501 && HealthRatio < 0.750) painsnd = "Dinah/Pain2A";
				else if (HealthRatio >= 0.251 && HealthRatio <= 0.500) painsnd = "Dinah/Pain3A";
				else if (HealthRatio < 0.251) painsnd = "Dinah/Pain4A";
				A_StopSound(CHAN_VOICE);
				A_StartSound(painsnd,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
	}

	void A_JumpUp()
	{
		state JumpState;
		if (dydudebug_monsterspecialai) Console.Printf("PosZ: %.8f, targetPosZ: %.8f [tic: %d]", pos.z, target.pos.z, gametic);
		if (target && (target.pos.z >= pos.z + (random(1,4) * 8.0)))
		{
			if (dydudebug_monsterspecialai) Console.Printf("\c[sapphire]Target +8 Units Higher than it\c- [tic: %d]", gametic);
			if (random(1,12) <= random(1,3)) JumpState = FindState("JumpUp");
		}
		else
		{
			if (dydudebug_monsterspecialai) Console.Printf("\c[fire]Target less than 8 Units Higher than it\c- [tic: %d]", gametic);
			if (random(1,random(18,24)) <= random(1,random(2,4))) JumpState = FindState("JumpUp");
		}
		if (JumpState != null) 
		{
			A_FaceTarget();
			SetState(JumpState);
		}
	}

	void A_CheckPlayerWeapon()
	{
		actor player = players[0].mo;
		if (target && target == player)
		{
			let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
			let PlayerWeapon = Player.Player.ReadyWeapon;
			if (dydudebug_monsterspecialai) Console.Printf("Weapon [A_CheckPlayerWeapon]: %p (%s)", PlayerWeapon, PlayerWeapon.GetClassName());
			if (random(1,256) >= 32)
			{
				state ATKState;
				if (PlayerWeapon is "CricketBat") ATKState = FindState("CricketAttk");
				else if (PlayerWeapon is "BlunderAxe") ATKState = FindState("BlunderAttk");
				else if (PlayerWeapon is "AppleJack") ATKState = FindState("JackAttk");
				else if (PlayerWeapon is "Scrambler") ATKState = FindState("EggAttk");
				else if (PlayerWeapon is "WizardPike") ATKState = FindState("PikeAttk");
				else if (PlayerWeapon is "Grimophone") ATKState = FindState("MusicAttk");
				else if (PlayerWeapon is "SuperVac") ATKState = FindState("SuckAttk");
				else if (PlayerWeapon is "FosnianCandle") ATKState = FindState("CandleAttk");
				else 
				{
					A_UseRandomWeapon();
					return;
				}
				if (ATKState != null)
				{
					A_JumpPreAttack();
					SetState(ATKState);
				}
			}
		}
		else
		{
			A_UseRandomWeapon();
			return;
		}
	}
	
	void A_JumpChase(int chaseinterval = 3, int jumpchasemaxtimer = 4)
	{
		chasetimer++;
		if (chasetimer >= chaseinterval)
		{
			chasetimer = 0;
			jumpchasetimer++;
			if (jumpchasetimer >= jumpchasemaxtimer) A_Chase("Melee","Missile");
			else A_Chase(null,null);
			ThrustThing(angle*256/360, (random(3,6) * 0.75), 0, 0);
		}
		else
		{
			ThrustThing(angle*256/360, random(2,3), 0, 0);
			A_FaceTarget();
		}
	}
	
	int tauntcooldown;
	void A_EDTauntAtk()
	{
		int voiceroll = random(1,7);
		string voiceplay;
		if (!tauntcooldown)
		{
			if (voiceroll == 1) voiceplay = "dinah/ulikethis";
			if (voiceroll == 2) voiceplay = "dinah/howsthis";
			if (voiceroll == 3) voiceplay = "dinah/playtimeisover";
			if (voiceroll == 4) voiceplay = "dinah/thiswillendit";
			if (voiceroll == 5) voiceplay = "dinah/thiswillhurt";
			if (voiceroll == 6) voiceplay = "dinah/yourmine";
			if (voiceroll == 7) voiceplay = "dinah/NoEscape";
			A_StopSound(CHAN_VOICE);
			A_StartSound(voiceplay,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			tauntcooldown = (frandom(2.25,3.0) * TICRATE);
		}
	}
	
	int killtauntcooldown;
	void A_KillTaunt()
	{
		if (dydudebug_monsterspecialai) Console.Printf("A_KillTaunt");
		if (!killtauntcooldown)
		{
			double maskpitch = 1.00;
			string voicenm;
			double voicevol = frandom(1.25,1.75);
			if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
			int randvoice = random(1,17);
			if (randvoice == 1) voicenm = "Dinah/didthathurt";
			if (randvoice == 2) voicenm = "Dinah/ithinknot";
			if (randvoice == 3) voicenm = "Dinah/nownow";
			if (randvoice == 4) voicenm = "Dinah/thatleaveamark";
			if (randvoice == 5) voicenm = "Dinah/howsavage";
			if (randvoice == 6) voicenm = "Dinah/Gotcha";
			if (randvoice == 7) voicenm = "Dinah/IWinG";
			if (randvoice == 8) voicenm = "Dinah/BitOfALetdown";
			if (randvoice == 9) voicenm = "Dinah/NahAhAh";
			if (randvoice == 10) voicenm = "Dinah/OverSoSoon";
			if (randvoice == 11) voicenm = "Dinah/HowRude";
			if (randvoice == 12) voicenm = "dinah/OhWell";
			if (randvoice == 13) voicenm = "dinah/ThatsAShame";
			if (randvoice == 14) voicenm = "dinah/OhMy";
			if (randvoice == 15) voicenm = "dinah/YourMine";
			if (randvoice == 16) voicenm = "dinah/TakeCareT";
			if (randvoice == 17) voicenm = "dinah/NoEscape";
			A_StopSound(CHAN_VOICE);
			A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,1.0);
			killtauntcooldown = (frandom(2.25,3.0) * TICRATE);
		}
	}
	
	void A_CandleShotMode(int type = 0)
	{
		int prevcandleshottype = candleshottype;
		if (type == 0 && random(1,8) <= random(6,7)) candleshottype = random(0,2); // Init
		if (type >= 1) // Refire
		{
			if (candleshottype == 2)
			{
				if (random(1,12) <= randompick(1,1,1,2)) candleshottype = random(0,2);
			}
			else
			{
				if (random(1,4) <= randompick(1,1,1,2)) candleshottype = random(0,2);
			}
		}

		if (candleshottype != prevcandleshottype)
		{
			A_StopSound(210);
			A_StartSound("weapons/fcandlemode",210,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.8,1.2));
		}
	}
	
	void A_EDinalSetBombProp(actor BadCBomb, int level)
	{
		//Console.Printf("angdiff: %.8f, angdiff2: %.8f, pitchdiff: %.8f, pitchdiff2: %.8f", angdiff, angdiff2, pitchdiff, pitchdiff2);
		BadCherryBomb FndBomb;
		if (BadCBomb) 
		{
			FndBomb = BadCherryBomb(BadCBomb);
			if (FndBomb) FndBomb.MudBomb = level;
		}
	}

	int lasthealth;
	int targlasthealth;
	override void PostBeginPlay()
	{
		DDOrigBoss.PostBeginPlay();
		lasthealth = health;
	}
	override void Tick()
	{
		DDOrigBoss.Tick();
		if (tauntcooldown) tauntcooldown--;
		if (killtauntcooldown) killtauntcooldown--;
		if (health < lasthealth) A_EvilPain();
		lasthealth = health;
		
		if (target)
		{
			if (targlasthealth > 0 && target.health <= 0)
			{
				if (dydudebug_monsterspecialai) Console.Printf("EDinah Has Killed Her Target");
				A_KillTaunt();
			}
			targlasthealth = target.health;
			if (dydudebug_monsterspecialai) Console.Printf("(%s) target.health: %d, targlasthealth: %d", target.GetClassName(), target.health, targlasthealth);
		}
		else targlasthealth = 0;
	}
	
	States
	{
		Spawn:
			EDIN A 7 A_Look();
			EDIN B 5 A_Look();
			EDIN C 7 A_Look();
			EDIN D 5 A_Look();
			Loop;
		Inactive:
			EDIN A 7;
			EDIN B 5;
			EDIN C 7;
			EDIN D 5;
			Loop;
		Active:
			EDIN A 0;
			Goto Spawn;
		See:
			DINA BBBBCCCCDDDDEEEEBBBBCCCCDDDDEEEE 1 
			{
				A_StopSound(65);
				jumptimer++;
				chasetimer++;
				if (chasetimer >= random(2,3))
				{
					chasetimer = 0;
					A_Chase("Melee","Missile");
				}
				else
				{
					A_Chase(null,null);
				}
				if (jumptimer >= random(16,24))
				{
					jumptimer = 0;
					A_JumpUp();
				}
			}
			DINA BBCCDDEE 2 
			{
				chasetimer++;
				if (chasetimer >= random(2,3))
				{
					chasetimer = 0;
					A_Chase("Melee","Missile",CHF_FASTCHASE);
				}
				else
				{
					A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			DINA B 0 
			{
				if (target && 
						((bFRIENDLY && !target.bFRIENDLY) || 
						 (!bFRIENDLY && target.bFRIENDLY)))
				{
					if (random(1,8) <= 1) return resolvestate("Missile");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DINA E 0; // A_DynamicMusic();
			Loop;
		JumpUp:
			DINA B 0 
			{
				A_StopSound(65);
				A_DynamicMusic();
				A_StartSound("JumpSND",CHAN_VOICE);
				A_FaceTarget();
			}
			DINA B 2 
			{
				ThrustThing (angle*256/360, 9, 0, 0);
				ThrustThingz (0, 27, 0, 0);
				A_JumpChase(random(2,3),4);
			}
			DINA BBBCCCCDDDDEEEE 2 
			{
				A_JumpChase(random(2,3),4);
			}
			Goto See;
		Missile:
			DINA F 0 
			{
				A_StopSound(65);
				A_FaceTarget();
				spreadtype = random(1,4);
			}
			DINA F 0 
			{
				user_shotsfired = 0;
				if (random(1,256) <= 32) A_UseRandomWeapon();
				else A_CheckPlayerWeapon();
			}
			DINA F 8 
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA G 8 
			{
				if (Distance3D(target) <= 384)
				{
					if (random(1,16) <= random(1,3)) A_SpawnProjectile("BadBrocketShot",40);
					else if (random(1,8) <= random(1,3)) A_SpawnProjectile("SpinnerShotEvil",40);
					else
					{
						pitchdiff = frandom(-2.5,2.5);
						pitchdiff2 = 0;
						A_FaceTarget();
						angdiff = abs(frandom(4.5,9.0));
						angdiff2 = 0;
						if (spreadtype <= 1) angdiff2 = 0.0;
						if (spreadtype == 2) angdiff2 = frandom(4.5,9.0);
						if (spreadtype == 3) angdiff2 = frandom(-4.5,-9.0);
						if (spreadtype >= 4) angdiff2 = frandom(-9.0,9.0);
						actor BadCBomb;
						BadCBomb = A_SpawnProjectile("BadCherryBomb",48+random(-heightoffset,heightoffset),0,(-angdiff+angdiff2),CMF_CHECKTARGETDEAD|CMF_OFFSETPITCH|CMF_SAVEPITCH|CMF_TRACKOWNER,(pitchdiff+pitchdiff2));
						A_EDinalSetBombProp(BadCBomb,2);
					}
				}
				else
				{
					if (random(1,16) <= random(1,3)) A_SpawnProjectile("BadBrocketShot",40);
					else A_SpawnProjectile("SpinnerShotEvil",40);
				}
				A_DynamicMusic();
			}
			DINA A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		CricketAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA F 4 
			{
				A_StartSound("malletswing",CHAN_WEAPON);
				A_DynamicMusic();
			}
			DINA F 4 
			{
				A_DynamicMusic();
			}
			DINA G 8 
			{
				A_DynamicMusic();
				A_StartSound("croquet/ballfire",CHAN_WEAPON);
				
				double izvel = random(0,16) * 0.625;
				int angtype = random(1,3);
				if (angtype == 1) 
				{
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					
					A_SetAngle(angle+11.25);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle-11.25);
				}
				else 
				if (angtype == 2) 
				{
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					
					A_SetAngle(angle-11.25);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle+11.25);
				}
				else 
				if (angtype == 3) 
				{
					A_SetAngle(angle-5.625);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle+5.625);
					
					A_SetAngle(angle+5.625);
					A_ThrowGrenadeAngle("RealBadCroquetBall",40,0,40,izvel,0);
					A_SetAngle(angle-5.625);
				}
			}
			DINA A 4 
			{
				if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
				else A_Chase(null,null,CHF_FASTCHASE);
			}
			Goto See;
		BlunderAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWBL A 6
			{
				A_DynamicMusic();
			}
			DWBL B 9 
			{
				A_DynamicMusic();
				A_StartSound("blunderfire2",CHAN_WEAPON);
				A_SpawnProjectile("BadBlundershot",48,0,random(-5,5),0,0);
				A_SpawnProjectile("BadBlundershot",48,0,random(-7,7),0,0);
				A_SpawnProjectile("BadBlundershot",48,0,random(-11,11),0,0);
			}
			DWBL A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		JackAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWAJ A 4 
			{
				A_DynamicMusic();
				A_StartSound("malletswing",CHAN_WEAPON);
			}
			DWAJ A 4
			{
				A_DynamicMusic();
			}
			DWAJ B 8 
			{
				A_DynamicMusic();
				if (random(1,2) <= 1) A_FatAttack1("RealBadJackShot");
				else A_FatAttack2("RealBadJackShot");
			}
			DWAJ A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		EggAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWEG A 8 
			{
				//A_StartSound("misc/p_pkup",CHAN_VOICE);
				A_DynamicMusic();
			}
			DWEG A 4 
			{
				A_Facetarget();
				A_DynamicMusic();
			}
			DWEG B 8 
			{
				A_DynamicMusic();
				A_StartSound("PanClang",CHAN_WEAPON);
				A_ThrowGrenade("EvilEggShot",2,24,random(6,12),0);
			}
			DWEG A 4
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		PikeAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWPK B 0 
			{
				A_StartSound("Handmother/Zap",CHAN_WEAPON);
				A_DynamicMusic();
			}
			DWPK BB 3 bright;
			DWPK B 3 bright 
			{
				A_SpawnProjectile("EvilMiniZapshot",40);
				A_DynamicMusic();
			}
			DWPK B 3 bright;
			DWPK B 3 bright
			{
				A_SpawnProjectile("EvilMiniZapshot",40,-48);
				A_SpawnProjectile("EvilMiniZapshot",40,48);
				A_DynamicMusic();
			}
			DWPK B 3 bright;
			DWPK B 3 bright 
			{
				A_SpawnProjectile("EvilZapshot",40);
				A_DynamicMusic();
			}
			DWPK A 4 bright;
			DWPK A 2 bright
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		MusicAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DWGP A 8
			{
				shotangerror = (random(1,4) * 11.25);
				A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				user_shotsfired++;
				A_SpawnProjectile("badrecordshot",40,0,shotangerror);
				A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
				A_DynamicMusic();
			}
			DWGP A 5
			{
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				A_DynamicMusic();
				user_shotsfired++;
				A_SpawnProjectile("badrecordshot",40,0,0);
				A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
			}
			DWGP A 5
			{
				A_DynamicMusic();
			}
			DWGP A 5 
			{
				A_DynamicMusic();
				user_shotsfired++;
				A_SpawnProjectile("badrecordshot",40,0,-shotangerror);
				A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08));
			}
			DWGP A 5 
			{
				if (user_shotsfired >= (12 + (skill * 3)))
				{
					user_shotsfired = 0;
					A_StopSound(65);
					return resolvestate("See");
				}
				else
				{
					A_DynamicMusic();
					A_CPosRefire();
				}
				return resolvestate(null);
			}
			Goto MusicAttk+1;
		SuckAttk:
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
				A_DynamicMusic();
			}
			DWSV A 8 A_StartSound("misc/p_pkup",CHAN_VOICE);
			DWSV B 12 A_SpawnProjectile("badvacshot",40,0);
			DWSV A 7
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto See;
		CandleAttk:
			DWFC A 10 
			{
				int prevcandleshottype = candleshottype;
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
				
				A_CandleShotMode(0);
				A_DynamicMusic();
			}
			DWBL BBB 3 
			{
				user_shotsfired++;
				A_StartSound("weapons/fcandlepopping",random(511,520),CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("weapons/fcandlefire",CHAN_WEAPON);
				double xyspread;
				double zspread;
				if (Distance3D(target) <= 1024)
				{
					xyspread = 0.25;
					zspread = 0.25;
					A_Recoil(0.25);
				}
				else
				{
					xyspread = 2.5;
					zspread = 2.5;
					A_SetTics(random(1,2));
					A_Recoil(0.625);
				}
				
				if (candleshottype <= 0) A_SpawnProjectile("BadCandleShot",40,0,frandom(-xyspread,0.25),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
				if (candleshottype == 1) A_SpawnProjectile("BadCandleShotIcy",40,0,frandom(-xyspread,0.25),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
				if (candleshottype >= 2)
				{
					if (candleshotalttype % 2) A_SpawnProjectile("BadCandleShot",40,0,frandom(-xyspread,xyspread),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
																else A_SpawnProjectile("BadCandleShotIcy",40,0,frandom(-xyspread,xyspread),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_CHECKTARGETDEAD,frandom(-zspread,zspread));
					candleshotalttype++;
					candleshotalttype = candleshotalttype % 54;
				}
				A_DynamicMusic();
			}
			DINA A 2
			{
				if (user_shotsfired >= (24 + (skill * 6)))
				{
					user_shotsfired = 0;
					return resolvestate("See");
				}
				else
				{
					if (Distance3D(target) > 1024) A_SetTics(randompick(0,1,1,1,1,2));
					A_CandleShotMode(1);
					A_DynamicMusic();
					A_CPosRefire();
				}
				return resolvestate(null);
			}
			DINA A 2
			{
				if (random(1,4) <= 1)
				{
					A_SetTics(4);
					if (random(1,4) <= 1) A_Chase("Missile","Melee",CHF_FASTCHASE);
					else A_Chase(null,null,CHF_FASTCHASE);
				}
			}
			Goto CandleAttk+1;
		Melee:
			DINA F 0 
			{
				if (target)
				{
					if (Distance3D(target) <= 56)
					{
						if (random(1,256) <= 112)
						{
							A_DynamicMusic();
							A_FaceTarget();
							return resolvestate(null);
						}
						else
						{
							A_FaceTarget();
							A_DynamicMusic();
							return resolvestate("Kick");
						}
					}
					else
					{
						if (random(1,40) <= random(28,36)) 
						{
							A_DynamicMusic();
							return resolvestate("Kick");
						}
						else return resolvestate("See");
					}
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			DINA F 0
			{
				if (random(1,8) >= 2) A_EDTauntAtk();
				else A_StartSound("dinah/giggle",CHAN_VOICE);
			}
			DINA F 2
			{
				A_Facetarget();
				A_DynamicMusic();
			}
			DINA FF 2 
			{
				A_Recoil(-2);
				A_DynamicMusic();
			}
			DINA F 2 
			{
				ThrustThingz (0, 27, 0, 0);
				ThrustThing (angle*256/360, 18, 0, 0);
				A_DynamicMusic();
				
			}
			DINA G 2
			{
				A_DynamicMusic();
			}
			DINA G 4 
			{
				A_CustomMeleeAttack (random(25,40), "mallethit", "malletswing", "", 1);
				A_DynamicMusic();
			}
			Goto See;
		Kick:
			DINA AAAAA 1 A_Facetarget();
			DINK A 0 A_DynamicMusic();
			DINK A 1 // [6]
			{
				A_DynamicMusic();
			}
			DINK A 1 // [7]
			{
				A_DynamicMusic();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					if (random(1,4) <= 1) A_StartSound("fistswingheavy0",CHAN_BODY);
													 else A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_BODY);
				}
			}
			DINK A 1 // [8]
			{
				A_DynamicMusic();
				int basechance = 128;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(1.5,1.5,1.5,1.625,1.625,1.75);
				if (random(1,256) <= basechance && waterlevel <= 2)
				{
					double maskpitch = 1.00;
					//if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,13);
					if (randvoice == 1) voicenm = "dinah/Jump";
					if (randvoice >= 2 && randvoice <= 4) voicenm = "dinah/kick1";
					if (randvoice >= 5 && randvoice <= 6) voicenm = "dinah/kiai4";
					if (randvoice >= 7 && randvoice <= 8) voicenm = "dinah/kiai5";
					if (randvoice == 9) voicenm = "dinah/kiai6";
					if (randvoice == 10) voicenm = "dinah/kiai7";
					if (randvoice == 11) voicenm = "dinah/kiai8";
					if (randvoice == 12) voicenm = "dinah/kiai9";
					if (randvoice == 13) voicenm = "dinah/kiai10";
					if (exex_dinahextravoices)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			DINK AA 1
			{
				A_DynamicMusic();
			}
			DINK BB 1
			{
				A_DynamicMusic();
			}
			DINK B 1
			{
				A_DynamicMusic();
				int TruePlayerLevel = CountInv("MonsterLevel");
				int BerserkAdd;
				double recl = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recl = recl * (random(7,17) + BerserkAdd);
				double recoilmulti = (1.0 - (TruePlayerLevel * 0.0234375));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recl *= recoilmulti;
				A_Recoil(recl);
				A_CustomBulletAttack(0,0,1,random(28,52),"BadKickPuff", 104);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "EvilKickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * 0.06))) mk = "EvilKickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
			}
			DINK BB 1
			{
				A_DynamicMusic();
			}
			DINK AAAAA 1
			{
				A_DynamicMusic();
			}
			DINK A 0
			{
				if (target)
				{
					if (Distance3D(target) <= 104)
					{
						if (random(1,256) <= 224) 
						{
							A_DynamicMusic();
							return resolvestate("Kick");
						}
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DINA AAAAA 1;
			DINA B 2 
			{
				double backthrust = frandom(16,20);
				ThrustThingZ(0, (backthrust*1.5), 0, 0);
				int dodgetype = random(1,3);
				double dodgeang;
				if (dodgetype <= 1) dodgeang = angle*256/360+128;
				if (dodgetype == 2) dodgeang = angle*256/360+64;
				if (dodgetype >= 3) dodgeang = angle*256/360+192;
				ThrustThing(dodgeang, (backthrust*frandom(0.334,0.5)), 0, 0);
			}
			DINA C 2;
			DINA DE 2;
			Goto See;
		Pain:
			DINA H 2 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			DINA H 6 
			{
				if (random(1,16) <= 13)
				{
					ThrustThingZ(0, 24, 0, 0);
					ThrustThing (angle*256/360+random(96,160), random(6,9), 0, 0);
					A_Pain();
				}
			}
			DINA A 6 A_Jump(128,"Missile");
			Goto See;
		Death:
			DINA H 0 Bright
			{
				A_StopSound(CHAN_VOICE);
				A_StartSound("EDinal/DScream",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			DINA HHHHHHHH 4 Bright
			{
				A_StartSound("weapons/cherryboom",CHAN_BODY);
				A_SpawnItemEX("BossBoom",random(20,64),random(-64,64),random(-64,64),0,0,0,0,SXF_NOCHECKPOSITION);
			}
			DINA H 3 A_FaceTarget();
			DINA H 5 
			{
				ThrustThingZ(0, random(16,24), 0, 0);
				ThrustThing(angle*256/360+180, (random(2,3) * random(2,4)), 0, 0);
				A_Scream();
			}
			DINA H 2 bright A_NoBlocking();
			DANS RSTUVWXYZ 2 bright;
			Stop;
		}
}

class BadKickPuff : EEPuff
{
	default
	{
		Tag "Kick";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				int raddmg = random(28,52);
				raddmg = floor(raddmg * (1.00 + (0.075 * random(-4,4))));
				if (target)
				{
					if (target.CountInv("PowerStrength") || target.CountInv("PowerStrengthDD")) raddmg = floor(raddmg * 10);
				}
				raddmg = floor(raddmg * (0.05 * randompick(1,2,2,2,2,2,3)));
				raddmg = floor(raddmg * 0.25);
				A_Explode(raddmg, 24, 0, 0, 6);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class SpinnerShotEvil : EEProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt);
		DamageType "Spinner";
		+SEEKERMISSILE
		//+NOEXTREMEDEATH
		Projectile;
		renderstyle "Add";
		SeeSound "weapons/spinnerfire";
		DeathSound "";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		finaldamagedealt = (5 * random(1,8));
	}

	States
	{
		Spawn:
			SPNR A 0 Bright NoDelay
			{
				A_SpawnItemEx("Firetrail", 0, 0, 0, 0, 0, 0, 180, 128);
				A_AlertMonsters();
				A_StartSound("weapons/cherrywick",CHAN_7,CHANF_LOOPING);
			}
			SPNR AABB 1 Bright 
			{
				A_SeekerMissile(12,12,SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Death:
			SPNR C 0 
			{
				A_StopSound(CHAN_7);
				A_AlertMonsters();
			}
			FSPE A 2 Bright 
			{
				A_Explode(128,XF_HURTSOURCE,true,32);
				A_StartSound("weapons/cherryboom",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			FSPE BCDE 2 Bright;
			Stop;
	}
}

class BadBlunderSmokeSmall : SingleDamageRipper
{
	double basealpha;
	default
	{
		Height 8;
		Radius 4;
		DamageFunction (finaldamagedealt);
		Speed 5;
		Projectile;
		+STRIFEDAMAGE
		+NOBLOCKMAP
		+NOGRAVITY
		+RANDOMIZE
		RenderStyle "Translucent";
		Alpha 0.3;
		Scale 0.5;
		ProjectileKickback 0; // 34
	}
	
	override void PostBeginPlay()
	{
		basealpha = alpha;
		super.PostBeginPlay();
		finaldamagedealt = 1 * random(1,4);
	}
	
	States
	{
		Spawn:
			LSMK A 1 Bright NoDelay
			{
				A_SetRenderStyle((alpha*exex_bsmokealphamul),STYLE_Translucent);
			}
			Goto Death;
		Death:
			LSMK ABCDEFGH 4 Bright A_FadeOut(basealpha*frandom(0.1,0.125));
			Stop;
	}
}

class BadBlunderSmokeSmallF : BadBlunderSmokeSmall
{
	default
	{
		Speed 10;
		Alpha 0.6;
		ProjectileKickback 0; // 34
	}
}

class RealBadCroquetBall : EEProjectile
{
	default
	{
		Tag "Cricket Ball";
		Radius 8;
		Height 12;
		Speed 40;
		DamageFunction (finaldamagedealt); // 3
		DamageType "Cricket";
		Projectile;
		+RANDOMIZE
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		+USEBOUNCESTATE
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
		BounceType "Hexen";
		BounceCount 0;
		BounceFactor 0.0;
		WallBounceFactor 0.0;
		ProjectileKickback 50; // 50
	}

	int minbouncelvl;
	double bouncelvlfactor;
	int nogravtimer;

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if (target && target.GetClassName() == "EvilDinah")
		{
			minbouncelvl = 8;
			if (IPAttack) minbouncelvl *= frandompick(0.20,0.25,0.334);
			bouncelvlfactor = (1.0 / (minbouncelvl * 1.5));
			if (IPAttack) bouncelvlfactor = (1.0 / (minbouncelvl * frandompick(1.25,1.375,1.5)));

			int TruePlayerLevel = target.CountInv("MonsterLevel");
			if (TruePlayerLevel >= minbouncelvl)
			{
				double extratimes = ((TruePlayerLevel - minbouncelvl) * bouncelvlfactor);
				if (dydudebug_attackstuff) Console.Printf("[%s] extratimes: %.8f", GetClassName(), extratimes);
				if (extratimes < 0) extratimes = 0;
				bSKYEXPLODE = true;
				bBOUNCEONWALLS = true;
				bBOUNCEONFLOORS = true;
				bBOUNCEONCEILINGS = true;
				bCANBOUNCEWATER = true;
				bDONTBOUNCEONSHOOTABLES = true;
				bALLOWBOUNCEONACTORS = true;
				if (IPAttack) BounceCount = 4 + extratimes;
				else BounceCount = 2 + extratimes;
				BounceFactor = 1.00;
				WallBounceFactor = 1.00;
			}
			else
			{
				if (IPAttack)
				{
					bSKYEXPLODE = true;
					bBOUNCEONWALLS = true;
					bBOUNCEONFLOORS = true;
					bBOUNCEONCEILINGS = true;
					bCANBOUNCEWATER = true;
					bDONTBOUNCEONSHOOTABLES = true;
					bALLOWBOUNCEONACTORS = true;
					BounceCount = 2;
					BounceFactor = 1.00;
					WallBounceFactor = 1.00;
				}
				else
				{
					bBOUNCEONWALLS = false;
					bBOUNCEONFLOORS = false;
					bBOUNCEONCEILINGS = false;
					bCANBOUNCEWATER = false;
					bDONTBOUNCEONSHOOTABLES = true;
					bALLOWBOUNCEONACTORS = false;
					BounceCount = 0;
					BounceFactor = 0;
					WallBounceFactor = 0;
				}
			}
			if (dydudebug_attackstuff) Console.Printf("[%s] BounceCount: %d", GetClassName(), BounceCount);
		}
	}
	
	States
	{
		Spawn:
			CBAL AAABBB 1 NoDelay
			{
				if (bNOGRAVITY && nogravtimer) 
				{
					nogravtimer--;
					if (nogravtimer <= 0) bNOGRAVITY = false;
				}
				else
				{
					nogravtimer = 0;
				}
				if (dydudebug_projectilecollisions) Console.Printf("State: Spawn [%d], NoGrav: %d, NGTimer: %d", frame, bNOGRAVITY, nogravtimer);
			}
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Death [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Crash [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: XDeath [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			stop;
		Bounce:
			TNT1 A 0
			{
				if (vel.x > abs(1.0) || vel.y > abs(1.0) || vel.z > abs(1.0))
				{
					A_StartSound("croquet/ballhit",CHAN_WEAPON,CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(1.2,1.4));
				}
				else
				{
					if (random(1,4) <= 1) A_StartSound("croquet/ballhit",CHAN_WEAPON,CHANF_DEFAULT,frandom(0.4,0.8),ATTN_NORM,frandom(1.4,1.8));
				}
				double scalevel = frandompick(0.8125,0.875,0.9375);
				if (random(1,4) <= random(2,3)) scalevel = 0.75;
				A_ScaleVelocity(scalevel);
				bNOGRAVITY = false;
				nogravtimer = (random(3,5) * randompick(1,2,2,2,2,2,3));
				if (dydudebug_projectilecollisions) Console.Printf("State: Bounce [%d], NoGrav: %d, VelMul: %.3f", frame, bNOGRAVITY, scalevel);
			}
			goto Spawn;
	}
}

class RealBadJackShot : EEProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 50; // 50
		DamageFunction (finaldamagedealt);
		DamageType "Bonk";
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
		ProjectileKickback 30; // 60
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			
			double decenthealthfactor = 0.03125;
			double lowhealthfactor = 0.09375;
			double crisishealthfactor = 0.4375;
			
			finaldamagedealt = (3 * random(1,8));
			if (TruePlayerLevel >= exex_jackcrisislvlrequirement && exex_jackcrisislvlrequirement > 0)
			{
				decenthealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 0.5));
				lowhealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 0.667));
				crisishealthfactor *= (1.0 + ((TruePlayerLevel / exex_jackcrisislvlrequirement) * 1.0));
				if (target.CountInv("DecentHealth")) finaldamagedealt *= (1.0 + decenthealthfactor);
				if (target.CountInv("LowHealth")) finaldamagedealt *= (1.0 + lowhealthfactor);
				if (target.CountInv("CriticalHealth")) finaldamagedealt *= (1.0 + crisishealthfactor);
				if (dydudebug_rangedmg) Console.Printf("decenthealthfactor: %.2f, lowhealthfactor: %.2f, crisishealthfactor: %.2f", decenthealthfactor, lowhealthfactor, crisishealthfactor);
			}
		}
		
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	void A_JackShotIPPattern()
	{
		double ca = cos((angle-90)); // X
		double sa = sin((angle-90)); // Y

		double basemove = basespreadspeed;
		if (IPAttack)
		{
			if (zspreadtime != 0)
			{
				if (zspreadtime > 0) // Goes Up
				{
					zspreadtime -= 1;
					AddZ(basemove,true);
				}
				else
				if (zspreadtime < 0) // Goes Down
				{
					zspreadtime += 1; 
					AddZ(-basemove,true);
				}
			}
			Vector2 dpos = (pos.x, pos.y);
			if (xyspreadtime != 0)
			{
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[sapphire](pre) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[sapphire](pre) projid: %d\c-, xpos: %.8f, ypos: %.8f [tic: %d]", ipprojid, pos.x, pos.y, pos.z, gametic);
				}
				if (xyspreadtime > 0) // Goes Left
				{ 
					xyspreadtime -= 1;
					dpos = ((pos.x + (basemove * ca)), (pos.y + (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				else
				if (xyspreadtime < 0) // Goes Right
				{
					xyspreadtime += 1;
					dpos = ((pos.x - (basemove * ca)), (pos.y - (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[fire](post) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[fire](post) projid: %d\c-, xpos: %.8f, ypos: %.8f, zpos: %.8f, xyspreadtime: %d [tic: %d]", ipprojid, dpos.x, dpos.y, pos.z, xyspreadtime, gametic);
				}
			}
		}
	}

	void A_JackShotShieldSetupEnemy(actor BombShots, double scaling = 0.0125)
	{
		if (BombShots)
		{
			int oldrad = BombShots.radius;
			int oldhei = BombShots.height;
			double scalebase = 1.0;
			BombShots.A_SetSize((BombShots.radius * scalebase),(BombShots.height * scalebase));
			//Console.Printf("rad: %d [%d], hei: %d [%d]", BombShots.radius, oldrad, BombShots.height, oldhei);
		}
	}

	States
	{
		Spawn:
			ABAL AABB 1
			{
				A_JackShotIPPattern();
				
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (!(ddafd_disableaggroappleblock && (player.CountInv("IsDynDuchess") || player.CountInv("IsAppetite"))))
				{
					actor BombShots;
					bool success;
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
				}
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class BadCandleShot : EEFastProjectile
{
	default
	{
		Tag "Fosnian Candle Burst [Fiery]";
		Radius 2;
		Height 2;
		Speed 60;
		Damage 6;
		Scale 0.5;
		DamageType "Fire";
		RenderStyle "Add";
		PROJECTILE;
		+RANDOMIZE;
		+BLOODSPLATTER;
		+DONTREFLECT;
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		if (random(1,2) <= 1) bFORCERADIUSDMG = true;
	}
	
	states
	{
		Spawn:
			TNT1 A 1 bright 
			{
				A_SpawnItemEx("CandleTrail",0,0,0, 0,0,0, 0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION|SXF_TRANSFERAMBUSHFLAG);
				double spawndistance = -53.3334;
				double spawnheight = 0;
				A_SpawnItemEx("CandleTrail", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
				spawndistance = -106.6667;
				spawnheight = 0;
				A_SpawnItemEx("CandleTrail", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			}
			loop;
		Death:
			SPNR C 0 A_AlertMonsters();
			FSPE A 4 Bright 
			{
				A_Explode(10,80,true,true,20);
			}
			FSPE BCDE 4 Bright;
			Stop;
	}
}

class BadCandleShotIcy : EEFastProjectile
{
	default
	{
		Tag "Fosnian Candle Burst [Icy]";
		Radius 2;
		Height 2;
		Speed 60;
		Damage 6;
		Scale 0.5;
		DamageType "Ice";
		RenderStyle "Add";
		PROJECTILE;
		+RANDOMIZE;
		+BLOODSPLATTER;
		+DONTREFLECT;
	}
	
	override void PostBeginPlay()
	{
		EEFastProjectile.PostBeginPlay();
		if (random(1,2) <= 1) bFORCERADIUSDMG = true;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		DDPlayerPawn playpawn;
		DDPlayerPawn playpawn2;
		Actor DDActor;
		Actor DDActor2;
		playpawn = DDPlayerPawn(target);
		playpawn2 = DDPlayerPawn(other);
		DDActor = Actor(target);
		DDActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					if (A_CheckFriendCollisionProjTypePlayer(self) > 0) return false;
					if (A_CheckFriendCollisionProjTypePlayer2(self) > 0) return false;
				}
			}
			else
			if (DDActor && DDActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			
			let checkedenemy = Actor(other);
			if (!checkedenemy.bICECORPSE == 0) return false; else return true; // Makes the ice projectiles move PAST the frozen monster to hit other monsters.
		}
		// We don't really care about others making the check.

		return true;
	}

	states
	{
		Spawn:
			TNT1 A 1 bright 
			{
				A_SpawnItemEx("CandleTrailIcy",0,0,0, 0,0,0, 0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION|SXF_TRANSFERAMBUSHFLAG);
				double spawndistance = -53.3334;
				double spawnheight = 0;
				A_SpawnItemEx("CandleTrailIcy", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
				spawndistance = -106.6667;
				spawnheight = 0;
				A_SpawnItemEx("CandleTrailIcy", cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			}
			loop;
		Death:
			SPNR C 0 A_AlertMonsters();
			ISPE A 4 Bright 
			{
				A_Explode(10,80,true,true,20);
			}
			ISPE BCDE 4 Bright;
			Stop;
	}
}

class BadRecordShot : EEProjectile
{
	int seekstrength;
	int seekchance;
	int seekdist;
	default
	{
		Tag "RazorRecord";
		Radius 6;
		Height 6;
		Speed 20;
		DamageFunction (finaldamagedealt);
		DamageType "Beats";
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		ProjectileKickback 50; // 0

		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		BounceType "Hexen";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		BounceCount 2;
		SeeSound "";
		DeathSound "axe/hit";
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		double sndpitch = 1.0;
		double sndvol = 1.0;
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
		}
		A_StartSound("axe/throw",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
			A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			if (random(1,4) <= 1)
			{
				sndpitch = frandom(0.75,0.875);
				sndvol = 1.4;
				A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			}
		}

		if (target && target.GetClassName() == "EvilDinah")
		{
			if (IPAttack) 
			{
				BounceCount = 5;
				BounceFactor = 1.03125;
				WallBounceFactor = 1.03125;
			}
			else 
			{
				BounceCount = 2;
				BounceFactor = 1.0125;
				WallBounceFactor = 1.0125;
			}
		}

		finaldamagedealt = (12*random(1,8));
		if (Stamina == 3) 
		{
			finaldamagedealt *= 3;
			ProjectileKickback *= 3;
		}
		if (Stamina >= 5) 
		{
			finaldamagedealt *= 5;
			ProjectileKickback *= 3;
		}
		if (IPAttack)
		{
			finaldamagedealt = (48*random(1,2));
			if (Stamina == 3) finaldamagedealt *= 3.09;
			if (Stamina >= 5) finaldamagedealt *= 5.15;
		}
		if (IPAttack && random(1,8) <= 1) finaldamagedealt *= frandompick(1.125,1.25,1.25,1.25,1.25,1.375);
		if (target.CountInv("GrimophoneUpgrade"))
		{
			finaldamagedealt *= (1.0 + (target.CountInv("GrimophoneUpgrade") * frandompick(0.334,0.50,0.50,0.50,0.50,0.667)));
		}
		finaldamagedealt *= (1.0 + (target.CountInv("MonsterLevel") * (random(1,6) * 0.005)));
		
		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}

	States
	{
		Spawn:
			RBUL A 0 NoDelay
			{
				seekstrength = 12;
				seekchance = 50;
				seekdist = 10;
				if (target && target.GetClassName() == "EvilDinah")
				{
					int TruePlayerLevel = target.CountInv("MonsterLevel");
					
					seekstrength += (TruePlayerLevel * 0.36);
					seekchance += (TruePlayerLevel * 0.75);
					seekdist += (TruePlayerLevel * 0.10);
					if (IPAttack)
					{
						seekstrength *= 2.5;
						seekchance *= 2.5;
						seekdist *= 2.5;
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(1,4) == 1) { A_ScaleVelocity(1.0025); }
			}
			RBUL ABAB 1
			{
				if (random(1,2) == 1) { A_ScaleVelocity(1.0375); }
			}
			RBUL ABAB 1
			{
				if (random(1,4) <= 3) 
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.00125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(7,8) <= 7)
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.000125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
		Spawn2:
			RBUL AB 1 
			{
				A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
				A_ScaleVelocity(1.000125);
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
	
	States
	{
		Spawn:
			RBUL ABAB 1;
			RBUL AB 1 A_SeekerMissile (12,12,SMF_LOOK);
			Loop;
	}
}

class BadVacShot : EEProjectile
{
	default
	{
		Tag "Dust Devil";
		Radius 3;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 1;
		health 1;
		Projectile;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Normal";
		seesound "Weapons/RocketFire";
		deathsound "croquet/ballhit";
		ProjectileKickback 0; // 0
	
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		+DONTREFLECT
		+NODAMAGETHRUST
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 5;
		+RIPPER
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (20 * baserand);
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.10 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright NoDelay
			{
				if (IPAttack) A_SetTics(2);

				int dmg, rad, fullrad;
				dmg = 41;
				rad = 64;
				fullrad = rad * 0.25;
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.0,1.125,1.125,1.25);
					rad = randompick(64,72,72,80,80,80,80,80,88,88,96);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			VSHT A 0
			{
				if (IPAttack)
				{
					health--;
					if (health <= 0)
					{
						health = randompick(1,1,1,1,2);
						actor BombShots;
						EEProjectile IPCompat;
						BombShots = A_SpawnProjectile("VacShotMini",0,0,0,CMF_TRACKOWNER);
						if (BombShots && IPAttack) 
						{
							IPCompat = EEProjectile(BombShots);
							if (IPCompat) 
							{
								IPCompat.IPattack = true;
								IPCompat.vel.z = frandompick(-1,-0.5,-0.5,0,0,0,0,0,0,0.5,0.5,1); // VSpeed = Vel.z
								IPCompat.health = randompick(3,4,4,5,5,5,6,6,7);
							}
						}
					}
				}
			}
			loop;
		Death:
			TNT1 A 4 
			{
				if (IPAttack) A_SetTics(3);

				int dmg, rad, fullrad;
				dmg = 82;
				rad = 128;
				fullrad = (rad * 0.25);
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.125,1.125,1.25,1.25);
					rad = randompick(128,144,144,160,16,16,16,16,176,176,192);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			stop;
	}
}

class EvilZapShot : EEFastProjectile
{
	int selfaoe;
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 1;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		ProjectileKickback 125; // 25
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (12 * baserand);
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.06 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 4 Bright 
			{
				int noselfaoecnc = 8;
				int minfullrad = 32;
				int baseaoedmg = 128;
				int baseaoeradius = 128;
				int TruePlayerLevel = CountInv("MonsterLevel");
				noselfaoecnc = 8 + (TruePlayerLevel * 0.6667);
				minfullrad = 32 + (TruePlayerLevel * 1.3334);
				if (IPAttack) minfullrad *= 4;
				if (dydudebug_attackstuff) Console.Printf("\c[green]ZapShot: noselfaoecnc: %d, minfullrad: %d", noselfaoecnc, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);

				if (IPAttack) 
				{
					A_SetTics(3);
				}
			}
			ZBUX BC 4 Bright
			{
				if (IPAttack) A_SetTics(3);
			}
			ZBUX D 4 Bright
			{
				if (IPAttack)
				{
					A_SetTics(3);
					if (random(1,32) <= 3) A_BFGSpray("PikeExtra",40,0,90,2048,32,randompick(15,20,25));
				}
			}
			stop;
	}
}

class EvilMiniZapShot : EvilZapShot
{
	default
	{
		Tag "Mini Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		ProjectileKickback 62; // 25
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int baserand = random(1,8);
		finaldamagedealt = (8 * baserand);
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
			finaldamagedealt += (TruePlayerLevel * (0.04 * baserand));
			finaldamagedealt *= 1.0 + (TruePlayerLevel * 0.0125);
			if (IPAttack) 
			{
				finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
			}
		}

		//if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 3 Bright
			{
				int noselfaoecnc = 8;
				int aoechance = 8;
				int minfullrad = 8;
				int baseaoedmg = 32;
				int baseaoeradius = 32;
				int TruePlayerLevel = CountInv("MonsterLevel");
				baseaoedmg += (TruePlayerLevel * 0.128);
				baseaoedmg *= (1.0 + (TruePlayerLevel * 0.125));
				baseaoeradius += (TruePlayerLevel * 0.128);
				baseaoeradius *= (1.0 + (TruePlayerLevel * 0.125));
				minfullrad = (baseaoeradius * 0.25);

				noselfaoecnc = 8 + (TruePlayerLevel * 0.6667);
				aoechance = 8 + (TruePlayerLevel * 0.1667);
				if (IPAttack) minfullrad *= 4;
				if (dydudebug_attackstuff) Console.Printf("\c[green]MiniZapShot: noselfaoecnc: %d, aoechance: %d, minfullrad: %d", noselfaoecnc, aoechance, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					aoechance = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				if (random(1,256) <= aoechance || IPAttack) 
				{
					if (dydudebug_attackstuff) Console.Printf("\c[sapphire]MiniZapShot: AOE");
					A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);
				}

				if (IPAttack) A_SetTics(2);
			}
			ZBUX BC 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			ZBUX D 3 Bright
			{
				if (IPAttack) 
				{
					A_SetTics(2);
					if (random(1,32) <= 3) A_BFGSpray("MiniPikeExtra",26,0,90,1536,32,randompick(8,12,16));
				}
			}
			stop;
	}
}

class EvilEggShot : EEProjectile
{
	default
	{
		Tag "Large Fractal Egg";
		Radius 3;
		Height 3;
		Speed 70;
		DamageFunction (finaldamagedealt); // Damage 12;
		DamageType "Breakfast";
		Scale 2;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 96;
		ProjectileKickback 37; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (12 * random(1,8));
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright 
			{
				int dmg = 24;
				int rad = 96;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.5;
					rad *= 1.5;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggGrenade",2,35,1,6,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EvilEggGrenade : EEProjectile
{
	default
	{
		Tag "Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 9;
		DamageType "Breakfast";
		Scale 1.5;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 64;
		BounceCount 1;
		ProjectileKickback 18; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (9 * random(1,8));
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 64;
				int rad = 64;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.25;
					rad *= 1.25;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggMini",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EvilEggMini",2,35,1,10,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EvilEggMini : EEProjectile
{
	default
	{
		Tag "Small Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		DamageFunction (finaldamagedealt); // Damage 6;
		DamageType "Breakfast";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 32;
		BounceCount 2;
		ProjectileKickback 9; // 75
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		finaldamagedealt = (6 * random(1,8));
		if (target && target.GetClassName() == "EvilDinah")
		{
			int TruePlayerLevel = target.CountInv("MonsterLevel");
		}
		if (dydudebug_rangedmg) Console.Printf("damage [%s]: %d", GetClassName(), finaldamagedealt);
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay;
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright
			{
				int dmg = 32;
				int rad = 32;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.125;
					rad *= 1.125;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL BC 5 Bright;
			Stop;
	}
}

class EvilKickShieldNoReflect : ShieldPartMeleeNoReflect
{
	override bool CanCollideWith(Actor other, bool passive)
	{
		EvilDinah playpawn;
		EvilDinah playpawn2;
		playpawn = EvilDinah(other);

		if (dydudebug_shieldcollision) Console.Printf("\cyKickShield [%s] (gametic %d):\c- \c[brick]other: %s\c-", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			if (A_CheckCollisionProjShieldExemptionE(other)) return false;

			if (dydudebug_shieldcollision) Console.Printf("\cyKickShield (gametic %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking

			if (other)
			{
				if (other.bISMONSTER)
				{
					if (!other.bFRIENDLY)
					{
						if (other.CountInv("JustKicked") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustKicked (%s) [passive side]", other.GetClassName());
							return false;
						}
						if (other.CountInv("JustPunched") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustPunched (%s) [passive side]", other.GetClassName());
							return false;
						}
						if (other.CountInv("JustUppercutted") > 0)
						{
							if (dydudebug_shieldcollision) Console.Printf("JustUppercutted (%s) [passive side]", other.GetClassName());
							return false;
						}
					}
					if (other.bFRIENDLY) return false;
					if (other.health <= 0) return false;
					let ShieldPiece = EvilKickShieldNoReflect(other); if (ShieldPiece) return false;
					let ShieldPiece2 = EvilKickShieldReflect(other); if (ShieldPiece2) return false;
					return true;
				}
			}

			playpawn = EvilDinah(other.target);
			playpawn2 = EvilDinah(master);
			if (playpawn && playpawn2) return false;

			return true;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dydudebug_shieldcollision) Console.Printf("\cyKickShield (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = EvilDinah(other.target);
			playpawn2 = EvilDinah(master);
			if (playpawn && playpawn2) return false;

			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			HEXA C 0 bright NoDelay;
			HEXA C 1 bright;
			stop;
		Pain:
			TNT1 A 0 bright
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 57);
				}
				else
				{
					A_StartSound("FistHitWall", 57); 
				} 
			}
			stop;
	}
}

class EvilKickShieldReflect : EvilKickShieldNoReflect
{
	default
	{
		+REFLECTIVE 
		+AIMREFLECT
	}
}
