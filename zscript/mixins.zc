mixin class DmgCalc
{
	action int A_GetPunchDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		string weaponname;
		weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		String nm, nn, no, np;

		// Character Check [base damage]
		If (weapon is "HandToHand")
		{
			if (altfire == 0)
			{
				damage = random(9,15);
			}
			else
			if (altfire == 1)
			{
				damage = random(59,101);
			}
		}
		else
		{
			damage = random(9,15);
		}
		if (dydudebug_meleedmg) Console.Printf("BaseDmg: %d [%s, %s]", damage, weaponname, actorname);

		// Gauntlet Check #1 [base damage]
		previousdamage = damage;
		If (CountInv("UsingBoxingGloves"))
		{
			damage = random(9,13);
			if (dydudebug_meleedmg) Console.Printf("GloveDmg: %d - (Previous Dmg: %d) [%s, %s]", damage, previousdamage, weaponname, actorname);
		}

		// Berserk Check
		previousdamage = damage;
		if (CountInv("PowerStrength", AAPTR_PLAYER1) || CountInv("PowerStrengthDD", AAPTR_PLAYER1)) damage = floor(damage * 10);
		if (dydudebug_meleedmg) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d) [%s, %s]", damage, previousdamage, weaponname, actorname);

		double PerkFactor;
		double temp1, temp2;
		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,2,2,2,2,2,3)));
			if (dydudebug_meleedmg) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d)", weaponname, damage, previousdamage);
		}
		else
		{
			previousdamage = damage;
		}

		previousdamage = damage;
		If (weapon is "HandToHand")
		{
			if (altfire == 0) damage = damage;
		}
		if (dydudebug_meleedmg && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Punch]", weaponname, damage, previousdamage);
		if (dydudebug_meleedmg && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Uppercut]", weaponname, damage, previousdamage);

		if (istarget)
		{
			if (dydudebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (dydudebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (dydudebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (dydudebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		
		return damage;
	}
}

mixin class CollisionChecker
{
	string infl;
	// Checks for certain projectiles from charmed/friendly allies to pass through other friendlies instead of colliding
	int A_CheckFriendCollisionProjTypeFriendlyDoom()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyDoom:\c- %s [type: %d]", infl, type);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHeretic()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHeretic:\c- %s [type: %d]", infl, type);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyHexen()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHexen:\c- %s [type: %d]", infl, type);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyStrife()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyStrife:\c- %s [type: %d]", infl, type);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyOthers()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyOthers:\c- %s [type: %d]", infl, type);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendly1()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendly1:\c- %s [type: %d]", infl, type);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer(Actor type)
	{
		infl = type.GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer:\c- %s [type: %d]", infl, type);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer2(Actor type)
	{
		infl = type.GetClassName();

		int type;
		if (
				// Circus 2 Stuff
				infl == "Sparkles" ||
				infl == "CrazyBits1" ||
				infl == "CrazyBits2" ||
				infl == "CrazyBits3" ||
				infl == "CrazyBits4" ||
				infl == "CrazyBits5" ||
				infl == "CrazyBits6" ||
				infl == "CrazyBits7" ||
				infl == "CrazyBits8" ||
				infl == "CrazyBits9" ||
				infl == "CrazyBits10" ||
				infl == "Popcorn_Shrap1" ||
				infl == "Popcorn_Shrap7" ||
				infl == "CrazyBalls" ||
				infl == "CrazyBall" ||
				infl == "CrazyBallDD"
			 ) type = 1;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer2:\c- %s [type: %d]", infl, type);
		return type;
	}
	
	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckCollisionProjShieldExemption(Actor type)
	{
		infl = type.GetClassName();

		int type;
		if (infl == "MalletShot" || 
				infl == "MalletShotBerserk" || 
				infl == "BlunderShot" || 
				infl == "EggShot" || 
				infl == "EggShotBerserk" || 
				infl == "EggGrenade" || 
				infl == "EggGrenadeBerserk" || 
				infl == "EggMini" || 
				infl == "EggMiniBerserk" || 
				infl == "ZapShot" || 
				infl == "MiniZapShot" || 
				infl == "JackShot" || 
				infl == "JackShotBerserk" || 
				infl == "RecordShot" || 
				infl == "VacShot" || 
				infl == "VacShot2" || 
				infl == "CherryBombShot" || 
				infl == "CherryBombShotBerserk" || 
				infl == "BRocketShot" || 
				infl == "BRocketBoom1" || 
				infl == "BRocketBoom2" || 
				infl == "Spinnershot" || 
				infl == "StreamerShot" || 
				infl == "StreamerTrail" || 
				infl == "PopperPuff1" || 
				infl == "PopperPuff2" || 
				infl == "SnakeGrenade" || 
				infl == "SnakeMiniGrenade" 
			 ) type = 1;
	
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]A_CheckCollisionProjShieldExemption:\c- %s [type: %d]", infl, type);
		return type;
	}
}