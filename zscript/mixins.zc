mixin class DmgCalc
{
	action int A_GetPunchDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		string weaponname;
		weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		String nm, nn, no, np;

		int Power;
		if (istarget && target) Power = target.player.mo.Stamina;
		else Power = player.mo.Stamina;
		if (Power) Power /= 10;
		if (Power > 10) Power = 10;

		// Character Check [base damage]
		If (weapon is "HandToHand")
		{
			if (altfire == 0)
			{
				damage = (random(9,15) + (Power * 0.9));
			}
			else
			if (altfire == 1)
			{
				damage = (random(59,101) + (Power * 6.663));
			}
			if (Power) damage *= frandom(1.00,(1.00 + (Power * frandompick(0.667,0.75,0.834))));
		}
		else
		{
			damage = random(9,15);
		}
		if (dydudebug_meleedmg) Console.Printf("BaseDmg: %d [%s, %s]", damage, weaponname, actorname);

		// Berserk Check
		previousdamage = damage;
		if (CountInv("PowerStrength", AAPTR_PLAYER1) || CountInv("PowerStrengthDD", AAPTR_PLAYER1)) damage = floor(damage * 10);
		if (dydudebug_meleedmg) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d) [%s, %s]", damage, previousdamage, weaponname, actorname);

		double PerkFactor;
		double temp1, temp2;
		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,2,2,2,2,2,3)));
			if (dydudebug_meleedmg) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d)", weaponname, damage, previousdamage);
		}
		else
		{
			previousdamage = damage;
		}

		previousdamage = damage;
		If (weapon is "HandToHand")
		{
			if (altfire == 0) damage = damage;
		}
		if (dydudebug_meleedmg && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Punch]", weaponname, damage, previousdamage);
		if (dydudebug_meleedmg && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Uppercut]", weaponname, damage, previousdamage);

		if (istarget)
		{
			if (dydudebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (dydudebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (dydudebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (dydudebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		
		return damage;
	}
}

mixin class CollisionChecker
{
	string infl;
	actor projowner;
	// Checks for certain projectiles from charmed/friendly allies to pass through other friendlies instead of colliding
	int A_CheckFriendCollisionProjTypeFriendlyDoom()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyDoom:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHeretic()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHeretic:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyHexen()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHexen:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyStrife()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyStrife:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyOthers()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyOthers:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendly1()
	{
		infl = GetClassName();
		
		int type;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendly1:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer(Actor actr)
	{
		infl = actr.GetClassName();
		projowner = actr.target;
		actor PlayPawn = PlayerPawn(projowner);
		actor ProjD;
		ProjD = DDProjectile(actr);
		
		int type;
		if (ProjD && PlayPawn) type = 1;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer2(Actor actr)
	{
		infl = actr.GetClassName();

		int type;
		if (
				// Circus 2 Stuff
				infl == "Sparkles" ||
				CrazyBits1(actr) ||
				infl == "Popcorn_Shrap1" ||
				infl == "Popcorn_Shrap7" ||
				infl == "CrazyBalls" ||
				infl == "CrazyBall" ||
				infl == "CrazyBallDD"
			 ) type = 1;
		
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer2:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckCollisionProjShieldExemption(Actor actr)
	{
		infl = actr.GetClassName();

		int type;
		if (MalletShot(actr) || 
				MalletShotBerserk(actr) || 
				BlunderShot(actr) || 
				EggShot(actr) || 
				EggGrenade(actr) || 
				EggMini(actr) || 
				ZapShot(actr) || 
				JackShot(actr) || 
				RecordShot(actr) || 
				VacShot(actr) || 
				CherryBombShot(actr) || 
				BRocketShot(actr) || 
				BRocketBoom1(actr) || 
				BRocketBoom2(actr) || 
				SpinnerShot(actr) || 
				infl == "StreamerShot" || 
				infl == "StreamerTrail" || 
				infl == "PopperPuff1" || 
				infl == "PopperPuff2" || 
				infl == "SnakeGrenade" || 
				infl == "SnakeMiniGrenade" 
			 ) type = 1;
	
		if (dydudebug_generalcollisions) Console.Printf("\c[brick]A_CheckCollisionProjShieldExemption:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
}

mixin class MonsterTickCheck
{
	int hitsoundtimer;
	int hitweaksoundtimer;
	override void Tick()
	{
		super.Tick();
	}
}

mixin class MonsterCollider
{
	int targetdummyhitcooldown;
	Actor lastattacker;
	Actor lastattackeratk;
	Actor playeriskiller;
	
	class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
	string nm, nn, no, np;
	
	// Resurrections
	override bool CanResurrect(Actor other, bool passive)
	{
		bool ResSucceed = true;
		if (!passive) // Monster is the one REVIVING...
		{
			if (other != self)
			{
				let Vile = Archvile(self);
				if (Vile) 
				{
					if (Vile.health > (Vile.SpawnHealth() >> 2)) //
					{
						ResSucceed = true;
						if (dydudebug_ressurrectdisplays) Console.Printf("Succeeded: Vile's Health is High Enough to resurrect anything");
					}
					else
					{
						if (other.SpawnHealth() <= 150)
						{
							ResSucceed = true;
							if (dydudebug_ressurrectdisplays) Console.Printf("Succeeded: Resurrectee's max health is low enough");
						}
						else
						{
							ResSucceed = false;
							if (dydudebug_ressurrectdisplays) Console.Printf("Failed: Vile's Health Too Low");
						}
					}
				}
				if (exex_combatlog) Console.Printf("\c[red]*\c- \c[brick]%s\c- is resurrecting \c[purple]%s\c-! [%d]", GetTag(), other.GetTag(), gametic);
			}
			else
			{
				if (exex_combatlog) Console.Printf("\c[red]*\c- \c[brick]%s\c- is self resurrecting! [%d]", GetTag(), gametic);
			}
		}
		else // Monster is the one BEING REVIVED...
		{
			//if (exex_combatlog) Console.Printf("\c[red]*\c- \c[purple]%s\c- is being resurrected by \c[brick]%s\c-! [%d]", GetTag(), other.GetTag(), gametic);
		}
		return ResSucceed;
	}

	// Collisions
	override bool CanCollideWith(Actor other, bool passive)
	{
		ShieldPart shieldpiece;
		shieldpiece = ShieldPart(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			if (dydudebug_generalcollisions) Console.Printf("\c[brick]Collision:\c- NotPassive - %s vs (%s) {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
			
			// Pass through certain shield parts, ones that would normally cause a monster to be bumped around by running into them
			if (shieldpiece)
			{
				if (dydudebug_generalcollisions) Console.Printf("\c[sapphire]Collision:  Passive - %s [ShieldPiece] vs (%s) {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
				if (shieldpiece.GetClassName() == "CricketShieldPart" || shieldpiece.GetClassName() == "CricketShieldPartNoReflect" ||
						shieldpiece.GetClassName() == "ShieldPartMeleeNoReflect" || shieldpiece.GetClassName() == "ShieldPartMeleeNoReflect")
				{
					if (dydudebug_generalcollisions) Console.Printf("\c[sapphire]Collision:  Passive - %s [MeleeShieldPart] vs (%s) {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
					return true;
				}
				return false;
			}

			// Pass through players, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.GetSpecies() == "Players")
			{
				if (dydudebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- NotPassive - %s [Friendly] vs (%s) [PlayerType] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false; 
			}

			// Pass through other actors, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.bFRIENDLY == 1)
			{
				if (dydudebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- NotPassive - %s [Friendly] vs (%s) [Friendly] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false; 
			}
		}
		else
		{
			if (dydudebug_generalcollisions) Console.Printf("\c[red]Collision:\c- Passive - (%s) vs %s {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
			
			if (shieldpiece)
			{
				if (dydudebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- NotPassive - %s [Friendly] vs (%s) [Friendly] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false;
			}
			return true; 
		}

		// We don't really care about others making the check.
		return true;
	}
	
	// Damage Tracking
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		nm = "CCards_Actor_Ghost"; if (CountInv(nm)) A_SetInventory("CCardGhostMarker",1);
		nm = "CCards_Actor_HasRespawned"; if (CountInv(nm)) A_SetInventory("CCardRespawnedMarker",1);
		nm = "CCards_Actor_AssassinBuff"; if (CountInv(nm)) A_SetInventory("CCardAssassinMarker",1);
		
		if (dydudebug_actordmgdisplays) Console.Printf("DamageMobj [Mixin]");
		int oldhealth = health;
		int initdmg = damage;
		if (dydudebug_actordmgdisplays) Console.Printf("initdmg: %d, oldhealth: %d", initdmg, oldhealth);
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor != null) lastattackeratk = inflictor;
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source != null) lastattacker = source;
		if (source == null) sour = "NONE"; else sour = source.GetClassName();

		if (score & 16)
		{
			if (GetRenderStyle() != default.GetRenderStyle())
			{
				//Console.Printf("4ghn34h43");
				if (infl == "VacPuff" && random(1,8) <= 5) A_SetRenderStyle(default.alpha, default.GetRenderStyle());
			}
		}

		if (bDORMANT)
		{
			if (!(mod == "SilentMassacre" || mod == "Massacre" || mod == "InstantDeath")) return 0;
		}

		if (dydudebug_actordmgdisplays)
		{
			if (flags & DMG_NO_ARMOR) Console.Printf("    (\cyIgnoresArmor?: yes)");
			if (flags & DMG_INFLICTOR_IS_PUFF) Console.Printf("    (\cyInflictorIsPuff?: yes)");
			if (flags & DMG_THRUSTLESS) Console.Printf("    (\cyThrustless?: yes)");
			if (flags & DMG_FORCED) Console.Printf("    (\cyForcedDamage?: yes)");
			if (flags & DMG_NO_FACTOR) Console.Printf("    (\cyNoDmgFactor?: yes)");
			if (flags & DMG_PLAYERATTACK) Console.Printf("    (\cyPlayerAttack?: yes)");
			if (flags & DMG_FOILINVUL) Console.Printf("    (\cyFoilInvuln?: yes)");
			if (flags & DMG_FOILBUDDHA) Console.Printf("    (\cyFoilBuddha?: yes)");
			if (flags & DMG_NO_PROTECT) Console.Printf("    (\cyBypassPowerProtection?: yes)");
			if (flags & DMG_NO_ENHANCE) Console.Printf("    (\cyBypassPowerDamage?: yes)");
			if (flags & DMG_USEANGLE) Console.Printf("    (\cyUsesAngle?: yes)");
			if (flags & DMG_EXPLOSION) Console.Printf("    (\cyIsAoEBurst?: yes)");
		}
		
		if (bFRIENDLY && (source && PlayerPawn(source)))
		{
			damage = 0;
			if (dydudebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP Z]\c-: END DAMAGE ATTEMPT (FRIENDLY)");
			return 0;
		}

		bool wasblastedimpact = false;
		if (inflictor == null && source == null && mod == 'Melee') 
		{
			wasblastedimpact = true;
			if (bBLASTED && random(1,4) <= 3) bBLASTED = false;
			if (vel.x != 0.0) vel.x *= 0.1;
			if (vel.y != 0.0) vel.y *= 0.1;
			//if (wasblastedimpact) Console.Printf("    (\czwasblastedimpact?: %d", wasblastedimpact);
		}

		int playweaksound = 0;
		//*******************
		//* Weakness Sounds *
		//*******************
		int tempdmgval = 10000;
		double tempdmgfactor = damagefactor;
		damagefactor = 1.0;
		int moddedDMG = ApplyDamageFactor(mod, tempdmgval);
		damagefactor = tempdmgfactor;
		double outputdmgfactor = 1.0;
		outputdmgfactor *= moddedDMG;
		outputdmgfactor /= tempdmgval;
		if (vict != "PracticeTarget" || vict != "PracticeTarget2")
		{
			if (damage > 0 && !(flags & DMG_NO_FACTOR)) 
			{
				if (!(mod == '' || mod == 'Normal' || mod == 'Crush' || mod == 'Falling' || mod == 'Drowning'))
				{
					if (moddedDMG <= (tempdmgval * 0.25)) playweaksound = -3;
					if (moddedDMG >= (tempdmgval * 0.25) && moddedDMG <= (tempdmgval * 0.3999999)) playweaksound = -2;
					if (moddedDMG >= (tempdmgval * 0.4) && moddedDMG <= (tempdmgval * 0.6666667)) playweaksound = -1;
					if (moddedDMG >= (tempdmgval * 1.5) && moddedDMG <= (tempdmgval * 2.4999999)) playweaksound = 1;
					if (moddedDMG >= (tempdmgval * 2.5) && moddedDMG <= (tempdmgval * 3.9999999)) playweaksound = 2;
					if (moddedDMG >= (tempdmgval * 4.0)) playweaksound = 3;
					if (playweaksound > 0) A_SetInventory("TookWeaknessHit",playweaksound);
					else if (playweaksound < 0) A_SetInventory("TookResistanceHit",(playweaksound*-1));
					if (dydudebug_actordmgdisplays) Console.Printf("moddedDMG: %d (%.8f) (%s), playweaksound: %d, damagefactor: %.8f", moddedDMG, outputdmgfactor, mod, playweaksound, damagefactor);
				}
			}
			//Console.Printf("playweaksound: %d", playweaksound);
		}
		if (vict == "PracticeTarget" || vict == "PracticeTarget2") targetdummyhitcooldown = 175;

		//*******
		//*******
		//*******
		if (GetClassName() == "KilletanteSoloist" && IsFrozen())
		{
			damage *= frandompick(0.20,0.25);
			Console.Printf("%s resists your damage due to being frozen in time!", GetTag());
			A_StartSound("misc/ResistanceHit",21,CHANF_DEFAULT,frandom(1.25,1.334),ATTN_NORM,frandom(0.875,1.125));
		}

		// Checks for if you're fighting a Serpent Rider boss
		if (mod != 'Sigil' || mod != 'Massacre' || mod != 'Telefrag') // Make sure the Sigil can deal full damage and ignores this resistance entirely :V
		{
			let SerpentRider = Sorcerer2New(self);
			let SerpentRider2 = KoraxNew(self);
			int prevdamage = damage;
			//let SerpentRider3 = EidolonNew(self); // LUL I wish >.>;
			if (SerpentRider || SerpentRider2) // || SerpentRider3
			{
				// If D'Sparil is hit by Cherry Bombs or Korax is hit by Cricket Balls, IGNORE their increasing resistances entirely :V
				if ((SerpentRider && mod != 'CherryBomb') || (SerpentRider2 && mod != 'Cricket'))
				{
					let SerpRide = Actor(self);
					if (SerpRide)
					{
						if (health < (SpawnHealth() >> 1)) // <50%
						{
							if (health < (SpawnHealth() >> 4)) // <6.25%
							{
								if (health < (SpawnHealth() >> 9)) // <0.1953125%
								{
									damage *= 0.125;
								}
								else
								{
									damage *= 0.25;
								}
							}
							else
							{
								damage *= 0.50;
							}
						}
					}
				}
			}
		}

		// Special SuperVac Suck Attack Checks :V
		if (GetClassName() == "BossBrainNew" || GetClassName() == "Sorcerer2New" || GetClassName() == "KoraxNew")
		{
			if (mod == 'Suck' && damage > health)
			{
				if (damage > health) 
				{
					Console.Printf("\c[red]You cannot kill %s with the SuperVac's suck attack! You must use a different weapon to finish it!", GetTag());
					return 0; // The above bosses CANNOT die from the SuperVac
				}
			}
		}

		//************************************************************************
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		//************************************************************************
		
		return ret;
	}
	
	override void PostBeginPlay()
	{
		BossEyeNew actcheck;
		actcheck = BossEyeNew(self);
		if (actcheck)
		{
			if (exex_improvediconofsin) { actcheck.user_bosseyetype = 1; }
			else { actcheck.user_bosseyetype = 0; }
		}
		if (BossBrainNew(self))
		{
			if (exex_improvediconofsin) 
			{
				int foundspawners;
				int foundspawnspots;
				ThinkerIterator SpawnFinder = ThinkerIterator.Create("BossEye");
				Actor mo;
				while (mo = BossEye(SpawnFinder.Next()))
				{
					foundspawners++;
					if (dydudebug_bossbraininfo) Console.Printf("%s #%d Found!", mo.GetClassName(), foundspawners);
				}
				SpawnFinder = ThinkerIterator.Create("BossTarget");
				while (mo = BossTarget(SpawnFinder.Next()))
				{
					foundspawnspots++;
					if (dydudebug_bossbraininfo) Console.Printf("%s #%d Found!", mo.GetClassName(), foundspawnspots);
				}
				if (foundspawners && foundspawnspots)
				{
					health *= 5; 
					damagefactor *= 0.4;
					if (dydudebug_bossbraininfo) Console.Printf("Icon of Sin is now stronger!");
				}
			}
		}
		
		//
		if (!(GetRenderStyle() == STYLE_Fuzzy && bSHADOW)) score += 16;
		super.PostBeginPlay();
	}
	
	void A_EEHealThing(int healvalue = 0, int healtarget = 0, int silentheal = 0)
	{
		if (healvalue > 0)
		{
			health += healvalue;
			if (health > healtarget) health = healtarget;
		}
		if (silentheal)
		{
			//if (CountInv("DamageTracker")) A_SetInventory("SilentHeal",1);
		}
	}
}

mixin class EvolveMonsters
{
	action int A_GetEvolveChance()
	{
		int SpawnChance; //, TempSpawnChance, ChanceFactor, LevelCheck, MapCheck;
		return SpawnChance;
	}
}

mixin class IPCostCheck
{
	double A_GetIPCost(int ipid = 0, bool sigiluse = false, double sigilcostbase = 3.00)
	{
		actor player = players[0].mo;
		double cost;
		
		if (ipid == 1) // Cherry Bomb [Inventory]
		{
			if (skill <= 0) cost = 25.0;
			if (skill == 1) cost = 27.5;
			if (skill == 2) cost = 30.0;
			if (skill == 3) cost = 32.5;
			if (skill >= 4) cost = 35.0;
		}
		if (ipid == 2) // Bottle Rocket [Inventory]
		{
			if (skill <= 0) cost = 30.0;
			if (skill == 1) cost = 33.75;
			if (skill == 2) cost = 37.5;
			if (skill == 3) cost = 41.25;
			if (skill >= 4) cost = 45.0;
		}
		if (ipid == 3) // Sugar Snake [Inventory]
		{
			if (skill <= 0) cost = 40.0;
			if (skill == 1) cost = 45.0;
			if (skill == 2) cost = 50.0;
			if (skill == 3) cost = 55.0;
			if (skill >= 4) cost = 60.0;
		}
		if (ipid == 4) // Spinner Chaser [Inventory]
		{
			if (skill <= 0) cost = 40.0;
			if (skill == 1) cost = 45.0;
			if (skill == 2) cost = 50.0;
			if (skill == 3) cost = 55.0;
			if (skill >= 4) cost = 60.0;
		}
		if (ipid == 5) // Killetante Effigy [Inventory]
		{
			if (skill <= 0) cost = 64.0;
			if (skill == 1) cost = 72.0;
			if (skill == 2) cost = 80.0;
			if (skill == 3) cost = 88.0;
			if (skill >= 4) cost = 96.0;
		}
		if (ipid == 6) // Scatter Popper [Inventory]
		{
			if (skill <= 0) cost = 27.0;
			if (skill == 1) cost = 28.5;
			if (skill == 2) cost = 30.0;
			if (skill == 3) cost = 31.5;
			if (skill >= 4) cost = 33.0;
		}
		if (ipid == 7) // Essence of Fury [Inventory]
		{
			if (skill <= 0) cost = 45.0;
			if (skill == 1) cost = 47.5;
			if (skill == 2) cost = 50.0;
			if (skill == 3) cost = 52.5;
			if (skill >= 4) cost = 55.0;
		}
		if (ipid == 8) // Essence of Time [Inventory]
		{
			if (skill <= 0) cost = 45.0;
			if (skill == 1) cost = 47.5;
			if (skill == 2) cost = 50.0;
			if (skill == 3) cost = 52.5;
			if (skill >= 4) cost = 55.0;
			cost *= 1.5;
		}
		if (ipid == 9) // Apple Wine [Inventory)
		{
		}
		if (ipid == 10) // Turkey Dinner [Inventory)
		{
		}

		if (ipid == 101) // Cricket Bat Melee/Main Attack [Weapon]
		{
			if (skill <= 0) cost = 7.5;
			if (skill == 1) cost = 8.75;
			if (skill == 2) cost = 10.0;
			if (skill == 3) cost = 11.25;
			if (skill >= 4) cost = 12.5;
		}
		if (ipid == 102) // Cricket Bat Ranged/Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 11.25;
			if (skill == 1) cost = 13.125;
			if (skill == 2) cost = 15.0;
			if (skill == 3) cost = 16.875;
			if (skill >= 4) cost = 18.75;
		}
		if (ipid == 103) // Cricket Bat Spinning Attack [Weapon]
		{
			if (skill <= 0) cost = 33.75;
			if (skill == 1) cost = 39.375;
			if (skill == 2) cost = 45.0;
			if (skill == 3) cost = 50.625;
			if (skill >= 4) cost = 56.25;
		}
		
		if (ipid == 111) // Blunderaxe Bat Melee/Main Attack [Weapon]
		{
			if (skill <= 0) cost = 7.5;
			if (skill == 1) cost = 8.75;
			if (skill == 2) cost = 10.0;
			if (skill == 3) cost = 11.25;
			if (skill >= 4) cost = 12.5;
		}
		if (ipid == 112) // Blunderaxe Ranged/Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 11.25;
			if (skill == 1) cost = 13.125;
			if (skill == 2) cost = 15.0;
			if (skill == 3) cost = 16.875;
			if (skill >= 4) cost = 18.75;
		}
		
		if (ipid == 121) // Scrambler Main Attack [Weapon]
		{
			if (skill <= 0) cost = 9.375;
			if (skill == 1) cost = 10.9375;
			if (skill == 2) cost = 12.5; // 2.4
			if (skill == 3) cost = 14.0625;
			if (skill >= 4) cost = 15.625;
		}
		if (ipid == 122) // Scrambler Ranged/Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 22.5;
			if (skill == 1) cost = 26.25;
			if (skill == 2) cost = 30.0;
			if (skill == 3) cost = 33.75;
			if (skill >= 4) cost = 37.5;
		}
		
		if (ipid == 131) // AppleJack Melee Attack [Weapon]
		{
			if (skill <= 0) cost = 9.375;
			if (skill == 1) cost = 10.9375;
			if (skill == 2) cost = 12.5;
			if (skill == 3) cost = 14.0625;
			if (skill >= 4) cost = 15.625;
		}
		if (ipid == 132) // AppleJack Ranged/Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 15.0;
			if (skill == 1) cost = 17.5;
			if (skill == 2) cost = 20.0;
			if (skill == 3) cost = 22.5;
			if (skill >= 4) cost = 25.0;
		}
		
		if (ipid == 141) // WizardPike Bat Melee/Main Attack [Weapon]
		{
			if (skill <= 0) cost = 7.5;
			if (skill == 1) cost = 8.75;
			if (skill == 2) cost = 10.0;
			if (skill == 3) cost = 11.25;
			if (skill >= 4) cost = 12.5;
			cost *= 1.25;
		}
		if (ipid == 142) // WizardPike Ranged/Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 67.5;
			if (skill == 1) cost = 78.75;
			if (skill == 2) cost = 90.0;
			if (skill == 3) cost = 101.25;
			if (skill >= 4) cost = 112.5;
		}
		
		if (ipid == 151) // SuperVac Main Attack [Weapon]
		{
			if (skill <= 0) cost = 0.75;
			if (skill == 1) cost = 0.875;
			if (skill == 2) cost = 1.0;
			if (skill == 3) cost = 1.125;
			if (skill >= 4) cost = 1.25;
			cost *= 2;
		}
		if (ipid == 152) // SuperVac Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 67.5;
			if (skill == 1) cost = 71.25;
			if (skill == 2) cost = 75.0;
			if (skill == 3) cost = 78.75;
			if (skill >= 4) cost = 82.5;
		}
		
		if (ipid == 161) // Grimophone Main Attack [Weapon]
		{
			if (skill <= 0) cost = 11.25;
			if (skill == 1) cost = 13.125;
			if (skill == 2) cost = 15.0;
			if (skill == 3) cost = 16.875;
			if (skill >= 4) cost = 18.75;
		}
		if (ipid == 162) // Grimophone Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 0.5625;
			if (skill == 1) cost = 0.65625;
			if (skill == 2) cost = 0.75;
			if (skill == 3) cost = 0.84375;
			if (skill >= 4) cost = 0.9375;
		}
		
		if (ipid == 171) // CandleWhip Melee/Main Attack [Weapon]
		{
			if (skill <= 0) cost = 8.4375;
			if (skill == 1) cost = 9.84375;
			if (skill == 2) cost = 11.25;
			if (skill == 3) cost = 12.65625;
			if (skill >= 4) cost = 14.0625;
		}
		if (ipid == 172) // CandleWhip Alt Attack [Weapon]
		{
			if (skill <= 0) cost = 2.8125;
			if (skill == 1) cost = 3.28125;
			if (skill == 2) cost = 3.75;
			if (skill == 3) cost = 4.21875;
			if (skill >= 4) cost = 4.6875;
		}
		
		if (ipid == 181 && sigiluse) // ???
		{
			if (skill <= 0) cost = (sigilcostbase * 1.35);
			if (skill == 1) cost = (sigilcostbase * 1.425);
			if (skill == 2) cost = (sigilcostbase * 1.50);
			if (skill == 3) cost = (sigilcostbase * 1.575);
			if (skill >= 4) cost = (sigilcostbase * 1.65);
		}
		
		if (ipid == 191) // ???
		{
		}
		
		if (ipid == 1001) // Knight Gown
		{
			if (skill <= 0) cost = 45.0;
			if (skill == 1) cost = 47.5;
			if (skill == 2) cost = 50.0;
			if (skill == 3) cost = 52.5;
			if (skill >= 4) cost = 55.0;
		}
		if (ipid == 1002) // Expert's Knight Gown
		{
			if (skill <= 0) cost = 67.5;
			if (skill == 1) cost = 71.25;
			if (skill == 2) cost = 75.0;
			if (skill == 3) cost = 78.75;
			if (skill >= 4) cost = 82.5;
		}
		if (ipid == 1003) // Master's Knight Gown
		{
			if (skill <= 0) cost = 78.75;
			if (skill == 1) cost = 83.125;
			if (skill == 2) cost = 87.5;
			if (skill == 3) cost = 91.875;
			if (skill >= 4) cost = 96.25;
		}
		if (ipid == 1004) // Ultimate Knight Gown
		{
			if (skill <= 0) cost = 84.375;
			if (skill == 1) cost = 89.0625;
			if (skill == 2) cost = 93.75;
			if (skill == 3) cost = 98.4375;
			if (skill >= 4) cost = 103.125;
		}
		
		if (player) 
		{
			let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
			if (MiscItem) 
			{
				if (MiscItem.TimeFreezeTimer && MiscItem.TimeFreezeIPBuff)
				{
					if (ipid == 8) cost = ceil(cost * 2.0);
										else cost = floor(cost * 0.5);
				}

				if (cost > MiscItem.MaxItemPoints) cost = MiscItem.MaxItemPoints;
			}
		}
		
		// "Mystery Item" reduces IP Cost by 33.3%
		if (player && player.CountInv("MysteryItem")) cost = floor(cost * 0.667);
		
		// Armor IPs Reduce Costs for Non-Armor IP Abilities
		if (!(ipid >= 1000 && ipid <= 1004))
		{
			if (player && player.CountInv("KnightGownIP1Buff")) cost = floor(cost * 0.8);
			if (player && player.CountInv("KnightGownIP2Buff")) cost = floor(cost * 0.6);
			if (player && player.CountInv("KnightGownIP3Buff")) cost = floor(cost * 0.4);
			if (player && player.CountInv("KnightGownIP4Buff")) cost = floor(cost * 0.2);
		}
		else
		{
			if (player && !player.CountInv("MysteryItem"))
			{
				if (player && player.CountInv("KnightGownIP1Buff")) cost = ceil(cost * 1.075);
				if (player && player.CountInv("KnightGownIP2Buff")) cost = ceil(cost * 1.15);
				if (player && player.CountInv("KnightGownIP3Buff")) cost = ceil(cost * 1.225);
				if (player && player.CountInv("KnightGownIP4Buff")) cost = ceil(cost * 1.30);
			}
		}
		
		// If Infinite IP Cheat is on, nullify any above cost calculations and set to 0. :V
		if (dydudebug_infiniteip) cost = 0.0;
		
		if (dydudebug_ipdisplays) Console.Printf("\c[olive]cost [%d]: %.4f, Skill: %d", ipid, cost, skill);
		return cost;
	}
	
	play void A_IPDinahVoiceSelect(int IPType = 0, int basechance = 3, int maxroll = 10)
	{
		actor player = players[0].mo;
		int voiceroll = random(1,6);
		string voiceplay;
		if (player && exex_dinahextravoices)
		{
			if (random(1,maxroll) <= basechance)
			{
				if (IPType == 0) // Default
				{
					voiceroll = random(1,6);
					if (voiceroll == 1) 
					{
						voiceplay = "dinah/ulikethis";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'YOU LIKE THIS!?'\c-");
					}
					if (voiceroll == 2) 
					{
						voiceplay = "dinah/howsthis";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'HOW'S... THIS!?'\c-");
					}
					if (voiceroll == 3) 
					{
						voiceplay = "dinah/playtimeisover";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'PLAYTIME IS OVER!!'\c-");
					}
					if (voiceroll == 4) 
					{
						voiceplay = "dinah/thiswillendit";
						Console.Printf("\c[gold]'This will end it!!'\c-");
					}
					if (voiceroll == 5) 
					{
						voiceplay = "dinah/thiswillhurt";
						Console.Printf("\c[gold]'This will hurt!!'\c-");
					}
					if (voiceroll == 6) 
					{
						voiceplay = "dinah/yourmine";
						Console.Printf("\c[gold]'You're Mine!!'\c-");
					}
				}
				else
				if (IPType == 1) // Support Item Use
				{
					voiceroll = random(1,3);
					if (voiceroll == 1) 
					{
						voiceplay = "dinah/playtimeisover";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'PLAYTIME IS OVER!!'\c-");
					}
					if (voiceroll == 2) 
					{
						voiceplay = "Dinah/marvelous";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'Marvellous!'\c-");
					}
					if (voiceroll == 3) 
					{
						voiceplay = "Dinah/AllowMe";
						if (exex_dinahextravoices) Console.Printf("\c[gold]'Allow Me!'\c-");
					}
				}
				player.A_StopSound(CHAN_VOICE);
				player.A_StartSound(voiceplay,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
	}
	
	play void A_CheckIPModeOnUse()
	{
		actor player = players[0].mo;
		if (exex_ikaripointtechpresstype >= 2 && player && player.CountInv("IPUseMode")) player.A_SetInventory("IPUseMode",0);
	}
}


mixin class InvWeaponShare
{
	//===========================================================================
	//
	// A_ThrowGrenadeAngle
	//
	// Throws a grenade (like Hexen's fighter flechette) with the added options to tweak
	// the randomized angle-range used, and if to use fixed/doubles or ints for the angles.
	//
	//===========================================================================
	action bool, Actor A_ThrowGrenadeAngle(class<Actor> missile, double zheight = 0, double zheightoffset = 35, double xyvel = 0, double zvel = 0, double angularspreadmin = -4.0, double angularspreadmax = 3.0, bool usefixedangles = false, bool useammo = true, bool checkspawn = true)
	{
		if (dydudebug_attackstuff) Console.Printf("zheight: %.4f, xyvel: %.4f, zvel: %.4f, angularspreadmin: %.4f, angularspreadmax: %.4f", zheight, xyvel, zvel, angularspreadmin, angularspreadmax);
		double anglemin = angularspreadmin;
		double anglemax = angularspreadmax;
		if (!usefixedangles)
		{
			anglemin = int(angularspreadmin); 
			anglemax = int(angularspreadmax);
		}
		else
		{
			anglemin = angularspreadmin; 
			anglemax = angularspreadmax;
		}
		if (dydudebug_attackstuff) Console.Printf("anglemin: %.4f, anglemax: %.4f", anglemin, anglemax);

		if (missile == NULL)
		{
			return false, null;
		}
		if (stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			let player = self.player;
			if (player == null) return false, null;
			let weapon = player.ReadyWeapon;
			// Used from a weapon, so use some ammo

			if (weapon == NULL || (useammo && !weapon.DepleteAmmo(weapon.bAltFire)))
			{
				return true, null;
			}
		}

		let bo = Spawn(missile, pos + (0, 0, (-Floorclip + GetBobOffset() + zheight + zheightoffset + (player? player.crouchoffset : 0.))), ALLOW_REPLACE);
		if (bo)
		{
			if (dydudebug_attackfuncinfo) Console.Printf("bo [spawned]");
			self.PlaySpawnSound(bo);
			if (xyvel != 0)
				bo.Speed = xyvel;
			if (usefixedangles) bo.Angle = Angle + (frandom[grenade](anglemin, anglemax) * (360./256.));
										 else bo.Angle = Angle + (random[grenade](anglemin, anglemax) * (360./256.));

			let pitch = -self.Pitch;
			let angle = bo.Angle;

			// There are two vectors we are concerned about here: xy and z. We rotate
			// them separately according to the shooter's pitch and then sum them to
			// get the final velocity vector to shoot with.

			double xy_xyscale = bo.Speed * cos(pitch);
			double xy_velz = bo.Speed * sin(pitch);
			double xy_velx = xy_xyscale * cos(angle);
			double xy_vely = xy_xyscale * sin(angle);

			pitch = self.Pitch;
			double z_xyscale = zvel * sin(pitch);
			double z_velz = zvel * cos(pitch);
			double z_velx = z_xyscale * cos(angle);
			double z_vely = z_xyscale * sin(angle);

			bo.Vel.X = xy_velx + z_velx + Vel.X / 2;
			bo.Vel.Y = xy_vely + z_vely + Vel.Y / 2;
			bo.Vel.Z = xy_velz + z_velz;

			bo.target = self;
			if (checkspawn) 
			{
				if (dydudebug_attackfuncinfo) Console.Printf("bo: checkspawn: %d", checkspawn);
				if (!bo.CheckMissileSpawn(radius))
				{
					if (dydudebug_attackfuncinfo) Console.Printf("bo: null");
					bo = null;
				}
			}
			return true, bo;
		} 
		else
		{
			return false, null;
		}
	}
}