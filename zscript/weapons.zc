// Base Custom Weapon Class
class DDWeapon : Weapon
{
	mixin DmgCalc;
	// Misc
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	int kickspeed;
	int punchspeed;
	
	default
	{
		+WEAPON.NOAUTOAIM
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}

	action void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		if (dydu_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int PerkFactor;
				bool debugrecoil = false;
				int PlayerLevel = CountInv("PlayerLevel");
				int BerserkAdd;

				// Base "Recoil"
				double baserecoil = -0.125;
				baserecoil = frandom(-0.125,-0.075);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * (random(3,9) + BerserkAdd);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}
	
	action void A_KickDecelerate(int minval = 0, int maxval = 2, int chance = 192)
	{
		bool debug = false;
		int prev = invoker.kickspeed;
		if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) chance = ceil(chance * frandom(0.25,0.75));
		if (debug) Console.Printf("chance: %d", chance);
		if (random(1,256) <= chance)
		{
			invoker.kickspeed -= random(minval,maxval);
			if (invoker.kickspeed < 0) invoker.kickspeed = 0;
			if (debug) Console.Printf("%d [%d]", invoker.kickspeed, prev);
		}
	}

	action void A_KickTicCheck()
	{
		if (invoker.kickspeed >= 8 && invoker.kickspeed <= 17)
		{
			if (random(1,8) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 16 && invoker.kickspeed <= 31)
		{
			if (random(1,6) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 32 && invoker.kickspeed <= 47)
		{
			if (random(1,4) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 48 && invoker.kickspeed <= 64)
		{
			if (random(1,2) == 1) { A_SetTics(0); }
		}
	}
	
	action void A_KickTicCheck2(int minrange = 0, int maxrange = 8)
	{
		if (random(1,64) <= (random(minrange,maxrange) + invoker.kickspeed)) { A_SetTics(0); }
	}
	
	action void A_KickAccelerate(int minval = 1, int maxval = 1, int limit = 48, int chance = 256)
	{
		bool debug = false;
		int prev = invoker.kickspeed;

		if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) chance = floor(chance * frandom(1.125,1.375));
		if (debug) Console.Printf("chance: %d", chance);
		int chance2;
		if (chance > 256) chance2 = (chance % 256);
		if (random(1,256) <= chance) invoker.kickspeed += random(minval,maxval);
		if (random(1,256) <= chance2) invoker.kickspeed += random(minval,maxval);

		if (random(1,256) <= chance) { if (invoker.kickspeed == 5) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 5) invoker.kickspeed++; }
		if (random(1,256) <= chance) { if (invoker.kickspeed == 8) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 8) invoker.kickspeed++; }
		if (random(1,256) <= chance) { if (invoker.kickspeed == 10) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 10) invoker.kickspeed++; }
		if (invoker.kickspeed >= 11) 
		{
			if (random(1,256) <= chance) invoker.kickspeed++;
			if (random(1,256) <= chance2) invoker.kickspeed++;
			if (random(1,256) <= chance) { if (invoker.kickspeed == 17) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 17) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 20) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 20) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 23) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 23) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 25) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 25) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed >= 26) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed >= 26) invoker.kickspeed++; }
		}
		if (invoker.kickspeed > limit) invoker.kickspeed = limit;
		if (debug) Console.Printf("%d [%d]", invoker.kickspeed, prev);
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (dydudebug_weaponstatdisplays) Console.Printf("Flags (Pre [Base]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dydudebug_weaponstatdisplays) Console.Printf("Flags (post [Base]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dydudebug_weaponstatdisplays) Console.Printf("Flags (final [Base]): %d", flags);
	}
	
	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
			}
			loop;
	}
}

class DinahWeapon : DDWeapon
{
	action void A_QMWKickInit()
	{
		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
		}
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (dydudebug_weaponstatdisplays) Console.Printf("Flags (Pre [QuickMelee]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dydudebug_weaponstatdisplays) Console.Printf("Flags (post [QuickMelee]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);														
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dydudebug_weaponstatdisplays) Console.Printf("Flags (final [QuickMelee]): %d", flags);
	}
	
	states
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
				let weapon = player.ReadyWeapon;
				if (player.mo.health > 0)
				{
					//if (dvdsdebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 2a");
					if (GetPlayerInput(INPUT_BUTTONS) & BT_USER1)
					{
						if (CountInv("IsUnconscious"))
						{
							A_PrintBold(String.Format("\cgYou're currently incapacitated, and this can't quick kick!"), frandom(0.685,0.8));
						}
						else
						{
							A_Overlay(-2,"Kick",true);
						}
					}
				}
				else
				{
					if (dydudebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 2b");
					A_ClearOverlays(-2,-2,true);
					A_ClearOverlays(8,8,true);
				}
			}
			loop;

		Kick:
			TNT1 A 0 A_QMWKickInit();
			goto KickStart;

		KickStart:
			TNT1 A 0 
			{
				A_KickAccelerate();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			TNT1 AAA 1
			{
				A_KickTicCheck2();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			DKIC A 1
			{
				A_KickTicCheck();
			}
			DKIC B 1
			{
				A_StartSound("fistswingmedium0",CHAN_BODY);
				A_KickTicCheck();
			}
			DKIC C 1
			{
				if (random(1,256) >= 240)
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/jump",CHAN_VOICE); 
				} 
				A_KickTicCheck();
			}
			DKIC DEFG 1
			{
				A_KickTicCheck();
			}
			DKIC H 1
			{
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
				}
				//Console.Printf("dmg: %d, recl: %.8f", dmg, recl);
				A_Recoil(recl);
				A_CustomPunch(dmg,1,CPF_NOTURN,"KickPuff",104,0,0,"","","");
			}
			DKIC GFEDCBA 1
			{
				A_KickTicCheck();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			TNT1 AAA 1
			{
				A_KickTicCheck2();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			goto KickEnd;
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_KickDecelerate();
			}
			stop;
	}
}

class HandToHand : DinahWeapon replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 80;
		+SPECTRAL
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Tag "Hand to Hand";
		Obituary "%o was give a good kick in the arse by %k.";
	}
	
	states
	{
		Ready:
			DHND A 1
			{
				A_KickDecelerate();
				A_WeaponReady(); // WRF_ALLOWUSER4
			}
			loop;
		Deselect:
			DHND A 1
			{
				A_KickDecelerate();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select:
			DHND A 1
			{
				A_KickDecelerate();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			TNT1 A 0
			{
				if (random(1,2) == 1)
				{
					return resolvestate("PunchStartL"); 
				}
				else
				{
					return resolvestate("PunchStartR"); 
				}
				return resolvestate(null);
			}
		PunchStartL:
			DHND B 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				if (random(1,64) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium",CHAN_BODY);
				}
				
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",64,0,0,"","","");
			}
			DPUN B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DHND B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				A_ReFire();
			}
			goto Ready;
		PunchStartR:
			DHND C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				if (random(1,64) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium",CHAN_BODY);
				}

				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",64,0,0,"","","");
			}
			DPUN D 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DHND B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				A_ReFire();
			}
			goto Ready;

		AltFire:
			goto UppercutStart;
		UppercutStart:
			DNUP A 1 { }
			DNUP B 1 { }
			DNUP C 1 { } // -1
			DNUP D 1 { }
			DNUP E 1 { }
			DNU2 A 1
			{
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
	
				if (random(1,256) <= 75)
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/jump",CHAN_VOICE); 
				} 
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy0",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium0",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_WEAPON); 
				}
			}
			DNU2 B 1 { }
			DNU2 C 1 { }
			DNU2 D 1 { }
			DNU2 E 1 { }
			DNU2 F 1
			{
				A_GetPunchSwingRecoil(1);
				A_CustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",58,0,0,"","","");
			}
			DNU2 G 1 { } 
			DNU2 F 1 { }
			DNU2 E 1 { }
			DNU2 D 1 { }
			DNU2 C 1 { }
			DNU2 B 1 { }
			DNU2 A 1 { }
			DNU2 A 0 { return resolvestate("UppercutEnd"); }
		UppercutEnd:
			TNT1 A 0
			{
			}
			DNUP E 1 { }
			DNUP D 1 { }
			DNUP C 1 { }
			DNUP B 1 { }
			DNUP A 1 { }
			TNT1 A 0
			{
				A_ReFire();
				return resolvestate("Ready");
			}
			goto Ready;
	}
}

class FistPuff : DDPuff
{
	default
	{
		Tag "Fist";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Fist";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56); 
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Spawn");
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Melee");
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56); 
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Crash");
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class UppercutPuff : FistPuff
{
	default
	{
		Tag "Uppercut";
		ProjectileKickback 0;
		+NODAMAGETHRUST
		RenderStyle "Translucent";
		Alpha 0.875;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 32;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 32;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 32;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuff : DDPuff
{
	default
	{
		Tag "Kick";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuffNoThrust : KickPuff
{
	default
	{
		ProjectileKickback 0;
		+NODAMAGETHRUST
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Spawn2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Melee2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Crash2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

// Cricket Bat
class CricketShieldPart : ShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA C 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class CricketShieldPartNoReflect : ShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class CricketSwingShieldPart : ShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA C 4 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class CricketSwingPartNoReflect : ShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

//***************
//* Cricket Bat *
//***************
class CricketBat : DinahWeapon replaces Pistol
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 2;
		Weapon.Kickback 50;
		Weapon.AmmoType2 "MalletAmmo";
		Weapon.AmmoGive2 5;
		Weapon.AmmoUse2 1;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "SPBTA0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "Cricket Bat";
		Tag "Cricket Bat";
		Obituary "%k scored a point with %o.";
	}
	
	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		double result = basedist;
		return result;
	}
	
	action void A_CricketBatGuard()
	{
		string vispart = "CricketShieldPartNoReflect";
		if (random(1,16) <= 5) vispart = "CricketShieldPart";

		double yoffset = frandompick(-0.3125,0,0.3125);

		double distx, disty, distz;
		double sa = sin(angle);
		double ca = cos(angle);
		//Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		//Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = frandom(30.0,34.0);

		distx = (m * frandom(0.925,0.95));
		disty = 0.0;
		distz = (height * 0.5) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = 10.0;
		distz = ((height * 0.5) - 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = -10.0;
		distz = ((height * 0.5) + 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		
		if (random(1,8) <= 7)
		{
			distx = (m * frandom(0.675,0.70));
			disty = 0.0;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = 10.0;
			distz = ((height * 0.5) - 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -10.0;
			distz = ((height * 0.5) + 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		if (random(1,12) <= randompick(3,3,4,4,4,4,4,5,5))
		{
			distx = (m * frandom(0.425,0.45));
			disty = 3.75;
			distz = ((height * 0.5) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -3.75;
			distz = ((height * 0.5) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = 3.75;
			distz = ((height * 0.5) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -3.75;
			distz = ((height * 0.5) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) MiscItem.CricketBatBuffTimer = randompick(1,1,1,1,1,1,1,1,1,2);
	}

	action void A_CricketBatSwing(int type = 0, double dist = 112.0)
	{
		string vispart = "CricketSwingPartNoReflect";
		if (random(1,16) <= 5) vispart = "CricketSwingShieldPart";

		double yoffset = frandompick(-0.1625,0,0.1625);

		double distx, disty, distz;
		double sa = sin(angle);
		double ca = cos(angle);
		//Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		//Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = dist;

		if (type == 1) m *= 1.2;

		distx = (m * frandom(0.95,1.05));
		disty = 0.0;
		distz = (height * 0.5) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		distx = (m * frandom(0.90,0.95));
		disty = -10.4;
		distz = (height * 0.5) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * 0.5) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = -5.2;
		distz = (height * 0.375) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * 0.375) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = -5.2;
		distz = (height * 0.625) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * 0.625) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

		if ((random (1,16) <= 14) || (type == 1 && (random (1,32) <= 31)))
		{
			m *= 0.667;

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = -10.4;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -5.2;
			distz = (height * 0.375) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.375) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -5.2;
			distz = (height * 0.625) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.625) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}


		if ((random (1,16) <= 12) || (type == 1 && (random (1,16) <= 15)))
		{
			m *= 0.334;

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = -10.4;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -5.2;
			distz = (height * 0.375) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.375) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -5.2;
			distz = (height * 0.625) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * 0.625) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) MiscItem.CricketBatSwingBuffTimer = randompick(3,3,3,3,3,3,4,4,4);
	}
	
	States
	{
		Pickup:
			SPBT A 0;
			SPBT A 0 A_StartSound("misc/w_pkup",CHAN_WEAPON);
			SPBT A 0;
			Fail;

		Spawn:
			SPBT A 6;
			loop;
		Ready:
			DBID A 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect:
			DBID A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			DBID A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			DBID A 1
			{
			}
			DBID B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID C 1
			{
			}
			DBID D 1 
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID E 1 
			{
			}
			DBID F 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID G 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_CustomPunch ((Random(6, 8)*10), FALSE, 0, "BatPuff", 112);
					A_CricketBatSwing(1);
				}
				else
				{
					A_CustomPunch (Random(6, 8), FALSE, 0, "BatPuff", 112);
					A_CricketBatSwing(0);
				}
			}
			DBID H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID IJCCBA 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(0,1,1,1,1,1)); }
			}
			goto Ready;
		AltFire:
			DBID A 1
			{
			}
			DBID B 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID C 1
			{
			}
			DBID D 1
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID E 1
			{
			}
			DBID F 1 
			{
				A_StartSound("croquet/ballfire",CHAN_WEAPON);
				if (random(1,8) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID G 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_FireProjectile("MalletShotBerserk",0,1,0,0);
					A_CricketBatSwing(1);
				}
				else
				{
					A_FireProjectile("MalletShot",0,1,0,0);
					A_CricketBatSwing(0);
				}
			}
			DBID H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID IJC 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID BA 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			goto Ready;
			
		User4:
		Guard:
			DBIG A 1
			{
				A_CricketBatGuard();
				//A_SetTics(random(1,2));
			}
			DBIG A 0 A_Refire("User4");
			goto Ready;
	}
}

class BatPuff : DDPuff
{
	default
	{
		Tag "Cricket Bat Smack";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,4) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,4) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,4) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class MalletShot : DDProjectile
{
	default
	{
		Tag "Cricket Ball";
		Radius 3;
		Height 3;
		Speed 70;
		Damage 12;
		DamageType "Cricket";
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			CBAL AB 3;
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				bNOGRAVITY = true;
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				bNOGRAVITY = true;
			}
			stop;
	}
}

class MalletShotBerserk : MalletShot
{
	default
	{
		Tag "-Cricket Ball-";
		Radius 3;
		Height 3;
		Speed 140;
		Damage 60;
		DamageType "Cricket";
		PROJECTILE;
		-NOGRAVITY
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
	}
	
	States
	{
		Spawn:
			CBAL AB 3;
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				A_Explode(64,64,0);
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				A_Explode(64,64,0);
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				A_Explode(64,64,0);
				bNOGRAVITY = true;
			}
			stop;
	}
}

class MalletAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 2; // 3
		Inventory.MaxAmount 60; // 45
		Ammo.BackpackAmount 2; // 3
		Ammo.BackpackMaxAmount 90;
		Inventory.Icon "CBAMI0";
		Inventory.PickupMessage "A cricket ball";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			CBAM A -1;
			Loop;
	}
}

class MalletAmmoBig : MalletAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 6; // 3
		Inventory.MaxAmount 60; // 45
		Ammo.BackpackAmount 6; // 3
		Ammo.BackpackMaxAmount 90;
		Inventory.Icon "CBAMI0";
		Inventory.PickupMessage "A set of cricket balls";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			CBAM B -1;
			Loop;
	}
}

//**************
//* Blunderaxe *
//**************
class Blunderaxe : DinahWeapon replaces Shotgun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 200;
		Weapon.SlotNumber 3;
		Weapon.Kickback 40;
		Weapon.AmmoType2 "BlunderAmmo";
		Weapon.AmmoGive2 6;
		Weapon.AmmoUse2 1;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "BLAXP0";
		Inventory.PickupMessage "Blunderaxe";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "Blunderaxe";
		Obituary "%k used %o for target practice.";
	}
	
	States
	{
		Spawn:
			BLAX P 0 NoDelay;
			BLAX P 0 
			{
				if (bDROPPED) { SetStateLabel("Dropp"); }
			}
			BLAX P 0
			{
				if (random(1,8) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			goto Idle;
		Dropp:
			BLAX P 0
			{
				if (random(1,64) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			goto Idle;

		Idle:
			BLAX P 6;
			loop;
		Ready:
			BLAX A 1 A_WeaponReady;
			loop;
		Deselect:
			BLAX A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			BLAX A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			BLAX D 1;
			BLAX F 1;
			TNT1 A 1;
			BLAX G 2 
			{
				A_StartSound("Blunderswing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			BLAX HI 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			BLAX J 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_CustomPunch ((Random(16, 20)*10), FALSE, 0, "BlunderPuff", 96);
				}
				else
				{
					A_CustomPunch (Random(16, 20), FALSE, 0, "BlunderPuff", 96);
				}
			}
			BLAX KLMN 3 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			BLAX O 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(1,2,2,3,3,3)); }
			}
			goto Ready;
		AltFire:
			BLAX A 0 
			{
				A_StartSound("blunderfire",CHAN_WEAPON);
				if (random(1,32) <= 31) { A_AlertMonsters(); }
			}
			BLAX B 3 Bright
			{
				if (random(1,16) <= 1)
				{
					A_FireProjectile("BlunderShot",random(-1,1),0,0,0,0,random(1,1));
					A_FireProjectile("BlunderShot",random(-9,9),0,0,0,0,random(-1,1));
				}
				A_FireProjectile("BlunderShot",random(-3,3),0,0,0,0,random(1,1));
				A_FireProjectile("BlunderShot",random(-5,5),0,0,0,0,random(-1,1));
				A_FireProjectile("BlunderShot",random(-7,7),1,0,0,0,random(-1,1));
			}
			BLAX C 3 Bright
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_Recoil(frandom(0.96,1.44));
					A_SetTics(random(1,2));
				} 
				else 
				{
					A_Recoil(frandom(4.8,7.2)); 
				}
			}
			BLAX DE 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(0,1,1,2)); }
			}
			BLAX FF 7
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(3,4)); }
			}
			BLAX D 8
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(3,5)); }
			}
			BLAX A 9 
			{
				A_Refire();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(4,5)); }
			}
			goto Ready;
	}
}

class BlunderPuff : DDPuff
{
	default
	{
		Tag "BlunderAxe Chop";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Chop";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,6) == 1) { bFORCEPAIN = true; }
			}
			CHOP ABC 4 Bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,6) == 1) { bFORCEPAIN = true; }
			}
			CHOP ABC 4 Bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,6) == 1) { bFORCEPAIN = true; }
			}
			CHOP ABC 4 Bright;
			Stop;
	}
}  

class BlunderShot : DDProjectile
{
	default
	{
		Tag "BlunderShot";
		Radius 3;
		Height 3;
		Speed 70;
		Damage 8;
		Scale 0.5;
		DamageType "Lead";
		PROJECTILE;
		RENDERSTYLE "Normal";
		SeeSound "blundershot";
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
	}
	States
	{
		Spawn:
			BSHT AB 3;
			loop;
		Death:
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		Crash:
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		XDeath:
			TNT1 A 1 
			{
				bNOGRAVITY = true;
			}
			stop;
	}
}

class BadBlundershot : Blundershot
{
	default
	{
		Speed 35;
		Damage 5;
		+FORCERADIUSDMG
	}
}

class BlunderAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 48; // 36
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 72;
		Inventory.Icon "BAMOI0";
		Inventory.PickupMessage "A fistful of blundershot";
		+FLOATBOB
	}
	States
	{
		Spawn:
			BAMO ABCD 5;
			Loop;
	}
}

class BlunderAmmoBig : BlunderAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 48; // 36
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 72;
		Inventory.Icon "BAMOI0";
		Inventory.PickupMessage "A cluster of blundershot";
		+FLOATBOB
	}
	States
	{
		Spawn:
			BAMO EFGH 5;
			Loop;
	}
}

//*************
//* Scrambler *
//*************
class Scrambler : DinahWeapon replaces SuperShotgun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 300;
		Weapon.SlotNumber 3;
		Weapon.Kickback 75;
		Weapon.AmmoType2 "EggAmmo";
		Weapon.AmmoGive2 3;
		Weapon.AmmoUse2 1;
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "FPANP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "Scrambler";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "Scrambler";
		Obituary "%k scored a point with %o.";
	}
	
	States
	{
		Spawn:
			FPAN P 6;
			loop;
		Ready:
			FPAN A 1 A_WeaponReady;
			loop;
		Deselect:
			FPAN A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			FPAN A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			FPAN A 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN B 2 
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN C 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN D 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_CustomPunch ((Random(10, 12)*10), FALSE, 0, "PanPuff", 72);
				}
				else
				{
					A_CustomPunch (Random(10, 12), FALSE, 0, "PanPuff", 72);
				}
			}
			FPAN EFG 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 5
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(2,3)); }
			}
			FPAN B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(0,1)); }
			}
			goto Ready;
		AltFire:
			FPAN A 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN B 2 
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN C 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN D 2 
			{
				A_StartSound("panclang",CHAN_WEAPON);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_FireProjectile("EggShotBerserk",0,1,0,0);
				}
				else
				{
					A_FireProjectile("EggShot",0,1,0,0);
				}
			}
			FPAN EFG 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 5
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(2,3)); }
			}
			FPAN B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(0,1)); }
			}
			goto Ready;
	}
}

class PanPuff : DDPuff
{
	default
	{
		Tag "Scrambler Whack";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "PanClang";
		AttackSound "PanClang";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,5) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,5) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,5) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class EggShot : DDProjectile
{
	default
	{
		Tag "Large Fractal Egg";
		Radius 3;
		Height 3;
		Speed 70;
		Damage 12;
		DamageType "Breakfast";
		Scale 2;
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 96;
	}
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(24,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
		XDeath:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(24,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
		Crash:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(24,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenade",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
	}
}

class EggShotBerserk : EggShot
{
	default
	{
		Tag "-Large Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 140;
		Damage 60;
		DamageType "Breakfast";
		Scale 2;
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 480;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(120,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
		XDeath:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(120,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
		Crash:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
				A_AlertMonsters();
			}
			EGBL A 4 Bright A_Explode(120,96);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,6),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggGrenadeBerserk",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
	}
}

class EggGrenade : DDProjectile
{
	default
	{
		Tag "Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		Damage 9;
		DamageType "Breakfast";
		Scale 1.5;
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 64;
		BounceCount 1;
	}
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright A_Explode(64,64);
			EGBL B 1 Bright A_Throwgrenade("EggMini",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggMini",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
	}
}

class EggGrenadeBerserk : EggGrenade
{
	default
	{
		Tag "-Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 15;
		Damage 23;
		DamageType "Breakfast";
		Scale 1.5;
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 160;
		BounceCount 1;
	}
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright A_Explode(160,64);
			EGBL B 1 Bright A_Throwgrenade("EggMiniBerserk",2,random(1,8),random(6,12),0);
			EGBL B 1 Bright A_Throwgrenade("EggMiniBerserk",2,random(1,10),random(6,12),0);
			EGBL C 4 Bright;
			Stop;
	}
}

class EggMini : DDProjectile
{
	default
	{
		Tag "Small Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		Damage 6;
		DamageType "Breakfast";
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 32;
		BounceCount 2;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright A_Explode(32,32);
			EGBL BC 5 Bright;
			Stop;
	}
}

class EggMiniBerserk : EggMini
{
	default
	{
		Tag "-Small Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 13;
		Damage 9;
		DamageType "Breakfast";
		PROJECTILE;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 48;
		BounceCount 2;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3;
			loop;
		Death:
			TNT1 A 0 
			{
				bNOGRAVITY = true;
			}
			EGBL A 5 Bright A_Explode(48,32);
			EGBL BC 5 Bright;
			Stop;
	}
}

class EggAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 2; // 4
		Inventory.MaxAmount 28; // 20
		Ammo.BackpackAmount 2; // 4
		Ammo.BackpackMaxAmount 42;
		Scale 1;
		Inventory.Icon "EGAMI0";
		Inventory.PickupMessage "A fractal chicken egg";
		+FLOATBOB
	}
	States
	{
		Spawn:
			EGGC ABCB 6;
			Loop;
	}
}

class EggAmmoBig : EggAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 6; // 4
		Inventory.MaxAmount 28; // 20
		Ammo.BackpackAmount 6; // 4
		Ammo.BackpackMaxAmount 42;
		Scale 1;
		Inventory.Icon "EGAMI0";
		Inventory.PickupMessage "A set of fractal chicken eggs";
		+FLOATBOB
	}
	States
	{
		Spawn:
			EGGC DEFE 6;
			Loop;
	}
}

//*************
//* APPLEJACK *
//*************
class AppleJack : DinahWeapon replaces Chaingun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 4;
		Weapon.Kickback 75;
		Weapon.AmmoType2 "JackAmmo";
		Weapon.AmmoGive2 12;
		Weapon.AmmoUse2 1;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "AJAKP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "Apple Jack";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "Apple Jack";
		Obituary "%k kept the doctor away from %o.";
	}
	
	States
	{
		Spawn:
			AJAK P -1;
			stop;
		Ready:
			AJAK A 1 A_WeaponReady();
			loop;
		Deselect:
			AJAK A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			AJAK A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			AJAK B 2
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			AJAK C 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			AJAK D 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_CustomPunch ((Random(6, 8)*10), FALSE, 0, "ApplePuff", 96);
				}
				else
				{
					A_CustomPunch (Random(6, 8), FALSE, 0, "ApplePuff", 96);
				}
			}
			AJAK E 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			AJAK F 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_CustomPunch ((Random(6, 8)*10), FALSE, 0, "ApplePuff", 96);
				}
				else
				{
					A_CustomPunch (Random(6, 8), FALSE, 0, "ApplePuff", 96);
				}
			}
			AJAK G 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			AJAK BA 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			goto Ready;
		AltFire:
			AJAF CDE 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			AJAF F 2 
			{
				if (random(1,32) <= 31) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{ 
					A_SetTics(1); 
					A_FireProjectile("JackShotBerserk",0,1,0,0);
				}
				else
				{
					A_FireProjectile("JackShot",0,1,0,0);
				}
			}
			AJAF GHI 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			AJAK BA 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			goto Ready;
	}
}

class ApplePuff : BatPuff
{
	default
	{
		Tag "AppleJack Bash";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,7) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,7) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,7) == 1) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class JackShot : DDProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 50;
		Damage 20;
		DamageType "Bonk";
		PROJECTILE;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
	}
	
	States
	{
		Spawn:
			ABAL AB 2;
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class JackShotBerserk : JackShot
{
	default
	{
		Tag "-Aggro-Apple-";
		Speed 75;
		Damage 100;
	}
	
	States
	{
		Spawn:
			ABAL AB 2;
			Loop;
		Death:
			BASH A 0
			{
				A_Explode(64,64,0);
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class Badjackshot : Jackshot
{
	default
	{
		Speed 20;
		Damage 3;
	}
	
	States
	{
		Spawn:
			ABAL AB 2;
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class JackAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 64; // 48
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 96;
		Inventory.Icon "AJAMI0";
		Inventory.PickupMessage "An aggro-apple!";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			AJAM A -1;
			Loop;
	}
}

class JackAmmoBig : JackAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 64; // 48
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 96;
		Inventory.Icon "AJAMI0";
		Inventory.PickupMessage "An set of aggro-apples!";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			AJAM B -1;
			Loop;
	}
}

//***************
//* WIZARD PIKE *
//***************
class WizardPike : DinahWeapon replaces RocketLauncher
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 400;
		Weapon.SlotNumber 5;
		Weapon.Kickback 25;
		Weapon.AmmoType2 "PikeAmmo";
		Weapon.AmmoGive2 2;
		Weapon.AmmoUse2 1;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "SCPPA0";
		Inventory.PickupMessage "Pike";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "Pike";
		Obituary "%k fed %o to a hungry pike.";
	}
	
	States
	{
		Spawn:
			SCPP ABCDEFGH 6 Bright;
			loop;
		Ready:
			SCEP A 1 A_WeaponReady();
			loop;
		Deselect:
			SCEP A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			SCEP A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			SCEP E 1 bright A_StartSound("Malletswing",CHAN_WEAPON);
			SCEP F 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			SCEP G 1;
			SCEP H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			SCEP I 1;
			SCEP J 5
			{
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(random(2,3));
					A_CustomPunch ((Random(6, 8)*10), FALSE, 0, "PikePuff", 96);
				}
				else
				{
					A_CustomPunch (Random(6, 8), FALSE, 0, "PikePuff", 96);
				}
			}
			SCEP I 1;
			SCEP H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			SCEP G 1;
			SCEP F 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			goto Ready;
		AltFire:
			SCEP A 2 bright 
			{
				A_StartSound("Handmother/Zap",CHAN_WEAPON);
				if (random(1,32) <= 31) { A_AlertMonsters(); }
			}
			SCEP B 1 bright A_FireProjectile("ZapShot",0,0,0,0);
			SCEP A 1 bright;
			SCEP B 1
			{
				A_FireProjectile("miniZapShot",0,0,48,0);
				A_FireProjectile("miniZapShot",0,0,-48,0);
			}
			SCEP C 1 bright;
			SCEP B 1 bright 
			{
				A_FireProjectile("ZapShot",0,0,0,0);
			}
			SCEP C 1 bright;
			SCEP C 0
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Recoil(frandom(0.64,0.96)); } else { A_Recoil(frandom(3.2,4.8)); }
			}
			SCEP D 6 bright
			{
				A_FireProjectile("miniZapShot",0,0,48,0);
				A_FireProjectile("miniZapShot",0,0,-48,0);
				A_FireProjectile("miniZapShot",0,0,0,40);
				A_FireProjectile("ZapShot",0,1,0,0);
			}
			SCEP CBA 2 bright;
			goto Ready;
	}
}

class PikePuff : BatPuff
{
	default
	{
		Tag "Pike Poke";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,4) <= 3) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,4) <= 3) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,4) <= 3) { bFORCEPAIN = true; }
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}  

class PikeTracer : DDPuff
{
	default
	{
		Tag "Pike Blast";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+NOGRAVITY
		RenderStyle "Translucent";
		Alpha 0.8;
		DamageType "zap";
	}
	
	States
	{
		Spawn:
			ZBUX A 4 Bright A_Explode;
			ZBUX BCD 4 Bright;
			Stop;
	}
}  

class ZapShot : DDFastProjectile
{
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		Damage 12;
		Scale 1;
		DamageType "Zap";
		PROJECTILE;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 4 Bright A_Explode;
			ZBUX BCD 4 Bright;
			stop;
	}
}

class MiniZapShot : DDFastProjectile
{
	default
	{
		Tag "Mini Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		Damage 8;
		Scale 0.5;
		DamageType "Zap";
		PROJECTILE;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 3 Bright;
			ZBUX BCD 3 Bright;
			stop;
	}
}

class BadZapshot : Zapshot
{
	default
	{
		Speed 20;
		Scale 0.75;
		Damage 5;
		+FORCERADIUSDMG
	}
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 4 Bright ;
			ZBUX BCD 4 Bright;
			stop;
	}
}

class PikeAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 1; // 2
		Inventory.MaxAmount 12; // 10
		Ammo.BackpackAmount 1; // 2
		Ammo.BackpackMaxAmount 18;
		Scale 1;
		Inventory.Icon "SCPAI0";
		Inventory.PickupMessage "A pint of devil's food";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			SCPA ABC 6 Bright;
			Loop;
	}
}

class PikeAmmoBig : PikeAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 2
		Inventory.MaxAmount 12; // 10
		Ammo.BackpackAmount 3; // 2
		Ammo.BackpackMaxAmount 18;
		Scale 1;
		Inventory.Icon "SCPAI0";
		Inventory.PickupMessage "Many pints of devil's food";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			SCPA DEF 6 Bright;
			Loop;
	}
}

//************
//* SUPERVAC *
//************
class SuperVac : DinahWeapon replaces PlasmaRifle
{
	default
	{
		+SPECTRAL
		//$Category RPWeapons
		Weapon.SelectionOrder 900;
		Weapon.SlotNumber 6;
		Weapon.Kickback 0;
		Weapon.AmmoType2 "VacAmmo";
		Weapon.AmmoGive2 0;
		Weapon.AmmoUse2 8;
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		Inventory.Icon "VACMP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "SuperVac";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "SuperVac";
		Obituary "%o sucks.";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("SuperVac",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("VacAmmo",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			VACM P 1;
			Loop;
		Ready:
			VACM A 1 A_WeaponReady();
			loop;
		Deselect:
			VACM A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			VACM A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Full:
			VACM A 0 A_StartSound("VacEmpty",CHAN_WEAPON);
			VACM AB 2;
			Goto Ready;
		Fire:
			VACM A 0
			{
				if (CountInv("BackPack",AAPTR_PLAYER1) || CountInv("BackPackNew",AAPTR_PLAYER1))
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 24) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				else
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 16) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			VACM B 0 A_StartSound("VacSuck");
			VACM BA 2
			{
				if (random(1,16) == 1)
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
					{
						A_CustomPunch((Random(3,6)*1.25), FALSE, 0, "VacPuff", 80, frandompick(0.01,0.05,0.1));
					}
					else
					{
						A_CustomPunch(Random(3,6), FALSE, 0, "VacPuff", 80, frandompick(0.01,0.05,0.1));
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
					{
						A_CustomPunch((Random(3,6)*1.25), FALSE, 0, "VacPuff", 80);
					}
					else
					{
						A_CustomPunch(Random(3,6), FALSE, 0, "VacPuff", 80);
					}
				}
			}
			goto Ready;
		AltFire:
			VACM B 4 A_StartSound("VacDed",CHAN_WEAPON);
			VACM C 4
			{
				A_FireProjectile("VacShot",15,0,0,0);
				A_FireProjectile("VacShot",0,12,0,0);
				A_FireProjectile("VacShot",-15,0,0,0);
			}
			VACM B 3;
			VACM A 3;
			goto Ready;
	}
}

class VacPuff : DDPuff
{
	default
	{
		Tag "SuperVac Attack";
		+NOBLOCKMAP
		+NOGRAVITY
		+NOEXTREMEDEATH
		+PUFFONACTORS
		+PUFFGETSOWNER
		+BLOODLESSIMPACT
		RenderStyle "Translucent";
		Alpha 0.6;
		VSpeed 1;
		DamageType "Suck";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,12) == 1) { bFORCEPAIN = true; }
			}
			BASH DE 3 bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				if (random(1,12) == 1) { bFORCEPAIN = true; }
			}
			BASH DE 3 bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				if (random(1,12) == 1) { bFORCEPAIN = true; }
			}
			BASH DE 3 bright;
			Stop;
	}
} 

class VacShot : DDProjectile
{
	default
	{
		Tag "Dust Devil";
		Radius 3;
		Height 8;
		Speed 20;
		Damage 20;
		Scale 1;
		PROJECTILE;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Normal";
		seesound "Weapons/RocketFire";
		deathsound "croquet/ballhit";
	
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 5;
		+RIPPER
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright A_Explode(41,64,0,0,16);
			loop;
		Death:
			TNT1 A 4 A_Explode(82,128,0,0,32);
			stop;
	}
}

class VacShot2 : DDProjectile
{
	default
	{
		Tag "Dust Devil";
		Radius 3;
		Height 8;
		Speed 20;
		Damage 20;
		Scale 1;
		PROJECTILE;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Normal";
		seesound "Weapons/RocketFire";
		deathsound "croquet/ballhit";
		+RIPPER
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright A_Explode(41,64,0,0,16);
			loop;
		Death:
			TNT1 A 4 A_Explode(82,128,0,0,32);
			stop;
	}
}

class VacAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 12
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 24;
		Inventory.Icon "VACMJ0";
		Inventory.PickupMessage "This bag is full. Ammo for SuperVac +1!";
	}
	
	States
	{
		Spawn:
			VACM Q -1;
			Loop;
	}
}

class VacAmmoBig : VacAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3;
		Inventory.MaxAmount 16; // 12
		Ammo.BackpackAmount 3;
		Ammo.BackpackMaxAmount 24;
		Inventory.Icon "VACMJ0";
		Inventory.PickupMessage "These bags are full. Ammo for SuperVac +3!";
	}
	
	States
	{
		Spawn:
			VACM R -1;
			Loop;
	}
}

//**************
//* Grimophone *
//**************
class Grimophone : DinahWeapon replaces BFG9000
{
	int musictype;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 800;
		Weapon.Ammotype1 "musicammo";
		Weapon.Ammouse1 1;
		Weapon.Ammotype2 "musicammo";
		Weapon.Ammouse2 1;
		Weapon.Ammogive1 20;
		Weapon.Ammogive2 0;
		Weapon.SlotNumber 7;
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Inventory.Pickupmessage "Grimophone";
		Tag "Grimophone";
		//SpawnID 31981
		+FLOATBOB
	}
	States
	{
		Spawn:
			RPLY P 1;
			loop;
		Ready:
			RPLY A 1
			{
				A_StopSound(65);
				A_WeaponReady();
			}
			loop;
		Select:
			RPLY A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Raise(12); }
				A_Raise(12);
			}
			Loop;
		Deselect:
			RPLY A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Lower(12); }
				A_Lower(12);
			}
			TNT1 A 0 A_StopSound(65);
			Loop;
		Fire:
			RPLY A 0 
			{
				invoker.musictype = random(1,16);
				if (invoker.musictype >= 1 && invoker.musictype <= 14) { A_StartSound("grimophone/jam",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 15) { A_StartSound("sa/rickroll",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 16) { A_StartSound("sa/vuvuzela",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
			}
		Fire2:
			NULL A 0 
			{
				A_GunFlash();
			}
			RPLY B 3 Bright A_FireProjectile("recordshot",0,1);
			RPLY C 3;
			RPLY B 3 Bright A_FireProjectile("recordshot",0,0);
			RPLY C 3;
			RPLY C 0 A_Refire("Fire2");
			RPLY A 0 A_StopSound(65);
			Goto Ready;
	}
}

class BadMusic : DDProjectile
{
	default
	{
		Radius 16;
		Height 8;
		Speed 50;
		DamageFunction (random(1,2));
		Projectile;
		-SOLID
		+BLOODLESSIMPACT
		+DONTREFLECT
		+NOBLOCKMAP
		+RIPPER
		+RANDOMIZE
		+NOEXTREMEDEATH
		+STEPMISSILE
		-ACTIVATEIMPACT
		-ACTIVATEMCROSS
		-ACTIVATEPCROSS
		-CANPUSHWALLS
		-CANBLAST
		DamageType "Musak";
		RenderStyle "translucent";
    Alpha 0.5;
    Scale 0.06;
		Obituary "$OB_MPPLASMARIFLE";
	}
	States
	{
		Spawn:
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			Goto Death; // Loop
		Death:
			TNT1 A 1;
			Stop;
	}
}

class RecordShot : DDProjectile
{
	default
	{
		Tag "RazorRecord";
		Radius 6;
		Height 6;
		Speed 30;
		Damage 12;
		DamageType "Beats";
		PROJECTILE;
		+SEEKERMISSILE
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";

		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 2;
		SeeSound "axe/throw";
		DeathSound "axe/hit";
	}
	
	States
	{
		Spawn:
			RBUL A 0 NoDelay;
			RBUL AB 1 
			{
				A_SeekerMissile(18,18,SMF_LOOK|SMF_PRECISE);
				A_ScaleVelocity(1.001);
			}
			Loop;
		Death:
			BASH ABC 3 Bright;
			BASH DE 2 bright;
			Stop;
	}
}

class MusicAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 66; // 50
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 99;
		Inventory.Icon "RAMOI0";
		Inventory.PickupMessage "A musical record";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			RAMO A -1;
			Loop;
	}
}

class MusicAmmoBig : MusicAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 66; // 50
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 99;
		Inventory.Icon "RAMOI0";
		Inventory.PickupMessage "A few musical records";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			RAMO B -1;
			Loop;
	}
}