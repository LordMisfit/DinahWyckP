// Base Custom Weapon Class
class DDWeapon : Weapon
{
	mixin DmgCalc;
	mixin IPCostCheck;
	mixin InvWeaponShare;
	mixin HUDRecovery;
	double IPCostTemp;

	// Misc
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	int kickspeed;
	int punchspeed;
	int buttons;
	int PlayerLevel;
	int IPAttackCheck;
	
	bool PickupUseVoice;
	property PickUpVoice: PickupUseVoice;

	default
	{
		+WEAPON.NOAUTOAIM
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action void A_CustomPunch(int damage, bool norandom = false, int flags = CPF_USEAMMO, class<Actor> pufftype = "BulletPuff", double range = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus", sound MeleeSound = 0, sound MissSound = "", string giveammotype = "", int giveammoamt = 0, bool IPCostOnHit = false)
	{
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;

		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		if (!player) return;

		let weapon = player.ReadyWeapon;

		double angle;
		double pitch;
		FTranslatedLineTarget t;
		int actualdamage;

		if (!norandom)
			damage *= random[cwpunch](1, 8);

		angle = self.Angle + random2[cwpunch]() * (5.625 / 256);
		if (range == 0) range = DEFMELEERANGE;
		pitch = AimLineAttack (angle, range, t, 0., ALF_CHECK3D);

		// only use ammo when actually hitting something!
		if ((flags & CPF_USEAMMO) && t.linetarget && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}
		
		// >:)
		if (t.linetarget)
		{
			nm = "CCards_Actor_Ghost";
			if (t.linetarget.CountInv(nm) && (pufftype == 'VacPuff' || pufftype == 'VacPuffIP')) 
			{
				//Console.Printf("Ohai thar CCards Ghost you can't escape me! >:3");
				damage += ((t.linetarget.SpawnHealth() + t.linetarget.Stamina) * 100);
			}
			
			if (pufftype == 'WhipPuff' || pufftype == 'WhipPuffIP')
			{
				if (Teacher_JorgClone(t.linetarget))
				{
					damage *= frandompick(4.8,5.4,5.4,5.4,6.0,6.0,6.0,6.0,6.0,6.0,6.6,6.6,6.6,7.2);
					if (random(1,2) <= 1) damage *= 1.5;
					if (random(1,4) <= 1) damage *= 1.5;
					if (random(1,8) <= 1) damage *= 1.5;
					if (random(1,16) <= 1) damage *= 1.5;
					if (random(1,32) <= 1) damage *= 1.5;
					if (random(1,64) <= 1) damage *= 1.5;
				}
			}
			if (pufftype == 'PikePuff' || pufftype == 'PikePuffIP')
			{
				if ((Teacher_VokterClone(t.linetarget) && !(t.linetarget.CountInv("VokterCloneShield") || t.linetarget.CountInv("VokterCloneShield2"))) || Teacher_QuisClone(t.linetarget))
				{
					damage *= frandompick(4.8,5.4,5.4,5.4,6.0,6.0,6.0,6.0,6.0,6.0,6.6,6.6,6.6,7.2);
				}
				if (Teacher_QuisClone(t.linetarget) || QuisFakeClone(t.linetarget))
				{
					damage *= frandompick(6.4,7.2,7.2,7.2,8.0,8.0,8.0,8.0,8.0,8.0,8.8,8.8,8.8,9.6);
				}
			}
		}

		if (pufftype == NULL)
			pufftype = 'BulletPuff';
		int puffFlags = LAF_ISMELEEATTACK | ((flags & CPF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0);

		Actor puff;
		[puff, actualdamage] = LineAttack (angle, range, pitch, damage, 'Melee', pufftype, puffFlags, t);
		if (puff)
		{
			let IPPuff = DDProjectile(puff);
			if (IPPuff && invoker.IPAttackCheck) 
			{
				IPPuff.IPAttack = true;
				if (dydudebug_ipdisplays) Console.Printf("IPPuff: %d", IPPuff.IPAttack);
			}
			if (player.mo.CountInv("DinahTrueIPState"))
			{
				bool puffisspectral = false;
				if (puff.bSPECTRAL) puffisspectral = true;
				if (puffisspectral) puff.bSPECTRAL = true;
			}
		}
		
		if (!t.linetarget)
		{
			if (MissSound) A_StartSound(MissSound, CHAN_WEAPON);
		}
		else // The attack hits and deals feasible damage
		{
			if (lifesteal > 0 && !(t.linetarget.bDontDrain))
			{
				if (flags & CPF_STEALARMOR)
				{
					if (armorbonustype == NULL)
					{
						armorbonustype = 'ArmorBonus';
					}
					if (armorbonustype != NULL)
					{
						let armorbonus = BasicArmorBonus(Spawn(armorbonustype));
						if (armorbonus)
						{
							armorbonus.SaveAmount *= int(actualdamage * lifesteal);
							if (lifestealmax > 0) armorbonus.MaxSaveAmount = lifestealmax;
							
							armorbonus.bDropped = true;
							armorbonus.ClearCounters();

							if (!armorbonus.CallTryPickup(self))
							{
								armorbonus.Destroy();
							}
						}
					}
				}
				else
				{
					int prevhealth = player.mo.health;
					int stealamt = (actualdamage * lifesteal);
					if (stealamt > lifestealmax) stealamt = lifestealmax;
					GiveBody(stealamt);
					int draindiff = player.mo.health - prevhealth;
					if (draindiff) 
					{
						player.mo.A_SetBlend("ff ee ee",0.1875,random(21,31));
						player.mo.A_StopSound(17);
						player.mo.A_StopSound(18);
						player.mo.A_StartSound("player/hpdrain",17,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(1.35,1.65));
						player.mo.A_StartSound("player/hpdrain",18,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(1.8,2.2));
						invoker.A_RecoverHUD(draindiff,0);
						
						if (exex_combatlog)
						{
							string comblog = "";
							comblog.AppendFormat("\c[red]*\c- ");
							comblog.AppendFormat("\c[brick]%d\c- HP \c[green]drained\c-", draindiff);
							if (t.linetarget) comblog.AppendFormat(" from \c[red]%s\c-", t.linetarget.GetTag());
							if (pufftype == 'VacPuff' || pufftype == 'VacPuffIP') comblog.AppendFormat(" by the SuperVac");
							comblog.AppendFormat("!");
							if (dydudebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
							
							Console.Printf(comblog);
						}
					}
				}
			}
			
			// New Section - Makes Melee IP attacks only consume IP cost if they successfully hit a damageable target
			if (IPCostOnHit && invoker.IPCostTemp > 0)
			{
				If (MiscItem.ItemPoints >= invoker.IPCostTemp && globalvars.ItemPoints >= invoker.IPCostTemp)
				{
					MiscItem.ItemPoints -= invoker.IPCostTemp;
					globalvars.ItemPoints -= invoker.IPCostTemp;
				}
				invoker.IPCostTemp = 0;
			}
			
			// New Section - For IP attacks like the Pike's Melee which steal two units of ammo to your collection on a hit
			if (giveammotype != "" && giveammoamt > 0)
			{
				player.mo.A_StopSound(15);
				player.mo.A_StartSound("misc/ammodrain",15,CHANF_DEFAULT,frandom(1.0,1.5),ATTN_NORM,frandom(0.8,1.2));
				player.mo.A_StopSound(16);
				player.mo.A_StartSound("misc/ammodrain",16,CHANF_DEFAULT,frandom(1.0,1.5),ATTN_NORM,frandom(0.8,1.2));
				if ((Teacher_VokterClone(t.linetarget) && !(t.linetarget.CountInv("VokterCloneShield") || t.linetarget.CountInv("VokterCloneShield2"))) || Teacher_QuisClone(t.linetarget))
				{
					player.mo.A_StopSound(17);
					player.mo.A_StartSound("misc/ammodrain1",17,CHANF_DEFAULT,frandom(1.0,1.5),ATTN_NORM,frandom(0.6,0.8));
					player.mo.A_StopSound(18);
					player.mo.A_StartSound("misc/ammodrain2",18,CHANF_DEFAULT,frandom(1.0,1.5),ATTN_NORM,frandom(1.0,1.4));
					player.mo.A_SetBlend("44 22 ff",0.5,random(56,66));
					player.mo.A_GiveInventory(giveammotype,(giveammoamt*4));
				}
				else
				{
					player.mo.A_SetBlend("44 22 ff",0.25,random(29,39));
					player.mo.A_GiveInventory(giveammotype,giveammoamt);
				}
			}
			
			if (weapon != NULL)
			{
				if (MeleeSound) A_StartSound(MeleeSound, CHAN_WEAPON);
				else A_StartSound(weapon.AttackSound, CHAN_WEAPON);
			}

			if (!(flags & CPF_NOTURN))
			{
				// turn to face target
				self.Angle = t.angleFromSource;
			}

			if (flags & CPF_PULLIN) self.bJustAttacked = true;
			if (flags & CPF_DAGGER) t.linetarget.DaggerAlert (self);
		}
	}
	
	action int A_CheckMeleeDestroyProj(int type = 0)
	{
		int debugmelee = dydudebug_meleeinformation;
		int MeleeDestroyProjectiles = 0;
		int MaxCheck = 16;
		double checkvalfactor = frandom(0.075,0.125);
		if (type == 0) // Punch
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
		}
		if (type == 1) // Uppercut
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= 1.75;
		}
		if (type == 2) // Kick
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= frandompick(1.75,2,2.25);
			if (CountInv("DinahTrueIPState")) checkvalfactor *= 10;
		}
		if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) checkvalfactor *= frandompick(1.75,1.875,1.875,2.0,2.0,2.0,2.125,2.125,2.125,2.125,2.125,2.25,2.25,2.25,2.375,2.375,2.5);
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) 
		{
			if (CountInv("DinahTrueIPState")) MaxCheck = ceil(16 - (MiscItem.PlayerLevel * checkvalfactor));
																	 else MaxCheck = ceil(randompick(1,1,1,2,2) - (MiscItem.PlayerLevel * checkvalfactor));
		}

		MaxCheck = clamp(MaxCheck, 1, MaxCheck);
		int randomroll = random(1,MaxCheck);
		if (randomroll <= 1) MeleeDestroyProjectiles = 1;
		if (debugmelee) Console.Printf("\c[green]MeleeDestroyProjectiles:\c- RandomRoll / MaxCheck: %d / %d, MeleeDestroyProjectiles: %d, checkvalfactor: %.4f (\c[gold]%.4f\c-)", randomroll, MaxCheck, MeleeDestroyProjectiles, checkvalfactor, (checkvalfactor * CountInv("PlayerLevel")));

		return MeleeDestroyProjectiles;
	}

	// Used to Create Multiple "Shields" for Punches/Melee
	action void A_MeleeShieldPiece(string attackname = "", int spawnheight = 32, int spawndistance = 0)
	{
		A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
	}

	action void A_CheckIPState1()
	{
		actor player = players[0].mo;
		invoker.IPAttackCheck = 0;
		invoker.buttons = GetPlayerInput(INPUT_BUTTONS);
		int buttonspressed = 0;
		if (exex_ikaripointsenabled)
		{
			if (player && player.CountInv("IPUseMode")) invoker.IPAttackCheck = 1;
		}
	}
	
	action void A_ConfirmIPAttack(int ipid = 0, int IPVoiceType = 0, int basevoicechance = 0, int maxvoiceroll = 0, bool takecost = true)
	{
		if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d]", ipid);
		actor player = players[0].mo;
		if (player)
		{
			if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d] PlayerCheck", ipid);
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			let globalvars = DDGlobalVariables.Get();
			if (exex_ikaripointsenabled && MiscItem && globalvars && invoker.IPAttackCheck)
			{
				double cost = invoker.A_GetIPCost(ipid);
				if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d] Cost: %.4f", ipid, cost);
				if (takecost)
				{
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
					}
					else
					{
						invoker.IPAttackCheck = 0;
					}
				}
				else
				{
					If (MiscItem.ItemPoints < cost && globalvars.ItemPoints < cost)
					{
						invoker.IPCostTemp = 0;
						invoker.IPAttackCheck = 0;
					}
					else
					{
						invoker.IPCostTemp = cost;
					}
				}
				if (invoker.IPAttackCheck) invoker.A_IPDinahVoiceSelect(IPVoiceType,basevoicechance,maxvoiceroll);
			}
		}
	}
	
	action void A_ConfirmIPAttackSigil(int ipid = 181, int IPVoiceType = 0, int basevoicechance = 1, int maxvoiceroll = 3, bool takecost = true, int sigilcost = 0)
	{
		if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d]", ipid);
		actor player = players[0].mo;
		if (player)
		{
			if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d] PlayerCheck", ipid);
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			let globalvars = DDGlobalVariables.Get();
			if (exex_ikaripointsenabled && MiscItem && globalvars && invoker.IPAttackCheck)
			{
				double cost = invoker.A_GetIPCost(ipid,true,sigilcost);
				if (dydudebug_ipdisplays) Console.Printf("\c[green][IPUse: %d] Cost: %.4f", ipid, cost);
				if (takecost)
				{
					If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost)
					{
						MiscItem.ItemPoints -= cost;
						globalvars.ItemPoints -= cost;
					}
					else
					{
						invoker.IPAttackCheck = 0;
					}
				}
				else
				{
					If (MiscItem.ItemPoints < cost && globalvars.ItemPoints < cost)
					{
						invoker.IPCostTemp = 0;
						invoker.IPAttackCheck = 0;
					}
					else
					{
						invoker.IPCostTemp = cost;
					}
				}
				if (invoker.IPAttackCheck) invoker.A_IPDinahVoiceSelect(IPVoiceType,basevoicechance,maxvoiceroll);
			}
		}
	}
	
	action void A_ConfirmIPAttackExtra(int ipid = 0, int IPVoiceType = 0, int basevoicechance = 0, int maxvoiceroll = 0, string AmmoType = "", int ammocost = 0, bool takecost = true)
	{
		actor player = players[0].mo;
		if (player)
		{
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			let globalvars = DDGlobalVariables.Get();
			if (exex_ikaripointsenabled && MiscItem && globalvars && invoker.IPAttackCheck)
			{
				double cost = invoker.A_GetIPCost(ipid);
				if (dydudebug_ipdisplays) Console.Printf("\c[blue]Cost: %.4f", cost);
				If (MiscItem.ItemPoints >= cost && globalvars.ItemPoints >= cost && CountInv(AmmoType) >= ammocost)
				{
					MiscItem.ItemPoints -= cost;
					globalvars.ItemPoints -= cost;
				}
				else
				{
					invoker.IPAttackCheck = 0;
				}
				if (invoker.IPAttackCheck) invoker.A_IPDinahVoiceSelect(IPVoiceType,basevoicechance,maxvoiceroll);
			}
		}
	}
	
	action double A_LowerRaiseCheck(double movespeed)
	{
		double bufffactor = 1.0;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			if (MiscItem) movespeed *= (1.0 + (MiscItem.PlayerLevel * 0.025));
			if (player.mo.CountInv("PowerRoastBuff")) bufffactor += 0.125;
			if (player.mo.CountInv("PowerFruitBuff") || player.mo.CountInv("PowerMealBuff2")) bufffactor += 0.0625;
			if (player.mo.CountInv("PowerMealBuff") || player.mo.CountInv("PowerMealBuff2")) bufffactor += 0.25;
			if (player.mo.CountInv("PowerMeal2Buff") || player.mo.CountInv("PowerMeal2Buff2")) bufffactor += 0.25;
			if (player.ReadyWeapon is "HandToHand") bufffactor += 0.25;
			if (player.ReadyWeapon is "SuperVac") bufffactor -= (0.25 + (player.mo.CountInv("VacAmmo") * (0.25 / 24)));
			if (player.ReadyWeapon is "Grimophone") bufffactor -= 0.50;
			movespeed *= bufffactor;
			if (player.mo.CountInv("PowerStrength") || player.mo.CountInv("PowerStrengthDD")) movespeed *= 2.0;
		}
		return movespeed;
	}
	
	action void A_Lower(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (dydudebug_weaponstatdisplays) Console.Printf("A_Lower: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (null == player.ReadyWeapon)
		{
			player.mo.BringUpWeapon();
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;
		if (player.morphTics || player.cheats & CF_INSTANTWEAPSWITCH)
		{
			psp.y = WEAPONBOTTOM;
		}
		else
		{
			psp.y += movespeed;
		}
		if (psp.y < WEAPONBOTTOM)
		{ // Not lowered all the way yet
			return;
		}
		ResetPSprite(psp);
		
		if (player.playerstate == PST_DEAD)
		{ // Player is dead, so don't bring up a pending weapon
			// Player is dead, so keep the weapon off screen
			player.SetPsprite(PSP_FLASH, null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		// [RH] Clear the flash state. Only needed for Strife.
		player.SetPsprite(PSP_FLASH, null);
		player.mo.BringUpWeapon ();
		return;
	}
	
	action void A_Raise(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (dydudebug_weaponstatdisplays) Console.Printf("A_Lower: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			player.mo.DropWeapon();
			return;
		}
		if (player.ReadyWeapon == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;

		if (psp.y <= WEAPONBOTTOM)
		{
			ResetPSprite(psp);
		}
		psp.y -= movespeed;
		if (psp.y > WEAPONTOP)
		{ // Not raised all the way yet
			return;
		}
		psp.y = WEAPONTOP;
		
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
	}

	// Fist Block Function
	action void A_PFistBlockOn()
	{
		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		if (MiscItem)
		{
			if (MiscItem.PlayerLevel >= 0 && MiscItem.PlayerLevel <= 19)
			{
				A_SetInventory("FistPlayerBlock",1);
				A_SetInventory("FistPlayerSpeedFactor",1);
			}
			if (MiscItem.PlayerLevel >= 20 && MiscItem.PlayerLevel <= 49)
			{
				A_SetInventory("FistPlayerBlock2",1);
				A_SetInventory("FistPlayerSpeedFactor2",1);
			}
			if (MiscItem.PlayerLevel >= 50 && MiscItem.PlayerLevel <= 89)
			{
				A_SetInventory("FistPlayerBlock3",1);
				A_SetInventory("FistPlayerSpeedFactor3",1);
			}
			if (MiscItem.PlayerLevel >= 90)
			{
				A_SetInventory("FistPlayerBlock4",1);
				A_SetInventory("FistPlayerSpeedFactor4",1);
			}
		}
		else
		{
			A_SetInventory("FistPlayerBlock",0);
			A_SetInventory("FistPlayerSpeedFactor",1);
		}
		if (random(1,16) <= 1) 
		{
			A_SetInventory("FistPlayerBlockExtra",1); 
			if (random(1,16) <= 1 && MiscItem && MiscItem.PlayerLevel >= 50)
			{
				A_SetInventory("FistPlayerBlockExtra2",1); 
			}
		}
	}

	action void A_PFistBlockOff()
	{
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		A_SetInventory("FistPlayerBlockItem",0);
		//bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}

	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		double result = basedist;
		return result;
	}

	action void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		if (exex_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int PerkFactor;
				bool debugrecoil = false;
				int PlayerLevel = CountInv("PlayerLevel");
				int BerserkAdd;

				// Base "Recoil"
				double baserecoil = -0.125;
				baserecoil = frandom(-0.125,-0.075);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * (random(3,9) + BerserkAdd);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.01171875));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (Pre [Base]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (post [Base]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (final [Base]): %d", flags);
	}
	
	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
			}
			loop;
	}
}

class DinahWeapon : DDWeapon
{
	action void A_QMWKickInit()
	{
		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
		}
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (Pre [QuickMelee]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (post [QuickMelee]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);														
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dydudebug_weaponstatdisplays2) Console.Printf("Flags (final [QuickMelee]): %d", flags);
	}
	
	states
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
				let weapon = player.ReadyWeapon;
				if (player.mo.health > 0)
				{
					if (dydudebug_weaponstatdisplays2) Console.Printf("GrandControlLayer - 2a");
					if (GetPlayerInput(INPUT_BUTTONS) & BT_USER1)
					{
						if (CountInv("IsUnconscious"))
						{
							A_PrintBold(String.Format("\cgYou're currently incapacitated, and this can't quick kick!"), frandom(0.685,0.8));
						}
						else
						{
							A_Overlay(-2,"Kick",true);
						}
					}
				}
				else
				{
					if (dydudebug_weaponstatdisplays2) Console.Printf("GrandControlLayer - 2b");
					A_ClearOverlays(-2,-2,true);
					A_ClearOverlays(8,8,true);
				}
			}
			loop;

		Kick:
			TNT1 A 0 A_QMWKickInit();
			goto KickStart;

		KickStart:
			TNT1 A 0
			{
			}
		KickWindUp:
			TNT1 A 1 // [1]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 5) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 5) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [2]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 15) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 15) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [3]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 25) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 25) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [4]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 35) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 35) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [5]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 45) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 45) tic = 0;
				}
				A_SetTics(tic);
			}
		Kicking:
			DKIC A 1 // [6]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 15) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 15) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC B 1 // [7]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
				}
				else
				{
				}
				A_SetTics(tic);
				
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					if (random(1,4) <= 1) A_StartSound("fistswingheavy0",CHAN_BODY);
													 else A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_BODY);
				}
			}
			DKIC C 1 // [8]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 45) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 45) tic = 0;
				}
				A_SetTics(tic);
				
				int basechance = 128;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(1.5,1.5,1.5,1.625,1.625,1.75);
				if (random(1,256) <= basechance)
				{
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,5);
					if (randvoice == 1) voicenm = "dinah/Jump";
					if (randvoice >= 2 && randvoice <= 3) voicenm = "dinah/kick1";
					if (randvoice == 4) voicenm = "dinah/kiah4";
					if (randvoice == 5) voicenm = "dinah/kiah5";
					if (exex_dinahextravoices)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol); 
					}
				} 
			}
			DKIC D 1 // [9]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
					if (CountInv("PlayerLevel") >= 35) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 35) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC E 1 // [10]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 60) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 60) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC F 1 // [11]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
				}
				else
				{
				}
				A_SetTics(tic);
			}
			DKIC G 1 // [12]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 25) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 25) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC H 1 // 1 [13]
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int KPower = (player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				if (CountInv("DinahTrueIPState")) dmg *= 5;

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
				}
				if (dydudebug_meleedmg) Console.Printf("dmg: %d, recl: %.8f", dmg, recl);
				A_Recoil(recl);
				A_CustomPunch(dmg,true,CPF_NOTURN,"KickPuff",104,0,0,"","","");
				
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "ShieldPartMeleeNoReflect";
					if (random(1,8) <= (1 + (PlayerLevel * 0.06))) mk = "ShieldPartMeleeReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
			}
			DKIC G 1 // 1 [14]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 20) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 20) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC F 1 // 1 [15]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
				}
				else
				{
				}
				A_SetTics(tic);
			}
			DKIC E 1 // [16]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 50) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 50) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC D 1 // [17]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
					if (CountInv("PlayerLevel") >= 40) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 40) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC C 1 // [18]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 55) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 55) tic = 0;
				}
				A_SetTics(tic);
			}
			DKIC B 1 // [19]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 2) tic = 0;
				}
				else
				{
				}
				A_SetTics(tic);
			}
			DKIC A 1 // [20]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,9) <= 7) tic = 0;
					if (CountInv("PlayerLevel") >= 30) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 30) tic = 0;
				}
				A_SetTics(tic);
			}
		KickWindDown:
			TNT1 A 1 // [21]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 50) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 50) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [22]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 40) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 40) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [23]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 30) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 30) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [24]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 20) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 20) tic = 0;
				}
				A_SetTics(tic);
			}
			TNT1 A 1 // [25]
			{
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,2) <= 1) tic = 0;
					if (CountInv("PlayerLevel") >= 10) tic = 0;
				}
				else
				{
					if (CountInv("PlayerLevel") >= 10) tic = 0;
				}
				A_SetTics(tic);
			}
			goto KickEnd;
		// KICK END
		KickEnd:
			TNT1 A 0
			{
			}
			stop;
	}
}

class DDBeak : DDWeapon
{
	Default
	{
		Weapon.SelectionOrder 10000;
		+WEAPON.DONTBOB
		+WEAPON.MELEEWEAPON
		Weapon.YAdjust 15;
		Weapon.SisterWeapon "BeakPowered";
	}
	
	States
	{
		Ready:
			BEAK A 1 A_WeaponReady;
			Loop;
		Deselect:
			BEAK A 1 A_Lower(12);
			Loop;
		Select:
			BEAK A 1 A_BeakRaise;
			Loop;
		Fire:
			BEAK A 18 A_BeakAttackPL1;
			Goto Ready;
	}
	
	//---------------------------------------------------------------------------
	//
	// PROC A_BeakRaise
	//
	//---------------------------------------------------------------------------

	action void A_BeakRaise ()
	{
		if (player == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (psp)
		{
			psp.y = WEAPONTOP;
			ResetPSprite(psp);
		}
		player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.GetReadyState());
	}

	//----------------------------------------------------------------------------
	//
	// PROC A_BeakAttackPL1
	//
	//----------------------------------------------------------------------------

	action void A_BeakAttackPL1()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}

		int damage = random[BeakAtk](1,3);
		double ang = angle;
		double slope = AimLineAttack (ang, DEFMELEERANGE);
		LineAttack (ang, DEFMELEERANGE, slope, damage, 'Melee', "BeakPuff", true, t);
		if (t.linetarget)
		{
			angle = t.angleFromSource;
		}
		A_StartSound ("chicken/peck", CHAN_VOICE);
		player.chickenPeck = 12;
		let psp = player.GetPSprite(PSP_WEAPON);
		if (psp)
		{
			psp.Tics -= random[BeakAtk](0,7);
		}
	}
}

// Shield Parts [Melee]
class ShieldPartMeleeNoReflect : ShieldPartBase
{
	States
	{
		Spawn:
			HEXA C 0 bright NoDelay;
			HEXA C 1 bright;
			stop;
		Pain:
			TNT1 A 0 bright
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_StartSound("fisthitberserkwall", 57);
				}
				else
				{
					A_StartSound("FistHitWall", 57); 
				} 
			}
			stop;
	}
}

class ShieldPartMeleeReflect : ShieldPartMeleeNoReflect
{
	default
	{
		+REFLECTIVE 
		+AIMREFLECT
	}
}

class HandToHand : DinahWeapon replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 80;
		+SPECTRAL
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Tag "Hand to Hand: Normal attack punches, Alt attack uppercuts. <USER4> enters a cross-armed guarding stance to heavily reduce most damage, moreso melee types of damage.";
		Obituary "%o was give a good kick in the arse by %k.";
	}
	
	states
	{
		Ready:
			DHND A 1
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			loop;
		Deselect:
			DHND A 1
			{
				A_Lower(12);
			}
			loop;
		Select:
			DHND A 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			TNT1 A 0
			{
				int basechance = 31;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(2.25,2.25,2.25,2.4375,2.4375,2.625);
				if (random(1,256) <= basechance) 
				{
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,7);
					if (randvoice == 1) voicenm = "Dinah/Jump";
					if (randvoice == 2) voicenm = "Dinah/Kiai1";
					if (randvoice == 3) voicenm = "Dinah/Kiai2";
					if (randvoice == 4) voicenm = "Dinah/Kiai3";
					if (randvoice == 5) voicenm = "Dinah/Kiai4";
					if (randvoice == 6) voicenm = "Dinah/Kiai5";
					if (randvoice == 7) voicenm = "Dinah/Jump1";
					if (randvoice == 8) voicenm = "Dinah/Jump2";
					if (randvoice == 9) voicenm = "Dinah/Jump3";
					if (exex_dinahextravoices)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol); 
					}
				}
				if (random(1,2) == 1)
				{
					return resolvestate("PunchStartL"); 
				}
				else
				{
					return resolvestate("PunchStartR"); 
				}
				return resolvestate(null);
			}
		PunchStartL:
			DHND B 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;
				if (PlayerLevel >= 15) tic -= 1;
				if (PlayerLevel >= 45) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DPUN A 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;
				if (PlayerLevel >= 20) tic -= 1;
				if (PlayerLevel >= 50) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				if (random(1,64) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium",CHAN_BODY);
				}
				
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),true,CPF_NOTURN,"FistPuff",64,0,0,"","","");
				
				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= (1 + (PlayerLevel * 0.04))) 
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",33,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",33,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,48);
					}
				}
			}
			DPUN B 4
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 4;
				if (PlayerLevel >= 10) tic -= 1;
				if (PlayerLevel >= 40) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DPUN A 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;
				if (PlayerLevel >= 5) tic -= 1;
				if (PlayerLevel >= 35) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DHND B 4
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 4;
				if (PlayerLevel >= 25) tic -= 1;
				if (PlayerLevel >= 55) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				A_ReFire();
			}
			goto Ready;
		PunchStartR:
			DHND C 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;

				if (PlayerLevel >= 15) tic -= 1;
				if (PlayerLevel >= 45) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DPUN C 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;
				if (PlayerLevel >= 20) tic -= 1;
				if (PlayerLevel >= 50) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium",CHAN_BODY);
				}

				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),true,CPF_NOTURN,"FistPuff",64,0,0,"","","");
				
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 16;
					int mkdist2 = 48;
					string mk = "ShieldPartMeleeNoReflect";
					if (random(1,8) <= (1 + (PlayerLevel * 0.04))) mk = "ShieldPartMeleeReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
				}
			}
			DPUN D 4
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 4;
				if (PlayerLevel >= 10) tic -= 1;
				if (PlayerLevel >= 40) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DPUN C 3
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 3;
				if (PlayerLevel >= 5) tic -= 1;
				if (PlayerLevel >= 35) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DHND B 4
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 4;
				if (PlayerLevel >= 25) tic -= 1;
				if (PlayerLevel >= 55) tic -= 1;
				if (tic < 1) tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				A_ReFire();
			}
			goto Ready;

		AltFire:
			goto UppercutStart;
		UppercutStart:
			DNUP A 1
			{ 
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP B 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 25) tic -= 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP C 1
			{ 
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP D 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 35) tic -= 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP E 1
			{ 
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			//
			DNU2 A 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 20) tic -= 1; // 20 [4]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
	
				int basechance = 75;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(2,2,2,2.5,2.5,3);
				if (random(1,256) <= basechance)
				{
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) basechance *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,7);
					if (randvoice >= 1 && randvoice <= 3) voicenm = "Dinah/Jump";
					if (randvoice == 4) voicenm = "Dinah/Kiai4";
					if (randvoice == 5) voicenm = "Dinah/Kiai5";
					if (randvoice >= 6 && randvoice <= 7) voicenm = "Dinah/Kiai6";
					if (exex_dinahextravoices)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol); 
					}
				} 
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,256) <= 192) { A_StartSound("fistswingheavy0",CHAN_WEAPON); }
					else { A_StartSound("fistswingmedium0",CHAN_WEAPON); }
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_WEAPON); 
				}
			}
			DNU2 B 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 C 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 40) tic -= 1; // 40 [8]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 D 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 E 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 10) tic -= 1; // 10 [2]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 F 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);

				A_GetPunchSwingRecoil(1);
				A_CustomPunch(A_GetPunchDamage(1,0,false),true,CPF_NOTURN,"UppercutPuff",58,0,0,"","","");
				
				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					int mkheight1 = random(25,26);
					int mkheight2 = (mkheight1 + 24 + (random(0,1)));
					int mkdist1 = 10;
					int mkdist2 = 42;
					string mk = "ShieldPartMeleeNoReflect";
					if (random(1,8) <= (1 + (PlayerLevel * 0.08))) mk = "ShieldPartMeleeReflect";

					A_MeleeShieldPiece(mk,mkheight1,mkdist1);
					A_MeleeShieldPiece(mk,mkheight2,mkdist1);
					A_MeleeShieldPiece(mk,mkheight1,mkdist2);
					A_MeleeShieldPiece(mk,mkheight2,mkdist2);
				}
			}
			DNU2 G 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 45) tic -= 1; // 45 [9]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 F 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 15) tic -= 1; // 15 [3]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 E 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 D 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 30) tic -= 1; // 30 [6]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 C 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 B 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 35) tic -= 1; // 35 [7]
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 A 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNU2 A 0 { return resolvestate("UppercutEnd"); }
		UppercutEnd:
			DNUP E 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 45) tic -= 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP D 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP C 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 5) tic -= 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP B 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) tic *= frandom(0.34,0.67);
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			DNUP A 1
			{
				int PlayerLevel = CountInv("PlayerLevel");
				int tic = 1;
				if (PlayerLevel >= 15) tic -= 1;
				if (dydudebug_weaponstatdisplays) Console.Printf("%d", tic);
				A_SetTics(tic);
			}
			TNT1 A 0
			{
				A_ReFire();
				return resolvestate("Ready");
			}
			goto Ready;
			
		// Crossed-Arm Guard
		User4:
			DNGU A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DNGU B 1
			{
				A_PFistBlockOn();
			}
			DNGU C 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn();
			}
			DNGU D 1
			{
				A_PFistBlockOn();
			}
			DNGU E 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DNGU F 1
			{
				A_PFistBlockOn();
			}
			DNGU G 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DNGU H 1
			{
				A_PFistBlockOn();
			}
			DNGU I 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
			}
		User4Hold:
			DNGU J 1
			{
				A_PFistBlockOn();

				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
			}
			DNGU J 0 A_Refire("User4End");
			loop;
		User4End:
			DNGU I 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU H 1
			{
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU G 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU F 1
			{
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU E 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU D 1
			{
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU C 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU B 1
			{
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DNGU A 0
			{
				A_PFistBlockOff();
			}
			goto Ready;
	}
}

class FistPuff : DDPuff
{
	default
	{
		Tag "Fist";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Fist";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	void A_SetPainForcedPain(int basechance = 44, double playerlvlfactor = 0.44)
	{
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (MiscItem.PlayerLevel * playerlvlfactor);
		}
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(44,0.44);

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56); 
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Spawn");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(44,0.44);

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Melee");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(44,0.44);

				int dmg = A_GetPunchDamage(0,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56); 
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				//Console.Printf("Crash");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class UppercutPuff : FistPuff
{
	default
	{
		Tag "Uppercut";
		ProjectileKickback 0;
		+NODAMAGETHRUST
		RenderStyle "Translucent";
		Alpha 0.875;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(32,0.32);
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(32,0.32);
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(32,0.32);
				
				int dmg = A_GetPunchDamage(1,1,true);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuff : DDPuff
{
	default
	{
		Tag "Kick";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	void A_SetPainForcedPain(int basechance = 16, double playerlvlfactor = 0.16)
	{
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (MiscItem.PlayerLevel * playerlvlfactor);
		}
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(16,0.16);

				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));

				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(16,0.16);
				
				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(16,0.16);

				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));

				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuffNoThrust : KickPuff
{
	default
	{
		ProjectileKickback 0;
		+NODAMAGETHRUST
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(16,0.16);

				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(16,0.16);
				
				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(16,0.16);
				
				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

// Cricket Bat
class CricketShieldPart : ShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA C 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON, CHANF_DEFAULT, frandom(0.9,1.1), ATTN_NORM, frandom(0.9,1.1));
			}
			stop;
	}
}

class CricketShieldPartNoReflect : ShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON, CHANF_DEFAULT, frandom(0.9,1.1), ATTN_NORM, frandom(0.9,1.1));
			}
			stop;
	}
}

class CricketSwingShieldPart : SwingShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA C 3 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON, CHANF_DEFAULT, frandom(0.9,1.1), ATTN_NORM, frandom(0.9,1.1));
			}
			stop;
	}
}

class CricketSwingPartNoReflect : SwingShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA A 3 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON, CHANF_DEFAULT, frandom(0.9,1.1), ATTN_NORM, frandom(0.9,1.1));
			}
			stop;
	}
}

//***************
//* Cricket Bat *
//***************
class CricketBat : DinahWeapon replaces Pistol
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 2;
		Weapon.Kickback 50;
		Weapon.AmmoType2 "MalletAmmo";
		Weapon.AmmoGive2 5;
		//Weapon.AmmoUse2 0;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "SPBTA0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "\c[gold]A Cricket Bat! Yeeeesireeee I'll be taking this! \cx[Slot 2]\c-";
		Tag "Cricket Bat: Dinah's old reliable. Normal attack is melee. Alt attack is a cricket ball shot. <USER4> key allows you to guard/defend from attacks, and blocks/reflects projectiles from the front. Swings can also affect enemy projectiles.";
		Obituary "%k scored a point with %o.";
	}
	
	action void A_GiveGuardBuff(int type = 0)
	{
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) 
		{
			int val = randompick(2,2,2,2,2,2,2,2,2,3);
			MiscItem.CricketBatBuffTimer = val;
			if (type >= 1) MiscItem.CricketBatBuffTimer2 = val;
		}
	}

	action void A_BatGuardDashOff()
	{
		invoker.guardtimer = 0;
		A_SetInventory("IsInBatGuardFrame",0);
	}

	action void A_CricketBatGuard(int type = 0)
	{
		A_SetInventory("IsInBatGuardFrame",1);

		string vispart = "CricketShieldPartNoReflect";
		if (type == 1) vispart = "CricketShieldPart";
		else
		{
			if (random(1,16) <= 5) vispart = "CricketShieldPart";
		}

		double yoffset = frandompick(-0.3125,0,0.3125);

		double distx, disty, distz;
		double heightmulti = 0.5;
		double ydistseperator1 = 3.75;
		double ydistseperator2 = 10.00;
		double sa = sin(angle);
		double ca = cos(angle);
		if (dydudebug_cricketbatguard) Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		if (dydudebug_cricketbatguard) Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = frandom(30.0,34.0);

		distx = (m * frandom(0.925,0.95));
		disty = 0.0;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = ydistseperator2;
		distz = ((height * heightmulti) - 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = ((height * heightmulti) + 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		
		if (random(1,8) <= 7)
		{
			distx = (m * frandom(0.675,0.70));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = ydistseperator2;
			distz = ((height * heightmulti) - 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = ((height * heightmulti) + 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		if (random(1,12) <= randompick(3,3,4,4,4,4,4,5,5))
		{
			distx = (m * frandom(0.425,0.45));
			disty = ydistseperator1;
			distz = ((height * heightmulti) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = ((height * heightmulti) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = ydistseperator1;
			distz = ((height * heightmulti) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = ((height * heightmulti) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}
		
		
		if (type == 1) A_GiveGuardBuff(1);
							else A_GiveGuardBuff(0);
	}

	action void A_CricketBatSwing(int type = 0, double dist = 112.0)
	{
		A_BatGuardDashOff();
		string vispart = "CricketSwingPartNoReflect";
		if (random(1,16) <= 5) vispart = "CricketSwingShieldPart";

		double yoffset = frandompick(-0.1625,0,0.1625);

		double distx, disty, distz;
		double heightmulti = 0.5;
		double heightmultivari = 0.125;
		double yseperation = -5.2;
		double sa = sin(angle);
		double ca = cos(angle);
		if (dydudebug_cricketbatguard) Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		if (dydudebug_cricketbatguard) Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = dist;

		if (type == 1) m *= 1.2;
		int m2 = m;

		distx = (m * frandom(0.95,1.05));
		disty = 0.0;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		distx = (m * frandom(0.90,0.95));
		disty = (yseperation * 2);
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = yseperation;
		distz = (height * (heightmulti - heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * (heightmulti - heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = yseperation;
		distz = (height * (heightmulti + heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * (heightmulti + heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

		if ((random (1,16) <= 14) || (type == 1 && (random (1,32) <= 31)))
		{
			m = (m2 * 0.667);

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = (yseperation * 2);
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}


		if ((random (1,16) <= 12) || (type == 1 && (random (1,16) <= 15)))
		{
			m = (m2 * 0.334);

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = (yseperation * 2);
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}
		
		A_GiveGuardBuff(0);
	}
	
	int guardstate;
	int guardtimer, guardtimerlimit;
	int sguardtimeextra;
	int guardcooldown;
	
	int spintimes;
	int spinsoundinc;
	
	action int A_BatDamageSet(int type = 0)
	{
		let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
		double LevelInc;
		if (Skill <= 0) LevelInc = 9;
		if (Skill == 1) LevelInc = 10.5;
		if (Skill == 2) LevelInc = 12;
		if (Skill == 3) LevelInc = 13.5;
		if (Skill >= 4) LevelInc = 15;
		LevelInc *= 1.5;

		double dmg = random(6,8);
		if (MiscItem)
		{
			if (MiscItem.PlayerLevel >= (LevelInc*12)) dmg *= random(7,14);
			else if (MiscItem.PlayerLevel >= (LevelInc*11)) dmg *= random(7,13);
			else if (MiscItem.PlayerLevel >= (LevelInc*10)) dmg *= random(6,13);
			else if (MiscItem.PlayerLevel >= (LevelInc*9)) dmg *= random(6,12);
			else if (MiscItem.PlayerLevel >= (LevelInc*8)) dmg *= random(5,12);
			else if (MiscItem.PlayerLevel >= (LevelInc*7)) dmg *= random(5,11);
			else if (MiscItem.PlayerLevel >= (LevelInc*6)) dmg *= random(4,11);
			else if (MiscItem.PlayerLevel >= (LevelInc*5)) dmg *= random(4,10);
			else if (MiscItem.PlayerLevel >= (LevelInc*4)) dmg *= random(3,10);
			else if (MiscItem.PlayerLevel >= (LevelInc*3)) dmg *= random(3,9);
			else if (MiscItem.PlayerLevel >= (LevelInc*2)) dmg *= random(2,9);
			else if (MiscItem.PlayerLevel >= (LevelInc*1)) dmg *= random(2,8);
			else dmg *= random(1,8);
		}
		else
		{
			dmg *= random(1,8);
		}
		if (invoker.IPAttackCheck) dmg *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.75);
		if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;
		if (type == 1) // type 1 = Spin attack
		{
			if (Skill <= 0) LevelInc = 18;
			if (Skill == 1) LevelInc = 21;
			if (Skill == 2) LevelInc = 24;
			if (Skill == 3) LevelInc = 27;
			if (Skill >= 4) LevelInc = 30;
			LevelInc *= 1.5;

			if (MiscItem)
			{
				if (MiscItem.PlayerLevel >= (LevelInc*8)) dmg /= frandom(2.0,4.0);
				else if (MiscItem.PlayerLevel >= (LevelInc*7)) dmg /= frandom(2.5,4.0);
				else if (MiscItem.PlayerLevel >= (LevelInc*6)) dmg /= frandom(2.5,4.5);
				else if (MiscItem.PlayerLevel >= (LevelInc*5)) dmg /= frandom(3.0,4.5);
				else if (MiscItem.PlayerLevel >= (LevelInc*4)) dmg /= frandom(3.0,5.0);
				else if (MiscItem.PlayerLevel >= (LevelInc*3)) dmg /= frandom(3.5,5.0);
				else if (MiscItem.PlayerLevel >= (LevelInc*2)) dmg /= frandom(3.5,5.5);
				else if (MiscItem.PlayerLevel >= (LevelInc*1)) dmg /= frandom(4,5.5);
				else dmg /= frandom(4.0,6.0);
				if (invoker.IPAttackCheck) dmg *= frandompick(1.25,1.5,1.75);
			}
			else
			{
				dmg /= frandom(4.0,6.0); 
				if (invoker.IPAttackCheck) dmg *= frandompick(1.05,1.10,1.15);
			}
		}
		dmg = int(dmg);
		if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);

		return dmg;
	}
	
	action void A_GuardToggleCountdown()
	{
		if (invoker.guardcooldown) invoker.guardcooldown--;
		if (dydudebug_cricketbatguard) Console.Printf("Countdown (CricketBat): %d", invoker.guardcooldown);
	}

	override void DoEffect()
	{
		super.DoEffect();
		A_GuardToggleCountdown();
	}
	
	action void A_CheckGuardState()
	{
		invoker.buttons = GetPlayerInput(INPUT_BUTTONS);
		if (dydudebug_cricketbatguard) Console.Printf("buttons: %d [GuardState: %d, Cooldown: %d, Timer: %d]", invoker.buttons, invoker.guardstate, invoker.guardcooldown, invoker.guardtimer);
		
		if (exex_cricketbatguardtype == 1)
		{
			if (invoker.guardcooldown <= 0)
			{
				if (invoker.buttons & BT_USER4 || 
						invoker.buttons & BT_ATTACK || 
						invoker.buttons & BT_ALTATTACK) 
				{
					if (invoker.guardstate == 0) invoker.guardstate = 1;
																	else invoker.guardstate = 0;
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) invoker.guardcooldown = random(5,7);
																																	 else invoker.guardcooldown = random(6,8);
				}
			}
		}
	}
	
	States
	{
		Pickup:
			SPBT A 0;
			SPBT A 0 A_StartSound("misc/w_pkup",CHAN_WEAPON);
			SPBT A 0;
			Fail;

		Spawn:
			SPBT A 6;
			loop;
		Ready:
			DBID A 1 
			{
				A_SetInventory("DoingSpinAttack",0);
				A_BatGuardDashOff();
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			loop;
		Deselect:
			DBID A 1
			{
				A_SetInventory("DoingSpinAttack",0);
				A_BatGuardDashOff();
				A_Lower(12);
			}
			loop;
		Select: 
			DBID A 1
			{
				A_SetInventory("DoingSpinAttack",0);
				A_BatGuardDashOff();
				A_Raise(12);
			}
			loop;
		Fire:
			DBID A 1
			{
				A_CheckIPState1();
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_SetInventory("DoingSpinAttack",0);
				A_BatGuardDashOff();
				if (exex_cricketbatcanspinattack)
				{
					if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
					if (PlayerLevel >= exex_cricketspinlvlrequirement)
					{
						if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT)
						{
							return resolvestate("SpinAttackStart");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DBID B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_ConfirmIPAttack(101,0,3,10,false);
			}
			DBID C 1
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 2))
				{
					A_SetTics(0);
				}
			}
			DBID D 1 
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID E 1 
			{
				A_GiveGuardBuff(0);
			}
			DBID F 1 
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 3))
				{
					A_SetTics(0);
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(0); 
					}
				}
				A_GiveGuardBuff(0);
			}
			DBID G 1 
			{
				string pufftype = "BatPuff";
				int dmg = A_BatDamageSet(0);
				int atkrange = 112;

				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (invoker.IPAttackCheck) // >.> <.<
				{
					pufftype = "BatPuffIP";
					if (random(1,128) <= 1)
					{
						shotangle = -33.75;
						shotangleend = 33.75;
						shotangleinc = 11.25;
						maxshots = 7;
						atkrange *= 1.5;
					}
					else
					{
						shotangle = -22.5;
						shotangleend = 22.5;
						shotangleinc = 11.25;
						maxshots = 5;
						atkrange *= 1.334;
					}
				}
				if (invoker.IPAttackCheck) A_SetAngle(angle+shotangle);

				for (int i = 0; i < maxshots; i++)
				{
					if (i && invoker.IPAttackCheck) A_SetAngle(angle+shotangleinc);
					A_CustomPunch(dmg, true, 0, pufftype, atkrange, IPCostOnHit: true);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
					{
						A_CricketBatSwing(1);
					}
					else
					{
						A_CricketBatSwing(0);
					}
				}
				if (invoker.IPAttackCheck) A_SetAngle(origangle);
				invoker.A_CheckIPModeOnUse();
			}
			DBID H 1 
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 3))
				{
					A_SetTics(0); 
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(0); 
					}
				}
				A_GiveGuardBuff(0);
			}
			DBID I 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(randompick(0,1,1,1,1,1));
				}
				A_GiveGuardBuff(0);
			}
			DBID J 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(0,1,1,1,1,1)); }
			}
			DBID C 2
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 2))
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(randompick(0,0,0,0,1,1)); 
					}
					else
					{
						A_SetTics(1);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(randompick(0,1,1,1,1,1)); 
					}
				}
			}
			DBID B 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(0,1,1,1,1,1)); }
			}
			DBID A 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(0,1,1,1,1,1)); }
			}
			goto Ready;
		AltFire:
			DBID A 0
			{
				if (!CountInv("MalletAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			DBID A 1
			{
				A_CheckIPState1();
				A_BatGuardDashOff();
				A_ConfirmIPAttack(102,0,4,10);
			}
			DBID B 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID C 1
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 2))
				{
					A_SetTics(0);
				}
			}
			DBID D 1
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID E 1
			{
				A_GiveGuardBuff(0);
			}
			DBID F 1 
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 3))
				{
					A_SetTics(0);
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(0); 
					}
				}
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("croquet/ballfire",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.4;
					A_StartSound("croquet/ballfire",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,8) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				A_GiveGuardBuff(0);
			}
			DBID G 1 
			{
				string pufftype = "BatPuff";
				int dmg = A_BatDamageSet(0);
				int atkrange = 112;

				double shotangle = 0;
				double shotangleend = 0;
				double shotangleinc = 0;
				double origangle = angle;
				int maxshots = 1;
				if (invoker.IPAttackCheck) // >.> <.<
				{
					pufftype = "BatPuffIP";
					if (random(1,128) <= 1)
					{
						shotangle = -33.75;
						shotangleend = 33.75;
						shotangleinc = 11.25;
						maxshots = 7;
						atkrange *= 1.5;
					}
					else
					{
						shotangle = -22.5;
						shotangleend = 22.5;
						shotangleinc = 11.25;
						maxshots = 5;
						atkrange *= 1.334;
					}
				}
				if (invoker.IPAttackCheck) A_SetAngle(angle+shotangle);
				actor BombShots;
				DDProjectile IPCompat;
				for (int i = 0; i < maxshots; i++)
				{
					if (i && invoker.IPAttackCheck) A_SetAngle(angle+shotangleinc);
					A_CustomPunch(dmg, true, 0, pufftype, atkrange);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
					{
						BombShots = A_FireProjectile("MalletShotBerserk",0,1,0,0);
						A_CricketBatSwing(1);
					}
					else
					{
						BombShots = A_FireProjectile("MalletShot",0,1,0,0);
						A_CricketBatSwing(0);
					}
					if (BombShots && invoker.IPAttackCheck)
					{
						IPCompat = DDProjectile(BombShots);
						if (IPCompat)
						{
							IPCompat.IPattack = true;
							IPCompat.Speed *= frandompick(1.125,1.25);
						}
					}
				}
				if (invoker.IPAttackCheck) A_SetAngle(origangle);
				invoker.A_CheckIPModeOnUse();
				A_TakeInventory("MalletAmmo",1);
			}
			DBID H 1 
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 3))
				{
					A_SetTics(0);
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(0); 
					}
				}
				A_GiveGuardBuff(0);
			}
			DBID I 2 
			{
				A_GiveGuardBuff(0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID J 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID C 2 
			{
				int PlayerLevel;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
				if (PlayerLevel >= (exex_cricketspinlvlrequirement * 2))
				{
					A_SetTics(0);
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						A_SetTics(1); 
					}
				}
			}
			DBID B 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			DBID A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			goto Ready;
		SpinAttackStart:
			DBID B 1
			{
				A_CheckIPState1();
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
				A_ConfirmIPAttack(103,0,33,40);
			}
			DBID C 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID D 1
			{
				A_SetInventory("DoingSpinAttack",0);
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID E 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID F 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			goto SpinAttack;
		SpinAttackPre:
			DBID G 0
			{
				int maxspinsoundinc = 4;
				if (exex_cricketspinattacktype == 1) maxspinsoundinc = 2;
				if (exex_cricketspinattacktype == 2) maxspinsoundinc = 1;
				A_SetInventory("DoingSpinAttack",1);
				invoker.spinsoundinc++;;
				if (invoker.spinsoundinc >= maxspinsoundinc)
				{
					invoker.spinsoundinc = 0;
					double sndpitch = 1.0;
					double sndvol = 1.0;
					if (invoker.IPAttackCheck) 
					{
						sndpitch = frandom(0.75,0.875);
						sndvol = 1.4;
					}
					A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					if (invoker.IPAttackCheck) 
					{
						sndpitch = frandom(0.75,0.875);
						sndvol = 1.4;
						A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					}
					if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				}
			}
		SpinAttack:
			DBID G 1
			{
				string pufftype = "BatPuff";
				string pufftypenosnd = "BatPuffNoSound";
				A_SetInventory("DoingSpinAttack",1);
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				int dmg = A_BatDamageSet(1);
				int range = 112 + (random(0,2) * 8);
				actor BombShots;
				DDProjectile IPCompat;
				double rangemul = 1.0;
				if (MiscItem && MiscItem.PlayerLevel >= exex_cricketspinlvlrequirement) { rangemul = (1.0 + ((MiscItem.PlayerLevel - exex_cricketspinlvlrequirement) * 0.0078125)); }
				if (rangemul >= 1.5) rangemul = 1.5;
				range *= rangemul;
				if (invoker.IPAttackCheck)
				{
					range *= frandompick(1.334,1.334,1.334,1.334,1.5);
					dmg *= frandompick(1.5,1.75,1.75,1.75,2.0);
					pufftype = "BatPuffIP";
					pufftypenosnd = "BatPuffNoSoundIP";
				}
				int malletammo = CountInv("MalletAmmo");
				bool rangedatk;
				if (malletammo >= 1 && invoker.IPAttackCheck)
				{
					rangedatk = true;
					A_TakeInventory("MalletAmmo",1);
				}
				
				int maxspintimes = 5;
				for (int i = 0; i < maxspintimes; i++)
				{
					A_SetAngle(angle+22.5);
					if (invoker.IPAttackCheck) A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					A_SetAngle(angle+22.5);
					if (invoker.IPAttackCheck) A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					A_SetAngle(angle+22.5);
					A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					A_SetAngle(angle-135);
					A_FireBullets(0,0,1,dmg,pufftype,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						if (invoker.IPAttackCheck && rangedatk && (i == 0 || i == 3)) BombShots = A_FireProjectile("MalletShotBerserk",0,1,0,0);
						A_CricketBatSwing(1,range); 
					}
					else 
					{
						if (invoker.IPAttackCheck && rangedatk && (i == 0 || i == 3)) BombShots = A_FireProjectile("MalletShot",0,1,0,0);
						A_CricketBatSwing(0,range); 
					}
					if (BombShots && invoker.IPAttackCheck)
					{
						IPCompat = DDProjectile(BombShots);
						if (IPCompat)
						{
							IPCompat.IPattack = true;
							IPCompat.Speed *= frandompick(1.125,1.25,1.375);
						}
					}
					A_SetAngle(angle+22.5);
					A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					A_SetAngle(angle+22.5);
					if (invoker.IPAttackCheck) A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					A_SetAngle(angle+22.5);
					if (invoker.IPAttackCheck) A_FireBullets(0,0,1,dmg,pufftypenosnd,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_NOFLASH,range,"",0,0);
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_CricketBatSwing(1,range); } else { A_CricketBatSwing(0,range); }
					
					A_SetAngle(angle+6);
				}
				invoker.spintimes += 1;
				// +30 Degrees per frame [6*5]
				invoker.A_CheckIPModeOnUse();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID G 0
			{
				int maxspintimes = 3; // 30*3 = 90;
				if (exex_cricketspinattacktype == 1) maxspintimes = 6; // 30*6 = 90;
				if (exex_cricketspinattacktype == 2) maxspintimes = 12; // 30*12 = 90;
				if (invoker.spintimes >= maxspintimes)
				{
					invoker.spintimes = 0;
					int PlayerLevel;
					int buttons = GetPlayerInput(INPUT_BUTTONS);
					let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) PlayerLevel = MiscItem.PlayerLevel;
					if (PlayerLevel >= exex_cricketspinlvlrequirement)
					{
						if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && buttons & BT_ATTACK)
						{
							return resolvestate("SpinAttackPre");
						}
						return resolvestate("SpinAttackEnd");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			loop;
		SpinAttackEnd:
			DBID H 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBID I 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			DBID J 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			TNT1 A 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 1
			{
				A_SetInventory("DoingSpinAttack",0);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			goto Ready;
			
		// Bat Guard
		User4:
			DBIG A 0
			{
				if (exex_cricketbatguardtype == 1)
				{
					if (invoker.guardcooldown) { return resolvestate("Ready"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Guard:
			DBGR A 1
			{
				if (random(1,4) == 1) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBGR B 1
			{
				if (random(1,2) == 1) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
			}
			DBGR C 1
			{
				invoker.guardtimerlimit = 7;
				invoker.sguardtimeextra = 0;
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (MiscItem.PlayerLevel >= 160) invoker.guardtimerlimit += random(17,18);
					else if (MiscItem.PlayerLevel >= 112) invoker.guardtimerlimit += random(14,14);
					else if (MiscItem.PlayerLevel >= 72) invoker.guardtimerlimit += random(10,11);
					else if (MiscItem.PlayerLevel >= 40) invoker.guardtimerlimit += random(7,7);
					else if (MiscItem.PlayerLevel >= 16) invoker.guardtimerlimit += random(3,4);

					invoker.sguardtimeextra += (random(0,2) + (MiscItem.PlayerLevel * 0.2));
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
					{
						invoker.sguardtimeextra += (random(2,3) + (MiscItem.PlayerLevel * 0.4));
					}
				}
				if (random(1,4) <= 3) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			goto GuardHold;
		GuardHold:
			DBGR D 1
			{
				A_CheckGuardState();
				if (invoker.guardtimer <= (invoker.guardtimerlimit + invoker.sguardtimeextra))
				{
					A_CricketBatGuard(1); // Gives Guaranteed Reflect on the Bat Shield and Elevated Defense for the duration of the above tics [~7] when first entering proper guard stance
					invoker.guardtimer++;
				}
				else
				{
					A_CricketBatGuard(0);
				}
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOPRIMARY|WRF_NOSECONDARY|WRF_NOSWITCH);
			}
			DBGR D 0
			{
				if (dydudebug_cricketbatguard) Console.Printf("guardtype: %d", exex_cricketbatguardtype);
				if (exex_cricketbatguardtype == 1)
				{
					if (invoker.guardstate == 0) { return resolvestate("UnGuard"); }
																	else { return resolvestate("GuardHold"); } 
				}
				else
				{
					if (invoker.buttons & BT_USER4) return resolvestate("GuardHold");
				}
				return resolvestate(null);
			}
			goto Unguard;
		UnGuard:
			DBGR C 1
			{
				if (random(1,4) <= 3) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			DBGR B 1
			{
				if (random(1,2) == 1) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
			}
			DBGR A 1
			{
				if (random(1,4) == 1) { A_GiveGuardBuff(0); }
				A_CheckGuardState();
				A_BatGuardDashOff();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(0); }
			}
			goto Ready;
	}
}

class BatPuff : DDPuff
{
	default
	{
		Tag "Cricket Bat Smack";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 4;
		if (IPAttack) basechance = random(2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class BatPuffIP : BatPuff
{
	default
	{
		Tag "Cricket Bat Smack";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = random(2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			BASH DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
}

class BatPuffNoSound : BatPuff
{
	default
	{
		Tag "Cricket Bat Smack";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "";
		AttackSound "";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 4;
		if (IPAttack) basechance = random(2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
	}
}

class BatPuffNoSoundIP : BatPuffNoSound
{
	default
	{
		Tag "Cricket Bat Smack";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = random(2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
		Crash:
			TNT1 A 0
			{
				A_SetPainForcedPain();
			}
			TNT1 A 1 Bright;
			Stop;
	}
}

class MalletShot : DDProjectile
{
	default
	{
		Tag "Cricket Ball";
		Radius 3;
		Height 3;
		Speed 70;
		Damage 12;
		DamageType "Cricket";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		+USEBOUNCESTATE
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
		BounceType "Hexen";
		BounceCount 0;
		BounceFactor 0.0;
		WallBounceFactor 0.0;
	}
	
	int minbouncelvl;
	double bouncelvlfactor;
	int nogravtimer;

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if (target && target.GetClassName() == "DinahPlayer")
		{
			minbouncelvl = 8;
			if (IPAttack) minbouncelvl *= frandompick(0.20,0.25,0.334);
			bouncelvlfactor = (1.0 / (minbouncelvl * 1.5));
			if (IPAttack) bouncelvlfactor = (1.0 / (minbouncelvl * frandompick(1.25,1.375,1.5)));

			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem)
			{
				if (MiscItem.PlayerLevel >= minbouncelvl)
				{
					double extratimes = ((MiscItem.PlayerLevel - minbouncelvl) * bouncelvlfactor);
					if (dydudebug_attackstuff) Console.Printf("[%s] extratimes: %.8f", GetClassName(), extratimes);
					if (extratimes < 0) extratimes = 0;
					bSKYEXPLODE = true;
					bBOUNCEONWALLS = true;
					bBOUNCEONFLOORS = true;
					bBOUNCEONCEILINGS = true;
					bCANBOUNCEWATER = true;
					bDONTBOUNCEONSHOOTABLES = true;
					if (IPAttack) BounceCount = 4 + extratimes;
					else BounceCount = 2 + extratimes;
					BounceFactor = 1.00;
					WallBounceFactor = 1.00;
				}
				else
				{
					if (IPAttack)
					{
						bSKYEXPLODE = true;
						bBOUNCEONWALLS = true;
						bBOUNCEONFLOORS = true;
						bBOUNCEONCEILINGS = true;
						bCANBOUNCEWATER = true;
						bDONTBOUNCEONSHOOTABLES = true;
						BounceCount = 2;
						BounceFactor = 1.00;
						WallBounceFactor = 1.00;
					}
					else
					{
						bBOUNCEONWALLS = false;
						bBOUNCEONFLOORS = false;
						bBOUNCEONCEILINGS = false;
						bCANBOUNCEWATER = false;
						bDONTBOUNCEONSHOOTABLES = true;
						bALLOWBOUNCEONACTORS = false;
						BounceCount = 0;
						BounceFactor = 0;
						WallBounceFactor = 0;
					}
				}
			}
			if (dydudebug_attackstuff) Console.Printf("[%s] BounceCount: %d", GetClassName(), BounceCount);
		}

		user_randompain = 16;
		if (target && target.GetClassName() == "DinahPlayer")
		{
			if (IPAttack) user_randompain *= randompick(6,8);
			let MiscItem = PlayerStatItem(target.player.mo.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (MiscItem.PlayerLevel * 0.16);
		}
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			CBAL AAABBB 1 NoDelay
			{
				if (bNOGRAVITY && nogravtimer) 
				{
					nogravtimer--;
					if (nogravtimer <= 0) bNOGRAVITY = false;
				}
				else
				{
					nogravtimer = 0;
				}
				if (dydudebug_projectilecollisions) Console.Printf("State: Spawn [%d], NoGrav: %d, NGTimer: %d", frame, bNOGRAVITY, nogravtimer);
			}
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Death [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: Crash [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				bNOGRAVITY = true;
				if (dydudebug_projectilecollisions) Console.Printf("State: XDeath [%d], NoGrav: %d", frame, bNOGRAVITY);
			}
			stop;
		Bounce:
			TNT1 A 0
			{
				double scalevel = frandom(0.375,0.625);
				if (random(1,4) <= 3) scalevel = 0.5;
				A_ScaleVelocity(scalevel);
				bNOGRAVITY = false;
				nogravtimer = random(3,5);
				if (dydudebug_projectilecollisions) Console.Printf("State: Bounce [%d], NoGrav: %d, VelMul: %.3f", frame, bNOGRAVITY, scalevel);
			}
			goto Spawn;
	}
}

class MalletShotBerserk : DDFastProjectile
{
	default
	{
		Tag "-Cricket Ball-";
		Radius 3;
		Height 3;
		Speed 140;
		Damage 60;
		DamageType "Cricket";
		Projectile;
		-NOGRAVITY
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "croquet/ballhit";
		BounceType "Hexen";
		BounceCount 0;
		BounceFactor 0.0;
		WallBounceFactor 0.0;
	}
	
	int minbouncelvl;
	double bouncelvlfactor;
	int nogravtimer;

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if (target && target.GetClassName() == "DinahPlayer")
		{
			minbouncelvl = 8;
			if (IPAttack) minbouncelvl *= frandompick(0.20,0.25,0.334);
			bouncelvlfactor = (1.0 / (minbouncelvl * 1.5));
			if (IPAttack) bouncelvlfactor = (1.0 / (minbouncelvl * frandompick(1.25,1.375,1.5)));

			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem)
			{
				if (MiscItem.PlayerLevel >= minbouncelvl)
				{
					double extratimes = ((MiscItem.PlayerLevel - minbouncelvl) * bouncelvlfactor);
					if (dydudebug_attackstuff) Console.Printf("[%s] extratimes: %.8f", GetClassName(), extratimes);
					if (extratimes < 0) extratimes = 0;
					bSKYEXPLODE = true;
					bBOUNCEONWALLS = true;
					bBOUNCEONFLOORS = true;
					bBOUNCEONCEILINGS = true;
					bCANBOUNCEWATER = true;
					bDONTBOUNCEONSHOOTABLES = true;
					if (IPAttack) BounceCount = 4 + extratimes;
					else BounceCount = 2 + extratimes;
					BounceFactor = 1.00;
					WallBounceFactor = 1.00;
				}
				else
				{
					if (IPAttack)
					{
						bSKYEXPLODE = true;
						bBOUNCEONWALLS = true;
						bBOUNCEONFLOORS = true;
						bBOUNCEONCEILINGS = true;
						bCANBOUNCEWATER = true;
						bDONTBOUNCEONSHOOTABLES = true;
						BounceCount = 2;
						BounceFactor = 1.00;
						WallBounceFactor = 1.00;
					}
					else
					{
						bBOUNCEONWALLS = false;
						bBOUNCEONFLOORS = false;
						bBOUNCEONCEILINGS = false;
						bCANBOUNCEWATER = false;
						bDONTBOUNCEONSHOOTABLES = true;
						bALLOWBOUNCEONACTORS = false;
						BounceCount = 0;
						BounceFactor = 0;
						WallBounceFactor = 0;
					}
				}
			}
			if (dydudebug_attackstuff) Console.Printf("[%s] BounceCount: %d", GetClassName(), BounceCount);
		}

		user_randompain = 16;
		if (target && target.GetClassName() == "DinahPlayer")
		{
			if (IPAttack) user_randompain *= randompick(6,8);
			let MiscItem = PlayerStatItem(target.player.mo.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (MiscItem.PlayerLevel * 0.16);
		}
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	int A_GetImpactAOE(int type = 0)
	{
		int result;
		if (type == 0) result = 16; // Damage
		if (type == 1) result = 24; // Radius
		if (target && target.GetClassName() == "DinahPlayer")
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem)
			{
				if (type == 0) result += (MiscItem.PlayerLevel * 0.09375);
				if (type == 1) result += (MiscItem.PlayerLevel * 0.125);
				if (MiscItem.PlayerLevel >= 50)
				{
					if (type == 0) result += (MiscItem.PlayerLevel * 0.046875);
					if (type == 1) result += (MiscItem.PlayerLevel * 0.0625);
				}
				if (MiscItem.PlayerLevel >= 100)
				{
					if (type == 0) result += (MiscItem.PlayerLevel * 0.0234375);
					if (type == 1) result += (MiscItem.PlayerLevel * 0.03125);
				}
			}
			if (IPAttack)
			{
				if (type == 0) result *= 1.75;
				if (type == 1) result *= 1.3125;
			}
			
		}
		if (dydudebug_attackstuff) Console.Printf("[%s] result: %d, type: %d", GetClassName(), result, type);
		return result;
	}
	
	States
	{
		Spawn:
			CBAL AAABBB 1 NoDelay
			{
				if (bNOGRAVITY && nogravtimer) 
				{
					nogravtimer--;
					if (!nogravtimer) bNOGRAVITY = false;
				}
			}
			loop;
		Death:
			CBAL C 0 
			{
				bNOGRAVITY = true;
				A_Explode(A_GetImpactAOE(0),A_GetImpactAOE(1),0,0,(A_GetImpactAOE(1)*0.34));
			}
			CBAL CDEF 4 Bright;
			stop;
		Crash:
			CBAL C 0 
			{
				A_Explode(A_GetImpactAOE(0),A_GetImpactAOE(1),0,0,(A_GetImpactAOE(1)*0.34));
				bNOGRAVITY = true;
			}
			CBAL CDEF 4 Bright;
			stop;
		XDeath:
			TNT1 A 1
			{
				A_Explode(A_GetImpactAOE(0),A_GetImpactAOE(1),0,0,(A_GetImpactAOE(1)*0.34));
				bNOGRAVITY = true;
			}
			stop;
	}
}

class MalletAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 2; // 3
		Inventory.MaxAmount 60; // 45
		Ammo.BackpackAmount 2; // 3
		Ammo.BackpackMaxAmount 90;
		Inventory.Icon "CBAMI0";
		Inventory.PickupMessage "A cricket ball";
		Inventory.PickupSound "pickup/cricketammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			CBAM A -1;
			Loop;
	}
}

class MalletAmmoBig : MalletAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 6; // 3
		Inventory.MaxAmount 60; // 45
		Ammo.BackpackAmount 6; // 3
		Ammo.BackpackMaxAmount 90;
		Inventory.Icon "CBAMI0";
		Inventory.PickupMessage "A set of cricket balls";
		Inventory.PickupSound "pickup/cricketammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			CBAM B -1;
			Loop;
	}
}

//**************
//* Blunderaxe *
//**************
class Blunderaxe : DinahWeapon replaces Shotgun
{
	int IPATKAmmoAmt;
	double rrecoil;
	int meleetimes;
	int chopcombo;
	double horzspread;
	double vertspread;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 200;
		Weapon.SlotNumber 3;
		Weapon.Kickback 40;
		Weapon.AmmoType2 "BlunderAmmo";
		Weapon.AmmoGive2 6;
		//Weapon.AmmoUse2 0;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "BLAXP0";
		Inventory.PickupMessage "\c[gold]Oh yes! The slow, yet trusty Blunderaxe.\c- \cx[Slot 3]\c-";
		inventory.PickupSound "misc/w_pkup";
		Tag "Blunderaxe: Normal fire chops enemies in melee. Alt-fire shoots a spread of Blundershot. Chop attack occasionally inflicts a defensive debuff [up to 3 tiers] on enemies.";
		Obituary "%k used %o for target practice.";
	}
	
	action bool A_BlunderCheckComboLevel()
	{
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (invoker.chopcombo && MiscItem && MiscItem.PlayerLevel >= exex_axequickshotlvlrequirement) return true;
		return false;
	}
	
	action void A_BlunderShotAttack(double xyspread = 0.0, double zspread = 0.0, actor BombShots = null)
	{
		invoker.horzspread = xyspread;
		invoker.vertspread = zspread;
		if (invoker.chopcombo)
		{
			if (A_BlunderCheckComboLevel())
			{
				invoker.horzspread *= frandompick(0.667,1.334);
				invoker.vertspread *= frandompick(0.667,1.334);
			}
			else
			{
				invoker.horzspread *= frandompick(1.000,1.500);
				invoker.vertspread *= frandompick(1.000,1.500);
			}
		}
		if (random(1,2) == 1) BombShots = A_FireProjectile("BlunderShot",frandom(-invoker.horzspread,invoker.horzspread),0,0,0,0,frandom(-invoker.vertspread,invoker.vertspread));
										 else BombShots = A_FireProjectile("BlunderShot",random(-invoker.horzspread,invoker.horzspread),0,0,0,0,random(-invoker.vertspread,invoker.vertspread));
		if (BombShots)
		{
			if (A_BlunderCheckComboLevel())
			{
				BombShots.Score = 12;
				//Console.Printf("rn13");
			}
			if (invoker.IPAttackCheck)
			{
				DDProjectile IPCompat; 
				IPCompat = DDProjectile(BombShots);
				if (IPCompat)
				{
					IPCompat.IPattack = true;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			BLAX P 0 NoDelay;
			BLAX P 0 
			{
				if (bDROPPED) { SetStateLabel("Dropp"); }
			}
			BLAX P 0
			{
				if (random(1,8) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					Thing_Remove(0); 
				}
			}
			goto Idle;
		Dropp:
			BLAX P 0
			{
				if (random(1,64) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					Thing_Remove(0); 
				}
			}
			goto Idle;

		Idle:
			BLAX P 6;
			loop;
		Ready:
			BLAX A 1 
			{
				invoker.meleetimes = 0;
				invoker.chopcombo = 0;
				A_WeaponReady();
			}
			loop;
		Deselect:
			BLAX A 1
			{
				invoker.meleetimes = 0;
				invoker.chopcombo = 0;
				A_Lower(12);
			}
			loop;
		Select: 
			BLAX A 1
			{
				invoker.meleetimes = 0;
				invoker.chopcombo = 0;
				A_Raise(12);
			}
			loop;
		Fire:
			BLAX D 1
			{
				invoker.chopcombo = 0;
				A_CheckIPState1();
				A_ConfirmIPAttack(111,0,8,11,false);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{ 
					if (invoker.IPAttackCheck && random(1,12) <= 1) A_SetTics(0);
				}
				else
				{
					if (invoker.IPAttackCheck && random(1,4) <= 3) A_SetTics(0);
				}
			}
			BLAX F 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{ 
					if (invoker.IPAttackCheck && random(1,18) <= 1) A_SetTics(0);
				}
				else
				{
					if (invoker.IPAttackCheck && random(1,4) <= 2) A_SetTics(0);
				}
			}
		FirePhase2:
			TNT1 A 1
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(111,0,8,11,false);
				
				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						A_SetTics(0);
					}
					else
					if (random(1,16) <= 15)
					{
						A_SetTics(0);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,24) <= 1) A_SetTics(0);
					}
					else
					{
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(0);
					}
				}
			}
			BLAX G 2 
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("Blunderswing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Blunderswing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }

				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(0);
														 else A_SetTics(1);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(0);
														 else A_SetTics(1);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(0);
																											else A_SetTics(1); 
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(1);
					}
				}
			}
		FirePhase3:
			BLAX HI 2 
			{
				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(0);
														 else A_SetTics(1);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(0);
														 else A_SetTics(1);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(0);
																											else A_SetTics(1); 
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(1);
					}
				}
			}
			BLAX J 2 
			{
				string pufftype = "BlunderPuff";
				int dmg = (random(16,20) * random(1,8));
				int range = 96;
				if (invoker.IPAttackCheck) 
				{
					pufftype = "BlunderPuffIP";
					dmg *= random(14,16);
					range *= 1.125;
				}
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;

				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(0);
														 else A_SetTics(1);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(0);
														 else A_SetTics(1);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(0);
																											else A_SetTics(1); 
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(1);
					}
				}
				if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);
				A_CustomPunch(dmg, true, 0, pufftype, range, IPCostOnHit: true);
				
				invoker.A_CheckIPModeOnUse();
				invoker.meleetimes++;
			}
		FirePhase4:
			BLAX KLM 3 
			{
				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(1);
														 else A_SetTics(2);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(1);
														 else A_SetTics(2);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(random(0,1));
																											else A_SetTics(random(1,2));
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					}
				}
			}
		FirePhase5:
			BLAX N 3 
			{
				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(1);
														 else A_SetTics(2);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(1);
														 else A_SetTics(2);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(random(0,1));
																											else A_SetTics(random(1,2));
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					}
				}
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.PlayerLevel >= exex_axecombolvlrequirement)
				{
					invoker.buttons = GetPlayerInput(INPUT_BUTTONS);
					if (invoker.buttons & BT_ATTACK) 
					{
						A_Refire("FirePhase2");
					}
					if (invoker.buttons & BT_ALTATTACK)
					{
						//Console.Printf("BT_ALTATTACK");
						if (CountInv("BlunderAmmo")) 
						{
							invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 1.4)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 2.0)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 3.0)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 4.5)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 6.5)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 9.0)) invoker.chopcombo++;
							if (MiscItem && MiscItem.PlayerLevel >= (exex_axequickshotlvlrequirement * 12.0)) invoker.chopcombo++;
							return resolvestate("AltFireSuccess");
						}
						else
						{
							return resolvestate("FirePhase2");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			BLAX O 4
			{
				if (invoker.meleetimes > 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,4) <= 3) A_SetTics(1);
														 else A_SetTics(2);
					}
					else
					if (random(1,16) <= 15)
					{
						if (random(1,8) <= 1) A_SetTics(1);
														 else A_SetTics(2);
					}
				}
				else
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{ 
						if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(randompick(0,1,1,2,2,2));
																											else A_SetTics(randompick(1,2,2,3,3,3));
					}
					else
					{
						if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,2,2,3,3));
					}
				}
			}
			goto Ready;
		AltFire:
			BLAX A 0
			{
				if (!CountInv("BlunderAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
		AltFireSuccess:
			BLAX A 0 
			{
				invoker.meleetimes = 0;
				invoker.IPATKAmmoAmt = 3;
				if (dydudebug_infiniteip) invoker.IPATKAmmoAmt = 1;
				A_CheckIPState1();
				A_ConfirmIPAttackExtra(112,0,3,10,"BlunderAmmo",invoker.IPATKAmmoAmt);
				
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				if (A_BlunderCheckComboLevel()) 
				{
					sndpitch *= frandom(1.125,1.25);
					sndvol *= 1.125;
				}
				A_StartSound("blunderfire",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("blunderfire",7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("blunderfire",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					if (CountInv("BlunderShotUpgrade") >= 1) 
					{
						sndpitch = frandom(0.625,0.75);
						sndvol = 1.4;
						A_StartSound("blunderfire",9,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					}
					if (CountInv("BlunderShotUpgrade") >= 3) 
					{
						sndpitch = frandom(0.625,0.75);
						sndvol = 1.4;
						A_StartSound("blunderfire",10,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					}
					if (random(1,128) <= 127) A_AlertMonsters(1024); 
				}
				else
				{
					if (random(1,32) <= 31) A_AlertMonsters(1024); 
				}
				if (A_BlunderCheckComboLevel()) 
				{
					sndpitch *= frandom(1.125,1.25);
					sndvol *= 1.125;
					A_StartSound("blunderfire",11,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch *= frandom(1.25,1.375);
					sndvol *= 1.1875;
					A_StartSound("blunderfire",12,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch *= frandom(1.375,1.5);
					sndvol *= 1.25;
					A_StartSound("blunderfire",13,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
			}
			BLAX B 3 Bright
			{
				actor BombShots;
				DDProjectile IPCompat;

				double origangle = angle;
				if (CountInv("BlunderShotUpgrade") >= 3)
				{
					if (random(1,4) <= 1)
					{
						A_BlunderShotAttack(1.0,1.0,BombShots);
						A_BlunderShotAttack(3.0,1.0,BombShots);
					}
					if (random(1,12) <= 1)
					{
						A_BlunderShotAttack(1.0,2.0,BombShots);
						A_BlunderShotAttack(7.0,2.0,BombShots);
					}
				}
				else
				if (CountInv("BlunderShotUpgrade") >= 2)
				{
					if (random(1,8) <= 1)
					{
						A_BlunderShotAttack(1.0,1.0,BombShots);
						A_BlunderShotAttack(5.0,1.0,BombShots);
					}
					if (random(1,16) <= 1)
					{
						A_BlunderShotAttack(1.0,2.0,BombShots);
						A_BlunderShotAttack(9.0,2.0,BombShots);
					}
				}
				else
				if (CountInv("BlunderShotUpgrade") >= 1)
				{
					if (random(1,12) <= 1)
					{
						A_BlunderShotAttack(1.0,2.0,BombShots);
						A_BlunderShotAttack(7.0,2.0,BombShots);
					}
				}
				else
				{
					if (random(1,16) <= 1)
					{
						A_BlunderShotAttack(1.0,2.0,BombShots);
						A_BlunderShotAttack(9.0,2.0,BombShots);
					}
				}
				if (CountInv("BlunderShotUpgrade") >= 3) 
				{
					A_BlunderShotAttack(2.0,2.0,BombShots);
				}
				A_BlunderShotAttack(3.0,1.0,BombShots);
				if (CountInv("BlunderShotUpgrade") >= 1) 
				{
					A_BlunderShotAttack(4.0,1.0,BombShots);
				}
				A_BlunderShotAttack(5.0,1.0,BombShots);
				if (CountInv("BlunderShotUpgrade") >= 1) 
				{
					A_BlunderShotAttack(6.0,1.0,BombShots);
				}
				A_BlunderShotAttack(7.0,1.0,BombShots);
				if (CountInv("BlunderShotUpgrade") >= 3) 
				{
					A_BlunderShotAttack(8.0,2.0,BombShots);
				}
				if (invoker.IPAttackCheck)
				{
					int numextshots = random(3,5) * 2;
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						numextshots = random(5,7) * randompick(2,2,2,3);
					}
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						numextshots = random(7,10) * randompick(2,3,3,3);
					}
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						numextshots = random(10,13) * randompick(3,3,3,4);
					}
					for (int i = 0; i < numextshots; i++)
					{
						int user_type = random(1,8);
						if (user_type >= 1 && user_type <= 5)
						{
							A_BlunderShotAttack(6.0,3.0,BombShots);
						}
						if (user_type >= 5 && user_type <= 7) 
						{
							A_BlunderShotAttack(4.0,2.0,BombShots);
						}
						if (user_type == 8) 
						{
							A_BlunderShotAttack(2.0,1.0,BombShots);
						}
					}
					if (invoker.IPAttackCheck) A_SetAngle(origangle);
				}
				if (invoker.IPAttackCheck) invoker.rrecoil = (frandom(4.8,7.2) * (1.0 + (CountInv("BlunderShotUpgrade") * 0.125)) * frandompick(1.75,2,2.25)); 
															else invoker.rrecoil = frandom(4.8,7.2) * (1.0 + (CountInv("BlunderShotUpgrade") * 0.125));
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) invoker.rrecoil *= 0.2;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel()) invoker.rrecoil *= frandom(1.375,1.625);
																		 else invoker.rrecoil *= frandom(1.625,1.875);
				}
				A_Recoil(invoker.rrecoil);
				if (invoker.IPAttackCheck) A_TakeInventory("BlunderAmmo",invoker.IPATKAmmoAmt);
															else A_TakeInventory("BlunderAmmo",1);
				invoker.A_CheckIPModeOnUse();
				
				if (invoker.chopcombo)
				{
					if (invoker.IPAttackCheck)
					{
						A_SetTics(1);
					}
					else
					{
						if (random(1,32) <= 3) A_SetTics(2);
						else 
						{
							A_SetTics(1);
						}
					}
				}
				else
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 1) A_SetTics(1);
														 else A_SetTics(2);
					}
				}
			}
			BLAX C 3 Bright
			{
				int dur = 3;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = random(3,4);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = random(2,3);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = random(1,3);
					}
					else
					{
						dur = random(1,2);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 5) dur *= 0.667;
					}
				} 
				else 
				{
					if (CountInv("BlunderShotUpgrade") >= 3) 
					{
						dur = randompick(4,4,5);
					}
					else if (CountInv("BlunderShotUpgrade") >= 2) 
					{
						dur = randompick(3,4,4);
					}
					else if (CountInv("BlunderShotUpgrade") >= 1) 
					{
						dur = randompick(3,4);
					}
					else 
					{
						dur = randompick(3,3);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,5) <= 2) dur *= 0.667;
					}
				}
				if (dur <= 1 && random(1,5) <= 3) dur = 1;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel())
					{
						if (invoker.IPAttackCheck)
						{
							dur -= 1; 
						}
						else
						{
							if (random(1,16) <= 9) dur -= 1; 
						}
					}
					else
					{
						if (invoker.IPAttackCheck)
						{
							dur -= 1; 
						}
						else
						{
							if (random(1,20) <= 3) dur -= 1; 
						}
					}
				}
				else
				{
					if (invoker.IPAttackCheck)
					{
						dur -= 1; 
					}
					else
					{
						if (random(1,25) <= 2) dur -= 1; 
					}
				}
				if (dur <= 0) dur = 0;
				A_SetTics(dur);
			}
			BLAX DE 2 
			{
				int dur = 2;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(3,4,4,4);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(2,2,3,3);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(1,2,2,2);
					}
					else
					{
						dur = randompick(0,1,1,2);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 5) dur *= 0.667;
					}
				}
				else
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(4,4,5,5,5); 
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(3,3,4); 
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(2,3,3); 
					}
					else
					{
						dur = randompick(2,2); 
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,5) <= 2) dur *= 0.667;
					}
				}
				if (dur <= 1 && random(1,6) <= 3) dur = 1;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel())
					{
						if (invoker.IPAttackCheck)
						{
							dur -= 1; 
						}
						else
						{
							if (random(1,16) <= 7) dur -= 1; 
						}
					}
					else
					{
						if (invoker.IPAttackCheck)
						{
							dur -= 1; 
						}
						else
						{
							if (random(1,20) <= 5) dur -= 1; 
						}
					}
				}
				else
				{
					if (invoker.IPAttackCheck)
					{
						dur -= 1; 
					}
					else
					{
						if (random(1,25) <= 1) dur -= 1; 
					}
				}
				if (dur <= 0) dur = 0;
				A_SetTics(dur);
			}
			BLAX FF 7
			{
				int dur = 7;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(5,6,6,6);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(4,4,5,5);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(3,4,4,4);
					}
					else
					{
						dur = randompick(3,4);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 5) dur *= 0.667;
					}
				}
				else
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(9,9,10);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(8,8,9);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(7,8,8);
					}
					else
					{
						dur = randompick(7,7);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,5) <= 2) dur *= 0.667;
					}
				}
				if (dur <= 1 && random(1,8) <= 3) dur = 1;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel())
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.5;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 13)
							{
								dur *= 0.5;
								dur -= 1; 
							}
						}
					}
					else
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.75;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 8)
							{
								dur *= 0.75;
								dur -= 1; 
							}
						}
					}
				}
				if (dur <= 0) dur = 0;
				A_SetTics(dur);
			}
			BLAX D 8
			{
				int dur = 8;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(6,6,7);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(5,5,6);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(4,4,5);
					}
					else
					{
						dur = random(3,5);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 5) dur *= 0.667;
					}
				}
				else
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(10,11,11);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(9,9,10);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(8,8,9);
					}
					else
					{
						dur = randompick(8,8);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,5) <= 2) dur *= 0.667;
					}
				}
				if (dur <= 1 && random(1,9) <= 3) dur = 1;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel())
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.5;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 13)
							{
								dur *= 0.5;
								dur -= 1; 
							}
						}
					}
					else
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.667;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 8)
							{
								dur *= 0.667;
								dur -= 1; 
							}
						}
					}
				}
				if (dur <= 0) dur = 0;
				A_SetTics(dur);
			}
			BLAX A 9 
			{
				int dur = 9;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(5,6,6);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(5,5,6);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(4,5,5);
					}
					else
					{
						dur = random(4,5);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,6) <= 5) dur *= 0.667;
					}
				}
				else
				{
					if (CountInv("BlunderShotUpgrade") >= 3)
					{
						dur = randompick(11,11,12);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 2)
					{
						dur = randompick(10,10,11);
					}
					else
					if (CountInv("BlunderShotUpgrade") >= 1)
					{
						dur = randompick(9,10,10);
					}
					else
					{
						dur = randompick(9,9);
					}
					if (invoker.IPAttackCheck)
					{
						if (random(1,5) <= 2) dur *= 0.667;
					}
				}
				if (dur <= 1 && random(1,10) <= 3) dur = 1;
				if (invoker.chopcombo)
				{
					if (A_BlunderCheckComboLevel())
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.334;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 17)
							{
								dur *= 0.334;
								dur -= 1; 
							}
						}
					}
					else
					{
						if (invoker.IPAttackCheck)
						{
							dur *= 0.625;
							dur -= 1;
						}
						else
						{
							if (random(1,20) <= 12)
							{
								dur *= 0.625;
								dur -= 1; 
							}
						}
					}
				}
				if (dur <= 0) dur = 0;
				A_SetTics(dur);
				
				if (invoker.chopcombo) invoker.chopcombo--;
				//Console.Printf("%d", invoker.chopcombo);
				if (invoker.chopcombo)
				{
					invoker.buttons = GetPlayerInput(INPUT_BUTTONS);
					if (invoker.buttons & BT_ALTATTACK)
					{
						if (CountInv("BlunderAmmo")) 
						{
							return resolvestate("AltFireSuccess");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else
				{
					A_Refire();
				}
				return resolvestate(null);
			}
			goto Ready;
	}
}

class BlunderPuff : DDPuff
{
	default
	{
		Tag "BlunderAxe Chop";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Chop";
	}

	void A_SetPainForcedPain()
	{
		int basechance = 6;
		if (IPAttack) basechance = randompick(4,4,5);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CHOP ABC 4 Bright;
			Stop;
	}
}  

class BlunderPuffIP : BlunderPuff
{
	default
	{
		Tag "BlunderAxe Chop";
	}

	void A_SetPainForcedPain()
	{
		int basechance = randompick(4,4,5);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CHOP ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			Stop;
	}
}  

class BlunderShot : DDProjectile
{
	default
	{
		Tag "BlunderShot";
		Radius 3;
		Height 3;
		Speed 70;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		DamageType "Lead";
		Projectile;
		RENDERSTYLE "Normal";
		SeeSound "blundershot";
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
	}
	
	override void PostBeginPlay()
	{
		finaldamagedealt = (4 * random(2,16));
		int rad, hei;
		rad = 3;
		hei = 3;
		if (target && target.CountInv("BlunderShotUpgrade"))
		{
			if (target.CountInv("BlunderShotUpgrade") >= 3) 
			{
				finaldamagedealt = (4 * (random(11,16) + randompick(0,0,1,1,2,2,3))); // 44-76
				rad = 1;
				hei = 2;
			}
			else if (target.CountInv("BlunderShotUpgrade") >= 2) 
			{
				finaldamagedealt = (4 * (random(7,16) + randompick(0,1,2))); // 28-68
				rad = 2;
				hei = 2;
			}
			else if (target.CountInv("BlunderShotUpgrade") >= 1) 
			{
				finaldamagedealt = (4 * (random(4,16) + randompick(0,0,1))); // 16-68
				rad = 2;
				hei = 3;
			}
		}
		if (IPAttack) 
		{
			rad *= 0.667;
			hei *= 0.667;
			finaldamagedealt *= frandompick(1.025,1.025,1.025,1.025,1.025,1.025,1.025,1.025,1.025,1.05);
		}
		if (score == 12) 
		{
			//Console.Printf("@!$!");
			if (target.CountInv("BlunderShotUpgrade") >= 3) finaldamagedealt *= 2;  
			else if (target.CountInv("BlunderShotUpgrade") >= 2) finaldamagedealt *= 1.775; 
			else if (target.CountInv("BlunderShotUpgrade") >= 1) finaldamagedealt *= 1.625;
			else finaldamagedealt *= 1.5;
		}
		if (rad <= 1) rad = 1;
		if (hei <= 1) hei = 1;
		A_SetSize(rad,hei);

		if (dydudebug_rangedmg) Console.Printf("damage: %d", finaldamagedealt);
		Super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			BSHT AB 3;
			loop;
		Death:
			BBOM A 0
			{
				if (target && target.CountInv("BlunderShotUpgrade"))
				{
					if (target.CountInv("BlunderShotUpgrade") >= 3) { A_Explode(8,32,0,0,8); }
					if (target.CountInv("BlunderShotUpgrade") == 2) { A_Explode(4,16,0,0,4); }
					if (target.CountInv("BlunderShotUpgrade") == 1) { A_Explode(2,8,0,0,2); }
				}
			}
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		Crash:
			BBOM A 0
			{
				if (target && target.CountInv("BlunderShotUpgrade"))
				{
					if (target.CountInv("BlunderShotUpgrade") >= 3) { A_Explode(16,16,0,0,8); }
					if (target.CountInv("BlunderShotUpgrade") == 2) { A_Explode(8,8,0,0,4); }
					if (target.CountInv("BlunderShotUpgrade") == 1) { A_Explode(4,4,0,0,2); }
				}
			}
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		XDeath:
			TNT1 A 1 
			{
				bNOGRAVITY = true;
			}
			stop;
	}
}

class BadBlundershot : DDProjectile
{
	default
	{
		Tag "BlunderShot";
		Radius 3;
		Height 3;
		Speed 35;
		Damage 5;
		Scale 0.5;
		DamageType "Lead";
		Projectile;
		RENDERSTYLE "Normal";
		SeeSound "blundershot";
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
	}
	
	States
	{
		Spawn:
			BSHT AB 3;
			loop;
		Death:
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		Crash:
			BBOM A 4 Bright;
			BBOM BCD 4 Bright;
			stop;
		XDeath:
			TNT1 A 1 
			{
				bNOGRAVITY = true;
			}
			stop;
	}
}

class BlunderAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 48; // 36
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 72;
		Inventory.Icon "BAMOI0";
		Inventory.PickupMessage "A fistful of blundershot";
		Inventory.PickupSound "pickup/blunderammo";
		+FLOATBOB
	}
	States
	{
		Spawn:
			BAMO ABCD 5;
			Loop;
	}
}

class BlunderAmmoBig : BlunderAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 48; // 36
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 72;
		Inventory.Icon "BAMOI0";
		Inventory.PickupMessage "A cluster of blundershot";
		Inventory.PickupSound "pickup/blunderammo";
		+FLOATBOB
	}
	States
	{
		Spawn:
			BAMO EFGH 5;
			Loop;
	}
}

//*************
//* Scrambler *
//*************
class ScramblerSwingShieldPart : SwingShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	
	states
	{
		Spawn:
			HEXA C 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				//A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class ScramblerSwingPartNoReflect : SwingShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				//A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class Scrambler : DinahWeapon replaces SuperShotgun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 300;
		Weapon.SlotNumber 3;
		Weapon.Kickback 75;
		Weapon.AmmoType2 "EggAmmo";
		Weapon.AmmoGive2 3;
		//Weapon.AmmoUse2 1;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "FPANP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "\c[gold]This golden frypan is called the 'Scrambler'! It does well at scrambling more than just eggs too! \c- \cx[Slot 3]\c-";
		inventory.PickupSound "misc/w_pkup";
		Tag "Scrambler: Normal attack is a melee whack. Alt-attack throws a fractal egg that splits into multiple smaller ones. Melee occasionally 'confuses' enemies, lessing their chance to attack. Swings can also affect enemy projectiles.";
		Obituary "%k scored a point with %o.";
	}
	
	action void A_ScramblerSwing(int type = 0, double dist = 72.0)
	{
		string vispart = "ScramblerSwingPartNoReflect";
		if (random(1,32) <= random(10,12)) vispart = "ScramblerSwingShieldPart";

		double yoffset = frandompick(-0.1625,0,0.1625);

		double distx, disty, distz;
		double heightmulti = 0.5;
		double heightmultivari = 0.2;
		double yseperation = -7.6;
		double sa = sin(angle);
		double ca = cos(angle);
		if (dydudebug_cricketbatguard) Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		if (dydudebug_cricketbatguard) Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = dist;

		if (type == 1) m *= 1.334;
		int m2 = m;

		distx = (m * frandom(0.95,1.05));
		disty = 0.0;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		distx = (m * frandom(0.90,0.95));
		disty = (yseperation * 2);
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = yseperation;
		distz = (height * (heightmulti - heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * (heightmulti - heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = yseperation;
		distz = (height * (heightmulti + heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty *= -1;
		distz = (height * (heightmulti + heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

		if ((random (1,64) <= 63) || (type == 1 && (random (1,512) <= 511)))
		{
			m = (m2 * 0.667);

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = (yseperation * 2);
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}


		if ((random (1,32) <= 27) || (type == 1 && (random (1,256) <= 253)))
		{
			m = (m2 * 0.334);

			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = (yseperation * 2);
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) MiscItem.CricketBatSwingBuffTimer = randompick(3,3,3,3,3,3,4,4,4);
	}
	
	action void A_EggShotIPSetup(actor BombShots)
	{
		if (BombShots && invoker.IPAttackCheck)
		{
			DDProjectile IPCompat; 
			IPCompat = DDProjectile(BombShots);
			if (IPCompat)
			{
				IPCompat.IPattack = true;
				IPCompat.Speed *= 0.875;
			}
		}
	}

	States
	{
		Spawn:
			FPAN P 6;
			loop;
		Ready:
			FPAN A 1 
			{
				A_WeaponReady();
			}
			loop;
		Deselect:
			FPAN A 1
			{
				A_Lower(12);
			}
			loop;
		Select: 
			FPAN A 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			FPAN A 2
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(121,0,4,13,false);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN B 2 
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
			}
			FPAN C 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1); 
					A_ScramblerSwing(1);
				}
				else
				{
					A_ScramblerSwing(0);
				}
			}
			FPAN D 2 
			{
				// Melee Hit
				string pufftype = "PanPuff";
				int dmg = (random(10,12) * random(1,8));
				int range = 72;
				if (invoker.IPAttackCheck)
				{
					pufftype = "PanPuffIP";
					dmg *= frandompick(1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);
					range = 90;
				}
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;
				if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);
				A_CustomPunch(dmg, true, 0, pufftype, range, IPCostOnHit: true);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_ScramblerSwing(1);
				}
				else
				{
					A_ScramblerSwing(0);
				}
				invoker.A_CheckIPModeOnUse();
			}
			FPAN E 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1); 
					A_ScramblerSwing(1);
				}
				else
				{
					A_ScramblerSwing(0);
				}
			}
			FPAN FG 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 5
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(2,3)); }
			}
			FPAN B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(0,1)); }
			}
			goto Ready;
		AltFire:
			FPAN A 0
			{
				if (!CountInv("EggAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			FPAN A 2
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(122,0,3,11);

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			FPAN B 2 
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
				if (random(1,8) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
			}
			FPAN C 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1); 
					A_ScramblerSwing(1);
				}
				else
				{
					A_ScramblerSwing(0);
				}
			}
			FPAN D 2 
			{
				string pufftype = "PanPuff";
				double sndpitch = 1.0;
				double sndvol = 1.0;
				actor BombShots;
				DDProjectile IPCompat;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.4;
				}
				A_StartSound("panclang",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.4;
					A_StartSound("panclang",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.4;
					A_StartSound("panclang",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				
				// Melee Hit
				int dmg = (random(10,12) * random(1,8));
				int range = 72;
				if (invoker.IPAttackCheck)
				{
					pufftype = "PanPuffIP";
					dmg *= frandompick(1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);
					range = 90;
				}
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;
				if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);
				A_CustomPunch(dmg, true, 0, pufftype, range);

				// Projectiles
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					A_SetTics(1);
					A_ScramblerSwing(1);
					BombShots = A_FireProjectile("EggShotBerserk",0,1,0,0);
				}
				else
				{
					A_ScramblerSwing(0);
					BombShots = A_FireProjectile("EggShot",0,1,0,0);
				}
				A_EggShotIPSetup(BombShots);

				A_TakeInventory("EggAmmo",1);
				invoker.A_CheckIPModeOnUse();
			}
			FPAN E 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1); 
					A_ScramblerSwing(1);
				}
				else
				{
					A_ScramblerSwing(0);
				}
			}
			FPAN FG 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 5
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(2,3)); }
			}
			FPAN B 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(0,1)); }
			}
			goto Ready;
	}
}

class PanPuff : DDPuff
{
	default
	{
		Tag "Scrambler Whack";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "PanClang";
		AttackSound "PanClang";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 5;
		if (IPAttack) basechance = randompick(2,3,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class PanPuffIP : PanPuff
{
	default
	{
		Tag "Scrambler Whack";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = randompick(2,3,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			BASH DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
}

class EggShot : DDProjectile
{
	default
	{
		Tag "Large Fractal Egg";
		Radius 3;
		Height 3;
		Speed 70;
		Damage 12;
		DamageType "Breakfast";
		Scale 2;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 96;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				A_AlertMonsters();
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 4 Bright 
			{
				int dmg = 24;
				int rad = 96;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.5;
					rad *= 1.5;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenade",2,35,1,6,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenade",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EggShotBerserk : EggShot
{
	default
	{
		Tag "-Large Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 140;
		Damage 60;
		DamageType "Breakfast";
		Scale 2;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		Explosiondamage 480;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				A_AlertMonsters();
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 4 Bright 
			{
				int dmg = 120;
				int rad = 96;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.5;
					rad *= 1.5;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenadeBerserk",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenadeBerserk",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenadeBerserk",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack) maxshots = 4;
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggGrenadeBerserk",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EggGrenade : DDProjectile
{
	default
	{
		Tag "Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		Damage 9;
		DamageType "Breakfast";
		Scale 1.5;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 64;
		BounceCount 1;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 5 Bright
			{
				int dmg = 64;
				int rad = 64;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.25;
					rad *= 1.25;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggMini",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggMini",2,35,1,10,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EggGrenadeBerserk : EggGrenade
{
	default
	{
		Tag "-Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 15;
		Damage 23;
		DamageType "Breakfast";
		Scale 1.5;
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 160;
		BounceCount 1;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 5 Bright
			{
				int dmg = 160;
				int rad = 64;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.25;
					rad *= 1.25;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggMiniBerserk",2,35,1,8,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL B 1 Bright 
			{
				double origang = angle;
				int maxshots = 1;
				if (IPAttack)
				{
					maxshots = 4;
					A_SetAngle(angle+45);
				}
				for (int i = 0; i < maxshots; i++)
				{
					A_EggGrenades("EggMiniBerserk",2,35,1,10,6,12);
					if (IPAttack) A_SetAngle(angle+90);
				}
				A_SetAngle(origang);
			}
			EGBL C 4 Bright;
			Stop;
	}
}

class EggMini : DDProjectile
{
	default
	{
		Tag "Small Fractal Egg";
		Radius 3;
		Height 3;
		Speed 10;
		Damage 6;
		DamageType "Breakfast";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 32;
		BounceCount 2;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 5 Bright
			{
				int dmg = 32;
				int rad = 32;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.125;
					rad *= 1.125;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL BC 5 Bright;
			Stop;
	}
}

class EggMiniBerserk : EggMini
{
	default
	{
		Tag "-Small Fractal Egg-";
		Radius 3;
		Height 3;
		Speed 13;
		Damage 9;
		DamageType "Breakfast";
		Projectile;
		-NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG
		RENDERSTYLE "Normal";
		DeathSound "blunderfire";
		ExplosionDamage 48;
		BounceCount 2;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 3 NoDelay
			{
				if (target != PlayerPawn(players[0].mo)) target = PlayerPawn(players[0].mo);
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_CheckHitCeiling();
				bNOGRAVITY = true;
				target = PlayerPawn(players[0].mo);
				if (target && dydudebug_eggfractals) Console.Printf("\c[fire]target [%s]:\c- %s", GetClassName(), target.GetClassName());
			}
			EGBL A 5 Bright
			{
				int dmg = 48;
				int rad = 32;
				bool selfaoe = true;
				if (IPAttack) 
				{
					dmg *= 1.125;
					rad *= 1.125;
					selfaoe = false;
				}
				A_Explode(dmg,rad,selfaoe);
			}
			EGBL BC 5 Bright;
			Stop;
	}
}

class EggAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 2; // 4
		Inventory.MaxAmount 28; // 20
		Ammo.BackpackAmount 2; // 4
		Ammo.BackpackMaxAmount 42;
		Scale 1;
		Inventory.Icon "EGAMI0";
		Inventory.PickupMessage "A fractal chicken egg";
		Inventory.PickupSound "pickup/eggammo";
		+FLOATBOB
	}
	States
	{
		Spawn:
			EGGC ABCB 6;
			Loop;
	}
}

class EggAmmoBig : EggAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 6; // 4
		Inventory.MaxAmount 28; // 20
		Ammo.BackpackAmount 6; // 4
		Ammo.BackpackMaxAmount 42;
		Scale 1;
		Inventory.Icon "EGAMI0";
		Inventory.PickupMessage "A set of fractal chicken eggs";
		Inventory.PickupSound "pickup/eggammo";
		+FLOATBOB
	}
	States
	{
		Spawn:
			EGGC DEFE 6;
			Loop;
	}
}

//*************
//* APPLEJACK *
//*************
class AppleJackSwingShieldPart : SwingShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 6; // out of 32
		Height 12; // out of 32
		Scale 0.375;
	}
	
	states
	{
		Spawn:
			HEXA C 4 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				//A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class AppleJackSwingPartNoReflect : SwingShieldPartNoReflect
{
	default
	{
		Radius 6; // out of 32
		Height 12; // out of 32
		Scale 0.375;
	}
	
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				//A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class AppleJack : DinahWeapon replaces Chaingun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 4;
		Weapon.Kickback 75;
		Weapon.AmmoType2 "JackAmmo";
		Weapon.AmmoGive2 12;
		//Weapon.AmmoUse2 1;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "AJAKP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "\c[gold]Nice, I found an Apple Jack! Not as defense based as the Cricket Bat, but nice for offense!\c- \cx[Slot 4]\c-";
		inventory.PickupSound "misc/w_pkup";
		Tag "Apple Jack: Normal attack is a melee swing that hit twice. Alt attack is a ranged toss of an aggro-apple that can usually block incoming projectiles. Swings can also affect enemy projectiles.";
		Obituary "%k kept the doctor away from %o.";
	}
	
	action void A_AppleMeleeAtk()
	{
		int dmg = (random(6,8) * random(1,8));
		if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;
		if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);
		int atkrange = 96;
		if (invoker.IPAttackCheck) dmg *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.75);

		string pufftype = "ApplePuff";
		double shotangle = 0;
		double shotangleend = 0;
		double shotangleinc = 0;
		double origangle = angle;
		int maxshots = 1;
		if (invoker.IPAttackCheck) // >.> <.<
		{
			pufftype = "ApplePuffIP";
			if (random(1,32) <= 1)
			{
				shotangle = -33.75;
				shotangleend = 33.75;
				shotangleinc = 11.25;
				maxshots = 7;
				atkrange *= 1.5;
			}
			else
			{
				shotangle = -22.5;
				shotangleend = 22.5;
				shotangleinc = 11.25;
				maxshots = 5;
				atkrange *= 1.334;
			}
		}
		if (invoker.IPAttackCheck) A_SetAngle(angle+shotangle);

		for (int i = 0; i < maxshots; i++)
		{
			if (i && invoker.IPAttackCheck) A_SetAngle(angle+shotangleinc);
			A_CustomPunch(dmg, true, 0, pufftype, atkrange, IPCostOnHit: true);
			if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
			{
				A_AppleJackSwingShield(1);
			}
			else
			{
				A_AppleJackSwingShield(0);
			}
		}
		if (invoker.IPAttackCheck) A_SetAngle(origangle);
	}
	
	action void A_AppleJackSwingShield(int type = 0, double dist = 96.0)
	{
		string vispart = "AppleJackSwingPartNoReflect";
		if (random(1,32) <= 5) vispart = "AppleJackSwingShieldPart";

		double yoffset = frandompick(-0.1625,0,0.1625);

		double distx, disty, distz;
		double heightmulti = 0.5;
		double heightmultivari = 0.0625;
		double yseperation = -3.467;
		double sa = sin(angle);
		double ca = cos(angle);
		//Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		//Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = dist;

		if (type == 1) m *= 1.2;
		int m2 = m;

		if ((random (1,64) <= 63) || (type == 1 && (random(1,256) <= 255)))
		{
			distx = (m * frandom(0.95,1.05));
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = (m * frandom(0.90,0.95));
			disty = (yseperation * 2);
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = yseperation;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty *= -1;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
	
			if ((random (1,16) <= 11) || (type == 1 && (random(1,32) <= 28)))
			{
				m = (m2 * 0.667);
	
				distx = (m * frandom(0.95,1.05));
				disty = 0.0;
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				distx = (m * frandom(0.90,0.95));
				disty = (yseperation * 2);
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty = yseperation;
				distz = (height * (heightmulti - heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * (heightmulti - heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty = yseperation;
				distz = (height * (heightmulti + heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * (heightmulti + heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			}
	
	
			if ((random (1,16) <= 8) || (type == 1 && (random(1,16) <= 11)))
			{
				m = (m2 * 0.334);
	
				distx = (m * frandom(0.95,1.05));
				disty = 0.0;
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				distx = (m * frandom(0.90,0.95));
				disty = (yseperation * 2);
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * heightmulti) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty = yseperation;
				distz = (height * (heightmulti - heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * (heightmulti - heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty = yseperation;
				distz = (height * (heightmulti + heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				disty *= -1;
				distz = (height * (heightmulti + heightmultivari)) + yoffset;
				A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			}
	
			let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
			if (MiscItem) MiscItem.CricketBatSwingBuffTimer = randompick(3,3,3,3,3,3,4,4,4);
		}
	}
	
	States
	{
		Spawn:
			AJAK P -1;
			stop;
		Ready:
			AJAK A 1
			{
				A_WeaponReady();
			}
			loop;
		Deselect:
			AJAK A 1
			{
				A_Lower(12);
			}
			loop;
		Select: 
			AJAK A 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			AJAK B 2
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(131,0,9,20,false);

				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("MalletSwing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("MalletSwing",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
				}
			}
			AJAK C 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
				}
			}
			AJAK D 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
				}
				A_AppleMeleeAtk();
			}
			AJAK E 2
			{
				if (invoker.IPAttackCheck && random(1,8) <= 1) A_AppleMeleeAtk();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(0);
																else A_SetTics(1);
				}
				else
				{
					A_SetTics(1);
				}
			}
			AJAK F 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(1);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
				}
				A_AppleMeleeAtk();
				invoker.A_CheckIPModeOnUse();
			}
			AJAK G 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
				}
			}
			TNT1 A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
				}
				else
				{
					A_SetTics(random(1,2));
				}
			}
			AJAK B 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
				}
				else
				{
					A_SetTics(random(1,2));
				}
			}
			AJAK A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
																else A_SetTics(random(1,2));
				}
				else
				{
					A_SetTics(random(1,2));
				}
			}
			goto Ready;
		AltFire:
			AJAF C 0
			{
				if (!CountInv("JackAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			AJAF C 2
			{
				A_CheckIPState1();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
				
				A_ConfirmIPAttack(132,0,4,9);
			}
			AJAF DE 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			AJAF F 2 
			{
				int spreadtime = 6;
				double spreadspeed = 2.0;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(1); 
				}
				if (random(1,32) <= 31) { A_AlertMonsters(); }

				int maxshots = 1;
				actor BombShots;
				DDProjectile IPCompat;
				if (invoker.IPAttackCheck) 
				{
					if (random(1,32) <= 1) maxshots = 13;
														else maxshots = 5;
				}
				for (int i = 0; i < maxshots; i++)
				{
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
					{
						BombShots = A_FireProjectile("JackShotBerserk",0,1,0,0);
						spreadtime = 3;
						spreadspeed = 4.0;
					}
					else
					{
						BombShots = A_FireProjectile("JackShot",0,1,0,0);
						spreadtime = 6;
						spreadspeed = 2.0;
					}
					if (BombShots && invoker.IPAttackCheck)
					{
						IPCompat = DDProjectile(BombShots);
						if (IPCompat)
						{
							IPCompat.ipprojid = i;
							IPCompat.IPattack = true;
							IPCompat.Speed *= 0.667;
							IPCompat.basespreadspeed = spreadspeed;
							if (i == 1) IPCompat.zspreadtime = spreadtime;
							if (i == 2) IPCompat.zspreadtime = -spreadtime;
							if (i == 3) IPCompat.xyspreadtime = spreadtime;
							if (i == 4) IPCompat.xyspreadtime = -spreadtime;
							if (i == 5)
							{
								 IPCompat.zspreadtime = spreadtime;
								 IPCompat.xyspreadtime = spreadtime;
							}
							if (i == 6)
							{
								 IPCompat.zspreadtime = -spreadtime;
								 IPCompat.xyspreadtime = spreadtime;
							}
							if (i == 7)
							{
								 IPCompat.zspreadtime = spreadtime;
								 IPCompat.xyspreadtime = -spreadtime;
							}
							if (i == 8)
							{
								 IPCompat.zspreadtime = -spreadtime;
								 IPCompat.xyspreadtime = -spreadtime;
							}
							if (i == 9) IPCompat.zspreadtime = (spreadtime*2);
							if (i == 10) IPCompat.zspreadtime = (-spreadtime*2);
							if (i == 11) IPCompat.xyspreadtime = (spreadtime*2);
							if (i == 12) IPCompat.xyspreadtime = (-spreadtime*2);
							if (i == 13)
							{
								 IPCompat.zspreadtime = (spreadtime*2);
								 IPCompat.xyspreadtime = (spreadtime*2);
							}
							if (i == 14)
							{
								 IPCompat.zspreadtime = (spreadtime);
								 IPCompat.xyspreadtime = (spreadtime*2);
							}
							if (i == 15)
							{
								 IPCompat.zspreadtime = (-spreadtime);
								 IPCompat.xyspreadtime = (spreadtime*2);
							}
							if (i == 16)
							{
								 IPCompat.zspreadtime = (-spreadtime*2);
								 IPCompat.xyspreadtime = (spreadtime*2);
							}
							if (i == 17)
							{
								 IPCompat.zspreadtime = (spreadtime*2);
								 IPCompat.xyspreadtime = (spreadtime);
							}
							if (i == 18)
							{
								 IPCompat.zspreadtime = (spreadtime);
								 IPCompat.xyspreadtime = (spreadtime);
							}
							if (i == 19)
							{
								 IPCompat.zspreadtime = (-spreadtime);
								 IPCompat.xyspreadtime = (spreadtime);
							}
							if (i == 20)
							{
								 IPCompat.zspreadtime = (-spreadtime*2);
								 IPCompat.xyspreadtime = (spreadtime);
							}
							if (i == 21)
							{
								 IPCompat.zspreadtime = (spreadtime*2);
								 IPCompat.xyspreadtime = (-spreadtime);
							}
							if (i == 22)
							{
								 IPCompat.zspreadtime = (spreadtime);
								 IPCompat.xyspreadtime = (-spreadtime);
							}
							if (i == 23)
							{
								 IPCompat.zspreadtime = (-spreadtime);
								 IPCompat.xyspreadtime = (-spreadtime);
							}
							if (i == 24)
							{
								 IPCompat.zspreadtime = (-spreadtime*2);
								 IPCompat.xyspreadtime = (-spreadtime);
							}
							if (i == 25)
							{
								 IPCompat.zspreadtime = (spreadtime*2);
								 IPCompat.xyspreadtime = (-spreadtime*2);
							}
							if (i == 26)
							{
								 IPCompat.zspreadtime = (spreadtime);
								 IPCompat.xyspreadtime = (-spreadtime*2);
							}
							if (i == 27)
							{
								 IPCompat.zspreadtime = (-spreadtime);
								 IPCompat.xyspreadtime = (-spreadtime*2);
							}
							if (i == 28)
							{
								 IPCompat.zspreadtime = (-spreadtime*2);
								 IPCompat.xyspreadtime = (-spreadtime*2);
							}
						}
					}
				}
				invoker.A_CheckIPModeOnUse();
				A_TakeInventory("JackAmmo",1);
			}
			AJAF GHI 2 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			TNT1 A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(random(1,2)); }
			}
			AJAK BA 2
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(1); }
			}
			goto Ready;
	}
}

class ApplePuff : DDPuff
{
	default
	{
		Tag "AppleJack Bash";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 7;
		if (IPAttack) basechance = randompick(4,5,5);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}

	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class ApplePuffIP : ApplePuff
{
	default
	{
		Tag "AppleJack Bash";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = randompick(4,5,5);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true;
	}

	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			BASH DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
}

class JackShotShieldPart : ShieldPartNoReflect
{
	default
	{
		Radius 9;
		Height 9;
		Scale 1.5;
		RenderStyle "Add"; // Add
		Alpha 0.375; // 0.003125
	}

	States
	{
		Spawn:
			ABAL A 0 NoDelay;
		Idle:
			ABAL AA 1
			{
				A_SetTics(randompick(1,1,2));
				A_FadeOut(0.125);
				A_SetScale(scale.x*0.5,scale.y*0.5);
			}
			Stop;
	}
}

class JackShotShieldPartFoe : ShieldPartNoReflect
{
	default
	{
		Radius 9;
		Height 9;
		Scale 1.5;
		RenderStyle "Add"; // Add
		Alpha 0.375; // 0.003125
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (dydudebug_shieldcollision) Console.Printf("\cyJackShotShieldPartFoe [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (BadJackShot(other)) return false;
			if (dydudebug_shieldcollision) Console.Printf("\cyJackShotShieldPartFoe (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dydudebug_shieldcollision) Console.Printf("\cyJackShotShieldPartFoe (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			ABAL A 0 NoDelay;
		Idle:
			ABAL AA 1
			{
				A_SetTics(randompick(1,1,2));
				A_FadeOut(0.125);
				A_SetScale(scale.x*0.5,scale.y*0.5);
			}
			Stop;
	}
}

class JackShotShieldPartBerserk : ShieldPartNoReflect
{
	default
	{
		Radius 12;
		Height 12;
		Scale 2;
		RenderStyle "Add"; // Add
		Alpha 0.4375; // 0.003125
	}

	States
	{
		Spawn:
			ABAL A 0 NoDelay;
		Idle:
			ABAL AAA 1
			{
				A_SetTics(randompick(1,1,2));
				A_FadeOut(0.109375);
				A_SetScale(scale.x*0.67,scale.y*0.67);
			}
			Stop;
	}
}

class JackShot : DDProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 50;
		Damage 20;
		DamageType "Bonk";
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
	}
	
	void A_JackShotShieldSetup(actor BombShots, double scaling = 0.0125)
	{
		actor player = players[0].mo;
		if (BombShots)
		{
			int oldrad = BombShots.radius;
			int oldhei = BombShots.height;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			double scalebase = 1.0;
			if (MiscItem) scalebase = 1.0 + (MiscItem.PlayerLevel * scaling);
			BombShots.A_SetSize((BombShots.radius * scalebase),(BombShots.height * scalebase));
			//Console.Printf("rad: %d [%d], hei: %d [%d]", BombShots.radius, oldrad, BombShots.height, oldhei);
		}
	}
	
	void A_JackShotIPPattern()
	{
		double ca = cos((angle-90)); // X
		double sa = sin((angle-90)); // Y

		double basemove = basespreadspeed;
		if (IPAttack)
		{
			if (zspreadtime != 0)
			{
				if (zspreadtime > 0) // Goes Up
				{
					zspreadtime -= 1;
					AddZ(basemove,true);
				}
				else
				if (zspreadtime < 0) // Goes Down
				{
					zspreadtime += 1; 
					AddZ(-basemove,true);
				}
			}
			Vector2 dpos = (pos.x, pos.y);
			if (xyspreadtime != 0)
			{
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[sapphire](pre) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[sapphire](pre) projid: %d\c-, xpos: %.8f, ypos: %.8f [tic: %d]", ipprojid, pos.x, pos.y, pos.z, gametic);
				}
				if (xyspreadtime > 0) // Goes Left
				{ 
					xyspreadtime -= 1;
					dpos = ((pos.x + (basemove * ca)), (pos.y + (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				else
				if (xyspreadtime < 0) // Goes Right
				{
					xyspreadtime += 1;
					dpos = ((pos.x - (basemove * ca)), (pos.y - (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[fire](post) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[fire](post) projid: %d\c-, xpos: %.8f, ypos: %.8f, zpos: %.8f, xyspreadtime: %d [tic: %d]", ipprojid, dpos.x, dpos.y, pos.z, xyspreadtime, gametic);
				}
			}
		}
	}
	
	States
	{
		Spawn:
			ABAL A 0 NoDelay;
		Idle:
			ABAL AABB 1
			{
				A_JackShotIPPattern();
				
				actor BombShots;
				bool success;
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0125);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0125);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0125);
				if (IPAttack)
				{
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",1.5,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",1.5,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",1.5,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",1.5,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",-1.5,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",-1.5,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",-1.5,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",-1.5,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
				}
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class JackShotBerserk : JackShot
{
	default
	{
		Tag "-Aggro-Apple-";
		Speed 75;
		Damage 100;
	}
	
	States
	{
		Spawn:
			ABAL AABB 1 NoDelay
			{
				A_JackShotIPPattern();
				
				actor BombShots;
				bool success;
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0325);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0325);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetup(BombShots,0.0325);
				if (IPAttack)
				{
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPart",0,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0125);
					
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",1.5,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",1.5,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",1.5,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",1.5,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",-1.5,4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",-1.5,-4.5,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",-1.5,0,4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
					[success, BombShots] = A_SpawnItemEx("JackShotShieldPartBerserk",-1.5,0,-4.5,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
					if (success) A_JackShotShieldSetup(BombShots,0.0325);
				}
			}
			Loop;
		Death:
			BASH A 0
			{
				A_Explode(64,64,0);
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class BadJackShot : DDProjectile
{
	default
	{
		Tag "Aggro-Apple";
		Radius 6;
		Height 6;
		Speed 20; // 50
		Damage 3; // 20
		DamageType "Bonk";
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";
		SeeSound "axe/throw";
		DeathSound "axe/hit";
	}
	
	void A_JackShotIPPattern()
	{
		double ca = cos((angle-90)); // X
		double sa = sin((angle-90)); // Y

		double basemove = basespreadspeed;
		if (IPAttack)
		{
			if (zspreadtime != 0)
			{
				if (zspreadtime > 0) // Goes Up
				{
					zspreadtime -= 1;
					AddZ(basemove,true);
				}
				else
				if (zspreadtime < 0) // Goes Down
				{
					zspreadtime += 1; 
					AddZ(-basemove,true);
				}
			}
			Vector2 dpos = (pos.x, pos.y);
			if (xyspreadtime != 0)
			{
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[sapphire](pre) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[sapphire](pre) projid: %d\c-, xpos: %.8f, ypos: %.8f [tic: %d]", ipprojid, pos.x, pos.y, pos.z, gametic);
				}
				if (xyspreadtime > 0) // Goes Left
				{ 
					xyspreadtime -= 1;
					dpos = ((pos.x + (basemove * ca)), (pos.y + (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				else
				if (xyspreadtime < 0) // Goes Right
				{
					xyspreadtime += 1;
					dpos = ((pos.x - (basemove * ca)), (pos.y - (basemove * sa)));
					TryMove(dpos,true,null); //SetOrigin(dpos,true);
				}
				if (dydudebug_weaponhorizspread)
				{
					Console.Printf("\c[fire](post) projid: %d\c-, XVel: %.8f, YVel: %.8f, ZVel: %.8f", ipprojid, vel.x, vel.y, vel.z);
					Console.Printf("\c[fire](post) projid: %d\c-, xpos: %.8f, ypos: %.8f, zpos: %.8f, xyspreadtime: %d [tic: %d]", ipprojid, dpos.x, dpos.y, pos.z, xyspreadtime, gametic);
				}
			}
		}
	}

	void A_JackShotShieldSetupEnemy(actor BombShots, double scaling = 0.0125)
	{
		if (BombShots)
		{
			int oldrad = BombShots.radius;
			int oldhei = BombShots.height;
			double scalebase = 1.0;
			BombShots.A_SetSize((BombShots.radius * scalebase),(BombShots.height * scalebase));
			//Console.Printf("rad: %d [%d], hei: %d [%d]", BombShots.radius, oldrad, BombShots.height, oldhei);
		}
	}

	States
	{
		Spawn:
			ABAL AABB 1
			{
				A_JackShotIPPattern();
				
				actor BombShots;
				bool success;
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",0,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
				[success, BombShots] = A_SpawnItemEx("JackShotShieldPartFoe",-1.5,0,0,0.0,0.0,0.0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
				if (success) A_JackShotShieldSetupEnemy(BombShots,0.0125);
			}
			Loop;
		Death:
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}

class JackAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 64; // 48
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 96;
		Inventory.Icon "AJAMI0";
		Inventory.PickupMessage "An aggro-apple!";
		Inventory.PickupSound "pickup/jackammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			AJAM A -1;
			Loop;
	}
}

class JackAmmoBig : JackAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 64; // 48
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 96;
		Inventory.Icon "AJAMI0";
		Inventory.PickupMessage "An set of aggro-apples!";
		Inventory.PickupSound "pickup/jackammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			AJAM B -1;
			Loop;
	}
}

//***************
//* WIZARD PIKE *
//***************
class WizardPike : DinahWeapon replaces RocketLauncher
{
	int IPATKAmmoAmt;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 400;
		Weapon.SlotNumber 5;
		Weapon.Kickback 25;
		Weapon.AmmoType2 "PikeAmmo";
		Weapon.AmmoGive2 2;
		//Weapon.AmmoUse2 0;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "SCPPA0";
		Inventory.PickupMessage "\c[gold]The mighty Wizard's Pike... I never cared for learning magic spells, but this thing is a fine substitute!\c- \cx[Slot 5]\c-";
		inventory.PickupSound "misc/w_pkup";
		Tag "Pike: Normal attack is a quick melee jab. Alt attack launches a wave of magical shots.";
		Obituary "%k fed %o to a hungry pike.";
	}
	
	action void A_PikeShotIPSetup(actor BombShots)
	{
		if (BombShots && invoker.IPAttackCheck)
		{
			DDProjectile IPCompat; 
			IPCompat = DDProjectile(BombShots);
			if (IPCompat)
			{
				IPCompat.IPattack = true;
			}
		}
	}
	
	States
	{
		Spawn:
			SCPP ABCDEFGH 6 Bright;
			loop;
		Ready:
			SCEP A 1
			{
				A_WeaponReady();
			}
			loop;
		Deselect:
			SCEP A 1
			{
				A_Lower(12);
			}
			loop;
		Select: 
			SCEP A 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			SCEP E 1 bright 
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(141,0,2,12,false);

				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("Malletswing",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Malletswing",7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Malletswing",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
			}
			SCEP F 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(0); 
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(0);
				}
			}
			SCEP G 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,8) <= 1) A_SetTics(0);
				}
				else
				{
					if (invoker.IPAttackCheck && random(1,8) <= 1) A_SetTics(0);
				}
			}
			SCEP H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					A_SetTics(0); 
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(0);
				}
			}
			SCEP I 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (random(1,4) <= 1) A_SetTics(0); 
				}
				else
				{
					if (invoker.IPAttackCheck && random(1,4) <= 1) A_SetTics(0);
				}
			}
			SCEP J 5
			{
				string pufftype = "PikePuff";
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				int dmg = (random(6,8) * random(1,8));
				int range = 96;
				if (invoker.IPAttackCheck) 
				{
					pufftype = "PikePuffIP";
					dmg *= (randompick(1,1,2) * 4);
					range *= frandompick(1,1,1.25);
				}
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= 10;
				if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);
				if (invoker.IPAttackCheck) A_CustomPunch(dmg, true, 0, pufftype, range, giveammotype: "PikeAmmo", giveammoamt: 2, IPCostOnHit: true);
															else A_CustomPunch(dmg, true, 0, pufftype, range, IPCostOnHit: true);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,1,1,1,2,2)); 
																else A_SetTics(random(2,3));
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(2,2,3,3,3,4,4));
				}
			}
			SCEP I 1
			{
				if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,1,2,2,2,3));
			}
			SCEP H 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(0,0,0,1,1,1,2));
					else A_SetTics(0); 
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,1,2,2,2,3));
				}
			}
			SCEP G 1
			{
				if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,1,2,2,2,3));
			}
			SCEP F 1 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(0);
																else A_SetTics(randompick(0,0,0,1,1,1,2)); 
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(1,1,1,2,2,2,3));
				}
			}
			goto Ready;
		AltFire:
			SCEP A 0
			{
				if (!CountInv("PikeAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			SCEP A 2 bright 
			{
				invoker.IPATKAmmoAmt = 3;
				if (dydudebug_infiniteip) invoker.IPATKAmmoAmt = 1;
				A_CheckIPState1();
				A_ConfirmIPAttackExtra(142,0,5,7,"PikeAmmo",invoker.IPATKAmmoAmt);

				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("Handmother/Zap",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Handmother/Zap",7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Handmother/Zap",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 31) { A_AlertMonsters(); }
			}
			SCEP B 1 bright 
			{
				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "ZapShot";
				if (invoker.IPAttackCheck) atkname = "ZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,0,0);
				A_PikeShotIPSetup(BombShots);
			}
			SCEP A 1 bright
			{
				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "ZapShot";
				if (invoker.IPAttackCheck) atkname = "ZapShotIP";
				if (invoker.IPAttackCheck)
				{
					BombShots = A_FireProjectile(atkname,0,0,0,0);
					A_PikeShotIPSetup(BombShots);
				}
			}
			SCEP B 1
			{
				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "MiniZapShot";
				if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,48,0);
				A_PikeShotIPSetup(BombShots);
				BombShots = A_FireProjectile(atkname,0,0,-48,0);
				A_PikeShotIPSetup(BombShots);
				if (invoker.IPAttackCheck)
				{
					BombShots = A_FireProjectile(atkname,0,0,0,40);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,0,-40);
					A_PikeShotIPSetup(BombShots);
				}
			}
			SCEP C 1 bright
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Handmother/Zap",14,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Handmother/Zap",15,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("Handmother/Zap",16,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					if (random(1,32) <= 31) { A_AlertMonsters(); }
				}

				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "MiniZapShot";
				if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,48,0);
				A_PikeShotIPSetup(BombShots);
				BombShots = A_FireProjectile(atkname,0,0,-48,0);
				A_PikeShotIPSetup(BombShots);
				if (invoker.IPAttackCheck)
				{
					BombShots = A_FireProjectile(atkname,0,0,0,40);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,0,-40);
					A_PikeShotIPSetup(BombShots);
				}
			}
			SCEP B 1 bright 
			{
				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "ZapShot";
				if (invoker.IPAttackCheck) atkname = "ZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,0,0);
				A_PikeShotIPSetup(BombShots);
			}
			SCEP C 1 bright
			{
				actor BombShots;
				DDProjectile IPCompat;
				if (invoker.IPAttackCheck)
				{
					string atkname = "ZapShot";
					if (invoker.IPAttackCheck) atkname = "ZapShotIP";
					BombShots = A_FireProjectile(atkname,0,0,0,0);
					A_PikeShotIPSetup(BombShots);

					atkname = "MiniZapShot";
					if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
					BombShots = A_FireProjectile(atkname,0,0,48,0);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,-48,0);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,0,40);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,0,-40);
					A_PikeShotIPSetup(BombShots);
				}
			}
			SCEP C 0
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_Recoil(frandom(0.64,0.96)); } else { A_Recoil(frandom(3.2,4.8)); }
				actor BombShots;

				DDProjectile IPCompat;
				string atkname = "MiniZapShot";
				if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,48,0);
				A_PikeShotIPSetup(BombShots);
				BombShots = A_FireProjectile(atkname,0,0,-48,0);
				A_PikeShotIPSetup(BombShots);
				if (invoker.IPAttackCheck)
				{
					BombShots = A_FireProjectile(atkname,0,0,0,40);
					A_PikeShotIPSetup(BombShots);
					BombShots = A_FireProjectile(atkname,0,0,0,-40);
					A_PikeShotIPSetup(BombShots);
				}
			}
			SCEP D 6 bright
			{
				actor BombShots;
				DDProjectile IPCompat;
				
				string atkname = "MiniZapShot";
				if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,48,0);
				A_PikeShotIPSetup(BombShots);
				BombShots = A_FireProjectile(atkname,0,0,-48,0);
				A_PikeShotIPSetup(BombShots);
				BombShots = A_FireProjectile(atkname,0,0,0,40);
				A_PikeShotIPSetup(BombShots);
				if (invoker.IPAttackCheck)
				{
					BombShots = A_FireProjectile(atkname,0,0,0,-40);
					A_PikeShotIPSetup(BombShots);
				}
				atkname = "ZapShot";
				if (invoker.IPAttackCheck) atkname = "ZapShotIP";
				BombShots = A_FireProjectile(atkname,0,0,0,0);
				A_PikeShotIPSetup(BombShots);
				
				if (invoker.IPAttackCheck) A_TakeInventory("PikeAmmo",invoker.IPATKAmmoAmt);
															else A_TakeInventory("PikeAmmo",1);
			}
			SCEP CBA 2 bright
			{
				actor BombShots;
				DDProjectile IPCompat;
				string atkname = "MiniZapShot";
				if (invoker.IPAttackCheck) atkname = "MiniZapShotIP";
				if (invoker.IPAttackCheck)
				{
					if (random(1,64) <= 3)
					{
						BombShots = A_FireProjectile(atkname,0,0,48,0);
						A_PikeShotIPSetup(BombShots);
					}
					if (random(1,64) <= 3)
					{
						BombShots = A_FireProjectile(atkname,0,0,-48,0);
						A_PikeShotIPSetup(BombShots);
					}
					if (random(1,64) <= 3)
					{
						BombShots = A_FireProjectile(atkname,0,0,0,40);
						A_PikeShotIPSetup(BombShots);
					}
					if (random(1,64) <= 3)
					{
						BombShots = A_FireProjectile(atkname,0,0,0,-40);
						A_PikeShotIPSetup(BombShots);
					}
					if (random(1,64) <= 3)
					{
						BombShots = A_FireProjectile(atkname,0,0,0,0);
						A_PikeShotIPSetup(BombShots);
					}
				}
				invoker.A_CheckIPModeOnUse();
			}
			goto Ready;
	}
}

class Pike_Flipped : CustomInventoryExt
{
	default
	{
		//$Category RPPropsFlipped
		Height 20;
		Radius 20;
		Tag "Pike (Flipped)";
		+FLOATBOB
		+NOGRAVITY
		Inventory.PickupMessage "Pike";
		inventory.PickupSound "misc/w_pkup";
	}
	
	States
	{
		Spawn:
			SCPP ZYXWVUTS 6 Bright;
			Loop;
		Pickup:
			TNT1 A 1 A_GiveInventory("WizardPike");
			Stop;
	}
}

class PikePuff : DDPuff
{
	default
	{
		Tag "Pike Poke";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 4;
		if (IPAttack) basechance = randompick(2,2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 3) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright;
			BASH DE 3 bright;
			Stop;
	}
}  

class PikePuffIP : PikePuff
{
	default
	{
		Tag "Pike Poke";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+FORCERADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 1;
		DamageType "Bonk";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 4;
		if (IPAttack) basechance = randompick(2,2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 3) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			BASH ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			BASH DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
}  

class PikeTracer : DDPuff
{
	default
	{
		Tag "Pike Blast";
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+NOGRAVITY
		+PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.8;
		DamageType "zap";
	}
	
	States
	{
		Spawn:
			ZBUX A 4 Bright A_Explode;
			ZBUX BCD 4 Bright;
			Stop;
	}
}  

class ZapShot : DDFastProjectile
{
	int selfaoe;
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 1;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		finaldamagedealt = (12 * random(1,8));
		if (IPAttack) 
		{
			finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
		}

		if (dydudebug_rangedmg) Console.Printf("damage: %d", finaldamagedealt);
		Super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 4 Bright 
			{
				int noselfaoecnc = 8;
				int minfullrad = 32;
				int baseaoedmg = 128;
				int baseaoeradius = 128;
				let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					noselfaoecnc = 8 + (MiscItem.PlayerLevel * 0.6667);
					minfullrad = 32 + (MiscItem.PlayerLevel * 1.3334);
					if (IPAttack) minfullrad *= 4;
				}
				if (dydudebug_attackstuff) Console.Printf("\c[green]ZapShot: noselfaoecnc: %d, minfullrad: %d", noselfaoecnc, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);

				if (IPAttack) 
				{
					A_SetTics(3);
				}
			}
			ZBUX BC 4 Bright
			{
				if (IPAttack) A_SetTics(3);
			}
			ZBUX D 4 Bright
			{
				if (IPAttack)
				{
					A_SetTics(3);
					if (random(1,32) <= 3) A_BFGSpray("PikeExtra",40,0,90,2048,32,randompick(15,20,25));
				}
			}
			stop;
	}
}

class ZapShotIP : ZapShot
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		selfaoe = 0;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, selfaoe: %d", GetClassName(), IPAttack, selfaoe);
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 2 Bright;
			loop;
		Death:
			ZBUX A 3 Bright 
			{
				int noselfaoecnc = 8;
				int minfullrad = 32;
				int baseaoedmg = 128;
				int baseaoeradius = 128;
				let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					noselfaoecnc = 8 + (MiscItem.PlayerLevel * 0.6667);
					minfullrad = 32 + (MiscItem.PlayerLevel * 1.3334);
					minfullrad *= 4;
				}
				if (dydudebug_attackstuff) Console.Printf("\c[green]ZapShot: noselfaoecnc: %d, minfullrad: %d", noselfaoecnc, minfullrad);
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				selfaoe = 0;
				noselfaoecnc = 512;
				baseaoedmg *= 2;
				baseaoeradius *= 3;
				A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);
			}
			ZBUX BC 3 Bright
			{
			}
			ZBUX D 3 Bright
			{
				if (random(1,32) <= 3) A_BFGSpray("PikeExtra",40,0,90,2048,32,randompick(15,20,25));
			}
			stop;
	}
}

class MiniZapShot : ZapShot
{
	default
	{
		Tag "Mini Pike Blast";
		Radius 3;
		Height 3;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		finaldamagedealt = (8 * random(1,8));
		if (IPAttack) 
		{
			finaldamagedealt *= frandompick(1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.5,1.5,1.5);
		}

		if (dydudebug_rangedmg) Console.Printf("damage: %d", finaldamagedealt);
		Super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			loop;
		Death:
			ZBUX A 3 Bright
			{
				int noselfaoecnc = 8;
				int aoechance = 8;
				int minfullrad = 8;
				int baseaoedmg = 32;
				int baseaoeradius = 32;
				if (target)
				{
					let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
					if (MiscItem)
					{
						noselfaoecnc = 8 + (MiscItem.PlayerLevel * 0.6667);
						aoechance = 8 + (MiscItem.PlayerLevel * 0.1667);
						minfullrad = 8 + (MiscItem.PlayerLevel * 0.3334);
						if (IPAttack) minfullrad *= 4;
					}
				}
				if (dydudebug_attackstuff) Console.Printf("\c[green]MiniZapShot: noselfaoecnc: %d, aoechance: %d, minfullrad: %d", noselfaoecnc, aoechance, minfullrad);
				selfaoe = 1;
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				if (IPAttack) 
				{
					selfaoe = 0;
					noselfaoecnc = 512;
					aoechance = 512;
					baseaoedmg *= 2;
					baseaoeradius *= 3;
				}
				if (random(1,256) <= aoechance || IPAttack) 
				{
					if (dydudebug_attackstuff) Console.Printf("\c[sapphire]MiniZapShot: AOE");
					A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);
				}

				if (IPAttack) A_SetTics(2);
			}
			ZBUX BC 3 Bright
			{
				if (IPAttack) A_SetTics(2);
			}
			ZBUX D 3 Bright
			{
				if (IPAttack) 
				{
					A_SetTics(2);
					if (random(1,32) <= 3) A_BFGSpray("MiniPikeExtra",26,0,90,1536,32,randompick(8,12,16));
				}
			}
			stop;
	}
}

class MiniZapShotIP : MiniZapShot
{
	override void PostBeginPlay()
	{
		IPAttack = true;
		selfaoe = 0;
		if (dydudebug_attackfuncinfo) Console.Printf("[%s] IPAttack: %d, selfaoe: %d", GetClassName(), IPAttack, selfaoe);
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 2 Bright;
			loop;
		Death:
			ZBUX A 2 Bright
			{
				int noselfaoecnc = 8;
				int aoechance = 8;
				int minfullrad = 8;
				int baseaoedmg = 32;
				int baseaoeradius = 32;
				if (target)
				{
					let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
					if (MiscItem)
					{
						noselfaoecnc = 8 + (MiscItem.PlayerLevel * 0.6667);
						aoechance = 8 + (MiscItem.PlayerLevel * 0.1667);
						minfullrad = 8 + (MiscItem.PlayerLevel * 0.3334);
						minfullrad *= 4;
					}
				}
				if (dydudebug_attackstuff) Console.Printf("\c[green]MiniZapShot: noselfaoecnc: %d, aoechance: %d, minfullrad: %d", noselfaoecnc, aoechance, minfullrad);
				if (random(1,256) <= noselfaoecnc) selfaoe = 0;
				selfaoe = 0;
				noselfaoecnc = 512;
				aoechance = 512;
				baseaoedmg *= 2;
				baseaoeradius *= 3;
				A_Explode(baseaoedmg,baseaoeradius,selfaoe,true,minfullrad);
			}
			ZBUX BC 2 Bright;
			ZBUX D 2 Bright
			{
				if (random(1,32) <= 3) A_BFGSpray("MiniPikeExtra",26,0,90,1536,32,randompick(8,12,16));
			}
			stop;
	}
}

class PikeExtra : DDPuff
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		+PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Add";
		Alpha 0.75;
		DamageType "Zap";
	}
	States
	{
		Spawn:
			ZBUX DCBA 4 Bright
			{
				A_Explode(8,64,false,true,64);
			}
			Stop;
	}
}

class MiniPikeExtra : PikeExtra
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.375;
		DamageType "Zap";
	}
	States
	{
		Spawn:
			ZBUX DCBA 4 Bright
			{
				A_Explode(4,32,false,true,32);
			}
			Stop;
	}
}

class BadZapShot : DDProjectile
{
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 20;
		Damage 5;
		Scale 0.75;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 4 Bright
			{
				A_Explode(25,25,0,true,6);
			}
			ZBUX BCD 4 Bright;
			stop;
	}
}

class BadZapShot2 : BadZapShot
{
	default
	{
		Tag "Pike Blast";
		Radius 3;
		Height 3;
		Speed 60;
		Damage 9;
		Scale 1;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		deathsound "croquet/ballhit";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			ZBUL ABCD 3 Bright;
			loop;
		Death:
			ZBUX A 4 Bright
			{
				A_Explode(128,128,0,true,32);
			}
			ZBUX BCD 4 Bright;
			stop;
	}
}

class Lightningbolt : DDProjectile
{
	default
	{
		Height 32;
		Radius 20;
		Scale 2;
		Seesound "zappo";
	}
	
	States
	{
		Spawn:
			LITN ABAB 5 bright;
			LITN A 0 A_Die;
			Goto Death;
		Death:
			LITN CDE 5 bright A_Explode();
			LITN F 5 bright;
			Stop;
	}
}

class BarrierBeam : DDProjectile 
{
	default
	{
		Tag "Pike Blast";
		Height 16;
		Radius 20;
		Speed 80;
		DamageFunction (finaldamagedealt);
		Scale 1;
		DamageType "Zap";
		Projectile;
		RENDERSTYLE "Normal";
		Seesound "";
		Deathsound "";
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
}

class PikeAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 1; // 2
		Inventory.MaxAmount 12; // 10
		Ammo.BackpackAmount 1; // 2
		Ammo.BackpackMaxAmount 18;
		Scale 1;
		Inventory.Icon "SCPAI0";
		Inventory.PickupMessage "A pint of devil's food";
		Inventory.PickupSound "pickup/pikeammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			SCPA ABC 6 Bright;
			Loop;
	}
}

class PikeAmmoBig : PikeAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 2
		Inventory.MaxAmount 12; // 10
		Ammo.BackpackAmount 3; // 2
		Ammo.BackpackMaxAmount 18;
		Scale 1;
		Inventory.Icon "SCPAI0";
		Inventory.PickupMessage "Many pints of devil's food";
		Inventory.PickupSound "pickup/pikeammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			SCPA DEF 6 Bright;
			Loop;
	}
}

//************
//* SUPERVAC *
//************
class SuperVac : DinahWeapon replaces PlasmaRifle
{
	default
	{
		+SPECTRAL
		//$Category RPWeapons
		Weapon.SelectionOrder 900;
		Weapon.SlotNumber 6;
		Weapon.Kickback 0;
		Weapon.AmmoType2 "VacAmmo";
		Weapon.AmmoGive2 0;
		//Weapon.AmmoUse2 8;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		Inventory.Icon "VACMP0";
		Inventory.PickupMessage "\c[gold]This SuperVac is strange and magical, as it converts what it devours into dust-based attack energy, deceptively powerful too. It is heavy though... \c- \cx[Slot 6]\c-";
		inventory.PickupSound "misc/w_pkup";
		Tag "SuperVac: Normal attack is a constant vaccum/sucking attack that usually absorbs/erases that which it kills into ammo for the alt-fire. Alt fire requires 8 units of ammo, launches a trio of bouncing dust tornadoes as a super attack. Weighs you down, slowing speed and lowering jump height, more so with more collected ammo.";
		Obituary "%o sucks.";
	}

	action void A_VacDustDevilIPSetup(actor BombShots)
	{
		if (BombShots && invoker.IPAttackCheck)
		{
			DDProjectile IPCompat; 
			IPCompat = DDProjectile(BombShots);
			if (IPCompat)
			{
				IPCompat.IPattack = true;
				IPCompat.BounceCount *= 1.5;
				IPCompat.Speed *= 0.5;
			}
		}
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("SuperVac",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("VacAmmo",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					Thing_Remove(0); 
				}
			}
			VACM P 1;
			Loop;
		Ready:
			VACM A 1
			{
				A_WeaponReady();
			}
			loop;
		Deselect:
			VACM A 1
			{
				A_Lower(12);
			}
			loop;
		Select: 
			VACM A 1
			{
				A_Raise(12);
			}
			loop;
		Full:
			VACM A 0 A_StartSound("VacEmpty",CHAN_WEAPON);
			VACM AB 2;
			Goto Ready;
		Fire:
			VACM A 0
			{
				if (CountInv("BackPack",AAPTR_PLAYER1) || CountInv("ItemSatchel",AAPTR_PLAYER1))
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 24) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				else
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 16) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		FireLoop:
			VACM B 0 
			{
				if (random(1,32) <= 29) { A_AlertMonsters(); }

				A_CheckIPState1();
				A_ConfirmIPAttack(151,0,1,64,false);
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.2;
				}
				A_StartSound("VacSuck",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.2;
					A_StartSound("VacSuck",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (invoker.IPAttackCheck && random(1,4) <= 1) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.2;
					A_StartSound("VacSuck",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (invoker.IPAttackCheck && random(1,16) <= 1) 
				{
					sndpitch = frandom(0.75,0.875);
					sndvol = 1.2;
					A_StartSound("VacSuck",9,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
			}
			VACM BA 2
			{
				string pufftype = "VacPuff";
				int MaxHealthTrue = SpawnHealth();
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int PlayerLevel = CountInv("PlayerLevel");
				int dmg = (random(3,6) * random(1,8));
				int range = 80 * frandom(1.0,1.05);
				double drainamt = 0;
				double drainlimit = 0;
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) dmg *= frandompick(1.0,1.0,1.125,1.125,1.125,1.125,1.125,1.25,1.25);
				if (invoker.IPAttackCheck)
				{
					pufftype = "VacPuffIP";
					dmg = ((random(3,6) * 2) * randompick(4,8));
					range *= frandompick(1.05,1.05,1.1,1.1,1.1,1.15,1.15);
					if (random(1,16) <= (8 + (PlayerLevel * 0.32)))
					{
						drainamt = frandompick(0.04,0.2,0.4);
						drainlimit = (MaxHealthTrue * (1.00 + (PlayerLevel * 0.004)));
						if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
						{
							drainamt *= 1.25;
							drainlimit *= 1.25;
						}
					}
				}
				else
				{
					pufftype = "VacPuff";
					dmg = (random(3,6) * random(1,8));
					if (random(1,16) <= (1 + (PlayerLevel * 0.04)))
					{
						drainamt = frandompick(0.01,0.05,0.1);
						drainlimit = (MaxHealthTrue * (0.25 + (PlayerLevel * 0.001)));
						if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
						{
							drainamt *= 1.25;
							drainlimit *= 1.25;
						}
					}
				}
				if (dydudebug_meleedmg) Console.Printf("dmg: %d", dmg);

				A_CustomPunch(dmg, true, 0, pufftype, range, drainamt, drainlimit, IPCostOnHit: true);
			}
			VACM B 0 
			{
				A_ReFire();
			}
			VACM B 0 
			{
				invoker.A_CheckIPModeOnUse();
			}
			goto Ready;
		AltFire:
			DBID A 0
			{
				if (CountInv("VacAmmo") < 8) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			VACM A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttackExtra(152,0,20,20,"VacAmmo",8);
			}
			VACM A 4
			{
				if (invoker.IPAttackCheck <= 0) // Do not play another one-liner if IP attack
				{
					let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
					int basechance = 192;
					if (CountInv("DecentHealth")) basechance *= 1.0625;
					if (CountInv("LowHealth")) basechance *= 1.125;
					if (CountInv("CriticalHealth")) basechance *= 1.1875;
					if (MiscItem)
					{
						if (MiscItem.WineDefTier == 1 || MiscItem.WineDefTier == -1) basechance *= 1.0625;
						if (MiscItem.WineDefTier == 2 || MiscItem.WineDefTier == -2) basechance *= 1.1875;
						if (MiscItem.WineDefTier == 3 || MiscItem.WineDefTier == -3) basechance *= 1.375;
						if (MiscItem.WineDefTier == 4 || MiscItem.WineDefTier == -4) basechance *= 1.875;
						if (MiscItem.WineDefTier == 5 || MiscItem.WineDefTier == -5) basechance *= 2.5;
					}
					if (random(1,256) <= basechance)
					{
						string voicenm;
						double voicevol = frandom(1.25,1.70);
						if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
						int randvoice = random(1,5);
						if (randvoice >= 1 && randvoice <= 3) 
						{
							voicenm = "dinah/howsthis";
							if (exex_dinahextravoices) 
							{
								A_SetTics(random(2,4)*4);
								Console.Printf("\c[gold]'How's this?!?!'\c-");
							}
						}
						if (randvoice == 4) 
						{
							if (exex_dinahextravoices) 
							{
								A_SetTics(random(4,6)*4);
								voicenm = "dinah/thiswillhurt";
							}
							Console.Printf("\c[gold]'This will hurt!!'\c-");
						}
						if (randvoice == 5) 
						{
							voicenm = "dinah/thiswillendit";
							if (exex_dinahextravoices) 
							{
								A_SetTics(random(5,7)*4);
								Console.Printf("\c[gold]'This will end it!!'\c-");
							}
						}
						if (randvoice == 6) 
						{
							voicenm = "dinah/yourmine";
							if (exex_dinahextravoices) 
							{
								A_SetTics(random(2,4)*4);
								Console.Printf("\c[gold]'You're Mine!!'\c-");
							}
						}
						if (exex_dinahextravoices)
						{
							A_StopSound(CHAN_VOICE);
							A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol); 
						}
					} 
				}
			}
			VACM B 4 
			{
				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("VacDed",CHAN_WEAPON,CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck)
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("VacDed",7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("VacDed",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				}
				int basealert = 21;
				if (invoker.IPAttackCheck) basealert += random(7,9);
				if (random(1,32) <= basealert) { A_AlertMonsters(); }
			}
			VACM C 4
			{
				actor BombShots;
				DDProjectile IPCompat;

				BombShots = A_FireProjectile("VacShot",15,0,0,0);
				if (invoker.IPAttackCheck) A_VacDustDevilIPSetup(BombShots);
				if (invoker.IPAttackCheck) 
				{
					BombShots = A_FireProjectile("VacShot",7.5,6,0,0);
					A_VacDustDevilIPSetup(BombShots);
				}
				BombShots = A_FireProjectile("VacShot",0,12,0,0);
				if (invoker.IPAttackCheck) A_VacDustDevilIPSetup(BombShots);
				if (invoker.IPAttackCheck) 
				{
					BombShots = A_FireProjectile("VacShot",-7.5,6,0,0);
					A_VacDustDevilIPSetup(BombShots);
				}
				BombShots = A_FireProjectile("VacShot",-15,0,0,0);
				if (invoker.IPAttackCheck) A_VacDustDevilIPSetup(BombShots);

				A_TakeInventory("VacAmmo",8);
				invoker.A_CheckIPModeOnUse();
			}
			VACM B 3;
			VACM A 3;
			goto Ready;
	}
}

class VacPuff : DDPuff
{
	default
	{
		Tag "SuperVac Attack";
		+NOBLOCKMAP
		+NOGRAVITY
		+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		VSpeed 1;
		DamageType "Suck";
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				int basechance = 12;
				if (IPAttack) basechance = random(4,6);
				if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
				if (random(1,basechance) <= 1) bFORCEPAIN = true; 
			}
			BASH DE 3 bright;
			Stop;
	}
} 

class VacPuffIP : VacPuff
{
	default
	{
		Tag "SuperVac Attack";
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				int basechance = random(4,6);
				if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
				if (random(1,basechance) <= 1) bFORCEPAIN = true; 
			}
			BASH DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
} 

class VacShot : DDProjectile
{
	default
	{
		Tag "Dust Devil";
		Radius 3;
		Height 8;
		Speed 20;
		Damage 20;
		Scale 1;
		health 1;
		Projectile;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Normal";
		seesound "Weapons/RocketFire";
		deathsound "croquet/ballhit";
	
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		+DONTREFLECT
		+NODAMAGETHRUST
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 5;
		+RIPPER
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright NoDelay
			{
				if (IPAttack) A_SetTics(2);

				int dmg, rad, fullrad;
				dmg = 41;
				rad = 64;
				fullrad = rad * 0.25;
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.0,1.125,1.125,1.25);
					rad = randompick(64,72,72,80,80,80,80,80,88,88,96);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			VSHT A 0
			{
				if (IPAttack)
				{
					health--;
					if (health <= 0)
					{
						health = randompick(1,1,1,1,2);
						actor BombShots;
						DDProjectile IPCompat;
						BombShots = A_SpawnProjectile("VacShotMini",0,0,0,CMF_TRACKOWNER);
						if (BombShots && IPAttack) 
						{
							IPCompat = DDProjectile(BombShots);
							if (IPCompat) 
							{
								IPCompat.IPattack = true;
								IPCompat.vel.z = frandompick(-1,-0.5,-0.5,0,0,0,0,0,0,0.5,0.5,1); // VSpeed = Vel.z
								IPCompat.health = randompick(3,4,4,5,5,5,6,6,7);
							}
						}
					}
				}
			}
			loop;
		Death:
			TNT1 A 4 
			{
				if (IPAttack) A_SetTics(3);

				int dmg, rad, fullrad;
				dmg = 82;
				rad = 128;
				fullrad = (rad * 0.25);
				if (IPAttack)
				{
					dmg *= frandompick(1.0,1.0,1.125,1.125,1.25,1.25);
					rad = randompick(128,144,144,160,16,16,16,16,176,176,192);
					fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				}
				A_Explode(dmg,rad,0,0,fullrad);
			}
			stop;
	}
}

class VacShotMini : VacShot
{
	default
	{
		Tag "Mini Dust Devil";
		Radius 2;
		Height 5;
		Speed 0;
		Damage 2;
		health 5;
		Projectile;
		DamageType "Dust";
		DontHurtShooter;
		RENDERSTYLE "Add";
		Scale 0.334;
		Alpha 0.75;
		seesound "";
		deathsound "";
		+RIPPER
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		//+NOEXTREMEDEATH

		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		+DONTREFLECT
		+NODAMAGETHRUST
		BounceType "Hexen";
		BounceFactor 1.03125;
		WallBounceFactor 1.03125;
		BounceCount 5;
	}
	
	States
	{
		Spawn:
			VSHT ABC 3 Bright 
			{
				if (IPAttack) A_SetTics(2);

				int dmg, rad, fullrad;
				dmg = random(20,21);
				rad = 32;
				fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				A_Explode(dmg,rad,0,0,fullrad);
			}
			VSHT A 0
			{
				health--;
				A_FadeOut(0.075,FTF_REMOVE);
				if (health <= 0) { return resolvestate("DeathNoExp"); }
				return resolvestate(null);
			}
			loop;
		Death:
			TNT1 A 4 
			{
				if (IPAttack) A_SetTics(3);

				int dmg, rad, fullrad;
				dmg = 41;
				rad = 64;
				fullrad = rad * frandompick(0.25,0.33,0.5,0.67,0.75);
				A_Explode(dmg,rad,0,0,fullrad);
			}
			stop;
		DeathNoExp:
			TNT1 A 1;
			stop;
	}
}

class VacAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 1;
		Inventory.MaxAmount 16; // 12
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 24;
		Inventory.Icon "VACMJ0";
		Inventory.PickupMessage "This bag is full. Ammo for SuperVac +1!";
		Inventory.PickupSound "pickup/vacammo";
	}
	
	States
	{
		Spawn:
			VACM Q -1;
			Loop;
	}
}

class VacAmmoBig : VacAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3;
		Inventory.MaxAmount 16; // 12
		Ammo.BackpackAmount 3;
		Ammo.BackpackMaxAmount 24;
		Inventory.Icon "VACMJ0";
		Inventory.PickupMessage "These bags are full. Ammo for SuperVac +3!";
		Inventory.PickupSound "pickup/vacammo";
	}
	
	States
	{
		Spawn:
			VACM R -1;
			Loop;
	}
}

//**************
//* Grimophone *
//**************
class Grimophone : DinahWeapon replaces BFG9000
{
	int musictype;
	int recordenergy;
	int recordenergybits;
	int recordalttimer;
	int dmg;
	int fulldist;
	int dist;
	int altflags;
	int altflags2;
	int modtimer;
	int levelcheck;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 800;
		Weapon.Ammotype1 "MusicAmmo";
		Weapon.Ammouse1 1;
		Weapon.Ammotype2 "";
		//Weapon.Ammouse2 0;
		Weapon.Ammogive1 20;
		Weapon.Ammogive2 0;
		Weapon.SlotNumber 7;
		inventory.PickupSound "misc/w_pkup";
		Inventory.Pickupmessage "\c[gold]The enigmatic Grimophone... this one's a newer model than the one I had in Fosna appearantly... Uugh! It's also very heavy now...\c- \cx[Slot 7]\c-";
		Tag "Grimophone: Normal attack is a dual-shot of records per unit of ammo. Alt-attack plays a cacophony of music that deals constant low-level damage within 1024 units, costing a unit of ammo roughly every ten seconds. Weighs you down, causing speed and jump height to lower while equipping it.";
		//SpawnID 31981
		+FLOATBOB
	}
	
	action void A_GrimophoneShootMain(bool useammo = 1)
	{
		actor BombShots;
		DDProjectile IPCompat;
		
		BombShots = A_FireProjectile("RecordShot",0,useammo);
		if (BombShots)
		{
			if (invoker.musictype == 15) { BombShots.stamina = 3; }
			else if (invoker.musictype == 16) { BombShots.stamina = 5; }
			if (BombShots && invoker.IPAttackCheck)
			{
				IPCompat = DDProjectile(BombShots);
				if (IPCompat)
				{
					IPCompat.IPattack = true;
					IPCompat.Speed *= frandompick(1.125,1.25,1.25,1.25,1.25,1.25,1.375);
					IPCompat.A_SetSize(5,5);
				}
			}
		}
	}

	action void A_GrimophoneAltReset()
	{
		invoker.recordalttimer = 0;
		invoker.modtimer = 90;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) MiscItem.GrimophoneDebuffTimer = 0;
	}
	
	States
	{
		Spawn:
			RPLY P 1;
			loop;
		Ready:
			RPLY A 1
			{
				A_GrimophoneAltReset();
				A_StopSound(65);
				A_WeaponReady();
			}
			loop;
		Select:
			RPLY A 1
			{
				A_GrimophoneAltReset();
				A_Raise(12);
			}
			Loop;
		Deselect:
			RPLY A 1
			{
				A_GrimophoneAltReset();
				A_Lower(12);
			}
			TNT1 A 0 A_StopSound(65);
			Loop;
		Fire:
			RPLY A 0 
			{
				invoker.musictype = random(1,16);
				if (invoker.musictype >= 1 && invoker.musictype <= 14) { A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 15) { A_StartSound("sa/rickroll",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 16) { A_StartSound("sa/vuvuzela",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
			}
		Fire2:
			NULL A 0 
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(161,0,1,64);

				A_GunFlash();
			}
			RPLY B 1 Bright 
			{
				A_GrimophoneShootMain(1);
			}
			RPLY B 1;
			RPLY B 1;
			RPLY C 1
			{
				if (invoker.IPAttackCheck) A_GrimophoneShootMain(0);
			}
			RPLY C 1;
			RPLY C 1;
			RPLY B 1 Bright 
			{
				A_GrimophoneShootMain(0);
			}
			RPLY B 1;
			RPLY B 1;
			RPLY C 1
			{
				if (invoker.IPAttackCheck) A_GrimophoneShootMain(0);
			}
			RPLY C 1;
			RPLY C 1;
			RPLY C 0 
			{
				invoker.A_CheckIPModeOnUse();
				A_Refire("Fire2");
			}
			RPLY A 0 A_StopSound(65);
			Goto Ready;
		AltFire:
			RPLY A 0 
			{
				invoker.musictype = random(1,16);
				if (invoker.musictype >= 1 && invoker.musictype <= 14) { A_StartSound("grimophone/jam",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 15) { A_StartSound("sa/rickroll",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 16) { A_StartSound("sa/vuvuzela",65,CHANF_LOOPING,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				
				invoker.modtimer = 90;
			}
		AltFire2:
			NULL A 0 
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(162,0,1,128);
				
				A_GunFlash();
				if (invoker.recordenergy <= 0)
				{
					if (CountInv("MusicAmmo") > 0)
					{
						A_TakeInventory("MusicAmmo",1);
						invoker.recordenergy += 42;
						invoker.recordenergybits = 2;
					}
					else
					{
						return resolvestate("Ready");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			RPLY BBCC 2
			{
				invoker.dmg = random(2,4);
				if (invoker.musictype == 15) invoker.dmg = random(6,12); // V:
				if (invoker.musictype == 16) invoker.dmg = random(10,20); // LUL :V
				invoker.dist = 1024;
				invoker.fulldist = (invoker.dist * frandompick(0.375,0.5,0.625));
				invoker.recordalttimer += 2;
				invoker.altflags = XF_NOTMISSILE|XF_NOSPLASH;
				invoker.altflags2 = RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					invoker.dmg *= (1.0 + (MiscItem.PlayerLevel * 0.01));
					invoker.dist *= (1.0 + (MiscItem.PlayerLevel * 0.01));
					invoker.fulldist *= (1.0 + (MiscItem.PlayerLevel * 0.01));
				}
				if (invoker.IPAttackCheck)
				{
					invoker.dmg *= frandompick(2.5,3.0,3.0,3.0,3.0,3.0,3.5);
					invoker.dist *= frandompick(3.0,4.5,4.5,4.5,4.5,4.5,6.0);
					invoker.fulldist *= frandompick(3.0,4.5,4.5,4.5,4.5,4.5,6.0);
				}
				if (dydudebug_grimophonealtfire) Console.Printf("recordalttimer %d", invoker.recordalttimer);
				
				if (invoker.recordalttimer > 0 && invoker.recordalttimer % invoker.modtimer == 0)
				{
					if (invoker.IPAttackCheck)
					{
						if (random(1,7) <= 4)
						{
							invoker.altflags = XF_HURTSOURCE|XF_NOTMISSILE|XF_NOSPLASH;
							invoker.altflags2 = RTF_AFFECTSOURCE|RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE;
						}
					}
					else
					{
						invoker.altflags = XF_HURTSOURCE|XF_NOTMISSILE|XF_NOSPLASH;
						invoker.altflags2 = RTF_AFFECTSOURCE|RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE;
					}
				}
				
				int recordinterval = 30;
				double recintervalIPmult = 1.25;
				if (invoker.recordalttimer > 2520)
				{
					recordinterval = 30;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 2430)
				{
					recordinterval = 32;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 2340)
				{
					recordinterval = 34;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 2250)
				{
					recordinterval = 36;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 2160)
				{
					recordinterval = 38;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 2070)
				{
					recordinterval = 40;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 1980)
				{
					recordinterval = 45;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 1890)
				{
					recordinterval = 50;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 1800)
				{
					recordinterval = 55;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 1620)
				{
					recordinterval = 60;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 1350)
				{
					recordinterval = 75;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 990)
				{
					recordinterval = 85;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 540)
				{
					recordinterval = 95;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				else
				if (invoker.recordalttimer > 90)
				{
					recordinterval = 105;
					if (invoker.IPAttackCheck) recordinterval *= recintervalIPmult;
					if (invoker.recordalttimer % recordinterval) invoker.modtimer -= 1;
				}
				if (invoker.IPAttackCheck)
				{
					if (invoker.modtimer < 15) invoker.modtimer = 15;
				}
				else
				{
					if (invoker.modtimer < 10) invoker.modtimer = 10;
				}

				A_Explode(invoker.dmg,invoker.dist,invoker.altflags,1,invoker.fulldist,0,0,"","Beats");
				A_RadiusThrust((invoker.dmg*-1),invoker.dist,invoker.altflags2,(invoker.fulldist*-1));
				int MusicCritChance = 1;
				if (invoker.IPAttackCheck) MusicCritChance = 5;
				if (random(1,64) == MusicCritChance)
				{
					A_Explode((invoker.dmg*5),invoker.dist,XF_NOTMISSILE|XF_NOSPLASH,1,invoker.fulldist,0,0,"","Beats");
					A_RadiusThrust((invoker.dmg*-5),invoker.dist,RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE,(invoker.fulldist*-1));
				}
				
				if (MiscItem) 
				{
					if (invoker.IPAttackCheck) MiscItem.GrimophoneDebuffTimer += 3;
																else MiscItem.GrimophoneDebuffTimer += 4;
				}
			}
			RPLY C 0 
			{
				if (random(1,32) <= 31) 
				{
					if (invoker.IPAttackCheck)
					{
						invoker.recordenergybits--;
						if (invoker.recordenergybits <= 0)
						{
							invoker.recordenergy--;
							invoker.recordenergybits = 2;
						}
					}
					else
					{
						invoker.recordenergy--;
						invoker.recordenergybits = 2;
					}
				}
				else
				{
					if (invoker.IPAttackCheck)
					{
						invoker.recordenergybits--;
						if (invoker.recordenergybits <= 0)
						{
							if (random(1,2) == 1) invoker.recordenergy -= 2;
															 else invoker.recordenergy--;
							invoker.recordenergybits = 2;
						}
					}
					else
					{
						if (random(1,2) == 1) invoker.recordenergy -= 2;
														 else invoker.recordenergy--;
						invoker.recordenergybits = 2;
					}
				}
				if (dydudebug_grimophonealtfire) Console.Printf("recordenergy %d", invoker.recordenergy);
				invoker.A_CheckIPModeOnUse();
				
				if (invoker.recordenergy <= 0)
				{
					if (CountInv("MusicAmmo") <= 0)
					{
						A_StopSound(65);
						return resolvestate("Ready");
					}
					else
					{
						A_Refire("AltFire2");
					}
					return resolvestate(null);
				}
				else
				{
					A_Refire("AltFire2");
				}
				return resolvestate(null);
			}
			RPLY A 0 A_StopSound(65);
			Goto Ready;
	}
}

class BadMusic : SingleDamageRipper
{
	default
	{
		Radius 16;
		Height 8;
		Speed 50;
		DamageFunction (random(2,5)); //
		Projectile;
		-SOLID
		+BLOODLESSIMPACT
		+DONTREFLECT
		+NOBLOCKMAP
		+RIPPER
		+RANDOMIZE
		+NOEXTREMEDEATH
		+STEPMISSILE
		-ACTIVATEIMPACT
		-ACTIVATEMCROSS
		-ACTIVATEPCROSS
		-CANPUSHWALLS
		-CANBLAST
		DamageType "Musak";
		RenderStyle "translucent";
    Alpha 0.5;
    Scale 0.06;
		Obituary "$OB_MPPLASMARIFLE";
	}
	
	States
	{
		Spawn:
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			Goto Death; // Loop
		Death:
			TNT1 A 1;
			Stop;
	}
}

class RecordShot : DDProjectile
{
	int seekstrength;
	int seekchance;
	int seekdist;
	default
	{
		Tag "RazorRecord";
		Radius 6;
		Height 6;
		Speed 30;
		DamageFunction (finaldamagedealt);
		DamageType "Beats";
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FORCERADIUSDMG
		//+NOEXTREMEDEATH
		RENDERSTYLE "Normal";

		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEONACTORS
		+NOBOUNCESOUND
		+EXPLODEONWATER
		+DONTBOUNCEONSHOOTABLES
		+SKYEXPLODE
		+CANBOUNCEWATER
		BounceType "Hexen";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		BounceCount 2;
		SeeSound "";
		DeathSound "axe/hit";
	}
	
	override void PostBeginPlay()
	{
		double sndpitch = 1.0;
		double sndvol = 1.0;
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
		}
		A_StartSound("axe/throw",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
		if (IPAttack) 
		{
			sndpitch = frandom(0.75,0.875);
			sndvol = 1.4;
			A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			if (random(1,4) <= 1)
			{
				sndpitch = frandom(0.75,0.875);
				sndvol = 1.4;
				A_StartSound("axe/throw",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
			}
		}

		if (target && target.GetClassName() == "DinahPlayer")
		{
			if (IPAttack) 
			{
				BounceCount = 5;
				BounceFactor = 1.03125;
				WallBounceFactor = 1.03125;
			}
			else 
			{
				BounceCount = 2;
				BounceFactor = 1.0125;
				WallBounceFactor = 1.0125;
			}
		}

		finaldamagedealt = (12*random(1,8));
		if (Stamina == 3) finaldamagedealt *= 3;
		if (Stamina >= 5) finaldamagedealt *= 5;
		if (IPAttack)
		{
			finaldamagedealt = (48*random(1,2));
			if (Stamina == 3) finaldamagedealt *= 3.09;
			if (Stamina >= 5) finaldamagedealt *= 5.15;
		}
		if (IPAttack && random(1,8) <= 1) finaldamagedealt *= frandompick(1.125,1.25,1.25,1.25,1.25,1.375);
		if (dydudebug_rangedmg) Console.Printf("finaldamagedealt: %d", finaldamagedealt);
		super.PostBeginPlay();
	}
	
	void A_SetPainForcedPain(int basechance = 16, double playerlvlfactor = 0.16)
	{
		if (IPAttack) playerlvlfactor *= 1.5;
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (MiscItem.PlayerLevel * playerlvlfactor);
			if (IPAttack) user_randompain *= 2;
		}
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}

	States
	{
		Spawn:
			RBUL A 0 NoDelay
			{
				seekstrength = 18;
				seekchance = 50;
				seekdist = 10;
				if (target && target.GetClassName() == "DinahPlayer")
				{
					let MiscItem = PlayerStatItem(target.player.mo.FindInventory("PlayerStatItem"));
					if (MiscItem) 
					{
						seekstrength += (MiscItem.PlayerLevel * 0.36);
						seekchance += (MiscItem.PlayerLevel * 0.75);
						seekdist += (MiscItem.PlayerLevel * 0.10);
					}
					if (IPAttack)
					{
						seekstrength *= 2.5;
						seekchance *= 2.5;
						seekdist *= 2.5;
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(1,4) == 1) { A_ScaleVelocity(1.0025); }
			}
			RBUL ABAB 1
			{
				if (random(1,2) == 1) { A_ScaleVelocity(1.0375); }
			}
			RBUL ABAB 1
			{
				if (random(1,4) <= 3) 
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.00125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
			RBUL ABAB 1
			{
				if (random(7,8) <= 7)
				{
					if (IPAttack)
					{
						A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
						A_ScaleVelocity(1.000125);
					}
					else
					{
						A_ScaleVelocity(1.005); 
					}
				}
			}
		Spawn2:
			RBUL AB 1 
			{
				A_SeekerMissile(seekstrength,seekstrength,SMF_LOOK|SMF_PRECISE,seekchance);
				A_ScaleVelocity(1.000125);
			}
			Loop;
		Death:
			BASH A 0
			{
				A_SetPainForcedPain(16,0.16);
			}
			BASH ABC 3 Bright;
			BASH DE 2 bright;
			Stop;
	}
}

class MusicAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 3; // 6
		Inventory.MaxAmount 66; // 50
		Ammo.BackpackAmount 3; // 6
		Ammo.BackpackMaxAmount 99;
		Inventory.Icon "RAMOI0";
		Inventory.PickupMessage "A musical record";
		Inventory.PickupSound "pickup/recordammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			RAMO A -1;
			Loop;
	}
}

class MusicAmmoBig : MusicAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 9; // 6
		Inventory.MaxAmount 66; // 50
		Ammo.BackpackAmount 9; // 6
		Ammo.BackpackMaxAmount 99;
		Inventory.Icon "RAMOI0";
		Inventory.PickupMessage "A few musical records";
		Inventory.PickupSound "pickup/recordammo";
		+FLOATBOB
	}
	
	States
	{
		Spawn:
			RAMO B -1;
			Loop;
	}
}

// MORPHED WEAPONS
class RatNose : DDBeak
{
	default
	{
		Weapon.SelectionOrder 10000;
		+WEAPON.DONTBOB
		+WEAPON.MELEEWEAPON
		Weapon.YAdjust 15;
		Obituary "$OB_MPRAT";
		AttackSound "Rat/Hit";
	}
	
	States
	{
		Ready:
			RATW AAAAAAAA 1 A_WeaponReady();
			RATW A 0 A_Jump(16,1);
			Loop;
			RATW B 1 A_StartSound("Rat/Active", CHAN_WEAPON);
			RATW BBB 1;
			Loop;
		Deselect:
			RATW A 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			RATW A 1 
			{
				A_Raise(12);
			}
			Loop;
		Fire:
			RATW A 0 A_StartSound("Rat/Attack", CHAN_WEAPON);
			RATW A 8
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					A_CustomPunch((1*10),false);
				}
				else
				{
					A_CustomPunch(1,false);
				}
			}
			RATW B 8;
			Goto Ready;
	}
}

class RavenWeapon : DDBeak
{
	default
	{
		Weapon.SelectionOrder 10000;
		+Weapon.DontBob
		+Weapon.MeleeWeapon
		+Weapon.NoAlert
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady();
			Loop;
		Deselect:
			TNT1 A 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			TNT1 A 1 A_BeakRaise();
			Loop;
		Fire:
			TNT1 A 18 A_Punch();
			Goto Ready;
	}
}

//********************
//* Roman CandleWhip *
//********************
class WhipShieldPart : ShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 6; // out of 32
		Height 12; // out of 32
		Scale 0.375;
	}
	states
	{
		Spawn:
			HEXA C 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
			}
			stop;
	}
}

class WhipShieldPartNoReflect : ShieldPartNoReflect
{
	default
	{
		Radius 6; // out of 32
		Height 12; // out of 32
		Scale 0.375;
	}
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
			}
			stop;
	}
}

class CandleWhip : DinahWeapon
{
	int range, rangebase;
	int dmg;
	int shotcounter, shotcountermax;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 200;
		Weapon.SlotNumber 8;
		Weapon.Kickback 0;
		Weapon.AmmoType2 "CandleAmmo";
		Weapon.AmmoGive2 20;
		Weapon.AmmoUse2 0;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "RCAIA0";
		Inventory.PickupMessage "\c[gold]Is... is this a Roman Candle? It seems to have a function as a whip too... Niiiiiice... :D\c- \cx[Slot 8]\c-";
		Inventory.PickupSound "misc/w_pkup";
		Tag "Roman Candlewhip";
		HitObituary "%k gave %o some major whiplash.";
	}
	
	action void A_CandleWhipCrack(int type = 0, double dist = 128.0)
	{
		//A_BatGuardDashOff();
		string vispart = "WhipShieldPartNoReflect";
		if (random(1,64) <= 1) vispart = "WhipShieldPart";

		double yoffset = frandompick(-0.1625,0,0.1625);

		double distx, disty, distz;
		double heightmulti = 0.5;
		double heightmultivari = 0.125;
		if (type == 1) heightmultivari = 0.1875;
		double yseperation = -2.6;
		double sa = sin(angle);
		double ca = cos(angle);
		if (dydudebug_cricketbatguard) Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		if (dydudebug_cricketbatguard) Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = dist;

		int m2 = m;
		int m3 = (m * frandom(0.95,1.05));

		distx = m3;
		disty = 0.0;
		distz = (height * heightmulti) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		distx = m3;
		disty = 0.0;
		distz = (height * (heightmulti + heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		distx = m3;
		disty = 0.0;
		distz = (height * (heightmulti - heightmultivari)) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

		if ((random (1,32) <= 31) || (type == 1 && (random (1,64) <= 63)))
		{
			m = (m2 * 0.833);
			m3 = (m * frandom(0.95,1.05));

			distx = m3;
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		if ((random (1,32) <= 31) || (type == 1 && (random (1,64) <= 63)))
		{
			m = (m2 * 0.667);
			m3 = (m * frandom(0.95,1.05));

			distx = m3;
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		if ((random (1,16) <= 12) || (type == 1 && (random (1,16) <= 15)))
		{
			m = (m2 * 0.500);
			m3 = (m * frandom(0.95,1.05));

			distx = m3;
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

			m = (m2 * 0.334);
			m3 = (m * frandom(0.95,1.05));

			distx = m3;
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

			m = (m2 * 0.1667);
			m3 = (m * frandom(0.95,1.05));

			distx = m3;
			disty = 0.0;
			distz = (height * heightmulti) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti + heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			distx = m3;
			disty = 0.0;
			distz = (height * (heightmulti - heightmultivari)) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}
	}
	
	action void A_CandleWhipHit(string pufftype = "WhipPuff")
	{
		if (invoker.IPAttackCheck) pufftype = "WhipPuffIP";
		A_CustomPunch((invoker.dmg), true, CPF_NOTURN, pufftype, invoker.range, IPCostOnHit: true);
		//A_RailAttack((invoker.dmg),0,0,"","",RGF_SILENT,0,pufftype,0,0,invoker.range,0,0,0,"",0);
		invoker.A_CheckIPModeOnUse();
	}
	
	action void A_CandleSetMaxShots()
	{
		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		let globalvars = DDGlobalVariables.Get();
		
		if (MiscItem)
		{
			if (MiscItem.PlayerLevel >= 176 && MiscItem.PlayerLevel <= 200) invoker.shotcountermax = randompick(4,4,4,4,4,4,5,5,5,5);
			if (MiscItem.PlayerLevel >= 151 && MiscItem.PlayerLevel <= 175) invoker.shotcountermax = randompick(3,3,4,4,4,4,4,4,5,5);
			if (MiscItem.PlayerLevel >= 126 && MiscItem.PlayerLevel <= 150) invoker.shotcountermax = randompick(3,3,3,3,4,4,4,4,4,4);
			if (MiscItem.PlayerLevel >= 101 && MiscItem.PlayerLevel <= 125) invoker.shotcountermax = randompick(3,3,3,3,3,3,4,4,4,4);
			if (MiscItem.PlayerLevel >= 76 && MiscItem.PlayerLevel <= 100) invoker.shotcountermax = randompick(2,2,3,3,3,3,3,3,4,4);
			if (MiscItem.PlayerLevel >= 51 && MiscItem.PlayerLevel <= 75) invoker.shotcountermax = randompick(2,2,2,2,3,3,3,3,3,3);
			if (MiscItem.PlayerLevel >= 26 && MiscItem.PlayerLevel <= 50) invoker.shotcountermax = randompick(2,2,2,2,2,2,3,3,3,3);
			if (MiscItem.PlayerLevel >= 0 && MiscItem.PlayerLevel <= 25) invoker.shotcountermax = randompick(1,1,2,2,2,2,2,2,3,3);
		}
		else
		{
			invoker.shotcountermax = randompick(1,1,2,2,2,2,2,2,3,3);
		}
	}

	States
	{
		Spawn:
			RCAI AAABBBCCCDDDEEEFFFGGGHHH 2 bright
			{
				if (CountInv("CandleWhip",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("CandleAmmo",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					Thing_Remove(0); 
				}
			}
			loop;
		Ready:
			RCAN A 1
			{
				if (invoker.shotcountermax <= 0) { A_CandleSetMaxShots(); }
				A_WeaponReady();
			}
			loop;
		Deselect:
			RCAN Z 1 
			{
				if (invoker.shotcountermax <= 0) { A_CandleSetMaxShots(); }
				A_Lower(12);
			}
			loop;
		Select: 
			RCAN Z 1 
			{
				if (invoker.shotcountermax <= 0) { A_CandleSetMaxShots(); }
				A_Raise(12);
			}
			loop;
		Fire:
			RCAN Z 0 bright
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				A_CheckIPState1();
				A_ConfirmIPAttack(171,0,5,8,false);

				invoker.rangebase = randompick(112,120,120,128,128,128,128,128,136,136,144);
				invoker.dmg = (random(8,12) * randompick(1,2,2,2,3,3,3,3,3,4,4,4,5));
				if (MiscItem)
				{
					if (MiscItem.PlayerLevel >= 0 && MiscItem.PlayerLevel <= 25) invoker.dmg = (random(8,12) * randompick(1,2,2,2,3,3,3,3,3,4,4,4,5));
					if (MiscItem.PlayerLevel >= 26 && MiscItem.PlayerLevel <= 50) invoker.dmg = (random(8,12) * randompick(2,2,2,3,3,3,3,3,4,4,4,5,5));
					if (MiscItem.PlayerLevel >= 51 && MiscItem.PlayerLevel <= 75) invoker.dmg = (random(9,13) * randompick(2,2,3,3,3,3,3,4,4,4,5,5,5));
					if (MiscItem.PlayerLevel >= 76 && MiscItem.PlayerLevel <= 100) invoker.dmg = (random(9,13) * randompick(2,3,3,3,3,3,4,4,4,5,5,5,6));
					if (MiscItem.PlayerLevel >= 101 && MiscItem.PlayerLevel <= 125) invoker.dmg = (random(10,14) * randompick(3,3,3,3,3,4,4,4,5,5,5,6,6));
					if (MiscItem.PlayerLevel >= 126 && MiscItem.PlayerLevel <= 150) invoker.dmg = (random(11,15) * randompick(3,3,3,3,4,4,4,5,5,5,6,6,6));
					if (MiscItem.PlayerLevel >= 151 && MiscItem.PlayerLevel <= 175) invoker.dmg = (random(11,15) * randompick(3,3,3,4,4,4,5,5,5,6,6,6,7));
					if (MiscItem.PlayerLevel >= 176 && MiscItem.PlayerLevel <= 200) invoker.dmg = (random(12,16) * randompick(3,3,4,4,4,5,5,5,6,6,6,7,7));
				}
				if (dydudebug_meleedmg) Console.Printf("Whip [frame Z0]: %d dmg", invoker.dmg);
				if (invoker.IPAttackCheck) 
				{
					invoker.rangebase *= 1.5;
					invoker.dmg = (random(7,13) * randompick(2,2,3,3,3,3,3,4,4,4,5,5,5));
					if (MiscItem)
					{
						if (MiscItem.PlayerLevel >= 0 && MiscItem.PlayerLevel <= 25) invoker.dmg = (random(7,13) * randompick(2,2,3,3,3,3,3,4,4,4,5,5,5));
						if (MiscItem.PlayerLevel >= 26 && MiscItem.PlayerLevel <= 50) invoker.dmg = (random(7,13) * randompick(2,2,3,3,3,3,3,4,4,4,5,5,5));
						if (MiscItem.PlayerLevel >= 51 && MiscItem.PlayerLevel <= 75) invoker.dmg = (random(8,12) * randompick(2,2,3,3,3,3,3,4,4,4,5,5,5));
						if (MiscItem.PlayerLevel >= 76 && MiscItem.PlayerLevel <= 100) invoker.dmg = (random(8,12) * randompick(2,3,3,3,3,3,4,4,4,5,5,5,6));
						if (MiscItem.PlayerLevel >= 101 && MiscItem.PlayerLevel <= 125) invoker.dmg = (random(9,13) * randompick(3,3,3,3,3,4,4,4,5,5,5,6,6));
						if (MiscItem.PlayerLevel >= 126 && MiscItem.PlayerLevel <= 150) invoker.dmg = (random(12,14) * randompick(3,3,3,3,4,4,4,5,5,5,6,6,6));
						if (MiscItem.PlayerLevel >= 151 && MiscItem.PlayerLevel <= 175) invoker.dmg = (random(12,14) * randompick(3,3,3,4,4,4,5,5,5,6,6,6,7));
						if (MiscItem.PlayerLevel >= 176 && MiscItem.PlayerLevel <= 200) invoker.dmg = (random(13,15) * randompick(3,3,4,4,4,5,5,5,6,6,6,7,7));
					}
					invoker.dmg *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.75);
					if (dydudebug_meleedmg) Console.Printf("Whip [frame Z0 (IP Attack)]: %d dmg", invoker.dmg);
				}
				if (!invoker.IPAttackCheck)
				{
					if (MiscItem)
					{
						if (MiscItem.PlayerLevel >= 0 && MiscItem.PlayerLevel <= 50) invoker.dmg *= frandompick(0.15,0.2,0.2,0.2,0.2,0.25);
						if (MiscItem.PlayerLevel >= 51 && MiscItem.PlayerLevel <= 100) invoker.dmg *= frandompick(0.2,0.25,0.25,0.25,0.334);
						if (MiscItem.PlayerLevel >= 101 && MiscItem.PlayerLevel <= 150) invoker.dmg *= frandompick(0.25,0.334,0.334,0.334,0.5);
						if (MiscItem.PlayerLevel >= 151 && MiscItem.PlayerLevel <= 200) invoker.dmg *= frandompick(0.334,0.5,0.5,0.5,0.667);
					}
					else
					{
						invoker.dmg *= frandompick(0.15,0.2,0.2,0.2,0.2,0.25);
					}
					if (dydudebug_meleedmg) Console.Printf("Whip [frame Z0 (not IP)]: %d dmg", invoker.dmg);
				}

				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					invoker.dmg *= 10;
					invoker.range *= frandompick(1.0,1.0,1.0,1.125,1.125,1.25);
					if (dydudebug_meleedmg) Console.Printf("Whip [frame Z0 (berserk)]: %d dmg", invoker.dmg);
				}
				if (invoker.dmg < 1) invoker.dmg = 1;
				if (dydudebug_meleedmg) Console.Printf("Whip [frame Z0]: %d dmg, %d range", invoker.dmg, invoker.range);
			}
			RCAN Z 3 bright
			{
				int shieldpartchance = 5;
				if (invoker.IPAttackCheck) shieldpartchance = randompick(7,7,8,8,8);
				invoker.range = (invoker.rangebase * 0.59);
				A_SetAngle(angle+75);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle-75);
			}
			RCAN F 2 bright 
			{
				int shieldpartchance = 5;
				if (invoker.IPAttackCheck) shieldpartchance = randompick(7,7,8,8,8);
				invoker.range = (invoker.rangebase * 0.73);
				A_SetAngle(angle+56.25);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(1);
					A_SetTics(1);
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle-56.25);

				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("CandleCrack",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("CandleCrack",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					
					if (random(1,4) <= 1)
					{
						sndpitch = frandom(0.625,0.75);
						sndvol = 1.4;
						A_StartSound("CandleCrack",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
						
						if (random(1,4) <= 1)
						{
							sndpitch = frandom(0.625,0.75);
							sndvol = 1.4;
							A_StartSound("CandleCrack",9,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
						}
					}
				}

				if (CountInv("PlayingStrife",AAPTR_PLAYER1))
				{
					if (random(1,8) >= 7) { A_AlertMonsters(512); }
				}
				else
				{
					if (random(1,8) >= 7) { A_AlertMonsters(); }
				}
			}
			RCAN G 2 bright
			{
				int shieldpartchance = 9;
				if (invoker.IPAttackCheck) shieldpartchance = (randompick(7,7,8,8,8) * 1.8);
				invoker.range = (invoker.rangebase * 0.85);
				A_SetAngle(angle+37.5);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(1);
					if (random(1,16) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
					if (random(1,16) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle-37.5);
			}
			RCAN H 2 bright
			{
				invoker.range = (invoker.rangebase * 0.94);
				A_SetAngle(angle+18.75);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(1);
					A_CandleWhipCrack(1,invoker.range);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
					A_CandleWhipCrack(0,invoker.range);
				}
				A_SetAngle(angle-18.75);
			}
			RCAN H 2 bright
			{
				invoker.range = (invoker.rangebase * 1.0);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD"))
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(1);
					A_CandleWhipCrack(1,invoker.range);
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(1);
					A_CandleWhipCrack(0,invoker.range);
				}
			}
			RCAN I 3 bright
			{
				int shieldpartchance = 25;
				if (invoker.IPAttackCheck) shieldpartchance = randompick(33,33,34,34,34,35,35);
				invoker.range = (invoker.rangebase * 0.94);
				A_SetAngle(angle-18.75);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
					if (random(1,32) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					if (random(1,32) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle+18.75);
			}
			RCAN J 3 bright
			{
				int shieldpartchance = 9;
				if (invoker.IPAttackCheck) shieldpartchance = (randompick(7,7,8,8,8) * 1.8);
				invoker.range = (invoker.rangebase * 0.85);
				A_SetAngle(angle-37.5);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
					if (random(1,16) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					if (random(1,16) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle+37.5);
			}
			RCAN K 3 bright
			{
				int shieldpartchance = 5;
				if (invoker.IPAttackCheck) shieldpartchance = randompick(7,7,8,8,8);
				invoker.range = (invoker.rangebase * 0.73);
				A_SetAngle(angle-56.25);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					if (random(1,8) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle+56.25);
			}
			RCAN L 3 bright
			{
				int shieldpartchance = 1;
				if (invoker.IPAttackCheck) shieldpartchance = randompick(2,2,3,3,3,4);
				invoker.range = (invoker.rangebase * 0.59);
				A_SetAngle(angle-75);
				A_CandleWhipHit();
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(random(0,1));
																else A_SetTics(random(1,2));
					if (random(1,4) <= shieldpartchance) { A_CandleWhipCrack(1,invoker.range); }
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(random(1,2));
					if (random(1,4) <= shieldpartchance) { A_CandleWhipCrack(0,invoker.range); }
				}
				A_SetAngle(angle+75);
			}
			RCAN A 1
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					if (invoker.IPAttackCheck) A_SetTics(0);
																else A_SetTics(randompick(0,0,0,1)); 
				}
				else
				{
					if (invoker.IPAttackCheck) A_SetTics(randompick(0,0,0,1)); 
				}
			}
			goto Ready;
		AltFire:
			RCAN A 0
			{
				if (!CountInv("CandleAmmo")) { return resolvestate("Fire"); }
				return resolvestate(null);
			}
			RCAN A 0 
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(172,0,1,16);

				double sndpitch = 1.0;
				double sndvol = 1.0;
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
				}
				A_StartSound("CandleShot",CHAN_WEAPON,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
				if (invoker.IPAttackCheck) 
				{
					sndpitch = frandom(0.625,0.75);
					sndvol = 1.4;
					A_StartSound("CandleShot",CHAN_7,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);

					if (random(1,4) <= 1)
					{
						sndpitch = frandom(0.625,0.75);
						sndvol = 1.4;
						A_StartSound("CandleShot",8,CHANF_DEFAULT,sndvol,ATTN_NORM,sndpitch);
					}
				}
				A_AlertMonsters();
			}
			RCAN B 3 Bright
			{
				string shottype = "CandlePuff";
				int dmg = 5 * random(1,3);
				double horizspread = frandom(4,9);
				double vertspread = frandom(3,7);
				int numshots = 6;
				if (invoker.IPAttackCheck) 
				{
					shottype = "CandlePuffIP";
					if (random(1,64) <= 5)
					{
						numshots = 20 + randompick(0,1,1,2,2,3);
						horizspread = frandom(8.4,14.0);
						vertspread = frandom(5.68,8.52);
						dmg *= frandompick(1.5,1.75,1.75,1.75,1.75,1.75,2.0);
					}
					else
					{
						numshots = 6 + randompick(0,0,0,0,1);
						horizspread = frandom(4.2,7.0);
						vertspread = frandompick(0.0,0.0,0.0,frandom(0.0,0.8));
						dmg *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.75);
					}
				}
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(2,3,3,3,3)); }
				A_FireBullets(0,0,0,(5*random(1,3)),shottype);
				if (invoker.IPAttackCheck)
				{
					A_FireBullets(horizspread,vertspread,numshots,(5*random(1,3)),shottype);
				}
				
				invoker.shotcounter++;
				if (invoker.shotcounter >= invoker.shotcountermax)
				{
					A_TakeInventory("CandleAmmo",1);
					A_CandleSetMaxShots();
					invoker.shotcounter = 0;
				}
				invoker.A_CheckIPModeOnUse();
			}
			RCAN C 3 Bright
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(2,3,3,3,3)); }
			}
			RCAN D 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(3,4,4,4)); }
			}
			RCAN E 4 
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(randompick(3,4,4,4)); }
				A_Refire();
			}
			goto Ready;
	}
}

class WhipPuff : DDPuff
{
	default
	{
		Tag "Roman CandleWhiplash";
		//+ALWAYSPUFF
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 0.25;
		DamageType "Fire";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 4;
		if (IPAttack) basechance = randompick(2,2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CHOP ABC 4 Bright;
			Stop;
	}
}  

class WhipPuffIP : WhipPuff
{
	default
	{
		Tag "Roman CandleWhiplash";
		//+ALWAYSPUFF
		+NOBLOCKMAP
		+NOGRAVITY
		//+NOEXTREMEDEATH
		+PUFFONACTORS
		+PUFFGETSOWNER
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "MalletHit";
		AttackSound "MalletWall";
		VSpeed 0.25;
		DamageType "Fire";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = randompick(2,2,3);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CHOP ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			Stop;
	}
}  

class CandlePuff : DDPuff
{
	default
	{
		Tag "Candle Shot";
		+NOBLOCKMAP
		+NOGRAVITY
		+NOEXTREMEDEATH
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		Species "Players";
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 0.5;
		SeeSound "croquet/ballhit";
		AttackSound "croquet/ballhit";
		VSpeed 0.25;
		DamageType "Fire";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = 8;
		if (IPAttack) basechance = randompick(4,5,6);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
			CANX ABC 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CANX ABC 4 Bright
			{
				A_SetTics(randompick(2,2,3));
			}
			CANX DE 3 bright
			{
				A_SetTics(randompick(1,2,2));
			}
			Stop;
	}
}  

class CandlePuffIP : CandlePuff
{
	default
	{
		Tag "Candle Shot";
		+NOBLOCKMAP
		+NOGRAVITY
		+NOEXTREMEDEATH
		+PUFFONACTORS
		+PUFFGETSOWNER
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 0.5;
		SeeSound "croquet/ballhit";
		AttackSound "croquet/ballhit";
		VSpeed 0.25;
		DamageType "Fire";
	}
	
	void A_SetPainForcedPain()
	{
		int basechance = randompick(3,4,5);
		if (dydudebug_attackstuff) Console.Printf("ForcePain chance: %d", basechance);
		if (random(1,basechance) <= 1) bFORCEPAIN = true; 
	}
	
	States
	{
		Spawn:
			CANX ABC 0 NoDelay
			{
				A_SetPainForcedPain();
			}
			CANX ABC 4 Bright;
			CANX DE 3 bright;
			Stop;
	}
}  

class CandleAmmo : Ammo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 10;
		Inventory.MaxAmount 75;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 100;
		Inventory.Icon "RCAIA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "pickup/candleammo";
		+FLOATBOB
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (Ammo.TryPickup(toucher))
		{
			if (!toucher.CountInv("CandleWhip")) 
			{
				toucher.A_GiveInventory("CandleWhip", 1);
				PickupSound = "misc/w_pkup";
				Console.Printf("\c[gold]Is... is this a Roman Candle? It seems to have a function as a whip too... Niiiiiice... :D\c- \cx[Slot 8]\c-");
			}
			else
			{
				Console.Printf("\c[gold]Another Roman Candle.");
			}
			return true;
		}
		return false;
	}

	States
	{
		Spawn:
			RCAI AAABBBCCCDDDEEEFFFGGGHHH 2;
			Loop;
	}
}

class CandleAmmoBig : CandleAmmo
{
	default
	{
		//$Category RPAmmo
		Inventory.Amount 30;
		Inventory.MaxAmount 75;
		Ammo.BackpackAmount 30;
		Ammo.BackpackMaxAmount 100;
		Inventory.Icon "RCALA0";
		Inventory.PickupMessage "";
		Inventory.PickupSound "pickup/candleammo";
		+FLOATBOB
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (Ammo.TryPickup(toucher))
		{
			if (!toucher.CountInv("CandleWhip")) 
			{
				toucher.A_GiveInventory("CandleWhip", 1);
				PickupSound = "misc/w_pkup";
				Console.Printf("\c[gold]Are... are these a batch of Roman Candles? They seem to have a function as whips too... Niiiiiice... :D\c- \cx[Slot 8]\c-");
			}
			else
			{
				Console.Printf("\c[gold]A set of more Roman Candles...");
			}
			return true;
		}
		return false;
	}

	States
	{
		Spawn:
			RCAL AAABBBCCCDDDEEEFFFGGGHHH 2;
			Loop;
	}
}